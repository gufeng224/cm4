
out/m7221.elf:     file format elf32-littlearm


Disassembly of section .text:

00000250 <Reset_Handler>:
 *    __data_start__: VMA of start of the section to copy to
 *    __data_end__: VMA of end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr sp, =__SRAM_segment_end__
     250:	f8df d018 	ldr.w	sp, [pc, #24]	; 26c <Reset_Handler+0x1c>
	sub sp, sp, #4
     254:	b081      	sub	sp, #4
 *    __bss_start__: start of the BSS section.
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
	ldr	r1, =__bss_start__
     256:	4906      	ldr	r1, [pc, #24]	; (270 <Reset_Handler+0x20>)
	ldr	r2, =__bss_end__
     258:	4a06      	ldr	r2, [pc, #24]	; (274 <Reset_Handler+0x24>)

	movs	r0, 0
     25a:	2000      	movs	r0, #0
.L_loop3:
	cmp	r1, r2
     25c:	4291      	cmp	r1, r2
	itt	lt
     25e:	bfbc      	itt	lt
	strlt	r0, [r1], #4
     260:	f841 0b04 	strlt.w	r0, [r1], #4
	blt	.L_loop3
     264:	e7fa      	blt.n	25c <Reset_Handler+0xc>

#ifndef __NO_SYSTEM_INIT
/*	bl	SystemInit */
#endif

	bl	main
     266:	f007 fb35 	bl	78d4 <main>
     26a:	0000      	.short	0x0000
	ldr sp, =__SRAM_segment_end__
     26c:	0003ad00 	.word	0x0003ad00
	ldr	r1, =__bss_start__
     270:	0000ca80 	.word	0x0000ca80
	ldr	r2, =__bss_end__
     274:	000318e4 	.word	0x000318e4

00000278 <BusFault_Handler>:
	.align	1
	.thumb_func
	.weak	Default_Handler
	.type	Default_Handler, %function
Default_Handler:
	b	.
     278:	e7fe      	b.n	278 <BusFault_Handler>
     27a:	bf00      	nop

0000027c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
     27c:	b538      	push	{r3, r4, r5, lr}
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
     27e:	2020      	movs	r0, #32
     280:	f002 f96a 	bl	2558 <pvPortMalloc>

		if( pxEventBits != NULL )
     284:	4604      	mov	r4, r0
     286:	b128      	cbz	r0, 294 <xEventGroupCreate+0x18>
		{
			pxEventBits->uxEventBits = 0;
     288:	2500      	movs	r5, #0
     28a:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
     28e:	f000 f8fb 	bl	488 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
     292:	7725      	strb	r5, [r4, #28]
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
	}
     294:	4620      	mov	r0, r4
     296:	bd38      	pop	{r3, r4, r5, pc}

00000298 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
     298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     29c:	f8dd 9020 	ldr.w	r9, [sp, #32]
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
     2a0:	b1a8      	cbz	r0, 2ce <xEventGroupWaitBits+0x36>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
     2a2:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
     2a6:	d109      	bne.n	2bc <xEventGroupWaitBits+0x24>
	configASSERT( uxBitsToWaitFor != 0 );
     2a8:	b9d1      	cbnz	r1, 2e0 <xEventGroupWaitBits+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
     2aa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     2ae:	f383 8811 	msr	BASEPRI, r3
     2b2:	f3bf 8f6f 	isb	sy
     2b6:	f3bf 8f4f 	dsb	sy
     2ba:	e7fe      	b.n	2ba <xEventGroupWaitBits+0x22>
     2bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     2c0:	f383 8811 	msr	BASEPRI, r3
     2c4:	f3bf 8f6f 	isb	sy
     2c8:	f3bf 8f4f 	dsb	sy
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
     2cc:	e7fe      	b.n	2cc <xEventGroupWaitBits+0x34>
     2ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     2d2:	f383 8811 	msr	BASEPRI, r3
     2d6:	f3bf 8f6f 	isb	sy
     2da:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
     2de:	e7fe      	b.n	2de <xEventGroupWaitBits+0x46>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     2e0:	4606      	mov	r6, r0
     2e2:	4698      	mov	r8, r3
     2e4:	4617      	mov	r7, r2
     2e6:	460c      	mov	r4, r1
     2e8:	f001 fd5e 	bl	1da8 <xTaskGetSchedulerState>
     2ec:	b910      	cbnz	r0, 2f4 <xEventGroupWaitBits+0x5c>
     2ee:	f1b9 0f00 	cmp.w	r9, #0
     2f2:	d131      	bne.n	358 <xEventGroupWaitBits+0xc0>
	}
	#endif

	vTaskSuspendAll();
     2f4:	f001 f8b6 	bl	1464 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
     2f8:	6835      	ldr	r5, [r6, #0]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
     2fa:	f1b8 0f00 	cmp.w	r8, #0
     2fe:	d134      	bne.n	36a <xEventGroupWaitBits+0xd2>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     300:	422c      	tst	r4, r5
     302:	d135      	bne.n	370 <xEventGroupWaitBits+0xd8>
		else if( xTicksToWait == ( TickType_t ) 0 )
     304:	f1b9 0f00 	cmp.w	r9, #0
     308:	d039      	beq.n	37e <xEventGroupWaitBits+0xe6>
			if( xClearOnExit != pdFALSE )
     30a:	2f00      	cmp	r7, #0
     30c:	bf0b      	itete	eq
     30e:	f04f 6180 	moveq.w	r1, #67108864	; 0x4000000
     312:	f04f 61a0 	movne.w	r1, #83886080	; 0x5000000
     316:	2300      	moveq	r3, #0
     318:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
			if( xWaitForAllBits != pdFALSE )
     31c:	f1b8 0f00 	cmp.w	r8, #0
     320:	bf08      	it	eq
     322:	4619      	moveq	r1, r3
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
     324:	464a      	mov	r2, r9
     326:	4321      	orrs	r1, r4
     328:	1d30      	adds	r0, r6, #4
     32a:	f001 fb67 	bl	19fc <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
     32e:	f001 f9f5 	bl	171c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
     332:	b938      	cbnz	r0, 344 <xEventGroupWaitBits+0xac>
			portYIELD_WITHIN_API();
     334:	4b1d      	ldr	r3, [pc, #116]	; (3ac <xEventGroupWaitBits+0x114>)
     336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     33a:	601a      	str	r2, [r3, #0]
     33c:	f3bf 8f4f 	dsb	sy
     340:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
     344:	f001 fe16 	bl	1f74 <uxTaskResetEventItemValue>
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     348:	0183      	lsls	r3, r0, #6
		uxReturn = uxTaskResetEventItemValue();
     34a:	4605      	mov	r5, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
     34c:	d51a      	bpl.n	384 <xEventGroupWaitBits+0xec>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
     34e:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
}
     352:	4628      	mov	r0, r5
     354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     358:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     35c:	f383 8811 	msr	BASEPRI, r3
     360:	f3bf 8f6f 	isb	sy
     364:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     368:	e7fe      	b.n	368 <xEventGroupWaitBits+0xd0>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     36a:	ea34 0305 	bics.w	r3, r4, r5
     36e:	d1c9      	bne.n	304 <xEventGroupWaitBits+0x6c>
			if( xClearOnExit != pdFALSE )
     370:	b12f      	cbz	r7, 37e <xEventGroupWaitBits+0xe6>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     372:	ea25 0404 	bic.w	r4, r5, r4
     376:	6034      	str	r4, [r6, #0]
	xAlreadyYielded = xTaskResumeAll();
     378:	f001 f9d0 	bl	171c <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
     37c:	e7e9      	b.n	352 <xEventGroupWaitBits+0xba>
	xAlreadyYielded = xTaskResumeAll();
     37e:	f001 f9cd 	bl	171c <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
     382:	e7e6      	b.n	352 <xEventGroupWaitBits+0xba>
			taskENTER_CRITICAL();
     384:	f002 fa56 	bl	2834 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
     388:	6835      	ldr	r5, [r6, #0]
	if( xWaitForAllBits == pdFALSE )
     38a:	f1b8 0f00 	cmp.w	r8, #0
     38e:	d106      	bne.n	39e <xEventGroupWaitBits+0x106>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
     390:	422c      	tst	r4, r5
     392:	d007      	beq.n	3a4 <xEventGroupWaitBits+0x10c>
					if( xClearOnExit != pdFALSE )
     394:	b137      	cbz	r7, 3a4 <xEventGroupWaitBits+0x10c>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
     396:	ea25 0404 	bic.w	r4, r5, r4
     39a:	6034      	str	r4, [r6, #0]
     39c:	e002      	b.n	3a4 <xEventGroupWaitBits+0x10c>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
     39e:	ea34 0305 	bics.w	r3, r4, r5
     3a2:	d0f7      	beq.n	394 <xEventGroupWaitBits+0xfc>
			taskEXIT_CRITICAL();
     3a4:	f002 fa68 	bl	2878 <vPortExitCritical>
     3a8:	e7d1      	b.n	34e <xEventGroupWaitBits+0xb6>
     3aa:	bf00      	nop
     3ac:	e000ed04 	.word	0xe000ed04

000003b0 <xEventGroupClearBits>:
	configASSERT( xEventGroup );
     3b0:	b158      	cbz	r0, 3ca <xEventGroupClearBits+0x1a>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
     3b2:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
     3b6:	d011      	beq.n	3dc <xEventGroupClearBits+0x2c>
     3b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     3bc:	f383 8811 	msr	BASEPRI, r3
     3c0:	f3bf 8f6f 	isb	sy
     3c4:	f3bf 8f4f 	dsb	sy
     3c8:	e7fe      	b.n	3c8 <xEventGroupClearBits+0x18>
     3ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     3ce:	f383 8811 	msr	BASEPRI, r3
     3d2:	f3bf 8f6f 	isb	sy
     3d6:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
     3da:	e7fe      	b.n	3da <xEventGroupClearBits+0x2a>
{
     3dc:	b570      	push	{r4, r5, r6, lr}
     3de:	4605      	mov	r5, r0
     3e0:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
     3e2:	f002 fa27 	bl	2834 <vPortEnterCritical>
		uxReturn = pxEventBits->uxEventBits;
     3e6:	682e      	ldr	r6, [r5, #0]
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     3e8:	ea26 0404 	bic.w	r4, r6, r4
     3ec:	602c      	str	r4, [r5, #0]
	taskEXIT_CRITICAL();
     3ee:	f002 fa43 	bl	2878 <vPortExitCritical>
}
     3f2:	4630      	mov	r0, r6
     3f4:	bd70      	pop	{r4, r5, r6, pc}
     3f6:	bf00      	nop

000003f8 <xEventGroupSetBits>:
	configASSERT( xEventGroup );
     3f8:	b168      	cbz	r0, 416 <_Minimum_Heap_Size+0x16>
{
     3fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
     3fe:	f011 467f 	ands.w	r6, r1, #4278190080	; 0xff000000
     402:	d011      	beq.n	428 <_Minimum_Heap_Size+0x28>
     404:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     408:	f383 8811 	msr	BASEPRI, r3
     40c:	f3bf 8f6f 	isb	sy
     410:	f3bf 8f4f 	dsb	sy
     414:	e7fe      	b.n	414 <_Minimum_Heap_Size+0x14>
     416:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     41a:	f383 8811 	msr	BASEPRI, r3
     41e:	f3bf 8f6f 	isb	sy
     422:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
     426:	e7fe      	b.n	426 <_Minimum_Heap_Size+0x26>
     428:	4605      	mov	r5, r0
     42a:	460c      	mov	r4, r1
	vTaskSuspendAll();
     42c:	f001 f81a 	bl	1464 <vTaskSuspendAll>
		pxEventBits->uxEventBits |= uxBitsToSet;
     430:	6829      	ldr	r1, [r5, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
     432:	6928      	ldr	r0, [r5, #16]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     434:	f105 070c 	add.w	r7, r5, #12
		pxEventBits->uxEventBits |= uxBitsToSet;
     438:	4321      	orrs	r1, r4
		while( pxListItem != pxListEnd )
     43a:	4287      	cmp	r7, r0
		pxEventBits->uxEventBits |= uxBitsToSet;
     43c:	6029      	str	r1, [r5, #0]
		while( pxListItem != pxListEnd )
     43e:	d01d      	beq.n	47c <_Minimum_Heap_Size+0x7c>
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     440:	4634      	mov	r4, r6
     442:	e00b      	b.n	45c <_Minimum_Heap_Size+0x5c>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     444:	b13e      	cbz	r6, 456 <_Minimum_Heap_Size+0x56>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     446:	01d2      	lsls	r2, r2, #7
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     448:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
					uxBitsToClear |= uxBitsWaitedFor;
     44c:	bf48      	it	mi
     44e:	431c      	orrmi	r4, r3
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     450:	f001 fbce 	bl	1bf0 <vTaskRemoveFromUnorderedEventList>
     454:	6829      	ldr	r1, [r5, #0]
		while( pxListItem != pxListEnd )
     456:	4547      	cmp	r7, r8
     458:	4640      	mov	r0, r8
     45a:	d00d      	beq.n	478 <_Minimum_Heap_Size+0x78>
			pxNext = listGET_NEXT( pxListItem );
     45c:	e9d0 2800 	ldrd	r2, r8, [r0]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     460:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     464:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
     468:	ea01 0603 	and.w	r6, r1, r3
     46c:	d0ea      	beq.n	444 <_Minimum_Heap_Size+0x44>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     46e:	42b3      	cmp	r3, r6
     470:	d0e9      	beq.n	446 <_Minimum_Heap_Size+0x46>
		while( pxListItem != pxListEnd )
     472:	4547      	cmp	r7, r8
     474:	4640      	mov	r0, r8
     476:	d1f1      	bne.n	45c <_Minimum_Heap_Size+0x5c>
     478:	ea21 0104 	bic.w	r1, r1, r4
		pxEventBits->uxEventBits &= ~uxBitsToClear;
     47c:	6029      	str	r1, [r5, #0]
	( void ) xTaskResumeAll();
     47e:	f001 f94d 	bl	171c <xTaskResumeAll>
}
     482:	6828      	ldr	r0, [r5, #0]
     484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000488 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     488:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     48c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     490:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     492:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     494:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     496:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     498:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     49c:	4770      	bx	lr
     49e:	bf00      	nop

000004a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     4a0:	2300      	movs	r3, #0
     4a2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     4a4:	4770      	bx	lr
     4a6:	bf00      	nop

000004a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
     4a8:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
     4aa:	6802      	ldr	r2, [r0, #0]
{
     4ac:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     4ae:	689c      	ldr	r4, [r3, #8]
     4b0:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     4b2:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
     4b4:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
     4b6:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     4b8:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
     4ba:	6099      	str	r1, [r3, #8]
}
     4bc:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
     4c0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
     4c2:	6002      	str	r2, [r0, #0]
}
     4c4:	4770      	bx	lr
     4c6:	bf00      	nop

000004c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     4c8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     4ca:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     4cc:	1c6b      	adds	r3, r5, #1
     4ce:	d011      	beq.n	4f4 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     4d0:	f100 0208 	add.w	r2, r0, #8
     4d4:	e000      	b.n	4d8 <vListInsert+0x10>
     4d6:	461a      	mov	r2, r3
     4d8:	6853      	ldr	r3, [r2, #4]
     4da:	681c      	ldr	r4, [r3, #0]
     4dc:	42ac      	cmp	r4, r5
     4de:	d9fa      	bls.n	4d6 <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
     4e0:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
     4e2:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
     4e4:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     4e6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
     4e8:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
     4ea:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
     4ec:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
     4ee:	6004      	str	r4, [r0, #0]
}
     4f0:	bc30      	pop	{r4, r5}
     4f2:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
     4f4:	6902      	ldr	r2, [r0, #16]
     4f6:	6853      	ldr	r3, [r2, #4]
     4f8:	e7f2      	b.n	4e0 <vListInsert+0x18>
     4fa:	bf00      	nop

000004fc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     4fc:	6903      	ldr	r3, [r0, #16]
{
     4fe:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     500:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     504:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     506:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
     508:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     50a:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     50c:	bf08      	it	eq
     50e:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
     510:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
     512:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pvContainer = NULL;
     516:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
     518:	3a01      	subs	r2, #1
	pxItemToRemove->pvContainer = NULL;
     51a:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
     51c:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
     51e:	6818      	ldr	r0, [r3, #0]
}
     520:	4770      	bx	lr
     522:	bf00      	nop

00000524 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
     524:	b570      	push	{r4, r5, r6, lr}
     526:	4616      	mov	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     528:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     52a:	6b85      	ldr	r5, [r0, #56]	; 0x38
{
     52c:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     52e:	b92a      	cbnz	r2, 53c <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     530:	6806      	ldr	r6, [r0, #0]
     532:	3501      	adds	r5, #1
     534:	b346      	cbz	r6, 588 <prvCopyDataToQueue+0x64>
BaseType_t xReturn = pdFALSE;
     536:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
     538:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
     53a:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
     53c:	b986      	cbnz	r6, 560 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
     53e:	6880      	ldr	r0, [r0, #8]
     540:	f00a faed 	bl	ab1e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     544:	68a3      	ldr	r3, [r4, #8]
     546:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     548:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     54a:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     54c:	4293      	cmp	r3, r2
     54e:	f105 0501 	add.w	r5, r5, #1
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     552:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     554:	d3ef      	bcc.n	536 <prvCopyDataToQueue+0x12>
			pxQueue->pcWriteTo = pxQueue->pcHead;
     556:	6823      	ldr	r3, [r4, #0]
     558:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
     55a:	4630      	mov	r0, r6
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
     55c:	63a5      	str	r5, [r4, #56]	; 0x38
}
     55e:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     560:	68c0      	ldr	r0, [r0, #12]
     562:	f00a fadc 	bl	ab1e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     566:	6c22      	ldr	r2, [r4, #64]	; 0x40
     568:	68e3      	ldr	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     56a:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     56c:	4252      	negs	r2, r2
     56e:	4413      	add	r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     570:	428b      	cmp	r3, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
     572:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     574:	d202      	bcs.n	57c <prvCopyDataToQueue+0x58>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
     576:	6863      	ldr	r3, [r4, #4]
     578:	441a      	add	r2, r3
     57a:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
     57c:	2e02      	cmp	r6, #2
     57e:	d008      	beq.n	592 <prvCopyDataToQueue+0x6e>
     580:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
     582:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
     584:	63a5      	str	r5, [r4, #56]	; 0x38
}
     586:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     588:	6840      	ldr	r0, [r0, #4]
     58a:	f001 fc5f 	bl	1e4c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
     58e:	6066      	str	r6, [r4, #4]
     590:	e7d2      	b.n	538 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     592:	2d00      	cmp	r5, #0
     594:	d1cf      	bne.n	536 <prvCopyDataToQueue+0x12>
     596:	2501      	movs	r5, #1
BaseType_t xReturn = pdFALSE;
     598:	2000      	movs	r0, #0
     59a:	e7cd      	b.n	538 <prvCopyDataToQueue+0x14>

0000059c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
     59c:	b570      	push	{r4, r5, r6, lr}
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
     59e:	6c84      	ldr	r4, [r0, #72]	; 0x48
	{
     5a0:	b082      	sub	sp, #8
     5a2:	9001      	str	r0, [sp, #4]
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
     5a4:	b19c      	cbz	r4, 5ce <prvNotifyQueueSetContainer+0x32>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
     5a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
     5a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     5aa:	429a      	cmp	r2, r3
     5ac:	d206      	bcs.n	5bc <prvNotifyQueueSetContainer+0x20>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
     5ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
     5b0:	4293      	cmp	r3, r2
     5b2:	d815      	bhi.n	5e0 <prvNotifyQueueSetContainer+0x44>
	BaseType_t xReturn = pdFALSE;
     5b4:	2600      	movs	r6, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
     5b6:	4630      	mov	r0, r6
     5b8:	b002      	add	sp, #8
     5ba:	bd70      	pop	{r4, r5, r6, pc}
     5bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     5c0:	f383 8811 	msr	BASEPRI, r3
     5c4:	f3bf 8f6f 	isb	sy
     5c8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
     5cc:	e7fe      	b.n	5cc <prvNotifyQueueSetContainer+0x30>
     5ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     5d2:	f383 8811 	msr	BASEPRI, r3
     5d6:	f3bf 8f6f 	isb	sy
     5da:	f3bf 8f4f 	dsb	sy
		configASSERT( pxQueueSetContainer );
     5de:	e7fe      	b.n	5de <prvNotifyQueueSetContainer+0x42>
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
     5e0:	460a      	mov	r2, r1
     5e2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
     5e6:	a901      	add	r1, sp, #4
     5e8:	4620      	mov	r0, r4
     5ea:	f7ff ff9b 	bl	524 <prvCopyDataToQueue>
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
     5ee:	b26d      	sxtb	r5, r5
			if( cTxLock == queueUNLOCKED )
     5f0:	1c6b      	adds	r3, r5, #1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
     5f2:	4606      	mov	r6, r0
			if( cTxLock == queueUNLOCKED )
     5f4:	d004      	beq.n	600 <prvNotifyQueueSetContainer+0x64>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
     5f6:	1c6b      	adds	r3, r5, #1
     5f8:	b25b      	sxtb	r3, r3
     5fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
     5fe:	e7da      	b.n	5b6 <prvNotifyQueueSetContainer+0x1a>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
     600:	6a63      	ldr	r3, [r4, #36]	; 0x24
     602:	2b00      	cmp	r3, #0
     604:	d0d7      	beq.n	5b6 <prvNotifyQueueSetContainer+0x1a>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
     606:	f104 0024 	add.w	r0, r4, #36	; 0x24
     60a:	f001 fa99 	bl	1b40 <xTaskRemoveFromEventList>
						xReturn = pdTRUE;
     60e:	2800      	cmp	r0, #0
     610:	bf18      	it	ne
     612:	2601      	movne	r6, #1
     614:	e7cf      	b.n	5b6 <prvNotifyQueueSetContainer+0x1a>
     616:	bf00      	nop

00000618 <prvUnlockQueue>:
{
     618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     61c:	4604      	mov	r4, r0
     61e:	b085      	sub	sp, #20
	taskENTER_CRITICAL();
     620:	f002 f908 	bl	2834 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
     624:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
     628:	b25e      	sxtb	r6, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
     62a:	2e00      	cmp	r6, #0
     62c:	dd1d      	ble.n	66a <prvUnlockQueue+0x52>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     62e:	f104 0724 	add.w	r7, r4, #36	; 0x24
				if( pxQueue->pxQueueSetContainer != NULL )
     632:	6ca5      	ldr	r5, [r4, #72]	; 0x48
     634:	b16d      	cbz	r5, 652 <prvUnlockQueue+0x3a>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
     636:	6baa      	ldr	r2, [r5, #56]	; 0x38
     638:	6beb      	ldr	r3, [r5, #60]	; 0x3c
     63a:	9403      	str	r4, [sp, #12]
     63c:	429a      	cmp	r2, r3
     63e:	d333      	bcc.n	6a8 <prvUnlockQueue+0x90>
     640:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     644:	f383 8811 	msr	BASEPRI, r3
     648:	f3bf 8f6f 	isb	sy
     64c:	f3bf 8f4f 	dsb	sy
     650:	e7fe      	b.n	650 <prvUnlockQueue+0x38>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     652:	6a63      	ldr	r3, [r4, #36]	; 0x24
     654:	b14b      	cbz	r3, 66a <prvUnlockQueue+0x52>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     656:	4638      	mov	r0, r7
     658:	f001 fa72 	bl	1b40 <xTaskRemoveFromEventList>
     65c:	2800      	cmp	r0, #0
     65e:	d13f      	bne.n	6e0 <prvUnlockQueue+0xc8>
			--cTxLock;
     660:	1e73      	subs	r3, r6, #1
     662:	b2db      	uxtb	r3, r3
     664:	b25e      	sxtb	r6, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
     666:	2b00      	cmp	r3, #0
     668:	d1e3      	bne.n	632 <prvUnlockQueue+0x1a>
		pxQueue->cTxLock = queueUNLOCKED;
     66a:	23ff      	movs	r3, #255	; 0xff
     66c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
     670:	f002 f902 	bl	2878 <vPortExitCritical>
	taskENTER_CRITICAL();
     674:	f002 f8de 	bl	2834 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
     678:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
     67c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
     67e:	2d00      	cmp	r5, #0
     680:	dd31      	ble.n	6e6 <prvUnlockQueue+0xce>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     682:	6923      	ldr	r3, [r4, #16]
     684:	b37b      	cbz	r3, 6e6 <prvUnlockQueue+0xce>
     686:	f104 0610 	add.w	r6, r4, #16
     68a:	e005      	b.n	698 <prvUnlockQueue+0x80>
				--cRxLock;
     68c:	3d01      	subs	r5, #1
     68e:	b2eb      	uxtb	r3, r5
     690:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
     692:	b343      	cbz	r3, 6e6 <prvUnlockQueue+0xce>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     694:	6923      	ldr	r3, [r4, #16]
     696:	b333      	cbz	r3, 6e6 <prvUnlockQueue+0xce>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     698:	4630      	mov	r0, r6
     69a:	f001 fa51 	bl	1b40 <xTaskRemoveFromEventList>
     69e:	2800      	cmp	r0, #0
     6a0:	d0f4      	beq.n	68c <prvUnlockQueue+0x74>
					vTaskMissedYield();
     6a2:	f001 fb59 	bl	1d58 <vTaskMissedYield>
     6a6:	e7f1      	b.n	68c <prvUnlockQueue+0x74>
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
     6a8:	6baa      	ldr	r2, [r5, #56]	; 0x38
     6aa:	4293      	cmp	r3, r2
     6ac:	d9d8      	bls.n	660 <prvUnlockQueue+0x48>
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
     6ae:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     6b2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     6b4:	f8d5 9038 	ldr.w	r9, [r5, #56]	; 0x38
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
     6b8:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
     6bc:	b9da      	cbnz	r2, 6f6 <prvUnlockQueue+0xde>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     6be:	682b      	ldr	r3, [r5, #0]
     6c0:	2b00      	cmp	r3, #0
     6c2:	d032      	beq.n	72a <prvUnlockQueue+0x112>
BaseType_t xReturn = pdFALSE;
     6c4:	2200      	movs	r2, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
     6c6:	f109 0301 	add.w	r3, r9, #1
			if( cTxLock == queueUNLOCKED )
     6ca:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
     6ce:	63ab      	str	r3, [r5, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
     6d0:	d01f      	beq.n	712 <prvUnlockQueue+0xfa>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
     6d2:	f108 0301 	add.w	r3, r8, #1
     6d6:	b25b      	sxtb	r3, r3
     6d8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
     6dc:	2a00      	cmp	r2, #0
     6de:	d0bf      	beq.n	660 <prvUnlockQueue+0x48>
						vTaskMissedYield();
     6e0:	f001 fb3a 	bl	1d58 <vTaskMissedYield>
     6e4:	e7bc      	b.n	660 <prvUnlockQueue+0x48>
		pxQueue->cRxLock = queueUNLOCKED;
     6e6:	23ff      	movs	r3, #255	; 0xff
     6e8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
     6ec:	b005      	add	sp, #20
     6ee:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	taskEXIT_CRITICAL();
     6f2:	f002 b8c1 	b.w	2878 <vPortExitCritical>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
     6f6:	a903      	add	r1, sp, #12
     6f8:	68a8      	ldr	r0, [r5, #8]
     6fa:	f00a fa10 	bl	ab1e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     6fe:	68ab      	ldr	r3, [r5, #8]
     700:	6c29      	ldr	r1, [r5, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     702:	686a      	ldr	r2, [r5, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     704:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
     706:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
     708:	60ab      	str	r3, [r5, #8]
			pxQueue->pcWriteTo = pxQueue->pcHead;
     70a:	bf24      	itt	cs
     70c:	682b      	ldrcs	r3, [r5, #0]
     70e:	60ab      	strcs	r3, [r5, #8]
     710:	e7d8      	b.n	6c4 <prvUnlockQueue+0xac>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
     712:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     714:	2b00      	cmp	r3, #0
     716:	d0e1      	beq.n	6dc <prvUnlockQueue+0xc4>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
     718:	f105 0024 	add.w	r0, r5, #36	; 0x24
     71c:	9201      	str	r2, [sp, #4]
     71e:	f001 fa0f 	bl	1b40 <xTaskRemoveFromEventList>
     722:	9a01      	ldr	r2, [sp, #4]
     724:	2800      	cmp	r0, #0
     726:	d0d9      	beq.n	6dc <prvUnlockQueue+0xc4>
     728:	e7da      	b.n	6e0 <prvUnlockQueue+0xc8>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     72a:	6868      	ldr	r0, [r5, #4]
     72c:	9301      	str	r3, [sp, #4]
     72e:	f001 fb8d 	bl	1e4c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
     732:	9b01      	ldr	r3, [sp, #4]
     734:	606b      	str	r3, [r5, #4]
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
     736:	4602      	mov	r2, r0
				pxQueue->pxMutexHolder = NULL;
     738:	e7c5      	b.n	6c6 <prvUnlockQueue+0xae>
     73a:	bf00      	nop

0000073c <xQueueGenericCreateStatic>:
	{
     73c:	b570      	push	{r4, r5, r6, lr}
     73e:	b082      	sub	sp, #8
     740:	f89d 5018 	ldrb.w	r5, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
     744:	b940      	cbnz	r0, 758 <xQueueGenericCreateStatic+0x1c>
     746:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     74a:	f383 8811 	msr	BASEPRI, r3
     74e:	f3bf 8f6f 	isb	sy
     752:	f3bf 8f4f 	dsb	sy
     756:	e7fe      	b.n	756 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
     758:	461c      	mov	r4, r3
     75a:	b1db      	cbz	r3, 794 <xQueueGenericCreateStatic+0x58>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
     75c:	b172      	cbz	r2, 77c <xQueueGenericCreateStatic+0x40>
     75e:	b311      	cbz	r1, 7a6 <xQueueGenericCreateStatic+0x6a>
			volatile size_t xSize = sizeof( StaticQueue_t );
     760:	2354      	movs	r3, #84	; 0x54
     762:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
     764:	9b01      	ldr	r3, [sp, #4]
     766:	2b54      	cmp	r3, #84	; 0x54
     768:	d026      	beq.n	7b8 <xQueueGenericCreateStatic+0x7c>
     76a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     76e:	f383 8811 	msr	BASEPRI, r3
     772:	f3bf 8f6f 	isb	sy
     776:	f3bf 8f4f 	dsb	sy
     77a:	e7fe      	b.n	77a <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
     77c:	2900      	cmp	r1, #0
     77e:	d145      	bne.n	80c <__Main_Stack_Size+0xc>
			volatile size_t xSize = sizeof( StaticQueue_t );
     780:	2354      	movs	r3, #84	; 0x54
     782:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
     784:	9b01      	ldr	r3, [sp, #4]
     786:	2b54      	cmp	r3, #84	; 0x54
     788:	d1ef      	bne.n	76a <xQueueGenericCreateStatic+0x2e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
     78a:	2301      	movs	r3, #1
     78c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
     790:	4622      	mov	r2, r4
     792:	e014      	b.n	7be <xQueueGenericCreateStatic+0x82>
     794:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     798:	f383 8811 	msr	BASEPRI, r3
     79c:	f3bf 8f6f 	isb	sy
     7a0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
     7a4:	e7fe      	b.n	7a4 <xQueueGenericCreateStatic+0x68>
     7a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     7aa:	f383 8811 	msr	BASEPRI, r3
     7ae:	f3bf 8f6f 	isb	sy
     7b2:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
     7b6:	e7fe      	b.n	7b6 <xQueueGenericCreateStatic+0x7a>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
     7b8:	2301      	movs	r3, #1
     7ba:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
     7be:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
     7c2:	6022      	str	r2, [r4, #0]
	taskENTER_CRITICAL();
     7c4:	f002 f836 	bl	2834 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     7c8:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	; 0x3c
     7cc:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
     7ce:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     7d0:	fb01 f103 	mul.w	r1, r1, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     7d4:	1acb      	subs	r3, r1, r3
     7d6:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     7d8:	2600      	movs	r6, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     7da:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
     7dc:	21ff      	movs	r1, #255	; 0xff
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     7de:	60e3      	str	r3, [r4, #12]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     7e0:	6062      	str	r2, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     7e2:	63a6      	str	r6, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     7e4:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cRxLock = queueUNLOCKED;
     7e8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
     7ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     7f0:	f7ff fe4a 	bl	488 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     7f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
     7f8:	f7ff fe46 	bl	488 <vListInitialise>
	taskEXIT_CRITICAL();
     7fc:	f002 f83c 	bl	2878 <vPortExitCritical>
	}
     800:	4620      	mov	r0, r4
		pxNewQueue->pxQueueSetContainer = NULL;
     802:	64a6      	str	r6, [r4, #72]	; 0x48
		pxNewQueue->ucQueueType = ucQueueType;
     804:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
	}
     808:	b002      	add	sp, #8
     80a:	bd70      	pop	{r4, r5, r6, pc}
     80c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     810:	f383 8811 	msr	BASEPRI, r3
     814:	f3bf 8f6f 	isb	sy
     818:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
     81c:	e7fe      	b.n	81c <__Main_Stack_Size+0x1c>
     81e:	bf00      	nop

00000820 <xQueueGenericCreate>:
	{
     820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
     822:	b940      	cbnz	r0, 836 <xQueueGenericCreate+0x16>
     824:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     828:	f383 8811 	msr	BASEPRI, r3
     82c:	f3bf 8f6f 	isb	sy
     830:	f3bf 8f4f 	dsb	sy
     834:	e7fe      	b.n	834 <xQueueGenericCreate+0x14>
     836:	4606      	mov	r6, r0
     838:	4617      	mov	r7, r2
		if( uxItemSize == ( UBaseType_t ) 0 )
     83a:	460d      	mov	r5, r1
     83c:	b941      	cbnz	r1, 850 <xQueueGenericCreate+0x30>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
     83e:	2054      	movs	r0, #84	; 0x54
     840:	f001 fe8a 	bl	2558 <pvPortMalloc>
		if( pxNewQueue != NULL )
     844:	4604      	mov	r4, r0
     846:	b3a8      	cbz	r0, 8b4 <xQueueGenericCreate+0x94>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
     848:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
     84c:	6024      	str	r4, [r4, #0]
     84e:	e00c      	b.n	86a <xQueueGenericCreate+0x4a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     850:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
     854:	3054      	adds	r0, #84	; 0x54
     856:	f001 fe7f 	bl	2558 <pvPortMalloc>
		if( pxNewQueue != NULL )
     85a:	4604      	mov	r4, r0
     85c:	b350      	cbz	r0, 8b4 <xQueueGenericCreate+0x94>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
     85e:	2200      	movs	r2, #0
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
     860:	f100 0354 	add.w	r3, r0, #84	; 0x54
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
     864:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
     868:	6003      	str	r3, [r0, #0]
	pxNewQueue->uxItemSize = uxItemSize;
     86a:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
     86e:	f001 ffe1 	bl	2834 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     872:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	; 0x3c
     876:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
     878:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     87a:	fb01 f103 	mul.w	r1, r1, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     87e:	1acb      	subs	r3, r1, r3
     880:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     882:	2500      	movs	r5, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     884:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
     886:	21ff      	movs	r1, #255	; 0xff
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     888:	60e3      	str	r3, [r4, #12]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     88a:	6062      	str	r2, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     88c:	63a5      	str	r5, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     88e:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cRxLock = queueUNLOCKED;
     892:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
     896:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     89a:	f7ff fdf5 	bl	488 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     89e:	f104 0024 	add.w	r0, r4, #36	; 0x24
     8a2:	f7ff fdf1 	bl	488 <vListInitialise>
	taskEXIT_CRITICAL();
     8a6:	f001 ffe7 	bl	2878 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
     8aa:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
     8ae:	64a5      	str	r5, [r4, #72]	; 0x48
	}
     8b0:	4620      	mov	r0, r4
     8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
     8b4:	2400      	movs	r4, #0
	}
     8b6:	4620      	mov	r0, r4
     8b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     8ba:	bf00      	nop

000008bc <xQueueGenericSend>:
{
     8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     8c0:	b084      	sub	sp, #16
     8c2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
     8c4:	2800      	cmp	r0, #0
     8c6:	d075      	beq.n	9b4 <xQueueGenericSend+0xf8>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     8c8:	2900      	cmp	r1, #0
     8ca:	d067      	beq.n	99c <xQueueGenericSend+0xe0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     8cc:	2b02      	cmp	r3, #2
     8ce:	d10b      	bne.n	8e8 <xQueueGenericSend+0x2c>
     8d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
     8d2:	2a01      	cmp	r2, #1
     8d4:	d008      	beq.n	8e8 <xQueueGenericSend+0x2c>
     8d6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     8da:	f383 8811 	msr	BASEPRI, r3
     8de:	f3bf 8f6f 	isb	sy
     8e2:	f3bf 8f4f 	dsb	sy
     8e6:	e7fe      	b.n	8e6 <xQueueGenericSend+0x2a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     8e8:	4604      	mov	r4, r0
     8ea:	461e      	mov	r6, r3
     8ec:	4689      	mov	r9, r1
     8ee:	f001 fa5b 	bl	1da8 <xTaskGetSchedulerState>
     8f2:	2800      	cmp	r0, #0
     8f4:	d067      	beq.n	9c6 <xQueueGenericSend+0x10a>
     8f6:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
     8f8:	f8df a14c 	ldr.w	sl, [pc, #332]	; a48 <xQueueGenericSend+0x18c>
		prvLockQueue( pxQueue );
     8fc:	f04f 0800 	mov.w	r8, #0
     900:	e007      	b.n	912 <xQueueGenericSend+0x56>
	taskEXIT_CRITICAL();
     902:	f001 ffb9 	bl	2878 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
     906:	4620      	mov	r0, r4
     908:	f7ff fe86 	bl	618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
     90c:	f000 ff06 	bl	171c <xTaskResumeAll>
     910:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
     912:	f001 ff8f 	bl	2834 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     916:	6ba2      	ldr	r2, [r4, #56]	; 0x38
     918:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     91a:	429a      	cmp	r2, r3
     91c:	d363      	bcc.n	9e6 <xQueueGenericSend+0x12a>
     91e:	2e02      	cmp	r6, #2
     920:	d061      	beq.n	9e6 <xQueueGenericSend+0x12a>
				if( xTicksToWait == ( TickType_t ) 0 )
     922:	9d01      	ldr	r5, [sp, #4]
     924:	2d00      	cmp	r5, #0
     926:	f000 8084 	beq.w	a32 <xQueueGenericSend+0x176>
				else if( xEntryTimeSet == pdFALSE )
     92a:	2f00      	cmp	r7, #0
     92c:	d057      	beq.n	9de <xQueueGenericSend+0x122>
		taskEXIT_CRITICAL();
     92e:	f001 ffa3 	bl	2878 <vPortExitCritical>
		vTaskSuspendAll();
     932:	f000 fd97 	bl	1464 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
     936:	f001 ff7d 	bl	2834 <vPortEnterCritical>
     93a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
     93e:	2bff      	cmp	r3, #255	; 0xff
     940:	bf08      	it	eq
     942:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
     946:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
     94a:	2bff      	cmp	r3, #255	; 0xff
     94c:	bf08      	it	eq
     94e:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
     952:	f001 ff91 	bl	2878 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     956:	a901      	add	r1, sp, #4
     958:	a802      	add	r0, sp, #8
     95a:	f001 f9b5 	bl	1cc8 <xTaskCheckForTimeOut>
     95e:	2800      	cmp	r0, #0
     960:	d160      	bne.n	a24 <xQueueGenericSend+0x168>
	taskENTER_CRITICAL();
     962:	f001 ff67 	bl	2834 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
     966:	6ba2      	ldr	r2, [r4, #56]	; 0x38
     968:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     96a:	429a      	cmp	r2, r3
     96c:	d1c9      	bne.n	902 <xQueueGenericSend+0x46>
	taskEXIT_CRITICAL();
     96e:	f001 ff83 	bl	2878 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
     972:	9901      	ldr	r1, [sp, #4]
     974:	f104 0010 	add.w	r0, r4, #16
     978:	f000 fffc 	bl	1974 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
     97c:	4620      	mov	r0, r4
     97e:	f7ff fe4b 	bl	618 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
     982:	f000 fecb 	bl	171c <xTaskResumeAll>
     986:	2800      	cmp	r0, #0
     988:	d1c2      	bne.n	910 <xQueueGenericSend+0x54>
					portYIELD_WITHIN_API();
     98a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     98e:	f8ca 3000 	str.w	r3, [sl]
     992:	f3bf 8f4f 	dsb	sy
     996:	f3bf 8f6f 	isb	sy
     99a:	e7b9      	b.n	910 <xQueueGenericSend+0x54>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     99c:	6c02      	ldr	r2, [r0, #64]	; 0x40
     99e:	2a00      	cmp	r2, #0
     9a0:	d094      	beq.n	8cc <xQueueGenericSend+0x10>
     9a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     9a6:	f383 8811 	msr	BASEPRI, r3
     9aa:	f3bf 8f6f 	isb	sy
     9ae:	f3bf 8f4f 	dsb	sy
     9b2:	e7fe      	b.n	9b2 <xQueueGenericSend+0xf6>
     9b4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     9b8:	f383 8811 	msr	BASEPRI, r3
     9bc:	f3bf 8f6f 	isb	sy
     9c0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
     9c4:	e7fe      	b.n	9c4 <xQueueGenericSend+0x108>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     9c6:	9f01      	ldr	r7, [sp, #4]
     9c8:	2f00      	cmp	r7, #0
     9ca:	d095      	beq.n	8f8 <xQueueGenericSend+0x3c>
     9cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     9d0:	f383 8811 	msr	BASEPRI, r3
     9d4:	f3bf 8f6f 	isb	sy
     9d8:	f3bf 8f4f 	dsb	sy
     9dc:	e7fe      	b.n	9dc <xQueueGenericSend+0x120>
					vTaskInternalSetTimeOutState( &xTimeOut );
     9de:	a802      	add	r0, sp, #8
     9e0:	f001 f966 	bl	1cb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
     9e4:	e7a3      	b.n	92e <xQueueGenericSend+0x72>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     9e6:	4649      	mov	r1, r9
     9e8:	4632      	mov	r2, r6
     9ea:	4620      	mov	r0, r4
     9ec:	f7ff fd9a 	bl	524 <prvCopyDataToQueue>
					if( pxQueue->pxQueueSetContainer != NULL )
     9f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     9f2:	b153      	cbz	r3, a0a <xQueueGenericSend+0x14e>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
     9f4:	4631      	mov	r1, r6
     9f6:	4620      	mov	r0, r4
     9f8:	f7ff fdd0 	bl	59c <prvNotifyQueueSetContainer>
     9fc:	b948      	cbnz	r0, a12 <xQueueGenericSend+0x156>
				taskEXIT_CRITICAL();
     9fe:	f001 ff3b 	bl	2878 <vPortExitCritical>
				return pdPASS;
     a02:	2001      	movs	r0, #1
}
     a04:	b004      	add	sp, #16
     a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     a0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
     a0c:	b9ab      	cbnz	r3, a3a <xQueueGenericSend+0x17e>
						else if( xYieldRequired != pdFALSE )
     a0e:	2800      	cmp	r0, #0
     a10:	d0f5      	beq.n	9fe <xQueueGenericSend+0x142>
							queueYIELD_IF_USING_PREEMPTION();
     a12:	4b0d      	ldr	r3, [pc, #52]	; (a48 <xQueueGenericSend+0x18c>)
     a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     a18:	601a      	str	r2, [r3, #0]
     a1a:	f3bf 8f4f 	dsb	sy
     a1e:	f3bf 8f6f 	isb	sy
     a22:	e7ec      	b.n	9fe <xQueueGenericSend+0x142>
			prvUnlockQueue( pxQueue );
     a24:	4620      	mov	r0, r4
     a26:	f7ff fdf7 	bl	618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
     a2a:	f000 fe77 	bl	171c <xTaskResumeAll>
			return errQUEUE_FULL;
     a2e:	2000      	movs	r0, #0
     a30:	e7e8      	b.n	a04 <xQueueGenericSend+0x148>
					taskEXIT_CRITICAL();
     a32:	f001 ff21 	bl	2878 <vPortExitCritical>
					return errQUEUE_FULL;
     a36:	4628      	mov	r0, r5
     a38:	e7e4      	b.n	a04 <xQueueGenericSend+0x148>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     a3a:	f104 0024 	add.w	r0, r4, #36	; 0x24
     a3e:	f001 f87f 	bl	1b40 <xTaskRemoveFromEventList>
     a42:	2800      	cmp	r0, #0
     a44:	d0db      	beq.n	9fe <xQueueGenericSend+0x142>
     a46:	e7e4      	b.n	a12 <xQueueGenericSend+0x156>
     a48:	e000ed04 	.word	0xe000ed04

00000a4c <xQueueCreateMutex>:
	{
     a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a4e:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
     a50:	2054      	movs	r0, #84	; 0x54
     a52:	f001 fd81 	bl	2558 <pvPortMalloc>
		if( pxNewQueue != NULL )
     a56:	4604      	mov	r4, r0
     a58:	b378      	cbz	r0, aba <xQueueCreateMutex+0x6e>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
     a5a:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
     a5c:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
     a5e:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
     a60:	e9c0 350f 	strd	r3, r5, [r0, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
     a64:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	taskENTER_CRITICAL();
     a68:	f001 fee4 	bl	2834 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     a6c:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
     a70:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
     a72:	63a5      	str	r5, [r4, #56]	; 0x38
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     a74:	fb03 f302 	mul.w	r3, r3, r2
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     a78:	1a9a      	subs	r2, r3, r2
     a7a:	440a      	add	r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
     a7c:	440b      	add	r3, r1
		pxQueue->cRxLock = queueUNLOCKED;
     a7e:	27ff      	movs	r7, #255	; 0xff
		pxQueue->pcWriteTo = pxQueue->pcHead;
     a80:	e9c4 3101 	strd	r3, r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
     a84:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
     a86:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     a8a:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
     a8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
     a92:	f7ff fcf9 	bl	488 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
     a96:	f104 0024 	add.w	r0, r4, #36	; 0x24
     a9a:	f7ff fcf5 	bl	488 <vListInitialise>
	taskEXIT_CRITICAL();
     a9e:	f001 feeb 	bl	2878 <vPortExitCritical>
		pxNewQueue->pxQueueSetContainer = NULL;
     aa2:	64a5      	str	r5, [r4, #72]	; 0x48
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
     aa4:	e9c4 5500 	strd	r5, r5, [r4]
			pxNewQueue->u.uxRecursiveCallCount = 0;
     aa8:	60e5      	str	r5, [r4, #12]
		pxNewQueue->ucQueueType = ucQueueType;
     aaa:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
     aae:	462b      	mov	r3, r5
     ab0:	462a      	mov	r2, r5
     ab2:	4629      	mov	r1, r5
     ab4:	4620      	mov	r0, r4
     ab6:	f7ff ff01 	bl	8bc <xQueueGenericSend>
	}
     aba:	4620      	mov	r0, r4
     abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     abe:	bf00      	nop

00000ac0 <xQueueGenericSendFromISR>:
{
     ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
     ac4:	2800      	cmp	r0, #0
     ac6:	d035      	beq.n	b34 <xQueueGenericSendFromISR+0x74>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     ac8:	b341      	cbz	r1, b1c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
     aca:	2b02      	cmp	r3, #2
     acc:	d10b      	bne.n	ae6 <xQueueGenericSendFromISR+0x26>
     ace:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
     ad0:	2c01      	cmp	r4, #1
     ad2:	d008      	beq.n	ae6 <xQueueGenericSendFromISR+0x26>
     ad4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     ad8:	f383 8811 	msr	BASEPRI, r3
     adc:	f3bf 8f6f 	isb	sy
     ae0:	f3bf 8f4f 	dsb	sy
     ae4:	e7fe      	b.n	ae4 <xQueueGenericSendFromISR+0x24>
     ae6:	4604      	mov	r4, r0
     ae8:	461f      	mov	r7, r3
     aea:	4690      	mov	r8, r2
     aec:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
     aee:	f002 f86f 	bl	2bd0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
     af2:	f3ef 8611 	mrs	r6, BASEPRI
     af6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     afa:	f383 8811 	msr	BASEPRI, r3
     afe:	f3bf 8f6f 	isb	sy
     b02:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
     b06:	6ba2      	ldr	r2, [r4, #56]	; 0x38
     b08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     b0a:	429a      	cmp	r2, r3
     b0c:	d31b      	bcc.n	b46 <xQueueGenericSendFromISR+0x86>
     b0e:	2f02      	cmp	r7, #2
     b10:	d019      	beq.n	b46 <xQueueGenericSendFromISR+0x86>
			xReturn = errQUEUE_FULL;
     b12:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
     b14:	f386 8811 	msr	BASEPRI, r6
}
     b18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
     b1c:	6c04      	ldr	r4, [r0, #64]	; 0x40
     b1e:	2c00      	cmp	r4, #0
     b20:	d0d3      	beq.n	aca <xQueueGenericSendFromISR+0xa>
	__asm volatile
     b22:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     b26:	f383 8811 	msr	BASEPRI, r3
     b2a:	f3bf 8f6f 	isb	sy
     b2e:	f3bf 8f4f 	dsb	sy
     b32:	e7fe      	b.n	b32 <xQueueGenericSendFromISR+0x72>
     b34:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     b38:	f383 8811 	msr	BASEPRI, r3
     b3c:	f3bf 8f6f 	isb	sy
     b40:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
     b44:	e7fe      	b.n	b44 <xQueueGenericSendFromISR+0x84>
			const int8_t cTxLock = pxQueue->cTxLock;
     b46:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     b4a:	4649      	mov	r1, r9
			const int8_t cTxLock = pxQueue->cTxLock;
     b4c:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
     b4e:	463a      	mov	r2, r7
     b50:	4620      	mov	r0, r4
     b52:	f7ff fce7 	bl	524 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
     b56:	1c6b      	adds	r3, r5, #1
     b58:	d008      	beq.n	b6c <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
     b5a:	1c6b      	adds	r3, r5, #1
     b5c:	b25b      	sxtb	r3, r3
     b5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
     b62:	2001      	movs	r0, #1
	__asm volatile
     b64:	f386 8811 	msr	BASEPRI, r6
}
     b68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( pxQueue->pxQueueSetContainer != NULL )
     b6c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     b6e:	b163      	cbz	r3, b8a <xQueueGenericSendFromISR+0xca>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
     b70:	4639      	mov	r1, r7
     b72:	4620      	mov	r0, r4
     b74:	f7ff fd12 	bl	59c <prvNotifyQueueSetContainer>
     b78:	2800      	cmp	r0, #0
     b7a:	d0f2      	beq.n	b62 <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
     b7c:	f1b8 0f00 	cmp.w	r8, #0
     b80:	d0ef      	beq.n	b62 <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
     b82:	2001      	movs	r0, #1
     b84:	f8c8 0000 	str.w	r0, [r8]
     b88:	e7c4      	b.n	b14 <xQueueGenericSendFromISR+0x54>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     b8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
     b8c:	2b00      	cmp	r3, #0
     b8e:	d0e8      	beq.n	b62 <xQueueGenericSendFromISR+0xa2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     b90:	f104 0024 	add.w	r0, r4, #36	; 0x24
     b94:	f000 ffd4 	bl	1b40 <xTaskRemoveFromEventList>
     b98:	2800      	cmp	r0, #0
     b9a:	d1ef      	bne.n	b7c <xQueueGenericSendFromISR+0xbc>
     b9c:	e7e1      	b.n	b62 <xQueueGenericSendFromISR+0xa2>
     b9e:	bf00      	nop

00000ba0 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
     ba0:	b370      	cbz	r0, c00 <xQueueGiveFromISR+0x60>
	configASSERT( pxQueue->uxItemSize == 0 );
     ba2:	6c03      	ldr	r3, [r0, #64]	; 0x40
     ba4:	b143      	cbz	r3, bb8 <xQueueGiveFromISR+0x18>
	__asm volatile
     ba6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     baa:	f383 8811 	msr	BASEPRI, r3
     bae:	f3bf 8f6f 	isb	sy
     bb2:	f3bf 8f4f 	dsb	sy
     bb6:	e7fe      	b.n	bb6 <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
     bb8:	6803      	ldr	r3, [r0, #0]
     bba:	b353      	cbz	r3, c12 <xQueueGiveFromISR+0x72>
{
     bbc:	b570      	push	{r4, r5, r6, lr}
     bbe:	4604      	mov	r4, r0
     bc0:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
     bc2:	f002 f805 	bl	2bd0 <vPortValidateInterruptPriority>
	__asm volatile
     bc6:	f3ef 8511 	mrs	r5, BASEPRI
     bca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     bce:	f383 8811 	msr	BASEPRI, r3
     bd2:	f3bf 8f6f 	isb	sy
     bd6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     bda:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
     bdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     bde:	4293      	cmp	r3, r2
     be0:	d923      	bls.n	c2a <xQueueGiveFromISR+0x8a>
			const int8_t cTxLock = pxQueue->cTxLock;
     be2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
     be6:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
     be8:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
     bea:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
     bec:	1c5a      	adds	r2, r3, #1
     bee:	d020      	beq.n	c32 <xQueueGiveFromISR+0x92>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
     bf0:	3301      	adds	r3, #1
     bf2:	b25b      	sxtb	r3, r3
     bf4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
     bf8:	2001      	movs	r0, #1
	__asm volatile
     bfa:	f385 8811 	msr	BASEPRI, r5
}
     bfe:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
     c00:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     c04:	f383 8811 	msr	BASEPRI, r3
     c08:	f3bf 8f6f 	isb	sy
     c0c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
     c10:	e7fe      	b.n	c10 <xQueueGiveFromISR+0x70>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
     c12:	6843      	ldr	r3, [r0, #4]
     c14:	2b00      	cmp	r3, #0
     c16:	d0d1      	beq.n	bbc <xQueueGiveFromISR+0x1c>
     c18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     c1c:	f383 8811 	msr	BASEPRI, r3
     c20:	f3bf 8f6f 	isb	sy
     c24:	f3bf 8f4f 	dsb	sy
     c28:	e7fe      	b.n	c28 <xQueueGiveFromISR+0x88>
			xReturn = errQUEUE_FULL;
     c2a:	2000      	movs	r0, #0
	__asm volatile
     c2c:	f385 8811 	msr	BASEPRI, r5
}
     c30:	bd70      	pop	{r4, r5, r6, pc}
					if( pxQueue->pxQueueSetContainer != NULL )
     c32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     c34:	b153      	cbz	r3, c4c <xQueueGiveFromISR+0xac>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
     c36:	4620      	mov	r0, r4
     c38:	2100      	movs	r1, #0
     c3a:	f7ff fcaf 	bl	59c <prvNotifyQueueSetContainer>
     c3e:	2800      	cmp	r0, #0
     c40:	d0da      	beq.n	bf8 <xQueueGiveFromISR+0x58>
							if( pxHigherPriorityTaskWoken != NULL )
     c42:	2e00      	cmp	r6, #0
     c44:	d0d8      	beq.n	bf8 <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
     c46:	2001      	movs	r0, #1
     c48:	6030      	str	r0, [r6, #0]
     c4a:	e7ef      	b.n	c2c <xQueueGiveFromISR+0x8c>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
     c4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
     c4e:	2b00      	cmp	r3, #0
     c50:	d0d2      	beq.n	bf8 <xQueueGiveFromISR+0x58>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
     c52:	f104 0024 	add.w	r0, r4, #36	; 0x24
     c56:	f000 ff73 	bl	1b40 <xTaskRemoveFromEventList>
     c5a:	2800      	cmp	r0, #0
     c5c:	d1f1      	bne.n	c42 <xQueueGiveFromISR+0xa2>
     c5e:	e7cb      	b.n	bf8 <xQueueGiveFromISR+0x58>

00000c60 <xQueueReceive>:
{
     c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     c64:	b085      	sub	sp, #20
     c66:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
     c68:	2800      	cmp	r0, #0
     c6a:	f000 808a 	beq.w	d82 <xQueueReceive+0x122>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
     c6e:	2900      	cmp	r1, #0
     c70:	d055      	beq.n	d1e <xQueueReceive+0xbe>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     c72:	4604      	mov	r4, r0
     c74:	460f      	mov	r7, r1
     c76:	f001 f897 	bl	1da8 <xTaskGetSchedulerState>
     c7a:	2800      	cmp	r0, #0
     c7c:	d043      	beq.n	d06 <xQueueReceive+0xa6>
		taskENTER_CRITICAL();
     c7e:	f001 fdd9 	bl	2834 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     c82:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     c84:	2d00      	cmp	r5, #0
     c86:	d167      	bne.n	d58 <xQueueReceive+0xf8>
				if( xTicksToWait == ( TickType_t ) 0 )
     c88:	9b01      	ldr	r3, [sp, #4]
     c8a:	2b00      	cmp	r3, #0
     c8c:	d035      	beq.n	cfa <xQueueReceive+0x9a>
					vTaskInternalSetTimeOutState( &xTimeOut );
     c8e:	a802      	add	r0, sp, #8
     c90:	f001 f80e 	bl	1cb0 <vTaskInternalSetTimeOutState>
					portYIELD_WITHIN_API();
     c94:	f8df 9148 	ldr.w	r9, [pc, #328]	; de0 <xQueueReceive+0x180>
		prvLockQueue( pxQueue );
     c98:	462e      	mov	r6, r5
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     c9a:	f104 0824 	add.w	r8, r4, #36	; 0x24
		taskEXIT_CRITICAL();
     c9e:	f001 fdeb 	bl	2878 <vPortExitCritical>
		vTaskSuspendAll();
     ca2:	f000 fbdf 	bl	1464 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
     ca6:	f001 fdc5 	bl	2834 <vPortEnterCritical>
     caa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
     cae:	2bff      	cmp	r3, #255	; 0xff
     cb0:	bf08      	it	eq
     cb2:	f884 6044 	strbeq.w	r6, [r4, #68]	; 0x44
     cb6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
     cba:	2bff      	cmp	r3, #255	; 0xff
     cbc:	bf08      	it	eq
     cbe:	f884 6045 	strbeq.w	r6, [r4, #69]	; 0x45
     cc2:	f001 fdd9 	bl	2878 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     cc6:	a901      	add	r1, sp, #4
     cc8:	a802      	add	r0, sp, #8
     cca:	f000 fffd 	bl	1cc8 <xTaskCheckForTimeOut>
     cce:	2800      	cmp	r0, #0
     cd0:	d131      	bne.n	d36 <xQueueReceive+0xd6>
	taskENTER_CRITICAL();
     cd2:	f001 fdaf 	bl	2834 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
     cd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     cd8:	2b00      	cmp	r3, #0
     cda:	d05b      	beq.n	d94 <xQueueReceive+0x134>
	taskEXIT_CRITICAL();
     cdc:	f001 fdcc 	bl	2878 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
     ce0:	4620      	mov	r0, r4
     ce2:	f7ff fc99 	bl	618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
     ce6:	f000 fd19 	bl	171c <xTaskResumeAll>
		taskENTER_CRITICAL();
     cea:	f001 fda3 	bl	2834 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     cee:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     cf0:	2d00      	cmp	r5, #0
     cf2:	d131      	bne.n	d58 <xQueueReceive+0xf8>
				if( xTicksToWait == ( TickType_t ) 0 )
     cf4:	9b01      	ldr	r3, [sp, #4]
     cf6:	2b00      	cmp	r3, #0
     cf8:	d1d1      	bne.n	c9e <xQueueReceive+0x3e>
					taskEXIT_CRITICAL();
     cfa:	f001 fdbd 	bl	2878 <vPortExitCritical>
					return errQUEUE_EMPTY;
     cfe:	2000      	movs	r0, #0
}
     d00:	b005      	add	sp, #20
     d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     d06:	9b01      	ldr	r3, [sp, #4]
     d08:	2b00      	cmp	r3, #0
     d0a:	d0b8      	beq.n	c7e <xQueueReceive+0x1e>
	__asm volatile
     d0c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     d10:	f383 8811 	msr	BASEPRI, r3
     d14:	f3bf 8f6f 	isb	sy
     d18:	f3bf 8f4f 	dsb	sy
     d1c:	e7fe      	b.n	d1c <xQueueReceive+0xbc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
     d1e:	6c03      	ldr	r3, [r0, #64]	; 0x40
     d20:	2b00      	cmp	r3, #0
     d22:	d0a6      	beq.n	c72 <xQueueReceive+0x12>
     d24:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     d28:	f383 8811 	msr	BASEPRI, r3
     d2c:	f3bf 8f6f 	isb	sy
     d30:	f3bf 8f4f 	dsb	sy
     d34:	e7fe      	b.n	d34 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
     d36:	4620      	mov	r0, r4
     d38:	f7ff fc6e 	bl	618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
     d3c:	f000 fcee 	bl	171c <xTaskResumeAll>
	taskENTER_CRITICAL();
     d40:	f001 fd78 	bl	2834 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
     d44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     d46:	2b00      	cmp	r3, #0
     d48:	d0d7      	beq.n	cfa <xQueueReceive+0x9a>
	taskEXIT_CRITICAL();
     d4a:	f001 fd95 	bl	2878 <vPortExitCritical>
		taskENTER_CRITICAL();
     d4e:	f001 fd71 	bl	2834 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     d52:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     d54:	2d00      	cmp	r5, #0
     d56:	d0cd      	beq.n	cf4 <xQueueReceive+0x94>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
     d58:	6c22      	ldr	r2, [r4, #64]	; 0x40
     d5a:	b152      	cbz	r2, d72 <xQueueReceive+0x112>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     d5c:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
     d5e:	6863      	ldr	r3, [r4, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     d60:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
     d62:	4299      	cmp	r1, r3
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
     d64:	60e1      	str	r1, [r4, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
     d66:	bf24      	itt	cs
     d68:	6821      	ldrcs	r1, [r4, #0]
     d6a:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
     d6c:	4638      	mov	r0, r7
     d6e:	f009 fed6 	bl	ab1e <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
     d72:	3d01      	subs	r5, #1
     d74:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     d76:	6923      	ldr	r3, [r4, #16]
     d78:	bb13      	cbnz	r3, dc0 <xQueueReceive+0x160>
				taskEXIT_CRITICAL();
     d7a:	f001 fd7d 	bl	2878 <vPortExitCritical>
				return pdPASS;
     d7e:	2001      	movs	r0, #1
     d80:	e7be      	b.n	d00 <xQueueReceive+0xa0>
     d82:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     d86:	f383 8811 	msr	BASEPRI, r3
     d8a:	f3bf 8f6f 	isb	sy
     d8e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
     d92:	e7fe      	b.n	d92 <xQueueReceive+0x132>
	taskEXIT_CRITICAL();
     d94:	f001 fd70 	bl	2878 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     d98:	9901      	ldr	r1, [sp, #4]
     d9a:	4640      	mov	r0, r8
     d9c:	f000 fdea 	bl	1974 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
     da0:	4620      	mov	r0, r4
     da2:	f7ff fc39 	bl	618 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
     da6:	f000 fcb9 	bl	171c <xTaskResumeAll>
     daa:	2800      	cmp	r0, #0
     dac:	d1cf      	bne.n	d4e <xQueueReceive+0xee>
					portYIELD_WITHIN_API();
     dae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     db2:	f8c9 3000 	str.w	r3, [r9]
     db6:	f3bf 8f4f 	dsb	sy
     dba:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
     dbe:	e7c6      	b.n	d4e <xQueueReceive+0xee>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     dc0:	f104 0010 	add.w	r0, r4, #16
     dc4:	f000 febc 	bl	1b40 <xTaskRemoveFromEventList>
     dc8:	2800      	cmp	r0, #0
     dca:	d0d6      	beq.n	d7a <xQueueReceive+0x11a>
						queueYIELD_IF_USING_PREEMPTION();
     dcc:	4b04      	ldr	r3, [pc, #16]	; (de0 <xQueueReceive+0x180>)
     dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     dd2:	601a      	str	r2, [r3, #0]
     dd4:	f3bf 8f4f 	dsb	sy
     dd8:	f3bf 8f6f 	isb	sy
     ddc:	e7cd      	b.n	d7a <xQueueReceive+0x11a>
     dde:	bf00      	nop
     de0:	e000ed04 	.word	0xe000ed04

00000de4 <xQueueSemaphoreTake>:
{
     de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     de8:	b084      	sub	sp, #16
     dea:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
     dec:	b150      	cbz	r0, e04 <xQueueSemaphoreTake+0x20>
	configASSERT( pxQueue->uxItemSize == 0 );
     dee:	6c05      	ldr	r5, [r0, #64]	; 0x40
     df0:	b18d      	cbz	r5, e16 <xQueueSemaphoreTake+0x32>
     df2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     df6:	f383 8811 	msr	BASEPRI, r3
     dfa:	f3bf 8f6f 	isb	sy
     dfe:	f3bf 8f4f 	dsb	sy
     e02:	e7fe      	b.n	e02 <xQueueSemaphoreTake+0x1e>
     e04:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     e08:	f383 8811 	msr	BASEPRI, r3
     e0c:	f3bf 8f6f 	isb	sy
     e10:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
     e14:	e7fe      	b.n	e14 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     e16:	4604      	mov	r4, r0
     e18:	f000 ffc6 	bl	1da8 <xTaskGetSchedulerState>
     e1c:	2800      	cmp	r0, #0
     e1e:	d05c      	beq.n	eda <xQueueSemaphoreTake+0xf6>
		taskENTER_CRITICAL();
     e20:	f001 fd08 	bl	2834 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
     e24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
					portYIELD_WITHIN_API();
     e26:	f8df 816c 	ldr.w	r8, [pc, #364]	; f94 <xQueueSemaphoreTake+0x1b0>
     e2a:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
     e2c:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
     e2e:	bb83      	cbnz	r3, e92 <xQueueSemaphoreTake+0xae>
				if( xTicksToWait == ( TickType_t ) 0 )
     e30:	9b01      	ldr	r3, [sp, #4]
     e32:	2b00      	cmp	r3, #0
     e34:	f000 80a1 	beq.w	f7a <xQueueSemaphoreTake+0x196>
				else if( xEntryTimeSet == pdFALSE )
     e38:	2e00      	cmp	r6, #0
     e3a:	d042      	beq.n	ec2 <xQueueSemaphoreTake+0xde>
		taskEXIT_CRITICAL();
     e3c:	f001 fd1c 	bl	2878 <vPortExitCritical>
		vTaskSuspendAll();
     e40:	f000 fb10 	bl	1464 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
     e44:	f001 fcf6 	bl	2834 <vPortEnterCritical>
     e48:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
     e4c:	2bff      	cmp	r3, #255	; 0xff
     e4e:	bf08      	it	eq
     e50:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
     e54:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
     e58:	2bff      	cmp	r3, #255	; 0xff
     e5a:	bf08      	it	eq
     e5c:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
     e60:	f001 fd0a 	bl	2878 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     e64:	a901      	add	r1, sp, #4
     e66:	a802      	add	r0, sp, #8
     e68:	f000 ff2e 	bl	1cc8 <xTaskCheckForTimeOut>
     e6c:	b9e8      	cbnz	r0, eaa <xQueueSemaphoreTake+0xc6>
	taskENTER_CRITICAL();
     e6e:	f001 fce1 	bl	2834 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
     e72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     e74:	2b00      	cmp	r3, #0
     e76:	d03c      	beq.n	ef2 <xQueueSemaphoreTake+0x10e>
	taskEXIT_CRITICAL();
     e78:	f001 fcfe 	bl	2878 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
     e7c:	4620      	mov	r0, r4
     e7e:	f7ff fbcb 	bl	618 <prvUnlockQueue>
				( void ) xTaskResumeAll();
     e82:	f000 fc4b 	bl	171c <xTaskResumeAll>
		taskENTER_CRITICAL();
     e86:	f001 fcd5 	bl	2834 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
     e8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     e8c:	2601      	movs	r6, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
     e8e:	2b00      	cmp	r3, #0
     e90:	d0ce      	beq.n	e30 <xQueueSemaphoreTake+0x4c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     e92:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
     e94:	3b01      	subs	r3, #1
     e96:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     e98:	2a00      	cmp	r2, #0
     e9a:	d05b      	beq.n	f54 <xQueueSemaphoreTake+0x170>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     e9c:	6923      	ldr	r3, [r4, #16]
     e9e:	2b00      	cmp	r3, #0
     ea0:	d149      	bne.n	f36 <xQueueSemaphoreTake+0x152>
				taskEXIT_CRITICAL();
     ea2:	f001 fce9 	bl	2878 <vPortExitCritical>
				return pdPASS;
     ea6:	2501      	movs	r5, #1
     ea8:	e013      	b.n	ed2 <xQueueSemaphoreTake+0xee>
			prvUnlockQueue( pxQueue );
     eaa:	4620      	mov	r0, r4
     eac:	f7ff fbb4 	bl	618 <prvUnlockQueue>
			( void ) xTaskResumeAll();
     eb0:	f000 fc34 	bl	171c <xTaskResumeAll>
	taskENTER_CRITICAL();
     eb4:	f001 fcbe 	bl	2834 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
     eb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
     eba:	b133      	cbz	r3, eca <xQueueSemaphoreTake+0xe6>
	taskEXIT_CRITICAL();
     ebc:	f001 fcdc 	bl	2878 <vPortExitCritical>
	return xReturn;
     ec0:	e7e1      	b.n	e86 <xQueueSemaphoreTake+0xa2>
					vTaskInternalSetTimeOutState( &xTimeOut );
     ec2:	a802      	add	r0, sp, #8
     ec4:	f000 fef4 	bl	1cb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
     ec8:	e7b8      	b.n	e3c <xQueueSemaphoreTake+0x58>
	taskEXIT_CRITICAL();
     eca:	f001 fcd5 	bl	2878 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
     ece:	2d00      	cmp	r5, #0
     ed0:	d144      	bne.n	f5c <xQueueSemaphoreTake+0x178>
}
     ed2:	4628      	mov	r0, r5
     ed4:	b004      	add	sp, #16
     ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
     eda:	9d01      	ldr	r5, [sp, #4]
     edc:	2d00      	cmp	r5, #0
     ede:	d09f      	beq.n	e20 <xQueueSemaphoreTake+0x3c>
     ee0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     ee4:	f383 8811 	msr	BASEPRI, r3
     ee8:	f3bf 8f6f 	isb	sy
     eec:	f3bf 8f4f 	dsb	sy
     ef0:	e7fe      	b.n	ef0 <xQueueSemaphoreTake+0x10c>
	taskEXIT_CRITICAL();
     ef2:	f001 fcc1 	bl	2878 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
     ef6:	6823      	ldr	r3, [r4, #0]
     ef8:	b1a3      	cbz	r3, f24 <xQueueSemaphoreTake+0x140>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     efa:	9901      	ldr	r1, [sp, #4]
     efc:	f104 0024 	add.w	r0, r4, #36	; 0x24
     f00:	f000 fd38 	bl	1974 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
     f04:	4620      	mov	r0, r4
     f06:	f7ff fb87 	bl	618 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
     f0a:	f000 fc07 	bl	171c <xTaskResumeAll>
     f0e:	2800      	cmp	r0, #0
     f10:	d1b9      	bne.n	e86 <xQueueSemaphoreTake+0xa2>
					portYIELD_WITHIN_API();
     f12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     f16:	f8c8 3000 	str.w	r3, [r8]
     f1a:	f3bf 8f4f 	dsb	sy
     f1e:	f3bf 8f6f 	isb	sy
     f22:	e7b0      	b.n	e86 <xQueueSemaphoreTake+0xa2>
						taskENTER_CRITICAL();
     f24:	f001 fc86 	bl	2834 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
     f28:	6860      	ldr	r0, [r4, #4]
     f2a:	f000 ff4d 	bl	1dc8 <xTaskPriorityInherit>
     f2e:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
     f30:	f001 fca2 	bl	2878 <vPortExitCritical>
     f34:	e7e1      	b.n	efa <xQueueSemaphoreTake+0x116>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     f36:	f104 0010 	add.w	r0, r4, #16
     f3a:	f000 fe01 	bl	1b40 <xTaskRemoveFromEventList>
     f3e:	2800      	cmp	r0, #0
     f40:	d0af      	beq.n	ea2 <xQueueSemaphoreTake+0xbe>
						queueYIELD_IF_USING_PREEMPTION();
     f42:	4b14      	ldr	r3, [pc, #80]	; (f94 <xQueueSemaphoreTake+0x1b0>)
     f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     f48:	601a      	str	r2, [r3, #0]
     f4a:	f3bf 8f4f 	dsb	sy
     f4e:	f3bf 8f6f 	isb	sy
     f52:	e7a6      	b.n	ea2 <xQueueSemaphoreTake+0xbe>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
     f54:	f001 f81a 	bl	1f8c <pvTaskIncrementMutexHeldCount>
     f58:	6060      	str	r0, [r4, #4]
     f5a:	e79f      	b.n	e9c <xQueueSemaphoreTake+0xb8>
						taskENTER_CRITICAL();
     f5c:	f001 fc6a 	bl	2834 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
     f60:	6a61      	ldr	r1, [r4, #36]	; 0x24
     f62:	b119      	cbz	r1, f6c <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
     f64:	6b23      	ldr	r3, [r4, #48]	; 0x30
     f66:	6819      	ldr	r1, [r3, #0]
     f68:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
     f6c:	6860      	ldr	r0, [r4, #4]
     f6e:	f000 ffb1 	bl	1ed4 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
     f72:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
     f74:	f001 fc80 	bl	2878 <vPortExitCritical>
     f78:	e7ab      	b.n	ed2 <xQueueSemaphoreTake+0xee>
						configASSERT( xInheritanceOccurred == pdFALSE );
     f7a:	b145      	cbz	r5, f8e <xQueueSemaphoreTake+0x1aa>
     f7c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     f80:	f383 8811 	msr	BASEPRI, r3
     f84:	f3bf 8f6f 	isb	sy
     f88:	f3bf 8f4f 	dsb	sy
     f8c:	e7fe      	b.n	f8c <xQueueSemaphoreTake+0x1a8>
					taskEXIT_CRITICAL();
     f8e:	f001 fc73 	bl	2878 <vPortExitCritical>
					return errQUEUE_EMPTY;
     f92:	e79e      	b.n	ed2 <xQueueSemaphoreTake+0xee>
     f94:	e000ed04 	.word	0xe000ed04

00000f98 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
     f98:	b140      	cbz	r0, fac <uxQueueMessagesWaiting+0x14>
{
     f9a:	b510      	push	{r4, lr}
     f9c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
     f9e:	f001 fc49 	bl	2834 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
     fa2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
     fa4:	f001 fc68 	bl	2878 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
     fa8:	4620      	mov	r0, r4
     faa:	bd10      	pop	{r4, pc}
     fac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     fb0:	f383 8811 	msr	BASEPRI, r3
     fb4:	f3bf 8f6f 	isb	sy
     fb8:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
     fbc:	e7fe      	b.n	fbc <uxQueueMessagesWaiting+0x24>
     fbe:	bf00      	nop

00000fc0 <xQueueIsQueueFullFromISR>:
	configASSERT( xQueue );
     fc0:	b130      	cbz	r0, fd0 <xQueueIsQueueFullFromISR+0x10>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
     fc2:	6b83      	ldr	r3, [r0, #56]	; 0x38
     fc4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     fc6:	1ac0      	subs	r0, r0, r3
     fc8:	fab0 f080 	clz	r0, r0
     fcc:	0940      	lsrs	r0, r0, #5
     fce:	4770      	bx	lr
     fd0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
     fd4:	f383 8811 	msr	BASEPRI, r3
     fd8:	f3bf 8f6f 	isb	sy
     fdc:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
     fe0:	e7fe      	b.n	fe0 <xQueueIsQueueFullFromISR+0x20>
     fe2:	bf00      	nop

00000fe4 <vQueueWaitForMessageRestricted>:
	{
     fe4:	b570      	push	{r4, r5, r6, lr}
     fe6:	4604      	mov	r4, r0
     fe8:	460d      	mov	r5, r1
     fea:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
     fec:	f001 fc22 	bl	2834 <vPortEnterCritical>
     ff0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
     ff4:	2bff      	cmp	r3, #255	; 0xff
     ff6:	bf04      	itt	eq
     ff8:	2300      	moveq	r3, #0
     ffa:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
     ffe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    1002:	2bff      	cmp	r3, #255	; 0xff
    1004:	bf04      	itt	eq
    1006:	2300      	moveq	r3, #0
    1008:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    100c:	f001 fc34 	bl	2878 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1010:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1012:	b123      	cbz	r3, 101e <vQueueWaitForMessageRestricted+0x3a>
		prvUnlockQueue( pxQueue );
    1014:	4620      	mov	r0, r4
	}
    1016:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
    101a:	f7ff bafd 	b.w	618 <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    101e:	f104 0024 	add.w	r0, r4, #36	; 0x24
    1022:	4632      	mov	r2, r6
    1024:	4629      	mov	r1, r5
    1026:	f000 fd41 	bl	1aac <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
    102a:	4620      	mov	r0, r4
	}
    102c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
    1030:	f7ff baf2 	b.w	618 <prvUnlockQueue>

00001034 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    1034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1038:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    103a:	f001 fbfb 	bl	2834 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
    103e:	4a33      	ldr	r2, [pc, #204]	; (110c <prvAddNewTaskToReadyList+0xd8>)
		if( pxCurrentTCB == NULL )
    1040:	4d33      	ldr	r5, [pc, #204]	; (1110 <prvAddNewTaskToReadyList+0xdc>)
		uxCurrentNumberOfTasks++;
    1042:	6813      	ldr	r3, [r2, #0]
    1044:	3301      	adds	r3, #1
    1046:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    1048:	682b      	ldr	r3, [r5, #0]
    104a:	2b00      	cmp	r3, #0
    104c:	d02e      	beq.n	10ac <prvAddNewTaskToReadyList+0x78>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    104e:	4e31      	ldr	r6, [pc, #196]	; (1114 <prvAddNewTaskToReadyList+0xe0>)
    1050:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1052:	6832      	ldr	r2, [r6, #0]
    1054:	b322      	cbz	r2, 10a0 <prvAddNewTaskToReadyList+0x6c>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    1056:	4830      	ldr	r0, [pc, #192]	; (1118 <prvAddNewTaskToReadyList+0xe4>)
		uxTaskNumber++;
    1058:	4930      	ldr	r1, [pc, #192]	; (111c <prvAddNewTaskToReadyList+0xe8>)
		prvAddTaskToReadyList( pxNewTCB );
    105a:	6807      	ldr	r7, [r0, #0]
		uxTaskNumber++;
    105c:	680a      	ldr	r2, [r1, #0]
		prvAddTaskToReadyList( pxNewTCB );
    105e:	429f      	cmp	r7, r3
    1060:	bf38      	it	cc
    1062:	6003      	strcc	r3, [r0, #0]
    1064:	482e      	ldr	r0, [pc, #184]	; (1120 <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;
    1066:	3201      	adds	r2, #1
		prvAddTaskToReadyList( pxNewTCB );
    1068:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		uxTaskNumber++;
    106c:	600a      	str	r2, [r1, #0]
		prvAddTaskToReadyList( pxNewTCB );
    106e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    1072:	6422      	str	r2, [r4, #64]	; 0x40
		prvAddTaskToReadyList( pxNewTCB );
    1074:	1d21      	adds	r1, r4, #4
    1076:	f7ff fa17 	bl	4a8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    107a:	f001 fbfd 	bl	2878 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
    107e:	6833      	ldr	r3, [r6, #0]
    1080:	b163      	cbz	r3, 109c <prvAddNewTaskToReadyList+0x68>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    1082:	682a      	ldr	r2, [r5, #0]
    1084:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1086:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1088:	429a      	cmp	r2, r3
    108a:	d207      	bcs.n	109c <prvAddNewTaskToReadyList+0x68>
		{
			taskYIELD_IF_USING_PREEMPTION();
    108c:	4b25      	ldr	r3, [pc, #148]	; (1124 <prvAddNewTaskToReadyList+0xf0>)
    108e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1092:	601a      	str	r2, [r3, #0]
    1094:	f3bf 8f4f 	dsb	sy
    1098:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    109c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    10a0:	682a      	ldr	r2, [r5, #0]
    10a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    10a4:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
    10a6:	bf98      	it	ls
    10a8:	602c      	strls	r4, [r5, #0]
    10aa:	e7d4      	b.n	1056 <prvAddNewTaskToReadyList+0x22>
			pxCurrentTCB = pxNewTCB;
    10ac:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    10ae:	6813      	ldr	r3, [r2, #0]
    10b0:	2b01      	cmp	r3, #1
    10b2:	d002      	beq.n	10ba <prvAddNewTaskToReadyList+0x86>
    10b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    10b6:	4e17      	ldr	r6, [pc, #92]	; (1114 <prvAddNewTaskToReadyList+0xe0>)
    10b8:	e7cd      	b.n	1056 <prvAddNewTaskToReadyList+0x22>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    10ba:	4819      	ldr	r0, [pc, #100]	; (1120 <prvAddNewTaskToReadyList+0xec>)
	}

	vListInitialise( &xDelayedTaskList1 );
    10bc:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1150 <prvAddNewTaskToReadyList+0x11c>
	vListInitialise( &xDelayedTaskList2 );
    10c0:	4f19      	ldr	r7, [pc, #100]	; (1128 <prvAddNewTaskToReadyList+0xf4>)
    10c2:	4e14      	ldr	r6, [pc, #80]	; (1114 <prvAddNewTaskToReadyList+0xe0>)
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    10c4:	f7ff f9e0 	bl	488 <vListInitialise>
    10c8:	4818      	ldr	r0, [pc, #96]	; (112c <prvAddNewTaskToReadyList+0xf8>)
    10ca:	f7ff f9dd 	bl	488 <vListInitialise>
    10ce:	4818      	ldr	r0, [pc, #96]	; (1130 <prvAddNewTaskToReadyList+0xfc>)
    10d0:	f7ff f9da 	bl	488 <vListInitialise>
    10d4:	4817      	ldr	r0, [pc, #92]	; (1134 <prvAddNewTaskToReadyList+0x100>)
    10d6:	f7ff f9d7 	bl	488 <vListInitialise>
    10da:	4817      	ldr	r0, [pc, #92]	; (1138 <prvAddNewTaskToReadyList+0x104>)
    10dc:	f7ff f9d4 	bl	488 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
    10e0:	4640      	mov	r0, r8
    10e2:	f7ff f9d1 	bl	488 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    10e6:	4638      	mov	r0, r7
    10e8:	f7ff f9ce 	bl	488 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    10ec:	4813      	ldr	r0, [pc, #76]	; (113c <prvAddNewTaskToReadyList+0x108>)
    10ee:	f7ff f9cb 	bl	488 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    10f2:	4813      	ldr	r0, [pc, #76]	; (1140 <prvAddNewTaskToReadyList+0x10c>)
    10f4:	f7ff f9c8 	bl	488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    10f8:	4812      	ldr	r0, [pc, #72]	; (1144 <prvAddNewTaskToReadyList+0x110>)
    10fa:	f7ff f9c5 	bl	488 <vListInitialise>
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    10fe:	4b12      	ldr	r3, [pc, #72]	; (1148 <prvAddNewTaskToReadyList+0x114>)
	pxDelayedTaskList = &xDelayedTaskList1;
    1100:	4a12      	ldr	r2, [pc, #72]	; (114c <prvAddNewTaskToReadyList+0x118>)
    1102:	f8c2 8000 	str.w	r8, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1106:	601f      	str	r7, [r3, #0]
    1108:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    110a:	e7a4      	b.n	1056 <prvAddNewTaskToReadyList+0x22>
    110c:	0000caf0 	.word	0x0000caf0
    1110:	0000ca80 	.word	0x0000ca80
    1114:	0000cb4c 	.word	0x0000cb4c
    1118:	0000cb04 	.word	0x0000cb04
    111c:	0000cb00 	.word	0x0000cb00
    1120:	0000ca8c 	.word	0x0000ca8c
    1124:	e000ed04 	.word	0xe000ed04
    1128:	0000cb1c 	.word	0x0000cb1c
    112c:	0000caa0 	.word	0x0000caa0
    1130:	0000cab4 	.word	0x0000cab4
    1134:	0000cac8 	.word	0x0000cac8
    1138:	0000cadc 	.word	0x0000cadc
    113c:	0000cb38 	.word	0x0000cb38
    1140:	0000cb64 	.word	0x0000cb64
    1144:	0000cb50 	.word	0x0000cb50
    1148:	0000ca88 	.word	0x0000ca88
    114c:	0000ca84 	.word	0x0000ca84
    1150:	0000cb08 	.word	0x0000cb08

00001154 <xTaskCreateStatic>:
	{
    1154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1158:	b082      	sub	sp, #8
    115a:	e9dd 740b 	ldrd	r7, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
    115e:	b1bf      	cbz	r7, 1190 <xTaskCreateStatic+0x3c>
		configASSERT( pxTaskBuffer != NULL );
    1160:	b16c      	cbz	r4, 117e <xTaskCreateStatic+0x2a>
			volatile size_t xSize = sizeof( StaticTask_t );
    1162:	2558      	movs	r5, #88	; 0x58
    1164:	9501      	str	r5, [sp, #4]
			configASSERT( xSize == sizeof( TCB_t ) );
    1166:	9d01      	ldr	r5, [sp, #4]
    1168:	2d58      	cmp	r5, #88	; 0x58
    116a:	d01a      	beq.n	11a2 <xTaskCreateStatic+0x4e>
    116c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    1170:	f383 8811 	msr	BASEPRI, r3
    1174:	f3bf 8f6f 	isb	sy
    1178:	f3bf 8f4f 	dsb	sy
    117c:	e7fe      	b.n	117c <xTaskCreateStatic+0x28>
    117e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    1182:	f383 8811 	msr	BASEPRI, r3
    1186:	f3bf 8f6f 	isb	sy
    118a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
    118e:	e7fe      	b.n	118e <xTaskCreateStatic+0x3a>
    1190:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    1194:	f383 8811 	msr	BASEPRI, r3
    1198:	f3bf 8f6f 	isb	sy
    119c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
    11a0:	e7fe      	b.n	11a0 <xTaskCreateStatic+0x4c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    11a2:	0096      	lsls	r6, r2, #2
    11a4:	4699      	mov	r9, r3
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
    11a6:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    11a8:	4632      	mov	r2, r6
    11aa:	460d      	mov	r5, r1
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
    11ac:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
    11b0:	4680      	mov	r8, r0
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
    11b2:	6327      	str	r7, [r4, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    11b4:	4638      	mov	r0, r7
    11b6:	21a5      	movs	r1, #165	; 0xa5
    11b8:	f009 fcd9 	bl	ab6e <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    11bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    11be:	782a      	ldrb	r2, [r5, #0]
    11c0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    11c4:	3e04      	subs	r6, #4
    11c6:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    11c8:	f026 0a07 	bic.w	sl, r6, #7
		if( pcName[ x ] == 0x00 )
    11cc:	b1f2      	cbz	r2, 120c <xTaskCreateStatic+0xb8>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    11ce:	786b      	ldrb	r3, [r5, #1]
    11d0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
    11d4:	b1d3      	cbz	r3, 120c <xTaskCreateStatic+0xb8>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    11d6:	78ab      	ldrb	r3, [r5, #2]
    11d8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
    11dc:	b1b3      	cbz	r3, 120c <xTaskCreateStatic+0xb8>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    11de:	78eb      	ldrb	r3, [r5, #3]
    11e0:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
    11e4:	b193      	cbz	r3, 120c <xTaskCreateStatic+0xb8>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    11e6:	792b      	ldrb	r3, [r5, #4]
    11e8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
    11ec:	b173      	cbz	r3, 120c <xTaskCreateStatic+0xb8>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    11ee:	796b      	ldrb	r3, [r5, #5]
    11f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
    11f4:	b153      	cbz	r3, 120c <xTaskCreateStatic+0xb8>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    11f6:	79ab      	ldrb	r3, [r5, #6]
    11f8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
    11fc:	b133      	cbz	r3, 120c <xTaskCreateStatic+0xb8>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    11fe:	79eb      	ldrb	r3, [r5, #7]
    1200:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
    1204:	b113      	cbz	r3, 120c <xTaskCreateStatic+0xb8>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    1206:	7a2b      	ldrb	r3, [r5, #8]
    1208:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    120c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    120e:	2d04      	cmp	r5, #4
    1210:	bf28      	it	cs
    1212:	2504      	movcs	r5, #4
    1214:	2600      	movs	r6, #0
	pxNewTCB->uxPriority = uxPriority;
    1216:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    1218:	64a5      	str	r5, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    121a:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    121c:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
		pxNewTCB->uxMutexesHeld = 0;
    1220:	64e6      	str	r6, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    1222:	f7ff f93d 	bl	4a0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1226:	f1c5 0505 	rsb	r5, r5, #5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    122a:	f104 0018 	add.w	r0, r4, #24
    122e:	f7ff f937 	bl	4a0 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
    1232:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1234:	464a      	mov	r2, r9
    1236:	4641      	mov	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1238:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    123a:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    123c:	f884 6054 	strb.w	r6, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    1240:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1242:	4650      	mov	r0, sl
    1244:	f001 face 	bl	27e4 <pxPortInitialiseStack>
    1248:	6020      	str	r0, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
    124a:	4620      	mov	r0, r4
    124c:	f7ff fef2 	bl	1034 <prvAddNewTaskToReadyList>
	}
    1250:	4620      	mov	r0, r4
    1252:	b002      	add	sp, #8
    1254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00001258 <xTaskCreate>:
	{
    1258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    125c:	0096      	lsls	r6, r2, #2
	{
    125e:	4607      	mov	r7, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1260:	4630      	mov	r0, r6
	{
    1262:	460d      	mov	r5, r1
    1264:	4698      	mov	r8, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1266:	f001 f977 	bl	2558 <pvPortMalloc>
			if( pxStack != NULL )
    126a:	2800      	cmp	r0, #0
    126c:	d063      	beq.n	1336 <xTaskCreate+0xde>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    126e:	4681      	mov	r9, r0
    1270:	2058      	movs	r0, #88	; 0x58
    1272:	f001 f971 	bl	2558 <pvPortMalloc>
				if( pxNewTCB != NULL )
    1276:	4604      	mov	r4, r0
    1278:	2800      	cmp	r0, #0
    127a:	d060      	beq.n	133e <xTaskCreate+0xe6>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
    127c:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
    127e:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    1282:	4632      	mov	r2, r6
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
    1284:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    1288:	4648      	mov	r0, r9
    128a:	21a5      	movs	r1, #165	; 0xa5
    128c:	f009 fc6f 	bl	ab6e <memset>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    1290:	782b      	ldrb	r3, [r5, #0]
    1292:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    1296:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
		if( pcName[ x ] == 0x00 )
    129a:	b1f3      	cbz	r3, 12da <xTaskCreate+0x82>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    129c:	786b      	ldrb	r3, [r5, #1]
    129e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
    12a2:	b1d3      	cbz	r3, 12da <xTaskCreate+0x82>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    12a4:	78ab      	ldrb	r3, [r5, #2]
    12a6:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
    12aa:	b1b3      	cbz	r3, 12da <xTaskCreate+0x82>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    12ac:	78eb      	ldrb	r3, [r5, #3]
    12ae:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
    12b2:	b193      	cbz	r3, 12da <xTaskCreate+0x82>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    12b4:	792b      	ldrb	r3, [r5, #4]
    12b6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
    12ba:	b173      	cbz	r3, 12da <xTaskCreate+0x82>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    12bc:	796b      	ldrb	r3, [r5, #5]
    12be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
    12c2:	b153      	cbz	r3, 12da <xTaskCreate+0x82>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    12c4:	79ab      	ldrb	r3, [r5, #6]
    12c6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
    12ca:	b133      	cbz	r3, 12da <xTaskCreate+0x82>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    12cc:	79eb      	ldrb	r3, [r5, #7]
    12ce:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
    12d2:	b113      	cbz	r3, 12da <xTaskCreate+0x82>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    12d4:	7a2b      	ldrb	r3, [r5, #8]
    12d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    12da:	9d08      	ldr	r5, [sp, #32]
    12dc:	2d04      	cmp	r5, #4
    12de:	bf28      	it	cs
    12e0:	2504      	movcs	r5, #4
    12e2:	f04f 0900 	mov.w	r9, #0
	pxNewTCB->uxPriority = uxPriority;
    12e6:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    12e8:	64a5      	str	r5, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    12ea:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    12ec:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
		pxNewTCB->uxMutexesHeld = 0;
    12f0:	f8c4 904c 	str.w	r9, [r4, #76]	; 0x4c
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    12f4:	3e04      	subs	r6, #4
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    12f6:	f7ff f8d3 	bl	4a0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    12fa:	f1c5 0505 	rsb	r5, r5, #5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    12fe:	f104 0018 	add.w	r0, r4, #24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    1302:	4456      	add	r6, sl
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    1304:	f7ff f8cc 	bl	4a0 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
    1308:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    130c:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    130e:	f026 0007 	bic.w	r0, r6, #7
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    1312:	f884 9054 	strb.w	r9, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    1316:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    1318:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    131a:	4642      	mov	r2, r8
    131c:	4639      	mov	r1, r7
    131e:	f001 fa61 	bl	27e4 <pxPortInitialiseStack>
	if( ( void * ) pxCreatedTask != NULL )
    1322:	9b09      	ldr	r3, [sp, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    1324:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
    1326:	b103      	cbz	r3, 132a <xTaskCreate+0xd2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    1328:	601c      	str	r4, [r3, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
    132a:	4620      	mov	r0, r4
    132c:	f7ff fe82 	bl	1034 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    1330:	2001      	movs	r0, #1
	}
    1332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1336:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
    133a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					vPortFree( pxStack );
    133e:	4648      	mov	r0, r9
    1340:	f001 f9ba 	bl	26b8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1348:	e7f3      	b.n	1332 <xTaskCreate+0xda>
    134a:	bf00      	nop

0000134c <vTaskStartScheduler>:
{
    134c:	b570      	push	{r4, r5, r6, lr}
    134e:	b084      	sub	sp, #16
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
    1350:	4668      	mov	r0, sp
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
    1352:	2500      	movs	r5, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
    1354:	aa02      	add	r2, sp, #8
    1356:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
    1358:	e9cd 5500 	strd	r5, r5, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
    135c:	f006 fb40 	bl	79e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
    1360:	9801      	ldr	r0, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
    1362:	b1c8      	cbz	r0, 1398 <vTaskStartScheduler+0x4c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
    1364:	9c00      	ldr	r4, [sp, #0]
		configASSERT( pxTaskBuffer != NULL );
    1366:	b174      	cbz	r4, 1386 <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
    1368:	2358      	movs	r3, #88	; 0x58
    136a:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
    136c:	9b03      	ldr	r3, [sp, #12]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
    136e:	9e02      	ldr	r6, [sp, #8]
			configASSERT( xSize == sizeof( TCB_t ) );
    1370:	2b58      	cmp	r3, #88	; 0x58
    1372:	d01a      	beq.n	13aa <vTaskStartScheduler+0x5e>
    1374:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    1378:	f383 8811 	msr	BASEPRI, r3
    137c:	f3bf 8f6f 	isb	sy
    1380:	f3bf 8f4f 	dsb	sy
    1384:	e7fe      	b.n	1384 <vTaskStartScheduler+0x38>
    1386:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    138a:	f383 8811 	msr	BASEPRI, r3
    138e:	f3bf 8f6f 	isb	sy
    1392:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
    1396:	e7fe      	b.n	1396 <vTaskStartScheduler+0x4a>
    1398:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    139c:	f383 8811 	msr	BASEPRI, r3
    13a0:	f3bf 8f6f 	isb	sy
    13a4:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
    13a8:	e7fe      	b.n	13a8 <vTaskStartScheduler+0x5c>
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
    13aa:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    13ac:	00b6      	lsls	r6, r6, #2
    13ae:	21a5      	movs	r1, #165	; 0xa5
    13b0:	4632      	mov	r2, r6
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
    13b2:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
    13b6:	6320      	str	r0, [r4, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    13b8:	f009 fbd9 	bl	ab6e <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    13bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    13be:	4a24      	ldr	r2, [pc, #144]	; (1450 <vTaskStartScheduler+0x104>)
    13c0:	6362      	str	r2, [r4, #52]	; 0x34
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    13c2:	1d20      	adds	r0, r4, #4
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    13c4:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    13c8:	3e04      	subs	r6, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    13ca:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
	pxNewTCB->uxPriority = uxPriority;
    13ce:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
    13d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    13d4:	441e      	add	r6, r3
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    13d6:	f7ff f863 	bl	4a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    13da:	f104 0018 	add.w	r0, r4, #24
    13de:	f7ff f85f 	bl	4a0 <vListInitialiseItem>
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    13e2:	f026 0607 	bic.w	r6, r6, #7
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    13e6:	2305      	movs	r3, #5
    13e8:	61a3      	str	r3, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    13ea:	462a      	mov	r2, r5
    13ec:	4919      	ldr	r1, [pc, #100]	; (1454 <vTaskStartScheduler+0x108>)
		pxNewTCB->ulNotifiedValue = 0;
    13ee:	6525      	str	r5, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    13f0:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    13f2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    13f4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    13f6:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    13fa:	f001 f9f3 	bl	27e4 <pxPortInitialiseStack>
    13fe:	6020      	str	r0, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
    1400:	4620      	mov	r0, r4
    1402:	f7ff fe17 	bl	1034 <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
    1406:	f001 f84f 	bl	24a8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
    140a:	2801      	cmp	r0, #1
    140c:	d003      	beq.n	1416 <vTaskStartScheduler+0xca>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    140e:	3001      	adds	r0, #1
    1410:	d014      	beq.n	143c <vTaskStartScheduler+0xf0>
}
    1412:	b004      	add	sp, #16
    1414:	bd70      	pop	{r4, r5, r6, pc}
    1416:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    141a:	f383 8811 	msr	BASEPRI, r3
    141e:	f3bf 8f6f 	isb	sy
    1422:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
    1426:	490c      	ldr	r1, [pc, #48]	; (1458 <vTaskStartScheduler+0x10c>)
		xSchedulerRunning = pdTRUE;
    1428:	4a0c      	ldr	r2, [pc, #48]	; (145c <vTaskStartScheduler+0x110>)
		xTickCount = ( TickType_t ) 0U;
    142a:	4b0d      	ldr	r3, [pc, #52]	; (1460 <vTaskStartScheduler+0x114>)
		xNextTaskUnblockTime = portMAX_DELAY;
    142c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    1430:	600c      	str	r4, [r1, #0]
		xSchedulerRunning = pdTRUE;
    1432:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
    1434:	601d      	str	r5, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
    1436:	f001 fb2d 	bl	2a94 <xPortStartScheduler>
    143a:	e7ea      	b.n	1412 <vTaskStartScheduler+0xc6>
    143c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    1440:	f383 8811 	msr	BASEPRI, r3
    1444:	f3bf 8f6f 	isb	sy
    1448:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    144c:	e7fe      	b.n	144c <vTaskStartScheduler+0x100>
    144e:	bf00      	nop
    1450:	454c4449 	.word	0x454c4449
    1454:	0000173d 	.word	0x0000173d
    1458:	0000cb30 	.word	0x0000cb30
    145c:	0000cb4c 	.word	0x0000cb4c
    1460:	0000cb78 	.word	0x0000cb78

00001464 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    1464:	4a02      	ldr	r2, [pc, #8]	; (1470 <vTaskSuspendAll+0xc>)
    1466:	6813      	ldr	r3, [r2, #0]
    1468:	3301      	adds	r3, #1
    146a:	6013      	str	r3, [r2, #0]
}
    146c:	4770      	bx	lr
    146e:	bf00      	nop
    1470:	0000cafc 	.word	0x0000cafc

00001474 <xTaskGetTickCount>:
		xTicks = xTickCount;
    1474:	4b01      	ldr	r3, [pc, #4]	; (147c <xTaskGetTickCount+0x8>)
    1476:	6818      	ldr	r0, [r3, #0]
}
    1478:	4770      	bx	lr
    147a:	bf00      	nop
    147c:	0000cb78 	.word	0x0000cb78

00001480 <vTaskStepTick>:
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
    1480:	4b09      	ldr	r3, [pc, #36]	; (14a8 <vTaskStepTick+0x28>)
    1482:	490a      	ldr	r1, [pc, #40]	; (14ac <vTaskStepTick+0x2c>)
    1484:	681a      	ldr	r2, [r3, #0]
    1486:	6809      	ldr	r1, [r1, #0]
    1488:	4402      	add	r2, r0
    148a:	428a      	cmp	r2, r1
    148c:	d908      	bls.n	14a0 <vTaskStepTick+0x20>
    148e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    1492:	f383 8811 	msr	BASEPRI, r3
    1496:	f3bf 8f6f 	isb	sy
    149a:	f3bf 8f4f 	dsb	sy
    149e:	e7fe      	b.n	149e <vTaskStepTick+0x1e>
		xTickCount += xTicksToJump;
    14a0:	681a      	ldr	r2, [r3, #0]
    14a2:	4402      	add	r2, r0
    14a4:	601a      	str	r2, [r3, #0]
	}
    14a6:	4770      	bx	lr
    14a8:	0000cb78 	.word	0x0000cb78
    14ac:	0000cb30 	.word	0x0000cb30

000014b0 <xTaskIncrementTick>:
{
    14b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    14b4:	4b46      	ldr	r3, [pc, #280]	; (15d0 <xTaskIncrementTick+0x120>)
    14b6:	681b      	ldr	r3, [r3, #0]
    14b8:	2b00      	cmp	r3, #0
    14ba:	d144      	bne.n	1546 <xTaskIncrementTick+0x96>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    14bc:	4b45      	ldr	r3, [pc, #276]	; (15d4 <xTaskIncrementTick+0x124>)
    14be:	681f      	ldr	r7, [r3, #0]
    14c0:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
    14c2:	601f      	str	r7, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    14c4:	2f00      	cmp	r7, #0
    14c6:	d04b      	beq.n	1560 <xTaskIncrementTick+0xb0>
    14c8:	4e43      	ldr	r6, [pc, #268]	; (15d8 <xTaskIncrementTick+0x128>)
		if( xConstTickCount >= xNextTaskUnblockTime )
    14ca:	6833      	ldr	r3, [r6, #0]
    14cc:	42bb      	cmp	r3, r7
    14ce:	d85c      	bhi.n	158a <xTaskIncrementTick+0xda>
    14d0:	4c42      	ldr	r4, [pc, #264]	; (15dc <xTaskIncrementTick+0x12c>)
    14d2:	f8df 8120 	ldr.w	r8, [pc, #288]	; 15f4 <xTaskIncrementTick+0x144>
    14d6:	f8df 9120 	ldr.w	r9, [pc, #288]	; 15f8 <xTaskIncrementTick+0x148>
BaseType_t xSwitchRequired = pdFALSE;
    14da:	2500      	movs	r5, #0
    14dc:	e02b      	b.n	1536 <xTaskIncrementTick+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    14de:	6823      	ldr	r3, [r4, #0]
    14e0:	68db      	ldr	r3, [r3, #12]
    14e2:	f8d3 a00c 	ldr.w	sl, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    14e6:	f8da 2004 	ldr.w	r2, [sl, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    14ea:	f10a 0b04 	add.w	fp, sl, #4
					if( xConstTickCount < xItemValue )
    14ee:	4297      	cmp	r7, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    14f0:	4658      	mov	r0, fp
					if( xConstTickCount < xItemValue )
    14f2:	d364      	bcc.n	15be <xTaskIncrementTick+0x10e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    14f4:	f7ff f802 	bl	4fc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    14f8:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    14fc:	f10a 0018 	add.w	r0, sl, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1500:	b10a      	cbz	r2, 1506 <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1502:	f7fe fffb 	bl	4fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    1506:	4b36      	ldr	r3, [pc, #216]	; (15e0 <xTaskIncrementTick+0x130>)
    1508:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
    150c:	681b      	ldr	r3, [r3, #0]
    150e:	429a      	cmp	r2, r3
    1510:	bf88      	it	hi
    1512:	4b33      	ldrhi	r3, [pc, #204]	; (15e0 <xTaskIncrementTick+0x130>)
    1514:	eb02 0082 	add.w	r0, r2, r2, lsl #2
    1518:	4659      	mov	r1, fp
    151a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    151e:	bf88      	it	hi
    1520:	601a      	strhi	r2, [r3, #0]
    1522:	f7fe ffc1 	bl	4a8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1526:	f8d9 1000 	ldr.w	r1, [r9]
    152a:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
    152e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    1530:	429a      	cmp	r2, r3
    1532:	bf28      	it	cs
    1534:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1536:	6823      	ldr	r3, [r4, #0]
    1538:	681b      	ldr	r3, [r3, #0]
    153a:	2b00      	cmp	r3, #0
    153c:	d1cf      	bne.n	14de <xTaskIncrementTick+0x2e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    153e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1542:	6033      	str	r3, [r6, #0]
					break;
    1544:	e026      	b.n	1594 <xTaskIncrementTick+0xe4>
		++uxPendedTicks;
    1546:	4a27      	ldr	r2, [pc, #156]	; (15e4 <xTaskIncrementTick+0x134>)
    1548:	6813      	ldr	r3, [r2, #0]
    154a:	3301      	adds	r3, #1
    154c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
    154e:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
    1550:	4b25      	ldr	r3, [pc, #148]	; (15e8 <xTaskIncrementTick+0x138>)
    1552:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
    1554:	2b00      	cmp	r3, #0
}
    1556:	bf0c      	ite	eq
    1558:	4628      	moveq	r0, r5
    155a:	2001      	movne	r0, #1
    155c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
    1560:	4c1e      	ldr	r4, [pc, #120]	; (15dc <xTaskIncrementTick+0x12c>)
    1562:	6823      	ldr	r3, [r4, #0]
    1564:	681b      	ldr	r3, [r3, #0]
    1566:	bb0b      	cbnz	r3, 15ac <xTaskIncrementTick+0xfc>
    1568:	4b20      	ldr	r3, [pc, #128]	; (15ec <xTaskIncrementTick+0x13c>)
    156a:	6821      	ldr	r1, [r4, #0]
    156c:	4a20      	ldr	r2, [pc, #128]	; (15f0 <xTaskIncrementTick+0x140>)
    156e:	6818      	ldr	r0, [r3, #0]
    1570:	6020      	str	r0, [r4, #0]
    1572:	6019      	str	r1, [r3, #0]
    1574:	6813      	ldr	r3, [r2, #0]
    1576:	3301      	adds	r3, #1
    1578:	6013      	str	r3, [r2, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    157a:	6823      	ldr	r3, [r4, #0]
    157c:	681b      	ldr	r3, [r3, #0]
    157e:	bb03      	cbnz	r3, 15c2 <xTaskIncrementTick+0x112>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    1580:	4e15      	ldr	r6, [pc, #84]	; (15d8 <xTaskIncrementTick+0x128>)
    1582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1586:	6033      	str	r3, [r6, #0]
    1588:	e79f      	b.n	14ca <xTaskIncrementTick+0x1a>
    158a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 15f4 <xTaskIncrementTick+0x144>
    158e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 15f8 <xTaskIncrementTick+0x148>
BaseType_t xSwitchRequired = pdFALSE;
    1592:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    1594:	f8d9 3000 	ldr.w	r3, [r9]
    1598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    159a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    159e:	009b      	lsls	r3, r3, #2
    15a0:	f858 3003 	ldr.w	r3, [r8, r3]
				xSwitchRequired = pdTRUE;
    15a4:	2b02      	cmp	r3, #2
    15a6:	bf28      	it	cs
    15a8:	2501      	movcs	r5, #1
    15aa:	e7d1      	b.n	1550 <xTaskIncrementTick+0xa0>
    15ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    15b0:	f383 8811 	msr	BASEPRI, r3
    15b4:	f3bf 8f6f 	isb	sy
    15b8:	f3bf 8f4f 	dsb	sy
			taskSWITCH_DELAYED_LISTS();
    15bc:	e7fe      	b.n	15bc <xTaskIncrementTick+0x10c>
						xNextTaskUnblockTime = xItemValue;
    15be:	6032      	str	r2, [r6, #0]
						break;
    15c0:	e7e8      	b.n	1594 <xTaskIncrementTick+0xe4>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    15c2:	6823      	ldr	r3, [r4, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    15c4:	4e04      	ldr	r6, [pc, #16]	; (15d8 <xTaskIncrementTick+0x128>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    15c6:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    15c8:	68db      	ldr	r3, [r3, #12]
    15ca:	685b      	ldr	r3, [r3, #4]
    15cc:	6033      	str	r3, [r6, #0]
    15ce:	e77c      	b.n	14ca <xTaskIncrementTick+0x1a>
    15d0:	0000cafc 	.word	0x0000cafc
    15d4:	0000cb78 	.word	0x0000cb78
    15d8:	0000cb30 	.word	0x0000cb30
    15dc:	0000ca84 	.word	0x0000ca84
    15e0:	0000cb04 	.word	0x0000cb04
    15e4:	0000caf8 	.word	0x0000caf8
    15e8:	0000cb7c 	.word	0x0000cb7c
    15ec:	0000ca88 	.word	0x0000ca88
    15f0:	0000cb34 	.word	0x0000cb34
    15f4:	0000ca8c 	.word	0x0000ca8c
    15f8:	0000ca80 	.word	0x0000ca80

000015fc <xTaskResumeAll.part.8>:
BaseType_t xTaskResumeAll( void )
    15fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	taskENTER_CRITICAL();
    1600:	f001 f918 	bl	2834 <vPortEnterCritical>
		--uxSchedulerSuspended;
    1604:	4b3a      	ldr	r3, [pc, #232]	; (16f0 <xTaskResumeAll.part.8+0xf4>)
    1606:	681a      	ldr	r2, [r3, #0]
    1608:	3a01      	subs	r2, #1
    160a:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    160c:	681b      	ldr	r3, [r3, #0]
    160e:	2b00      	cmp	r3, #0
    1610:	d158      	bne.n	16c4 <xTaskResumeAll.part.8+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    1612:	4b38      	ldr	r3, [pc, #224]	; (16f4 <xTaskResumeAll.part.8+0xf8>)
    1614:	681b      	ldr	r3, [r3, #0]
    1616:	2b00      	cmp	r3, #0
    1618:	d054      	beq.n	16c4 <xTaskResumeAll.part.8+0xc8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    161a:	4d37      	ldr	r5, [pc, #220]	; (16f8 <xTaskResumeAll.part.8+0xfc>)
    161c:	682b      	ldr	r3, [r5, #0]
    161e:	2b00      	cmp	r3, #0
    1620:	d063      	beq.n	16ea <xTaskResumeAll.part.8+0xee>
    1622:	4e36      	ldr	r6, [pc, #216]	; (16fc <xTaskResumeAll.part.8+0x100>)
    1624:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 1714 <xTaskResumeAll.part.8+0x118>
    1628:	4f35      	ldr	r7, [pc, #212]	; (1700 <xTaskResumeAll.part.8+0x104>)
    162a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 1718 <xTaskResumeAll.part.8+0x11c>
						xYieldPending = pdTRUE;
    162e:	f04f 0a01 	mov.w	sl, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    1632:	68eb      	ldr	r3, [r5, #12]
    1634:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1636:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    163a:	f104 0018 	add.w	r0, r4, #24
    163e:	f7fe ff5d 	bl	4fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1642:	4658      	mov	r0, fp
    1644:	f7fe ff5a 	bl	4fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    1648:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    164a:	6832      	ldr	r2, [r6, #0]
    164c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    1650:	4293      	cmp	r3, r2
    1652:	4659      	mov	r1, fp
    1654:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    1658:	bf88      	it	hi
    165a:	6033      	strhi	r3, [r6, #0]
    165c:	f7fe ff24 	bl	4a8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    1660:	683b      	ldr	r3, [r7, #0]
    1662:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1666:	429a      	cmp	r2, r3
    1668:	d332      	bcc.n	16d0 <xTaskResumeAll.part.8+0xd4>
						xYieldPending = pdTRUE;
    166a:	f8c9 a000 	str.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    166e:	682b      	ldr	r3, [r5, #0]
    1670:	2b00      	cmp	r3, #0
    1672:	d1de      	bne.n	1632 <xTaskResumeAll.part.8+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1674:	4b23      	ldr	r3, [pc, #140]	; (1704 <xTaskResumeAll.part.8+0x108>)
    1676:	681a      	ldr	r2, [r3, #0]
    1678:	6812      	ldr	r2, [r2, #0]
    167a:	2a00      	cmp	r2, #0
    167c:	d030      	beq.n	16e0 <xTaskResumeAll.part.8+0xe4>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    167e:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    1680:	4b21      	ldr	r3, [pc, #132]	; (1708 <xTaskResumeAll.part.8+0x10c>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1682:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    1684:	68d2      	ldr	r2, [r2, #12]
    1686:	6852      	ldr	r2, [r2, #4]
    1688:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    168a:	4e20      	ldr	r6, [pc, #128]	; (170c <xTaskResumeAll.part.8+0x110>)
    168c:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
    168e:	b144      	cbz	r4, 16a2 <xTaskResumeAll.part.8+0xa6>
								xYieldPending = pdTRUE;
    1690:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
    1692:	f7ff ff0d 	bl	14b0 <xTaskIncrementTick>
    1696:	b108      	cbz	r0, 169c <xTaskResumeAll.part.8+0xa0>
								xYieldPending = pdTRUE;
    1698:	f8c9 5000 	str.w	r5, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    169c:	3c01      	subs	r4, #1
    169e:	d1f8      	bne.n	1692 <xTaskResumeAll.part.8+0x96>
						uxPendedTicks = 0;
    16a0:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
    16a2:	f8d9 3000 	ldr.w	r3, [r9]
    16a6:	b16b      	cbz	r3, 16c4 <xTaskResumeAll.part.8+0xc8>
					taskYIELD_IF_USING_PREEMPTION();
    16a8:	4b19      	ldr	r3, [pc, #100]	; (1710 <xTaskResumeAll.part.8+0x114>)
    16aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    16ae:	601a      	str	r2, [r3, #0]
    16b0:	f3bf 8f4f 	dsb	sy
    16b4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    16b8:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    16ba:	f001 f8dd 	bl	2878 <vPortExitCritical>
}
    16be:	4620      	mov	r0, r4
    16c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xAlreadyYielded = pdFALSE;
    16c4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    16c6:	f001 f8d7 	bl	2878 <vPortExitCritical>
}
    16ca:	4620      	mov	r0, r4
    16cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    16d0:	682b      	ldr	r3, [r5, #0]
    16d2:	2b00      	cmp	r3, #0
    16d4:	d1ad      	bne.n	1632 <xTaskResumeAll.part.8+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    16d6:	4b0b      	ldr	r3, [pc, #44]	; (1704 <xTaskResumeAll.part.8+0x108>)
    16d8:	681a      	ldr	r2, [r3, #0]
    16da:	6812      	ldr	r2, [r2, #0]
    16dc:	2a00      	cmp	r2, #0
    16de:	d1ce      	bne.n	167e <xTaskResumeAll.part.8+0x82>
		xNextTaskUnblockTime = portMAX_DELAY;
    16e0:	4b09      	ldr	r3, [pc, #36]	; (1708 <xTaskResumeAll.part.8+0x10c>)
    16e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    16e6:	601a      	str	r2, [r3, #0]
    16e8:	e7cf      	b.n	168a <xTaskResumeAll.part.8+0x8e>
    16ea:	f8df 902c 	ldr.w	r9, [pc, #44]	; 1718 <xTaskResumeAll.part.8+0x11c>
    16ee:	e7cc      	b.n	168a <xTaskResumeAll.part.8+0x8e>
    16f0:	0000cafc 	.word	0x0000cafc
    16f4:	0000caf0 	.word	0x0000caf0
    16f8:	0000cb38 	.word	0x0000cb38
    16fc:	0000cb04 	.word	0x0000cb04
    1700:	0000ca80 	.word	0x0000ca80
    1704:	0000ca84 	.word	0x0000ca84
    1708:	0000cb30 	.word	0x0000cb30
    170c:	0000caf8 	.word	0x0000caf8
    1710:	e000ed04 	.word	0xe000ed04
    1714:	0000ca8c 	.word	0x0000ca8c
    1718:	0000cb7c 	.word	0x0000cb7c

0000171c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
    171c:	4b06      	ldr	r3, [pc, #24]	; (1738 <xTaskResumeAll+0x1c>)
    171e:	681b      	ldr	r3, [r3, #0]
    1720:	b943      	cbnz	r3, 1734 <xTaskResumeAll+0x18>
    1722:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    1726:	f383 8811 	msr	BASEPRI, r3
    172a:	f3bf 8f6f 	isb	sy
    172e:	f3bf 8f4f 	dsb	sy
    1732:	e7fe      	b.n	1732 <xTaskResumeAll+0x16>
    1734:	f7ff bf62 	b.w	15fc <xTaskResumeAll.part.8>
    1738:	0000cafc 	.word	0x0000cafc

0000173c <prvIdleTask>:
{
    173c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1740:	f8df b13c 	ldr.w	fp, [pc, #316]	; 1880 <prvIdleTask+0x144>
    1744:	f8df a13c 	ldr.w	sl, [pc, #316]	; 1884 <prvIdleTask+0x148>
    1748:	f8df 813c 	ldr.w	r8, [pc, #316]	; 1888 <prvIdleTask+0x14c>
    174c:	4f45      	ldr	r7, [pc, #276]	; (1864 <prvIdleTask+0x128>)
    174e:	4e46      	ldr	r6, [pc, #280]	; (1868 <prvIdleTask+0x12c>)
    1750:	4d46      	ldr	r5, [pc, #280]	; (186c <prvIdleTask+0x130>)
    1752:	4c47      	ldr	r4, [pc, #284]	; (1870 <prvIdleTask+0x134>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    1754:	f8d8 3000 	ldr.w	r3, [r8]
    1758:	b383      	cbz	r3, 17bc <prvIdleTask+0x80>
			taskENTER_CRITICAL();
    175a:	f001 f86b 	bl	2834 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    175e:	f8db 300c 	ldr.w	r3, [fp, #12]
    1762:	f8d3 900c 	ldr.w	r9, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1766:	f109 0004 	add.w	r0, r9, #4
    176a:	f7fe fec7 	bl	4fc <uxListRemove>
				--uxCurrentNumberOfTasks;
    176e:	f8da 3000 	ldr.w	r3, [sl]
    1772:	3b01      	subs	r3, #1
    1774:	f8ca 3000 	str.w	r3, [sl]
				--uxDeletedTasksWaitingCleanUp;
    1778:	f8d8 3000 	ldr.w	r3, [r8]
    177c:	3b01      	subs	r3, #1
    177e:	f8c8 3000 	str.w	r3, [r8]
			taskEXIT_CRITICAL();
    1782:	f001 f879 	bl	2878 <vPortExitCritical>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
    1786:	f899 3055 	ldrb.w	r3, [r9, #85]	; 0x55
    178a:	b163      	cbz	r3, 17a6 <prvIdleTask+0x6a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
    178c:	2b01      	cmp	r3, #1
    178e:	d04e      	beq.n	182e <prvIdleTask+0xf2>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
    1790:	2b02      	cmp	r3, #2
    1792:	d0df      	beq.n	1754 <prvIdleTask+0x18>
    1794:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    1798:	f383 8811 	msr	BASEPRI, r3
    179c:	f3bf 8f6f 	isb	sy
    17a0:	f3bf 8f4f 	dsb	sy
    17a4:	e7fe      	b.n	17a4 <prvIdleTask+0x68>
				vPortFree( pxTCB->pxStack );
    17a6:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
    17aa:	f000 ff85 	bl	26b8 <vPortFree>
				vPortFree( pxTCB );
    17ae:	4648      	mov	r0, r9
    17b0:	f000 ff82 	bl	26b8 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    17b4:	f8d8 3000 	ldr.w	r3, [r8]
    17b8:	2b00      	cmp	r3, #0
    17ba:	d1ce      	bne.n	175a <prvIdleTask+0x1e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    17bc:	683b      	ldr	r3, [r7, #0]
    17be:	2b01      	cmp	r3, #1
    17c0:	d907      	bls.n	17d2 <prvIdleTask+0x96>
				taskYIELD();
    17c2:	4b2c      	ldr	r3, [pc, #176]	; (1874 <prvIdleTask+0x138>)
    17c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    17c8:	601a      	str	r2, [r3, #0]
    17ca:	f3bf 8f4f 	dsb	sy
    17ce:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
    17d2:	f006 f8e7 	bl	79a4 <vApplicationIdleHook>
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
    17d6:	4b28      	ldr	r3, [pc, #160]	; (1878 <prvIdleTask+0x13c>)
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
    17d8:	4a28      	ldr	r2, [pc, #160]	; (187c <prvIdleTask+0x140>)
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
    17da:	681b      	ldr	r3, [r3, #0]
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
    17dc:	6812      	ldr	r2, [r2, #0]
    17de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    17e0:	2a00      	cmp	r2, #0
    17e2:	d1b7      	bne.n	1754 <prvIdleTask+0x18>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
    17e4:	683a      	ldr	r2, [r7, #0]
    17e6:	2a01      	cmp	r2, #1
    17e8:	d8b4      	bhi.n	1754 <prvIdleTask+0x18>
		else if( uxHigherPriorityReadyTasks != pdFALSE )
    17ea:	2b00      	cmp	r3, #0
    17ec:	d1b2      	bne.n	1754 <prvIdleTask+0x18>
			xReturn = xNextTaskUnblockTime - xTickCount;
    17ee:	6833      	ldr	r3, [r6, #0]
    17f0:	682a      	ldr	r2, [r5, #0]
    17f2:	1a9b      	subs	r3, r3, r2
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
    17f4:	2b01      	cmp	r3, #1
    17f6:	d9ad      	bls.n	1754 <prvIdleTask+0x18>
	++uxSchedulerSuspended;
    17f8:	6823      	ldr	r3, [r4, #0]
    17fa:	3301      	adds	r3, #1
    17fc:	6023      	str	r3, [r4, #0]
					configASSERT( xNextTaskUnblockTime >= xTickCount );
    17fe:	6832      	ldr	r2, [r6, #0]
    1800:	682b      	ldr	r3, [r5, #0]
    1802:	429a      	cmp	r2, r3
    1804:	d31a      	bcc.n	183c <prvIdleTask+0x100>
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
    1806:	4b1c      	ldr	r3, [pc, #112]	; (1878 <prvIdleTask+0x13c>)
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
    1808:	4a1c      	ldr	r2, [pc, #112]	; (187c <prvIdleTask+0x140>)
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
    180a:	681b      	ldr	r3, [r3, #0]
		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
    180c:	6812      	ldr	r2, [r2, #0]
    180e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1810:	b912      	cbnz	r2, 1818 <prvIdleTask+0xdc>
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
    1812:	683a      	ldr	r2, [r7, #0]
    1814:	2a01      	cmp	r2, #1
    1816:	d91a      	bls.n	184e <prvIdleTask+0x112>
	configASSERT( uxSchedulerSuspended );
    1818:	6823      	ldr	r3, [r4, #0]
    181a:	b963      	cbnz	r3, 1836 <prvIdleTask+0xfa>
    181c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    1820:	f383 8811 	msr	BASEPRI, r3
    1824:	f3bf 8f6f 	isb	sy
    1828:	f3bf 8f4f 	dsb	sy
    182c:	e7fe      	b.n	182c <prvIdleTask+0xf0>
				vPortFree( pxTCB );
    182e:	4648      	mov	r0, r9
    1830:	f000 ff42 	bl	26b8 <vPortFree>
    1834:	e78e      	b.n	1754 <prvIdleTask+0x18>
    1836:	f7ff fee1 	bl	15fc <xTaskResumeAll.part.8>
    183a:	e78b      	b.n	1754 <prvIdleTask+0x18>
    183c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    1840:	f383 8811 	msr	BASEPRI, r3
    1844:	f3bf 8f6f 	isb	sy
    1848:	f3bf 8f4f 	dsb	sy
					configASSERT( xNextTaskUnblockTime >= xTickCount );
    184c:	e7fe      	b.n	184c <prvIdleTask+0x110>
		else if( uxHigherPriorityReadyTasks != pdFALSE )
    184e:	2b00      	cmp	r3, #0
    1850:	d1e2      	bne.n	1818 <prvIdleTask+0xdc>
			xReturn = xNextTaskUnblockTime - xTickCount;
    1852:	6830      	ldr	r0, [r6, #0]
    1854:	682b      	ldr	r3, [r5, #0]
    1856:	1ac0      	subs	r0, r0, r3
					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
    1858:	2801      	cmp	r0, #1
    185a:	d9dd      	bls.n	1818 <prvIdleTask+0xdc>
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
    185c:	f001 f868 	bl	2930 <vPortSuppressTicksAndSleep>
						traceLOW_POWER_IDLE_END();
    1860:	e7da      	b.n	1818 <prvIdleTask+0xdc>
    1862:	bf00      	nop
    1864:	0000ca8c 	.word	0x0000ca8c
    1868:	0000cb30 	.word	0x0000cb30
    186c:	0000cb78 	.word	0x0000cb78
    1870:	0000cafc 	.word	0x0000cafc
    1874:	e000ed04 	.word	0xe000ed04
    1878:	0000cb04 	.word	0x0000cb04
    187c:	0000ca80 	.word	0x0000ca80
    1880:	0000cb64 	.word	0x0000cb64
    1884:	0000caf0 	.word	0x0000caf0
    1888:	0000caf4 	.word	0x0000caf4

0000188c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    188c:	4b34      	ldr	r3, [pc, #208]	; (1960 <vTaskSwitchContext+0xd4>)
    188e:	681b      	ldr	r3, [r3, #0]
    1890:	b11b      	cbz	r3, 189a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
    1892:	4b34      	ldr	r3, [pc, #208]	; (1964 <vTaskSwitchContext+0xd8>)
    1894:	2201      	movs	r2, #1
    1896:	601a      	str	r2, [r3, #0]
    1898:	4770      	bx	lr
		xYieldPending = pdFALSE;
    189a:	4a32      	ldr	r2, [pc, #200]	; (1964 <vTaskSwitchContext+0xd8>)
{
    189c:	b570      	push	{r4, r5, r6, lr}
		taskCHECK_FOR_STACK_OVERFLOW();
    189e:	4c32      	ldr	r4, [pc, #200]	; (1968 <vTaskSwitchContext+0xdc>)
		xYieldPending = pdFALSE;
    18a0:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
    18a2:	6823      	ldr	r3, [r4, #0]
    18a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    18a6:	681a      	ldr	r2, [r3, #0]
    18a8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
    18ac:	d103      	bne.n	18b6 <vTaskSwitchContext+0x2a>
    18ae:	685a      	ldr	r2, [r3, #4]
    18b0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
    18b4:	d04a      	beq.n	194c <vTaskSwitchContext+0xc0>
    18b6:	6820      	ldr	r0, [r4, #0]
    18b8:	6821      	ldr	r1, [r4, #0]
    18ba:	3134      	adds	r1, #52	; 0x34
    18bc:	f006 f868 	bl	7990 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    18c0:	4e2a      	ldr	r6, [pc, #168]	; (196c <vTaskSwitchContext+0xe0>)
    18c2:	492b      	ldr	r1, [pc, #172]	; (1970 <vTaskSwitchContext+0xe4>)
    18c4:	6832      	ldr	r2, [r6, #0]
    18c6:	0093      	lsls	r3, r2, #2
    18c8:	1898      	adds	r0, r3, r2
    18ca:	0080      	lsls	r0, r0, #2
    18cc:	5808      	ldr	r0, [r1, r0]
    18ce:	bb68      	cbnz	r0, 192c <vTaskSwitchContext+0xa0>
    18d0:	b30a      	cbz	r2, 1916 <vTaskSwitchContext+0x8a>
    18d2:	1e53      	subs	r3, r2, #1
    18d4:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    18d8:	0080      	lsls	r0, r0, #2
    18da:	5808      	ldr	r0, [r1, r0]
    18dc:	bb20      	cbnz	r0, 1928 <vTaskSwitchContext+0x9c>
    18de:	b1d3      	cbz	r3, 1916 <vTaskSwitchContext+0x8a>
    18e0:	1e93      	subs	r3, r2, #2
    18e2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    18e6:	0080      	lsls	r0, r0, #2
    18e8:	5808      	ldr	r0, [r1, r0]
    18ea:	b9e8      	cbnz	r0, 1928 <vTaskSwitchContext+0x9c>
    18ec:	b19b      	cbz	r3, 1916 <vTaskSwitchContext+0x8a>
    18ee:	1ed3      	subs	r3, r2, #3
    18f0:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    18f4:	0080      	lsls	r0, r0, #2
    18f6:	5808      	ldr	r0, [r1, r0]
    18f8:	b9b0      	cbnz	r0, 1928 <vTaskSwitchContext+0x9c>
    18fa:	b163      	cbz	r3, 1916 <vTaskSwitchContext+0x8a>
    18fc:	1f13      	subs	r3, r2, #4
    18fe:	eb03 0083 	add.w	r0, r3, r3, lsl #2
    1902:	0080      	lsls	r0, r0, #2
    1904:	5808      	ldr	r0, [r1, r0]
    1906:	b978      	cbnz	r0, 1928 <vTaskSwitchContext+0x9c>
    1908:	b12b      	cbz	r3, 1916 <vTaskSwitchContext+0x8a>
    190a:	1f53      	subs	r3, r2, #5
    190c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    1910:	0092      	lsls	r2, r2, #2
    1912:	588a      	ldr	r2, [r1, r2]
    1914:	b942      	cbnz	r2, 1928 <vTaskSwitchContext+0x9c>
    1916:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    191a:	f383 8811 	msr	BASEPRI, r3
    191e:	f3bf 8f6f 	isb	sy
    1922:	f3bf 8f4f 	dsb	sy
    1926:	e7fe      	b.n	1926 <vTaskSwitchContext+0x9a>
    1928:	461a      	mov	r2, r3
    192a:	009b      	lsls	r3, r3, #2
    192c:	4413      	add	r3, r2
    192e:	009b      	lsls	r3, r3, #2
    1930:	18cd      	adds	r5, r1, r3
    1932:	3308      	adds	r3, #8
    1934:	6868      	ldr	r0, [r5, #4]
    1936:	6840      	ldr	r0, [r0, #4]
    1938:	6068      	str	r0, [r5, #4]
    193a:	4419      	add	r1, r3
    193c:	4288      	cmp	r0, r1
    193e:	bf04      	itt	eq
    1940:	6840      	ldreq	r0, [r0, #4]
    1942:	6068      	streq	r0, [r5, #4]
    1944:	68c3      	ldr	r3, [r0, #12]
    1946:	6023      	str	r3, [r4, #0]
    1948:	6032      	str	r2, [r6, #0]
}
    194a:	bd70      	pop	{r4, r5, r6, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
    194c:	689a      	ldr	r2, [r3, #8]
    194e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
    1952:	d1b0      	bne.n	18b6 <vTaskSwitchContext+0x2a>
    1954:	68db      	ldr	r3, [r3, #12]
    1956:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
    195a:	d1ac      	bne.n	18b6 <vTaskSwitchContext+0x2a>
    195c:	e7b0      	b.n	18c0 <vTaskSwitchContext+0x34>
    195e:	bf00      	nop
    1960:	0000cafc 	.word	0x0000cafc
    1964:	0000cb7c 	.word	0x0000cb7c
    1968:	0000ca80 	.word	0x0000ca80
    196c:	0000cb04 	.word	0x0000cb04
    1970:	0000ca8c 	.word	0x0000ca8c

00001974 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
    1974:	b1d0      	cbz	r0, 19ac <vTaskPlaceOnEventList+0x38>
{
    1976:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1978:	4d1a      	ldr	r5, [pc, #104]	; (19e4 <vTaskPlaceOnEventList+0x70>)
    197a:	460c      	mov	r4, r1
    197c:	6829      	ldr	r1, [r5, #0]
    197e:	3118      	adds	r1, #24
    1980:	f7fe fda2 	bl	4c8 <vListInsert>


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    1984:	4b18      	ldr	r3, [pc, #96]	; (19e8 <vTaskPlaceOnEventList+0x74>)
    1986:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1988:	6828      	ldr	r0, [r5, #0]
    198a:	3004      	adds	r0, #4
    198c:	f7fe fdb6 	bl	4fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    1990:	1c63      	adds	r3, r4, #1
    1992:	d014      	beq.n	19be <vTaskPlaceOnEventList+0x4a>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    1994:	682b      	ldr	r3, [r5, #0]
    1996:	19a4      	adds	r4, r4, r6
    1998:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    199a:	d317      	bcc.n	19cc <vTaskPlaceOnEventList+0x58>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    199c:	4b13      	ldr	r3, [pc, #76]	; (19ec <vTaskPlaceOnEventList+0x78>)
    199e:	6818      	ldr	r0, [r3, #0]
    19a0:	6829      	ldr	r1, [r5, #0]
}
    19a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    19a6:	3104      	adds	r1, #4
    19a8:	f7fe bd8e 	b.w	4c8 <vListInsert>
    19ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    19b0:	f383 8811 	msr	BASEPRI, r3
    19b4:	f3bf 8f6f 	isb	sy
    19b8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
    19bc:	e7fe      	b.n	19bc <vTaskPlaceOnEventList+0x48>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    19be:	6829      	ldr	r1, [r5, #0]
    19c0:	480b      	ldr	r0, [pc, #44]	; (19f0 <vTaskPlaceOnEventList+0x7c>)
    19c2:	3104      	adds	r1, #4
}
    19c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    19c8:	f7fe bd6e 	b.w	4a8 <vListInsertEnd>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    19cc:	4b09      	ldr	r3, [pc, #36]	; (19f4 <vTaskPlaceOnEventList+0x80>)
    19ce:	6818      	ldr	r0, [r3, #0]
    19d0:	6829      	ldr	r1, [r5, #0]
    19d2:	3104      	adds	r1, #4
    19d4:	f7fe fd78 	bl	4c8 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    19d8:	4b07      	ldr	r3, [pc, #28]	; (19f8 <vTaskPlaceOnEventList+0x84>)
    19da:	681a      	ldr	r2, [r3, #0]
    19dc:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
    19de:	bf38      	it	cc
    19e0:	601c      	strcc	r4, [r3, #0]
}
    19e2:	bd70      	pop	{r4, r5, r6, pc}
    19e4:	0000ca80 	.word	0x0000ca80
    19e8:	0000cb78 	.word	0x0000cb78
    19ec:	0000ca88 	.word	0x0000ca88
    19f0:	0000cb50 	.word	0x0000cb50
    19f4:	0000ca84 	.word	0x0000ca84
    19f8:	0000cb30 	.word	0x0000cb30

000019fc <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
    19fc:	b158      	cbz	r0, 1a16 <vTaskPlaceOnUnorderedEventList+0x1a>
	configASSERT( uxSchedulerSuspended != 0 );
    19fe:	4b24      	ldr	r3, [pc, #144]	; (1a90 <vTaskPlaceOnUnorderedEventList+0x94>)
    1a00:	681b      	ldr	r3, [r3, #0]
    1a02:	b98b      	cbnz	r3, 1a28 <vTaskPlaceOnUnorderedEventList+0x2c>
    1a04:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    1a08:	f383 8811 	msr	BASEPRI, r3
    1a0c:	f3bf 8f6f 	isb	sy
    1a10:	f3bf 8f4f 	dsb	sy
    1a14:	e7fe      	b.n	1a14 <vTaskPlaceOnUnorderedEventList+0x18>
    1a16:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    1a1a:	f383 8811 	msr	BASEPRI, r3
    1a1e:	f3bf 8f6f 	isb	sy
    1a22:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
    1a26:	e7fe      	b.n	1a26 <vTaskPlaceOnUnorderedEventList+0x2a>
{
    1a28:	b570      	push	{r4, r5, r6, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    1a2a:	4d1a      	ldr	r5, [pc, #104]	; (1a94 <vTaskPlaceOnUnorderedEventList+0x98>)
    1a2c:	4614      	mov	r4, r2
    1a2e:	460b      	mov	r3, r1
    1a30:	682a      	ldr	r2, [r5, #0]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1a32:	6829      	ldr	r1, [r5, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    1a34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1a38:	6193      	str	r3, [r2, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1a3a:	3118      	adds	r1, #24
    1a3c:	f7fe fd34 	bl	4a8 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
    1a40:	4b15      	ldr	r3, [pc, #84]	; (1a98 <vTaskPlaceOnUnorderedEventList+0x9c>)
    1a42:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1a44:	6828      	ldr	r0, [r5, #0]
    1a46:	3004      	adds	r0, #4
    1a48:	f7fe fd58 	bl	4fc <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    1a4c:	1c63      	adds	r3, r4, #1
    1a4e:	d00b      	beq.n	1a68 <vTaskPlaceOnUnorderedEventList+0x6c>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    1a50:	682b      	ldr	r3, [r5, #0]
    1a52:	19a4      	adds	r4, r4, r6
    1a54:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    1a56:	d30e      	bcc.n	1a76 <vTaskPlaceOnUnorderedEventList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1a58:	4b10      	ldr	r3, [pc, #64]	; (1a9c <vTaskPlaceOnUnorderedEventList+0xa0>)
    1a5a:	6818      	ldr	r0, [r3, #0]
    1a5c:	6829      	ldr	r1, [r5, #0]
}
    1a5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1a62:	3104      	adds	r1, #4
    1a64:	f7fe bd30 	b.w	4c8 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1a68:	6829      	ldr	r1, [r5, #0]
    1a6a:	480d      	ldr	r0, [pc, #52]	; (1aa0 <vTaskPlaceOnUnorderedEventList+0xa4>)
    1a6c:	3104      	adds	r1, #4
}
    1a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1a72:	f7fe bd19 	b.w	4a8 <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1a76:	4b0b      	ldr	r3, [pc, #44]	; (1aa4 <vTaskPlaceOnUnorderedEventList+0xa8>)
    1a78:	6818      	ldr	r0, [r3, #0]
    1a7a:	6829      	ldr	r1, [r5, #0]
    1a7c:	3104      	adds	r1, #4
    1a7e:	f7fe fd23 	bl	4c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
    1a82:	4b09      	ldr	r3, [pc, #36]	; (1aa8 <vTaskPlaceOnUnorderedEventList+0xac>)
    1a84:	681a      	ldr	r2, [r3, #0]
    1a86:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
    1a88:	bf38      	it	cc
    1a8a:	601c      	strcc	r4, [r3, #0]
}
    1a8c:	bd70      	pop	{r4, r5, r6, pc}
    1a8e:	bf00      	nop
    1a90:	0000cafc 	.word	0x0000cafc
    1a94:	0000ca80 	.word	0x0000ca80
    1a98:	0000cb78 	.word	0x0000cb78
    1a9c:	0000ca88 	.word	0x0000ca88
    1aa0:	0000cb50 	.word	0x0000cb50
    1aa4:	0000ca84 	.word	0x0000ca84
    1aa8:	0000cb30 	.word	0x0000cb30

00001aac <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
    1aac:	b330      	cbz	r0, 1afc <vTaskPlaceOnEventListRestricted+0x50>
	{
    1aae:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1ab0:	4d1d      	ldr	r5, [pc, #116]	; (1b28 <vTaskPlaceOnEventListRestricted+0x7c>)
    1ab2:	460c      	mov	r4, r1
    1ab4:	6829      	ldr	r1, [r5, #0]
    1ab6:	4616      	mov	r6, r2
    1ab8:	3118      	adds	r1, #24
    1aba:	f7fe fcf5 	bl	4a8 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
    1abe:	4b1b      	ldr	r3, [pc, #108]	; (1b2c <vTaskPlaceOnEventListRestricted+0x80>)
		if( xWaitIndefinitely != pdFALSE )
    1ac0:	b986      	cbnz	r6, 1ae4 <vTaskPlaceOnEventListRestricted+0x38>
const TickType_t xConstTickCount = xTickCount;
    1ac2:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1ac4:	6828      	ldr	r0, [r5, #0]
    1ac6:	3004      	adds	r0, #4
    1ac8:	f7fe fd18 	bl	4fc <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    1acc:	682b      	ldr	r3, [r5, #0]
    1ace:	19a4      	adds	r4, r4, r6
    1ad0:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    1ad2:	d31c      	bcc.n	1b0e <vTaskPlaceOnEventListRestricted+0x62>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1ad4:	4b16      	ldr	r3, [pc, #88]	; (1b30 <vTaskPlaceOnEventListRestricted+0x84>)
    1ad6:	6818      	ldr	r0, [r3, #0]
    1ad8:	6829      	ldr	r1, [r5, #0]
	}
    1ada:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1ade:	3104      	adds	r1, #4
    1ae0:	f7fe bcf2 	b.w	4c8 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
    1ae4:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1ae6:	6828      	ldr	r0, [r5, #0]
    1ae8:	3004      	adds	r0, #4
    1aea:	f7fe fd07 	bl	4fc <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1aee:	6829      	ldr	r1, [r5, #0]
    1af0:	4810      	ldr	r0, [pc, #64]	; (1b34 <vTaskPlaceOnEventListRestricted+0x88>)
    1af2:	3104      	adds	r1, #4
	}
    1af4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1af8:	f7fe bcd6 	b.w	4a8 <vListInsertEnd>
    1afc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    1b00:	f383 8811 	msr	BASEPRI, r3
    1b04:	f3bf 8f6f 	isb	sy
    1b08:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
    1b0c:	e7fe      	b.n	1b0c <vTaskPlaceOnEventListRestricted+0x60>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    1b0e:	4b0a      	ldr	r3, [pc, #40]	; (1b38 <vTaskPlaceOnEventListRestricted+0x8c>)
    1b10:	6818      	ldr	r0, [r3, #0]
    1b12:	6829      	ldr	r1, [r5, #0]
    1b14:	3104      	adds	r1, #4
    1b16:	f7fe fcd7 	bl	4c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
    1b1a:	4b08      	ldr	r3, [pc, #32]	; (1b3c <vTaskPlaceOnEventListRestricted+0x90>)
    1b1c:	681a      	ldr	r2, [r3, #0]
    1b1e:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
    1b20:	bf38      	it	cc
    1b22:	601c      	strcc	r4, [r3, #0]
	}
    1b24:	bd70      	pop	{r4, r5, r6, pc}
    1b26:	bf00      	nop
    1b28:	0000ca80 	.word	0x0000ca80
    1b2c:	0000cb78 	.word	0x0000cb78
    1b30:	0000ca88 	.word	0x0000ca88
    1b34:	0000cb50 	.word	0x0000cb50
    1b38:	0000ca84 	.word	0x0000ca84
    1b3c:	0000cb30 	.word	0x0000cb30

00001b40 <xTaskRemoveFromEventList>:
{
    1b40:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1b42:	68c3      	ldr	r3, [r0, #12]
    1b44:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    1b46:	2c00      	cmp	r4, #0
    1b48:	d039      	beq.n	1bbe <xTaskRemoveFromEventList+0x7e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    1b4a:	f104 0518 	add.w	r5, r4, #24
    1b4e:	4628      	mov	r0, r5
    1b50:	f7fe fcd4 	bl	4fc <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1b54:	4b1e      	ldr	r3, [pc, #120]	; (1bd0 <xTaskRemoveFromEventList+0x90>)
    1b56:	681b      	ldr	r3, [r3, #0]
    1b58:	b1bb      	cbz	r3, 1b8a <xTaskRemoveFromEventList+0x4a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    1b5a:	4629      	mov	r1, r5
    1b5c:	481d      	ldr	r0, [pc, #116]	; (1bd4 <xTaskRemoveFromEventList+0x94>)
    1b5e:	f7fe fca3 	bl	4a8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1b62:	4b1d      	ldr	r3, [pc, #116]	; (1bd8 <xTaskRemoveFromEventList+0x98>)
    1b64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1b66:	681b      	ldr	r3, [r3, #0]
    1b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1b6a:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
    1b6c:	bf82      	ittt	hi
    1b6e:	4b1b      	ldrhi	r3, [pc, #108]	; (1bdc <xTaskRemoveFromEventList+0x9c>)
    1b70:	2001      	movhi	r0, #1
    1b72:	6018      	strhi	r0, [r3, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1b74:	4b1a      	ldr	r3, [pc, #104]	; (1be0 <xTaskRemoveFromEventList+0xa0>)
    1b76:	681a      	ldr	r2, [r3, #0]
    1b78:	6812      	ldr	r2, [r2, #0]
		xReturn = pdFALSE;
    1b7a:	bf98      	it	ls
    1b7c:	2000      	movls	r0, #0
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    1b7e:	b9ba      	cbnz	r2, 1bb0 <xTaskRemoveFromEventList+0x70>
		xNextTaskUnblockTime = portMAX_DELAY;
    1b80:	4b18      	ldr	r3, [pc, #96]	; (1be4 <xTaskRemoveFromEventList+0xa4>)
    1b82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1b86:	601a      	str	r2, [r3, #0]
}
    1b88:	bd38      	pop	{r3, r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    1b8a:	1d25      	adds	r5, r4, #4
    1b8c:	4628      	mov	r0, r5
    1b8e:	f7fe fcb5 	bl	4fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    1b92:	4a15      	ldr	r2, [pc, #84]	; (1be8 <xTaskRemoveFromEventList+0xa8>)
    1b94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1b96:	6811      	ldr	r1, [r2, #0]
    1b98:	4814      	ldr	r0, [pc, #80]	; (1bec <xTaskRemoveFromEventList+0xac>)
    1b9a:	428b      	cmp	r3, r1
    1b9c:	bf88      	it	hi
    1b9e:	6013      	strhi	r3, [r2, #0]
    1ba0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1ba4:	4629      	mov	r1, r5
    1ba6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    1baa:	f7fe fc7d 	bl	4a8 <vListInsertEnd>
    1bae:	e7d8      	b.n	1b62 <xTaskRemoveFromEventList+0x22>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1bb0:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    1bb2:	4b0c      	ldr	r3, [pc, #48]	; (1be4 <xTaskRemoveFromEventList+0xa4>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    1bb4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    1bb6:	68d2      	ldr	r2, [r2, #12]
    1bb8:	6852      	ldr	r2, [r2, #4]
    1bba:	601a      	str	r2, [r3, #0]
}
    1bbc:	bd38      	pop	{r3, r4, r5, pc}
    1bbe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    1bc2:	f383 8811 	msr	BASEPRI, r3
    1bc6:	f3bf 8f6f 	isb	sy
    1bca:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
    1bce:	e7fe      	b.n	1bce <xTaskRemoveFromEventList+0x8e>
    1bd0:	0000cafc 	.word	0x0000cafc
    1bd4:	0000cb38 	.word	0x0000cb38
    1bd8:	0000ca80 	.word	0x0000ca80
    1bdc:	0000cb7c 	.word	0x0000cb7c
    1be0:	0000ca84 	.word	0x0000ca84
    1be4:	0000cb30 	.word	0x0000cb30
    1be8:	0000cb04 	.word	0x0000cb04
    1bec:	0000ca8c 	.word	0x0000ca8c

00001bf0 <vTaskRemoveFromUnorderedEventList>:
{
    1bf0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
    1bf2:	4b1c      	ldr	r3, [pc, #112]	; (1c64 <vTaskRemoveFromUnorderedEventList+0x74>)
    1bf4:	681b      	ldr	r3, [r3, #0]
    1bf6:	b943      	cbnz	r3, 1c0a <vTaskRemoveFromUnorderedEventList+0x1a>
    1bf8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    1bfc:	f383 8811 	msr	BASEPRI, r3
    1c00:	f3bf 8f6f 	isb	sy
    1c04:	f3bf 8f4f 	dsb	sy
    1c08:	e7fe      	b.n	1c08 <vTaskRemoveFromUnorderedEventList+0x18>
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    1c0a:	68c4      	ldr	r4, [r0, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    1c0c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    1c10:	6001      	str	r1, [r0, #0]
	configASSERT( pxUnblockedTCB );
    1c12:	b1ec      	cbz	r4, 1c50 <vTaskRemoveFromUnorderedEventList+0x60>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    1c14:	1d25      	adds	r5, r4, #4
	( void ) uxListRemove( pxEventListItem );
    1c16:	f7fe fc71 	bl	4fc <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    1c1a:	4628      	mov	r0, r5
    1c1c:	f7fe fc6e 	bl	4fc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    1c20:	4a11      	ldr	r2, [pc, #68]	; (1c68 <vTaskRemoveFromUnorderedEventList+0x78>)
    1c22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1c24:	6811      	ldr	r1, [r2, #0]
    1c26:	4811      	ldr	r0, [pc, #68]	; (1c6c <vTaskRemoveFromUnorderedEventList+0x7c>)
    1c28:	428b      	cmp	r3, r1
    1c2a:	bf88      	it	hi
    1c2c:	6013      	strhi	r3, [r2, #0]
    1c2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1c32:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    1c36:	4629      	mov	r1, r5
    1c38:	f7fe fc36 	bl	4a8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    1c3c:	4b0c      	ldr	r3, [pc, #48]	; (1c70 <vTaskRemoveFromUnorderedEventList+0x80>)
    1c3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    1c40:	681b      	ldr	r3, [r3, #0]
    1c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1c44:	429a      	cmp	r2, r3
    1c46:	d902      	bls.n	1c4e <vTaskRemoveFromUnorderedEventList+0x5e>
		xYieldPending = pdTRUE;
    1c48:	4b0a      	ldr	r3, [pc, #40]	; (1c74 <vTaskRemoveFromUnorderedEventList+0x84>)
    1c4a:	2201      	movs	r2, #1
    1c4c:	601a      	str	r2, [r3, #0]
}
    1c4e:	bd38      	pop	{r3, r4, r5, pc}
    1c50:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    1c54:	f383 8811 	msr	BASEPRI, r3
    1c58:	f3bf 8f6f 	isb	sy
    1c5c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
    1c60:	e7fe      	b.n	1c60 <vTaskRemoveFromUnorderedEventList+0x70>
    1c62:	bf00      	nop
    1c64:	0000cafc 	.word	0x0000cafc
    1c68:	0000cb04 	.word	0x0000cb04
    1c6c:	0000ca8c 	.word	0x0000ca8c
    1c70:	0000ca80 	.word	0x0000ca80
    1c74:	0000cb7c 	.word	0x0000cb7c

00001c78 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
    1c78:	b168      	cbz	r0, 1c96 <vTaskSetTimeOutState+0x1e>
{
    1c7a:	b510      	push	{r4, lr}
    1c7c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
    1c7e:	f000 fdd9 	bl	2834 <vPortEnterCritical>
		pxTimeOut->xOverflowCount = xNumOfOverflows;
    1c82:	4a09      	ldr	r2, [pc, #36]	; (1ca8 <vTaskSetTimeOutState+0x30>)
		pxTimeOut->xTimeOnEntering = xTickCount;
    1c84:	4b09      	ldr	r3, [pc, #36]	; (1cac <vTaskSetTimeOutState+0x34>)
		pxTimeOut->xOverflowCount = xNumOfOverflows;
    1c86:	6812      	ldr	r2, [r2, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
    1c88:	681b      	ldr	r3, [r3, #0]
    1c8a:	e9c4 2300 	strd	r2, r3, [r4]
}
    1c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	taskEXIT_CRITICAL();
    1c92:	f000 bdf1 	b.w	2878 <vPortExitCritical>
    1c96:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    1c9a:	f383 8811 	msr	BASEPRI, r3
    1c9e:	f3bf 8f6f 	isb	sy
    1ca2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
    1ca6:	e7fe      	b.n	1ca6 <vTaskSetTimeOutState+0x2e>
    1ca8:	0000cb34 	.word	0x0000cb34
    1cac:	0000cb78 	.word	0x0000cb78

00001cb0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1cb0:	4a03      	ldr	r2, [pc, #12]	; (1cc0 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
    1cb2:	4b04      	ldr	r3, [pc, #16]	; (1cc4 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1cb4:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    1cb6:	681b      	ldr	r3, [r3, #0]
    1cb8:	e9c0 2300 	strd	r2, r3, [r0]
}
    1cbc:	4770      	bx	lr
    1cbe:	bf00      	nop
    1cc0:	0000cb34 	.word	0x0000cb34
    1cc4:	0000cb78 	.word	0x0000cb78

00001cc8 <xTaskCheckForTimeOut>:
{
    1cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
    1cca:	b308      	cbz	r0, 1d10 <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
    1ccc:	b1b9      	cbz	r1, 1cfe <xTaskCheckForTimeOut+0x36>
    1cce:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
    1cd0:	4604      	mov	r4, r0
    1cd2:	f000 fdaf 	bl	2834 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
    1cd6:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
    1cd8:	f8df c078 	ldr.w	ip, [pc, #120]	; 1d54 <xTaskCheckForTimeOut+0x8c>
			if( *pxTicksToWait == portMAX_DELAY )
    1cdc:	1c5a      	adds	r2, r3, #1
		const TickType_t xConstTickCount = xTickCount;
    1cde:	f8dc 1000 	ldr.w	r1, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
    1ce2:	d02b      	beq.n	1d3c <xTaskCheckForTimeOut+0x74>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1ce4:	4e1a      	ldr	r6, [pc, #104]	; (1d50 <xTaskCheckForTimeOut+0x88>)
    1ce6:	e9d4 0200 	ldrd	r0, r2, [r4]
    1cea:	6837      	ldr	r7, [r6, #0]
    1cec:	42b8      	cmp	r0, r7
    1cee:	d018      	beq.n	1d22 <xTaskCheckForTimeOut+0x5a>
    1cf0:	428a      	cmp	r2, r1
    1cf2:	d816      	bhi.n	1d22 <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
    1cf4:	2501      	movs	r5, #1
	taskEXIT_CRITICAL();
    1cf6:	f000 fdbf 	bl	2878 <vPortExitCritical>
}
    1cfa:	4628      	mov	r0, r5
    1cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1cfe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    1d02:	f383 8811 	msr	BASEPRI, r3
    1d06:	f3bf 8f6f 	isb	sy
    1d0a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
    1d0e:	e7fe      	b.n	1d0e <xTaskCheckForTimeOut+0x46>
    1d10:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    1d14:	f383 8811 	msr	BASEPRI, r3
    1d18:	f3bf 8f6f 	isb	sy
    1d1c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
    1d20:	e7fe      	b.n	1d20 <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    1d22:	1a8f      	subs	r7, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    1d24:	42bb      	cmp	r3, r7
    1d26:	d90e      	bls.n	1d46 <xTaskCheckForTimeOut+0x7e>
			*pxTicksToWait -= xElapsedTime;
    1d28:	1a5b      	subs	r3, r3, r1
    1d2a:	4413      	add	r3, r2
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    1d2c:	6831      	ldr	r1, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    1d2e:	f8dc 2000 	ldr.w	r2, [ip]
			*pxTicksToWait -= xElapsedTime;
    1d32:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
    1d34:	2500      	movs	r5, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
    1d36:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
    1d3a:	e7dc      	b.n	1cf6 <xTaskCheckForTimeOut+0x2e>
				xReturn = pdFALSE;
    1d3c:	2500      	movs	r5, #0
	taskEXIT_CRITICAL();
    1d3e:	f000 fd9b 	bl	2878 <vPortExitCritical>
}
    1d42:	4628      	mov	r0, r5
    1d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
    1d46:	2300      	movs	r3, #0
    1d48:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
    1d4a:	2501      	movs	r5, #1
    1d4c:	e7d3      	b.n	1cf6 <xTaskCheckForTimeOut+0x2e>
    1d4e:	bf00      	nop
    1d50:	0000cb34 	.word	0x0000cb34
    1d54:	0000cb78 	.word	0x0000cb78

00001d58 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    1d58:	4b01      	ldr	r3, [pc, #4]	; (1d60 <vTaskMissedYield+0x8>)
    1d5a:	2201      	movs	r2, #1
    1d5c:	601a      	str	r2, [r3, #0]
}
    1d5e:	4770      	bx	lr
    1d60:	0000cb7c 	.word	0x0000cb7c

00001d64 <eTaskConfirmSleepModeStatus>:
		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
    1d64:	4b09      	ldr	r3, [pc, #36]	; (1d8c <eTaskConfirmSleepModeStatus+0x28>)
    1d66:	6818      	ldr	r0, [r3, #0]
    1d68:	b918      	cbnz	r0, 1d72 <eTaskConfirmSleepModeStatus+0xe>
		else if( xYieldPending != pdFALSE )
    1d6a:	4b09      	ldr	r3, [pc, #36]	; (1d90 <eTaskConfirmSleepModeStatus+0x2c>)
    1d6c:	681b      	ldr	r3, [r3, #0]
    1d6e:	b113      	cbz	r3, 1d76 <eTaskConfirmSleepModeStatus+0x12>
	}
    1d70:	4770      	bx	lr
			eReturn = eAbortSleep;
    1d72:	2000      	movs	r0, #0
	}
    1d74:	4770      	bx	lr
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
    1d76:	4a07      	ldr	r2, [pc, #28]	; (1d94 <eTaskConfirmSleepModeStatus+0x30>)
    1d78:	4b07      	ldr	r3, [pc, #28]	; (1d98 <eTaskConfirmSleepModeStatus+0x34>)
    1d7a:	6810      	ldr	r0, [r2, #0]
    1d7c:	681b      	ldr	r3, [r3, #0]
    1d7e:	3b01      	subs	r3, #1
				eReturn = eNoTasksWaitingTimeout;
    1d80:	4298      	cmp	r0, r3
    1d82:	bf14      	ite	ne
    1d84:	2001      	movne	r0, #1
    1d86:	2002      	moveq	r0, #2
    1d88:	4770      	bx	lr
    1d8a:	bf00      	nop
    1d8c:	0000cb38 	.word	0x0000cb38
    1d90:	0000cb7c 	.word	0x0000cb7c
    1d94:	0000cb50 	.word	0x0000cb50
    1d98:	0000caf0 	.word	0x0000caf0

00001d9c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
    1d9c:	4b01      	ldr	r3, [pc, #4]	; (1da4 <xTaskGetCurrentTaskHandle+0x8>)
    1d9e:	6818      	ldr	r0, [r3, #0]
	}
    1da0:	4770      	bx	lr
    1da2:	bf00      	nop
    1da4:	0000ca80 	.word	0x0000ca80

00001da8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
    1da8:	4b05      	ldr	r3, [pc, #20]	; (1dc0 <xTaskGetSchedulerState+0x18>)
    1daa:	681b      	ldr	r3, [r3, #0]
    1dac:	b133      	cbz	r3, 1dbc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1dae:	4b05      	ldr	r3, [pc, #20]	; (1dc4 <xTaskGetSchedulerState+0x1c>)
    1db0:	681b      	ldr	r3, [r3, #0]
    1db2:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
    1db4:	bf0c      	ite	eq
    1db6:	2002      	moveq	r0, #2
    1db8:	2000      	movne	r0, #0
    1dba:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
    1dbc:	2001      	movs	r0, #1
	}
    1dbe:	4770      	bx	lr
    1dc0:	0000cb4c 	.word	0x0000cb4c
    1dc4:	0000cafc 	.word	0x0000cafc

00001dc8 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
    1dc8:	b318      	cbz	r0, 1e12 <xTaskPriorityInherit+0x4a>
	{
    1dca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    1dcc:	4c1c      	ldr	r4, [pc, #112]	; (1e40 <xTaskPriorityInherit+0x78>)
    1dce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    1dd0:	6822      	ldr	r2, [r4, #0]
    1dd2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1dd4:	4293      	cmp	r3, r2
    1dd6:	d214      	bcs.n	1e02 <xTaskPriorityInherit+0x3a>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    1dd8:	6982      	ldr	r2, [r0, #24]
    1dda:	2a00      	cmp	r2, #0
    1ddc:	db04      	blt.n	1de8 <xTaskPriorityInherit+0x20>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1dde:	6822      	ldr	r2, [r4, #0]
    1de0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    1de2:	f1c2 0205 	rsb	r2, r2, #5
    1de6:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    1de8:	4d16      	ldr	r5, [pc, #88]	; (1e44 <xTaskPriorityInherit+0x7c>)
    1dea:	6942      	ldr	r2, [r0, #20]
    1dec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1df0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    1df4:	429a      	cmp	r2, r3
    1df6:	d00d      	beq.n	1e14 <xTaskPriorityInherit+0x4c>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    1df8:	6823      	ldr	r3, [r4, #0]
    1dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1dfc:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
    1dfe:	2001      	movs	r0, #1
	}
    1e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    1e02:	6823      	ldr	r3, [r4, #0]
    1e04:	6c80      	ldr	r0, [r0, #72]	; 0x48
    1e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1e08:	4298      	cmp	r0, r3
    1e0a:	bf2c      	ite	cs
    1e0c:	2000      	movcs	r0, #0
    1e0e:	2001      	movcc	r0, #1
	}
    1e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e12:	4770      	bx	lr
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1e14:	1d06      	adds	r6, r0, #4
    1e16:	4607      	mov	r7, r0
    1e18:	4630      	mov	r0, r6
    1e1a:	f7fe fb6f 	bl	4fc <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    1e1e:	6822      	ldr	r2, [r4, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
    1e20:	4b09      	ldr	r3, [pc, #36]	; (1e48 <xTaskPriorityInherit+0x80>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    1e22:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    1e24:	681a      	ldr	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    1e26:	62f8      	str	r0, [r7, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    1e28:	4290      	cmp	r0, r2
    1e2a:	d900      	bls.n	1e2e <xTaskPriorityInherit+0x66>
    1e2c:	6018      	str	r0, [r3, #0]
    1e2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1e32:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1e36:	4631      	mov	r1, r6
    1e38:	f7fe fb36 	bl	4a8 <vListInsertEnd>
				xReturn = pdTRUE;
    1e3c:	2001      	movs	r0, #1
	}
    1e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e40:	0000ca80 	.word	0x0000ca80
    1e44:	0000ca8c 	.word	0x0000ca8c
    1e48:	0000cb04 	.word	0x0000cb04

00001e4c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
    1e4c:	b1c0      	cbz	r0, 1e80 <xTaskPriorityDisinherit+0x34>
	{
    1e4e:	b538      	push	{r3, r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
    1e50:	4b1d      	ldr	r3, [pc, #116]	; (1ec8 <xTaskPriorityDisinherit+0x7c>)
    1e52:	681c      	ldr	r4, [r3, #0]
    1e54:	4284      	cmp	r4, r0
    1e56:	d008      	beq.n	1e6a <xTaskPriorityDisinherit+0x1e>
    1e58:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    1e5c:	f383 8811 	msr	BASEPRI, r3
    1e60:	f3bf 8f6f 	isb	sy
    1e64:	f3bf 8f4f 	dsb	sy
    1e68:	e7fe      	b.n	1e68 <xTaskPriorityDisinherit+0x1c>
			configASSERT( pxTCB->uxMutexesHeld );
    1e6a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    1e6c:	b153      	cbz	r3, 1e84 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1e6e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1e70:	6ca2      	ldr	r2, [r4, #72]	; 0x48
			( pxTCB->uxMutexesHeld )--;
    1e72:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1e74:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
    1e76:	64e3      	str	r3, [r4, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1e78:	d000      	beq.n	1e7c <xTaskPriorityDisinherit+0x30>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    1e7a:	b163      	cbz	r3, 1e96 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
    1e7c:	2000      	movs	r0, #0
	}
    1e7e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
    1e80:	2000      	movs	r0, #0
	}
    1e82:	4770      	bx	lr
    1e84:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    1e88:	f383 8811 	msr	BASEPRI, r3
    1e8c:	f3bf 8f6f 	isb	sy
    1e90:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
    1e94:	e7fe      	b.n	1e94 <xTaskPriorityDisinherit+0x48>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1e96:	1d25      	adds	r5, r4, #4
    1e98:	4628      	mov	r0, r5
    1e9a:	f7fe fb2f 	bl	4fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    1e9e:	4a0b      	ldr	r2, [pc, #44]	; (1ecc <xTaskPriorityDisinherit+0x80>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    1ea0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
					prvAddTaskToReadyList( pxTCB );
    1ea2:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    1ea4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1ea6:	f1c3 0005 	rsb	r0, r3, #5
					prvAddTaskToReadyList( pxTCB );
    1eaa:	428b      	cmp	r3, r1
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1eac:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
    1eae:	4808      	ldr	r0, [pc, #32]	; (1ed0 <xTaskPriorityDisinherit+0x84>)
    1eb0:	bf88      	it	hi
    1eb2:	6013      	strhi	r3, [r2, #0]
    1eb4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1eb8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    1ebc:	4629      	mov	r1, r5
    1ebe:	f7fe faf3 	bl	4a8 <vListInsertEnd>
					xReturn = pdTRUE;
    1ec2:	2001      	movs	r0, #1
	}
    1ec4:	bd38      	pop	{r3, r4, r5, pc}
    1ec6:	bf00      	nop
    1ec8:	0000ca80 	.word	0x0000ca80
    1ecc:	0000cb04 	.word	0x0000cb04
    1ed0:	0000ca8c 	.word	0x0000ca8c

00001ed4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
    1ed4:	b1a8      	cbz	r0, 1f02 <vTaskPriorityDisinheritAfterTimeout+0x2e>
	{
    1ed6:	b570      	push	{r4, r5, r6, lr}
			configASSERT( pxTCB->uxMutexesHeld );
    1ed8:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
    1eda:	b14c      	cbz	r4, 1ef0 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
    1edc:	6c82      	ldr	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != uxPriorityToUse )
    1ede:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    1ee0:	428a      	cmp	r2, r1
    1ee2:	bf38      	it	cc
    1ee4:	460a      	movcc	r2, r1
    1ee6:	4293      	cmp	r3, r2
    1ee8:	d001      	beq.n	1eee <vTaskPriorityDisinheritAfterTimeout+0x1a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    1eea:	2c01      	cmp	r4, #1
    1eec:	d00a      	beq.n	1f04 <vTaskPriorityDisinheritAfterTimeout+0x30>
	}
    1eee:	bd70      	pop	{r4, r5, r6, pc}
    1ef0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    1ef4:	f383 8811 	msr	BASEPRI, r3
    1ef8:	f3bf 8f6f 	isb	sy
    1efc:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
    1f00:	e7fe      	b.n	1f00 <vTaskPriorityDisinheritAfterTimeout+0x2c>
    1f02:	4770      	bx	lr
					configASSERT( pxTCB != pxCurrentTCB );
    1f04:	4918      	ldr	r1, [pc, #96]	; (1f68 <vTaskPriorityDisinheritAfterTimeout+0x94>)
    1f06:	6809      	ldr	r1, [r1, #0]
    1f08:	4281      	cmp	r1, r0
    1f0a:	d023      	beq.n	1f54 <vTaskPriorityDisinheritAfterTimeout+0x80>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    1f0c:	6981      	ldr	r1, [r0, #24]
					pxTCB->uxPriority = uxPriorityToUse;
    1f0e:	62c2      	str	r2, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    1f10:	2900      	cmp	r1, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1f12:	bfa8      	it	ge
    1f14:	f1c2 0205 	rsbge	r2, r2, #5
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    1f18:	4e14      	ldr	r6, [pc, #80]	; (1f6c <vTaskPriorityDisinheritAfterTimeout+0x98>)
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1f1a:	bfa8      	it	ge
    1f1c:	6182      	strge	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    1f1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1f22:	6942      	ldr	r2, [r0, #20]
    1f24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    1f28:	429a      	cmp	r2, r3
    1f2a:	d1e0      	bne.n	1eee <vTaskPriorityDisinheritAfterTimeout+0x1a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1f2c:	1d05      	adds	r5, r0, #4
    1f2e:	4604      	mov	r4, r0
    1f30:	4628      	mov	r0, r5
    1f32:	f7fe fae3 	bl	4fc <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
    1f36:	4b0e      	ldr	r3, [pc, #56]	; (1f70 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    1f38:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1f3a:	681a      	ldr	r2, [r3, #0]
    1f3c:	4290      	cmp	r0, r2
    1f3e:	bf88      	it	hi
    1f40:	6018      	strhi	r0, [r3, #0]
    1f42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1f46:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    1f4a:	4629      	mov	r1, r5
	}
    1f4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
    1f50:	f7fe baaa 	b.w	4a8 <vListInsertEnd>
    1f54:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    1f58:	f383 8811 	msr	BASEPRI, r3
    1f5c:	f3bf 8f6f 	isb	sy
    1f60:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
    1f64:	e7fe      	b.n	1f64 <vTaskPriorityDisinheritAfterTimeout+0x90>
    1f66:	bf00      	nop
    1f68:	0000ca80 	.word	0x0000ca80
    1f6c:	0000ca8c 	.word	0x0000ca8c
    1f70:	0000cb04 	.word	0x0000cb04

00001f74 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    1f74:	4a04      	ldr	r2, [pc, #16]	; (1f88 <uxTaskResetEventItemValue+0x14>)
    1f76:	6811      	ldr	r1, [r2, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1f78:	6813      	ldr	r3, [r2, #0]
    1f7a:	6812      	ldr	r2, [r2, #0]
    1f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    1f7e:	6988      	ldr	r0, [r1, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1f80:	f1c3 0305 	rsb	r3, r3, #5
    1f84:	6193      	str	r3, [r2, #24]
}
    1f86:	4770      	bx	lr
    1f88:	0000ca80 	.word	0x0000ca80

00001f8c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
    1f8c:	4b04      	ldr	r3, [pc, #16]	; (1fa0 <pvTaskIncrementMutexHeldCount+0x14>)
    1f8e:	681a      	ldr	r2, [r3, #0]
    1f90:	b11a      	cbz	r2, 1f9a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
    1f92:	6819      	ldr	r1, [r3, #0]
    1f94:	6cca      	ldr	r2, [r1, #76]	; 0x4c
    1f96:	3201      	adds	r2, #1
    1f98:	64ca      	str	r2, [r1, #76]	; 0x4c
		return pxCurrentTCB;
    1f9a:	6818      	ldr	r0, [r3, #0]
	}
    1f9c:	4770      	bx	lr
    1f9e:	bf00      	nop
    1fa0:	0000ca80 	.word	0x0000ca80

00001fa4 <xTaskNotifyWait>:
	{
    1fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    1fa8:	4c31      	ldr	r4, [pc, #196]	; (2070 <xTaskNotifyWait+0xcc>)
	{
    1faa:	461e      	mov	r6, r3
    1fac:	4680      	mov	r8, r0
    1fae:	460f      	mov	r7, r1
    1fb0:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
    1fb2:	f000 fc3f 	bl	2834 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    1fb6:	6823      	ldr	r3, [r4, #0]
    1fb8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
    1fbc:	2b02      	cmp	r3, #2
    1fbe:	d009      	beq.n	1fd4 <xTaskNotifyWait+0x30>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    1fc0:	6822      	ldr	r2, [r4, #0]
    1fc2:	6d13      	ldr	r3, [r2, #80]	; 0x50
    1fc4:	ea23 0308 	bic.w	r3, r3, r8
    1fc8:	6513      	str	r3, [r2, #80]	; 0x50
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    1fca:	6823      	ldr	r3, [r4, #0]
    1fcc:	2201      	movs	r2, #1
    1fce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				if( xTicksToWait > ( TickType_t ) 0 )
    1fd2:	b9b6      	cbnz	r6, 2002 <xTaskNotifyWait+0x5e>
		taskEXIT_CRITICAL();
    1fd4:	f000 fc50 	bl	2878 <vPortExitCritical>
		taskENTER_CRITICAL();
    1fd8:	f000 fc2c 	bl	2834 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
    1fdc:	b115      	cbz	r5, 1fe4 <xTaskNotifyWait+0x40>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    1fde:	6823      	ldr	r3, [r4, #0]
    1fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1fe2:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    1fe4:	6823      	ldr	r3, [r4, #0]
    1fe6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
    1fea:	2b02      	cmp	r3, #2
    1fec:	d026      	beq.n	203c <xTaskNotifyWait+0x98>
				xReturn = pdFALSE;
    1fee:	2500      	movs	r5, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    1ff0:	6823      	ldr	r3, [r4, #0]
    1ff2:	2200      	movs	r2, #0
    1ff4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		taskEXIT_CRITICAL();
    1ff8:	f000 fc3e 	bl	2878 <vPortExitCritical>
	}
    1ffc:	4628      	mov	r0, r5
    1ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
const TickType_t xConstTickCount = xTickCount;
    2002:	4b1c      	ldr	r3, [pc, #112]	; (2074 <xTaskNotifyWait+0xd0>)
    2004:	f8d3 8000 	ldr.w	r8, [r3]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2008:	6820      	ldr	r0, [r4, #0]
    200a:	3004      	adds	r0, #4
    200c:	f7fe fa76 	bl	4fc <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    2010:	1c73      	adds	r3, r6, #1
    2012:	d01a      	beq.n	204a <xTaskNotifyWait+0xa6>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    2014:	6823      	ldr	r3, [r4, #0]
    2016:	eb16 0608 	adds.w	r6, r6, r8
    201a:	605e      	str	r6, [r3, #4]
			if( xTimeToWake < xConstTickCount )
    201c:	d31b      	bcc.n	2056 <xTaskNotifyWait+0xb2>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    201e:	4b16      	ldr	r3, [pc, #88]	; (2078 <xTaskNotifyWait+0xd4>)
    2020:	6818      	ldr	r0, [r3, #0]
    2022:	6821      	ldr	r1, [r4, #0]
    2024:	3104      	adds	r1, #4
    2026:	f7fe fa4f 	bl	4c8 <vListInsert>
					portYIELD_WITHIN_API();
    202a:	4b14      	ldr	r3, [pc, #80]	; (207c <xTaskNotifyWait+0xd8>)
    202c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2030:	601a      	str	r2, [r3, #0]
    2032:	f3bf 8f4f 	dsb	sy
    2036:	f3bf 8f6f 	isb	sy
    203a:	e7cb      	b.n	1fd4 <xTaskNotifyWait+0x30>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    203c:	6822      	ldr	r2, [r4, #0]
    203e:	6d13      	ldr	r3, [r2, #80]	; 0x50
    2040:	ea23 0707 	bic.w	r7, r3, r7
    2044:	6517      	str	r7, [r2, #80]	; 0x50
				xReturn = pdTRUE;
    2046:	2501      	movs	r5, #1
    2048:	e7d2      	b.n	1ff0 <xTaskNotifyWait+0x4c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    204a:	6821      	ldr	r1, [r4, #0]
    204c:	480c      	ldr	r0, [pc, #48]	; (2080 <xTaskNotifyWait+0xdc>)
    204e:	3104      	adds	r1, #4
    2050:	f7fe fa2a 	bl	4a8 <vListInsertEnd>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
    2054:	e7e9      	b.n	202a <xTaskNotifyWait+0x86>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2056:	4b0b      	ldr	r3, [pc, #44]	; (2084 <xTaskNotifyWait+0xe0>)
    2058:	6818      	ldr	r0, [r3, #0]
    205a:	6821      	ldr	r1, [r4, #0]
    205c:	3104      	adds	r1, #4
    205e:	f7fe fa33 	bl	4c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
    2062:	4b09      	ldr	r3, [pc, #36]	; (2088 <xTaskNotifyWait+0xe4>)
    2064:	681a      	ldr	r2, [r3, #0]
    2066:	4296      	cmp	r6, r2
					xNextTaskUnblockTime = xTimeToWake;
    2068:	bf38      	it	cc
    206a:	601e      	strcc	r6, [r3, #0]
    206c:	e7dd      	b.n	202a <xTaskNotifyWait+0x86>
    206e:	bf00      	nop
    2070:	0000ca80 	.word	0x0000ca80
    2074:	0000cb78 	.word	0x0000cb78
    2078:	0000ca88 	.word	0x0000ca88
    207c:	e000ed04 	.word	0xe000ed04
    2080:	0000cb50 	.word	0x0000cb50
    2084:	0000ca84 	.word	0x0000ca84
    2088:	0000cb30 	.word	0x0000cb30

0000208c <xTaskGenericNotify>:
	{
    208c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
    208e:	b1a8      	cbz	r0, 20bc <xTaskGenericNotify+0x30>
		pxTCB = ( TCB_t * ) xTaskToNotify;
    2090:	461f      	mov	r7, r3
    2092:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
    2094:	4615      	mov	r5, r2
    2096:	460e      	mov	r6, r1
    2098:	f000 fbcc 	bl	2834 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
    209c:	b10f      	cbz	r7, 20a2 <xTaskGenericNotify+0x16>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    209e:	6d23      	ldr	r3, [r4, #80]	; 0x50
    20a0:	603b      	str	r3, [r7, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    20a2:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    20a6:	2102      	movs	r1, #2
			switch( eAction )
    20a8:	1e6b      	subs	r3, r5, #1
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    20aa:	b2d2      	uxtb	r2, r2
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    20ac:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
			switch( eAction )
    20b0:	2b03      	cmp	r3, #3
    20b2:	d80f      	bhi.n	20d4 <xTaskGenericNotify+0x48>
    20b4:	e8df f003 	tbb	[pc, r3]
    20b8:	0b0d4d49 	.word	0x0b0d4d49
    20bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    20c0:	f383 8811 	msr	BASEPRI, r3
    20c4:	f3bf 8f6f 	isb	sy
    20c8:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
    20cc:	e7fe      	b.n	20cc <xTaskGenericNotify+0x40>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    20ce:	2a02      	cmp	r2, #2
    20d0:	d043      	beq.n	215a <xTaskGenericNotify+0xce>
						pxTCB->ulNotifiedValue = ulValue;
    20d2:	6526      	str	r6, [r4, #80]	; 0x50
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    20d4:	2a01      	cmp	r2, #1
    20d6:	d004      	beq.n	20e2 <xTaskGenericNotify+0x56>
					taskYIELD_IF_USING_PREEMPTION();
    20d8:	2401      	movs	r4, #1
		taskEXIT_CRITICAL();
    20da:	f000 fbcd 	bl	2878 <vPortExitCritical>
	}
    20de:	4620      	mov	r0, r4
    20e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    20e2:	1d25      	adds	r5, r4, #4
    20e4:	4628      	mov	r0, r5
    20e6:	f7fe fa09 	bl	4fc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    20ea:	4a20      	ldr	r2, [pc, #128]	; (216c <xTaskGenericNotify+0xe0>)
    20ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    20ee:	6811      	ldr	r1, [r2, #0]
    20f0:	481f      	ldr	r0, [pc, #124]	; (2170 <xTaskGenericNotify+0xe4>)
    20f2:	428b      	cmp	r3, r1
    20f4:	bf88      	it	hi
    20f6:	6013      	strhi	r3, [r2, #0]
    20f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    20fc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    2100:	4629      	mov	r1, r5
    2102:	f7fe f9d1 	bl	4a8 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
    2106:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2108:	b143      	cbz	r3, 211c <xTaskGenericNotify+0x90>
    210a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    210e:	f383 8811 	msr	BASEPRI, r3
    2112:	f3bf 8f6f 	isb	sy
    2116:	f3bf 8f4f 	dsb	sy
    211a:	e7fe      	b.n	211a <xTaskGenericNotify+0x8e>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    211c:	4b15      	ldr	r3, [pc, #84]	; (2174 <xTaskGenericNotify+0xe8>)
    211e:	681a      	ldr	r2, [r3, #0]
    2120:	6812      	ldr	r2, [r2, #0]
    2122:	b9e2      	cbnz	r2, 215e <xTaskGenericNotify+0xd2>
		xNextTaskUnblockTime = portMAX_DELAY;
    2124:	4b14      	ldr	r3, [pc, #80]	; (2178 <xTaskGenericNotify+0xec>)
    2126:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    212a:	601a      	str	r2, [r3, #0]
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    212c:	4b13      	ldr	r3, [pc, #76]	; (217c <xTaskGenericNotify+0xf0>)
    212e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    2130:	681b      	ldr	r3, [r3, #0]
    2132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2134:	429a      	cmp	r2, r3
    2136:	d9cf      	bls.n	20d8 <xTaskGenericNotify+0x4c>
					taskYIELD_IF_USING_PREEMPTION();
    2138:	4b11      	ldr	r3, [pc, #68]	; (2180 <xTaskGenericNotify+0xf4>)
    213a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    213e:	601a      	str	r2, [r3, #0]
    2140:	f3bf 8f4f 	dsb	sy
    2144:	f3bf 8f6f 	isb	sy
    2148:	e7c6      	b.n	20d8 <xTaskGenericNotify+0x4c>
					pxTCB->ulNotifiedValue |= ulValue;
    214a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    214c:	431e      	orrs	r6, r3
    214e:	6526      	str	r6, [r4, #80]	; 0x50
					break;
    2150:	e7c0      	b.n	20d4 <xTaskGenericNotify+0x48>
					( pxTCB->ulNotifiedValue )++;
    2152:	6d23      	ldr	r3, [r4, #80]	; 0x50
    2154:	3301      	adds	r3, #1
    2156:	6523      	str	r3, [r4, #80]	; 0x50
					break;
    2158:	e7bc      	b.n	20d4 <xTaskGenericNotify+0x48>
						xReturn = pdFAIL;
    215a:	2400      	movs	r4, #0
    215c:	e7bd      	b.n	20da <xTaskGenericNotify+0x4e>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    215e:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    2160:	4b05      	ldr	r3, [pc, #20]	; (2178 <xTaskGenericNotify+0xec>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2162:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    2164:	68d2      	ldr	r2, [r2, #12]
    2166:	6852      	ldr	r2, [r2, #4]
    2168:	601a      	str	r2, [r3, #0]
    216a:	e7df      	b.n	212c <xTaskGenericNotify+0xa0>
    216c:	0000cb04 	.word	0x0000cb04
    2170:	0000ca8c 	.word	0x0000ca8c
    2174:	0000ca84 	.word	0x0000ca84
    2178:	0000cb30 	.word	0x0000cb30
    217c:	0000ca80 	.word	0x0000ca80
    2180:	e000ed04 	.word	0xe000ed04

00002184 <xTaskNotifyStateClear>:
	{
    2184:	b510      	push	{r4, lr}
		pxTCB = prvGetTCBFromHandle( xTask );
    2186:	b178      	cbz	r0, 21a8 <xTaskNotifyStateClear+0x24>
    2188:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
    218a:	f000 fb53 	bl	2834 <vPortEnterCritical>
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    218e:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
    2192:	2b02      	cmp	r3, #2
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2194:	bf05      	ittet	eq
    2196:	2300      	moveq	r3, #0
    2198:	f884 3054 	strbeq.w	r3, [r4, #84]	; 0x54
				xReturn = pdFAIL;
    219c:	2400      	movne	r4, #0
				xReturn = pdPASS;
    219e:	2401      	moveq	r4, #1
		taskEXIT_CRITICAL();
    21a0:	f000 fb6a 	bl	2878 <vPortExitCritical>
	}
    21a4:	4620      	mov	r0, r4
    21a6:	bd10      	pop	{r4, pc}
		pxTCB = prvGetTCBFromHandle( xTask );
    21a8:	4b01      	ldr	r3, [pc, #4]	; (21b0 <xTaskNotifyStateClear+0x2c>)
    21aa:	681c      	ldr	r4, [r3, #0]
    21ac:	e7ed      	b.n	218a <xTaskNotifyStateClear+0x6>
    21ae:	bf00      	nop
    21b0:	0000ca80 	.word	0x0000ca80

000021b4 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    21b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    21b8:	4e21      	ldr	r6, [pc, #132]	; (2240 <prvSwitchTimerLists+0x8c>)
	if( xTimerQueue != NULL )
    21ba:	f8df 908c 	ldr.w	r9, [pc, #140]	; 2248 <prvSwitchTimerLists+0x94>
{
    21be:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
    21c0:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    21c4:	e00c      	b.n	21e0 <prvSwitchTimerLists+0x2c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    21c6:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    21c8:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    21ca:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    21cc:	1d25      	adds	r5, r4, #4
    21ce:	4628      	mov	r0, r5
    21d0:	f7fe f994 	bl	4fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    21d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    21d6:	4620      	mov	r0, r4
    21d8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    21da:	69e3      	ldr	r3, [r4, #28]
    21dc:	2b01      	cmp	r3, #1
    21de:	d00a      	beq.n	21f6 <prvSwitchTimerLists+0x42>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    21e0:	6833      	ldr	r3, [r6, #0]
    21e2:	681a      	ldr	r2, [r3, #0]
    21e4:	2a00      	cmp	r2, #0
    21e6:	d1ee      	bne.n	21c6 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    21e8:	4a16      	ldr	r2, [pc, #88]	; (2244 <prvSwitchTimerLists+0x90>)
    21ea:	6811      	ldr	r1, [r2, #0]
    21ec:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
    21ee:	6013      	str	r3, [r2, #0]
}
    21f0:	b005      	add	sp, #20
    21f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    21f6:	69a3      	ldr	r3, [r4, #24]
    21f8:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
    21fa:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    21fc:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
    21fe:	d205      	bcs.n	220c <prvSwitchTimerLists+0x58>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2200:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2202:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2204:	6830      	ldr	r0, [r6, #0]
    2206:	f7fe f95f 	bl	4c8 <vListInsert>
    220a:	e7e9      	b.n	21e0 <prvSwitchTimerLists+0x2c>
	if( xTimerQueue != NULL )
    220c:	f8d9 3000 	ldr.w	r3, [r9]
    2210:	b16b      	cbz	r3, 222e <prvSwitchTimerLists+0x7a>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2212:	e9cd 8700 	strd	r8, r7, [sp]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    2216:	9402      	str	r4, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2218:	f7ff fdc6 	bl	1da8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    221c:	2300      	movs	r3, #0
    221e:	461a      	mov	r2, r3
    2220:	4669      	mov	r1, sp
    2222:	f8d9 0000 	ldr.w	r0, [r9]
    2226:	f7fe fb49 	bl	8bc <xQueueGenericSend>
				configASSERT( xResult );
    222a:	2800      	cmp	r0, #0
    222c:	d1d8      	bne.n	21e0 <prvSwitchTimerLists+0x2c>
    222e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2232:	f383 8811 	msr	BASEPRI, r3
    2236:	f3bf 8f6f 	isb	sy
    223a:	f3bf 8f4f 	dsb	sy
    223e:	e7fe      	b.n	223e <prvSwitchTimerLists+0x8a>
    2240:	0000cb80 	.word	0x0000cb80
    2244:	0000cb84 	.word	0x0000cb84
    2248:	0000cc58 	.word	0x0000cc58

0000224c <prvTimerTask>:
{
    224c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2250:	4f90      	ldr	r7, [pc, #576]	; (2494 <prvTimerTask+0x248>)
    2252:	4e91      	ldr	r6, [pc, #580]	; (2498 <prvTimerTask+0x24c>)
    2254:	f8df 924c 	ldr.w	r9, [pc, #588]	; 24a4 <prvTimerTask+0x258>
    2258:	4d90      	ldr	r5, [pc, #576]	; (249c <prvTimerTask+0x250>)
    225a:	b08b      	sub	sp, #44	; 0x2c
    225c:	f04f 0a01 	mov.w	sl, #1
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2260:	683b      	ldr	r3, [r7, #0]
    2262:	f8d3 8000 	ldr.w	r8, [r3]
	if( *pxListWasEmpty == pdFALSE )
    2266:	f1b8 0f00 	cmp.w	r8, #0
    226a:	d054      	beq.n	2316 <prvTimerTask+0xca>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    226c:	68db      	ldr	r3, [r3, #12]
    226e:	f8d3 b000 	ldr.w	fp, [r3]
	vTaskSuspendAll();
    2272:	f7ff f8f7 	bl	1464 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
    2276:	f7ff f8fd 	bl	1474 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
    227a:	6832      	ldr	r2, [r6, #0]
    227c:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
    227e:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
    2280:	d35a      	bcc.n	2338 <prvTimerTask+0xec>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2282:	4583      	cmp	fp, r0
	xLastTime = xTimeNow;
    2284:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2286:	d973      	bls.n	2370 <prvTimerTask+0x124>
    2288:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    228a:	ebab 0104 	sub.w	r1, fp, r4
    228e:	6828      	ldr	r0, [r5, #0]
    2290:	f7fe fea8 	bl	fe4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
    2294:	f7ff fa42 	bl	171c <xTaskResumeAll>
    2298:	b938      	cbnz	r0, 22aa <prvTimerTask+0x5e>
					portYIELD_WITHIN_API();
    229a:	4a81      	ldr	r2, [pc, #516]	; (24a0 <prvTimerTask+0x254>)
    229c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    22a0:	6013      	str	r3, [r2, #0]
    22a2:	f3bf 8f4f 	dsb	sy
    22a6:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    22aa:	f04f 0800 	mov.w	r8, #0
    22ae:	2200      	movs	r2, #0
    22b0:	a902      	add	r1, sp, #8
    22b2:	6828      	ldr	r0, [r5, #0]
    22b4:	f7fe fcd4 	bl	c60 <xQueueReceive>
    22b8:	2800      	cmp	r0, #0
    22ba:	d0d1      	beq.n	2260 <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
    22bc:	9b02      	ldr	r3, [sp, #8]
    22be:	9c04      	ldr	r4, [sp, #16]
    22c0:	2b00      	cmp	r3, #0
    22c2:	db1f      	blt.n	2304 <prvTimerTask+0xb8>
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    22c4:	6963      	ldr	r3, [r4, #20]
    22c6:	b113      	cbz	r3, 22ce <prvTimerTask+0x82>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    22c8:	1d20      	adds	r0, r4, #4
    22ca:	f7fe f917 	bl	4fc <uxListRemove>
	xTimeNow = xTaskGetTickCount();
    22ce:	f7ff f8d1 	bl	1474 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
    22d2:	6833      	ldr	r3, [r6, #0]
    22d4:	4298      	cmp	r0, r3
    22d6:	d335      	bcc.n	2344 <prvTimerTask+0xf8>
	xLastTime = xTimeNow;
    22d8:	9b02      	ldr	r3, [sp, #8]
    22da:	6030      	str	r0, [r6, #0]
			switch( xMessage.xMessageID )
    22dc:	2b09      	cmp	r3, #9
    22de:	d8e6      	bhi.n	22ae <prvTimerTask+0x62>
    22e0:	fa0a f303 	lsl.w	r3, sl, r3
    22e4:	f413 7f04 	tst.w	r3, #528	; 0x210
    22e8:	d131      	bne.n	234e <prvTimerTask+0x102>
    22ea:	f013 0fc7 	tst.w	r3, #199	; 0xc7
    22ee:	d155      	bne.n	239c <prvTimerTask+0x150>
    22f0:	069b      	lsls	r3, r3, #26
    22f2:	d5dc      	bpl.n	22ae <prvTimerTask+0x62>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
    22f4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    22f8:	2b00      	cmp	r3, #0
    22fa:	d1d8      	bne.n	22ae <prvTimerTask+0x62>
							vPortFree( pxTimer );
    22fc:	4620      	mov	r0, r4
    22fe:	f000 f9db 	bl	26b8 <vPortFree>
    2302:	e7d4      	b.n	22ae <prvTimerTask+0x62>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    2304:	9b03      	ldr	r3, [sp, #12]
    2306:	9905      	ldr	r1, [sp, #20]
    2308:	4620      	mov	r0, r4
    230a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    230c:	9b02      	ldr	r3, [sp, #8]
    230e:	2b00      	cmp	r3, #0
    2310:	dbcd      	blt.n	22ae <prvTimerTask+0x62>
    2312:	9c04      	ldr	r4, [sp, #16]
    2314:	e7d6      	b.n	22c4 <prvTimerTask+0x78>
	vTaskSuspendAll();
    2316:	f7ff f8a5 	bl	1464 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
    231a:	f7ff f8ab 	bl	1474 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
    231e:	6833      	ldr	r3, [r6, #0]
    2320:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
    2322:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
    2324:	d808      	bhi.n	2338 <prvTimerTask+0xec>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2326:	f8d9 3000 	ldr.w	r3, [r9]
	xLastTime = xTimeNow;
    232a:	6034      	str	r4, [r6, #0]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    232c:	681a      	ldr	r2, [r3, #0]
    232e:	fab2 f282 	clz	r2, r2
		xNextExpireTime = ( TickType_t ) 0U;
    2332:	46c3      	mov	fp, r8
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2334:	0952      	lsrs	r2, r2, #5
    2336:	e7a8      	b.n	228a <prvTimerTask+0x3e>
		prvSwitchTimerLists();
    2338:	f7ff ff3c 	bl	21b4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
    233c:	6034      	str	r4, [r6, #0]
			( void ) xTaskResumeAll();
    233e:	f7ff f9ed 	bl	171c <xTaskResumeAll>
    2342:	e7b2      	b.n	22aa <prvTimerTask+0x5e>
    2344:	9001      	str	r0, [sp, #4]
		prvSwitchTimerLists();
    2346:	f7ff ff35 	bl	21b4 <prvSwitchTimerLists>
    234a:	9801      	ldr	r0, [sp, #4]
		*pxTimerListsWereSwitched = pdTRUE;
    234c:	e7c4      	b.n	22d8 <prvTimerTask+0x8c>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    234e:	9b03      	ldr	r3, [sp, #12]
    2350:	61a3      	str	r3, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    2352:	2b00      	cmp	r3, #0
    2354:	d065      	beq.n	2422 <prvTimerTask+0x1d6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2356:	4403      	add	r3, r0
	if( xNextExpiryTime <= xTimeNow )
    2358:	4283      	cmp	r3, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    235a:	6063      	str	r3, [r4, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    235c:	6124      	str	r4, [r4, #16]
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    235e:	f104 0104 	add.w	r1, r4, #4
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    2362:	bf94      	ite	ls
    2364:	f8d9 0000 	ldrls.w	r0, [r9]
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2368:	6838      	ldrhi	r0, [r7, #0]
    236a:	f7fe f8ad 	bl	4c8 <vListInsert>
    236e:	e79e      	b.n	22ae <prvTimerTask+0x62>
				( void ) xTaskResumeAll();
    2370:	f7ff f9d4 	bl	171c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    2374:	683a      	ldr	r2, [r7, #0]
    2376:	68d2      	ldr	r2, [r2, #12]
    2378:	f8d2 800c 	ldr.w	r8, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    237c:	f108 0104 	add.w	r1, r8, #4
    2380:	4608      	mov	r0, r1
    2382:	9101      	str	r1, [sp, #4]
    2384:	f7fe f8ba 	bl	4fc <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2388:	f8d8 201c 	ldr.w	r2, [r8, #28]
    238c:	9901      	ldr	r1, [sp, #4]
    238e:	2a01      	cmp	r2, #1
    2390:	d050      	beq.n	2434 <prvTimerTask+0x1e8>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2392:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    2396:	4640      	mov	r0, r8
    2398:	4798      	blx	r3
    239a:	e786      	b.n	22aa <prvTimerTask+0x5e>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    239c:	9b03      	ldr	r3, [sp, #12]
    239e:	69a2      	ldr	r2, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    23a0:	6124      	str	r4, [r4, #16]
    23a2:	1899      	adds	r1, r3, r2
    23a4:	bf2c      	ite	cs
    23a6:	f04f 0c01 	movcs.w	ip, #1
    23aa:	f04f 0c00 	movcc.w	ip, #0
	if( xNextExpiryTime <= xTimeNow )
    23ae:	4281      	cmp	r1, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    23b0:	6061      	str	r1, [r4, #4]
	if( xNextExpiryTime <= xTimeNow )
    23b2:	d826      	bhi.n	2402 <prvTimerTask+0x1b6>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    23b4:	1ac3      	subs	r3, r0, r3
    23b6:	429a      	cmp	r2, r3
    23b8:	d82d      	bhi.n	2416 <prvTimerTask+0x1ca>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    23ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    23bc:	4620      	mov	r0, r4
    23be:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    23c0:	69e3      	ldr	r3, [r4, #28]
    23c2:	2b01      	cmp	r3, #1
    23c4:	f47f af73 	bne.w	22ae <prvTimerTask+0x62>
	if( xTimerQueue != NULL )
    23c8:	682b      	ldr	r3, [r5, #0]
    23ca:	b18b      	cbz	r3, 23f0 <prvTimerTask+0x1a4>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    23cc:	69a2      	ldr	r2, [r4, #24]
    23ce:	9b03      	ldr	r3, [sp, #12]
		xMessage.xMessageID = xCommandID;
    23d0:	f8cd 8018 	str.w	r8, [sp, #24]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    23d4:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    23d6:	e9cd 3407 	strd	r3, r4, [sp, #28]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    23da:	f7ff fce5 	bl	1da8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    23de:	2300      	movs	r3, #0
    23e0:	461a      	mov	r2, r3
    23e2:	a906      	add	r1, sp, #24
    23e4:	6828      	ldr	r0, [r5, #0]
    23e6:	f7fe fa69 	bl	8bc <xQueueGenericSend>
							configASSERT( xResult );
    23ea:	2800      	cmp	r0, #0
    23ec:	f47f af5f 	bne.w	22ae <prvTimerTask+0x62>
    23f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    23f4:	f383 8811 	msr	BASEPRI, r3
    23f8:	f3bf 8f6f 	isb	sy
    23fc:	f3bf 8f4f 	dsb	sy
    2400:	e7fe      	b.n	2400 <prvTimerTask+0x1b4>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2402:	4283      	cmp	r3, r0
    2404:	d902      	bls.n	240c <prvTimerTask+0x1c0>
    2406:	f1bc 0f00 	cmp.w	ip, #0
    240a:	d0d6      	beq.n	23ba <prvTimerTask+0x16e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    240c:	1d21      	adds	r1, r4, #4
    240e:	6838      	ldr	r0, [r7, #0]
    2410:	f7fe f85a 	bl	4c8 <vListInsert>
	return xProcessTimerNow;
    2414:	e74b      	b.n	22ae <prvTimerTask+0x62>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    2416:	1d21      	adds	r1, r4, #4
    2418:	f8d9 0000 	ldr.w	r0, [r9]
    241c:	f7fe f854 	bl	4c8 <vListInsert>
	return xProcessTimerNow;
    2420:	e745      	b.n	22ae <prvTimerTask+0x62>
    2422:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2426:	f383 8811 	msr	BASEPRI, r3
    242a:	f3bf 8f6f 	isb	sy
    242e:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    2432:	e7fe      	b.n	2432 <prvTimerTask+0x1e6>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2434:	f8d8 2018 	ldr.w	r2, [r8, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2438:	f8c8 8010 	str.w	r8, [r8, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    243c:	eb0b 0002 	add.w	r0, fp, r2
	if( xNextExpiryTime <= xTimeNow )
    2440:	42a0      	cmp	r0, r4
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    2442:	f8c8 0004 	str.w	r0, [r8, #4]
	if( xNextExpiryTime <= xTimeNow )
    2446:	d903      	bls.n	2450 <prvTimerTask+0x204>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2448:	6838      	ldr	r0, [r7, #0]
    244a:	f7fe f83d 	bl	4c8 <vListInsert>
	return xProcessTimerNow;
    244e:	e7a0      	b.n	2392 <prvTimerTask+0x146>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2450:	eba4 040b 	sub.w	r4, r4, fp
    2454:	42a2      	cmp	r2, r4
    2456:	d818      	bhi.n	248a <prvTimerTask+0x23e>
	if( xTimerQueue != NULL )
    2458:	682a      	ldr	r2, [r5, #0]
    245a:	b16a      	cbz	r2, 2478 <prvTimerTask+0x22c>
		xMessage.xMessageID = xCommandID;
    245c:	2400      	movs	r4, #0
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    245e:	e9cd b807 	strd	fp, r8, [sp, #28]
		xMessage.xMessageID = xCommandID;
    2462:	9406      	str	r4, [sp, #24]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2464:	f7ff fca0 	bl	1da8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2468:	4623      	mov	r3, r4
    246a:	4622      	mov	r2, r4
    246c:	a906      	add	r1, sp, #24
    246e:	6828      	ldr	r0, [r5, #0]
    2470:	f7fe fa24 	bl	8bc <xQueueGenericSend>
			configASSERT( xResult );
    2474:	2800      	cmp	r0, #0
    2476:	d18c      	bne.n	2392 <prvTimerTask+0x146>
    2478:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    247c:	f383 8811 	msr	BASEPRI, r3
    2480:	f3bf 8f6f 	isb	sy
    2484:	f3bf 8f4f 	dsb	sy
    2488:	e7fe      	b.n	2488 <prvTimerTask+0x23c>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    248a:	f8d9 0000 	ldr.w	r0, [r9]
    248e:	f7fe f81b 	bl	4c8 <vListInsert>
	return xProcessTimerNow;
    2492:	e77e      	b.n	2392 <prvTimerTask+0x146>
    2494:	0000cb80 	.word	0x0000cb80
    2498:	0000cc00 	.word	0x0000cc00
    249c:	0000cc58 	.word	0x0000cc58
    24a0:	e000ed04 	.word	0xe000ed04
    24a4:	0000cb84 	.word	0x0000cb84

000024a8 <xTimerCreateTimerTask>:
{
    24a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
    24aa:	4c21      	ldr	r4, [pc, #132]	; (2530 <xTimerCreateTimerTask+0x88>)
{
    24ac:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
    24ae:	f000 f9c1 	bl	2834 <vPortEnterCritical>
		if( xTimerQueue == NULL )
    24b2:	6827      	ldr	r7, [r4, #0]
    24b4:	b337      	cbz	r7, 2504 <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    24b6:	f000 f9df 	bl	2878 <vPortExitCritical>
	if( xTimerQueue != NULL )
    24ba:	6823      	ldr	r3, [r4, #0]
    24bc:	b1cb      	cbz	r3, 24f2 <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
    24be:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
    24c0:	aa07      	add	r2, sp, #28
    24c2:	a906      	add	r1, sp, #24
    24c4:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
    24c6:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
    24ca:	f005 fa97 	bl	79fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
    24ce:	e9dd 3105 	ldrd	r3, r1, [sp, #20]
    24d2:	2204      	movs	r2, #4
    24d4:	e9cd 2100 	strd	r2, r1, [sp]
    24d8:	9302      	str	r3, [sp, #8]
    24da:	9a07      	ldr	r2, [sp, #28]
    24dc:	4915      	ldr	r1, [pc, #84]	; (2534 <xTimerCreateTimerTask+0x8c>)
    24de:	4816      	ldr	r0, [pc, #88]	; (2538 <xTimerCreateTimerTask+0x90>)
    24e0:	4623      	mov	r3, r4
    24e2:	f7fe fe37 	bl	1154 <xTaskCreateStatic>
    24e6:	4b15      	ldr	r3, [pc, #84]	; (253c <xTimerCreateTimerTask+0x94>)
    24e8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
    24ea:	b110      	cbz	r0, 24f2 <xTimerCreateTimerTask+0x4a>
}
    24ec:	2001      	movs	r0, #1
    24ee:	b009      	add	sp, #36	; 0x24
    24f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    24f6:	f383 8811 	msr	BASEPRI, r3
    24fa:	f3bf 8f6f 	isb	sy
    24fe:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
    2502:	e7fe      	b.n	2502 <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
    2504:	4e0e      	ldr	r6, [pc, #56]	; (2540 <xTimerCreateTimerTask+0x98>)
			vListInitialise( &xActiveTimerList2 );
    2506:	4d0f      	ldr	r5, [pc, #60]	; (2544 <xTimerCreateTimerTask+0x9c>)
			vListInitialise( &xActiveTimerList1 );
    2508:	4630      	mov	r0, r6
    250a:	f7fd ffbd 	bl	488 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
    250e:	4628      	mov	r0, r5
    2510:	f7fd ffba 	bl	488 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
    2514:	4a0c      	ldr	r2, [pc, #48]	; (2548 <xTimerCreateTimerTask+0xa0>)
			pxOverflowTimerList = &xActiveTimerList2;
    2516:	490d      	ldr	r1, [pc, #52]	; (254c <xTimerCreateTimerTask+0xa4>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
    2518:	9700      	str	r7, [sp, #0]
    251a:	4b0d      	ldr	r3, [pc, #52]	; (2550 <xTimerCreateTimerTask+0xa8>)
			pxCurrentTimerList = &xActiveTimerList1;
    251c:	6016      	str	r6, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    251e:	600d      	str	r5, [r1, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
    2520:	4a0c      	ldr	r2, [pc, #48]	; (2554 <xTimerCreateTimerTask+0xac>)
    2522:	2110      	movs	r1, #16
    2524:	2005      	movs	r0, #5
    2526:	f7fe f909 	bl	73c <xQueueGenericCreateStatic>
    252a:	6020      	str	r0, [r4, #0]
    252c:	e7c3      	b.n	24b6 <xTimerCreateTimerTask+0xe>
    252e:	bf00      	nop
    2530:	0000cc58 	.word	0x0000cc58
    2534:	0000b5d0 	.word	0x0000b5d0
    2538:	0000224d 	.word	0x0000224d
    253c:	0000cc5c 	.word	0x0000cc5c
    2540:	0000cbd8 	.word	0x0000cbd8
    2544:	0000cbec 	.word	0x0000cbec
    2548:	0000cb80 	.word	0x0000cb80
    254c:	0000cb84 	.word	0x0000cb84
    2550:	0000cc04 	.word	0x0000cc04
    2554:	0000cb88 	.word	0x0000cb88

00002558 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    255c:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
    255e:	f7fe ff81 	bl	1464 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    2562:	494e      	ldr	r1, [pc, #312]	; (269c <pvPortMalloc+0x144>)
    2564:	6808      	ldr	r0, [r1, #0]
    2566:	2800      	cmp	r0, #0
    2568:	d048      	beq.n	25fc <pvPortMalloc+0xa4>
    256a:	4b4d      	ldr	r3, [pc, #308]	; (26a0 <pvPortMalloc+0x148>)
    256c:	681d      	ldr	r5, [r3, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    256e:	422c      	tst	r4, r5
    2570:	d13c      	bne.n	25ec <pvPortMalloc+0x94>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    2572:	2c00      	cmp	r4, #0
    2574:	d03a      	beq.n	25ec <pvPortMalloc+0x94>
			{
				xWantedSize += xHeapStructSize;
    2576:	f104 0208 	add.w	r2, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
    257a:	0753      	lsls	r3, r2, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    257c:	bf1c      	itt	ne
    257e:	f022 0207 	bicne.w	r2, r2, #7
    2582:	3208      	addne	r2, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    2584:	b392      	cbz	r2, 25ec <pvPortMalloc+0x94>
    2586:	f8df c12c 	ldr.w	ip, [pc, #300]	; 26b4 <pvPortMalloc+0x15c>
    258a:	f8dc 6000 	ldr.w	r6, [ip]
    258e:	4296      	cmp	r6, r2
    2590:	d32c      	bcc.n	25ec <pvPortMalloc+0x94>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
    2592:	4944      	ldr	r1, [pc, #272]	; (26a4 <pvPortMalloc+0x14c>)
    2594:	680b      	ldr	r3, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    2596:	e003      	b.n	25a0 <pvPortMalloc+0x48>
    2598:	681c      	ldr	r4, [r3, #0]
    259a:	b124      	cbz	r4, 25a6 <pvPortMalloc+0x4e>
    259c:	4619      	mov	r1, r3
    259e:	4623      	mov	r3, r4
    25a0:	685f      	ldr	r7, [r3, #4]
    25a2:	4297      	cmp	r7, r2
    25a4:	d3f8      	bcc.n	2598 <pvPortMalloc+0x40>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    25a6:	4283      	cmp	r3, r0
    25a8:	d020      	beq.n	25ec <pvPortMalloc+0x94>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    25aa:	681c      	ldr	r4, [r3, #0]
    25ac:	600c      	str	r4, [r1, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    25ae:	1abc      	subs	r4, r7, r2
    25b0:	2c10      	cmp	r4, #16
    25b2:	d841      	bhi.n	2638 <pvPortMalloc+0xe0>
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    25b4:	493c      	ldr	r1, [pc, #240]	; (26a8 <pvPortMalloc+0x150>)
    25b6:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
    25b8:	1bf6      	subs	r6, r6, r7
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    25ba:	433d      	orrs	r5, r7
					pxBlock->pxNextFreeBlock = NULL;
    25bc:	2200      	movs	r2, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    25be:	4286      	cmp	r6, r0
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    25c0:	f103 0408 	add.w	r4, r3, #8
					pxBlock->pxNextFreeBlock = NULL;
    25c4:	e9c3 2500 	strd	r2, r5, [r3]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    25c8:	bf38      	it	cc
    25ca:	600e      	strcc	r6, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
    25cc:	f8cc 6000 	str.w	r6, [ip]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    25d0:	f7ff f8a4 	bl	171c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    25d4:	b164      	cbz	r4, 25f0 <pvPortMalloc+0x98>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    25d6:	0763      	lsls	r3, r4, #29
    25d8:	d00d      	beq.n	25f6 <pvPortMalloc+0x9e>
    25da:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    25de:	f383 8811 	msr	BASEPRI, r3
    25e2:	f3bf 8f6f 	isb	sy
    25e6:	f3bf 8f4f 	dsb	sy
    25ea:	e7fe      	b.n	25ea <pvPortMalloc+0x92>
	( void ) xTaskResumeAll();
    25ec:	f7ff f896 	bl	171c <xTaskResumeAll>
			vApplicationMallocFailedHook();
    25f0:	f005 f9c4 	bl	797c <vApplicationMallocFailedHook>
    25f4:	2400      	movs	r4, #0
	return pvReturn;
}
    25f6:	4620      	mov	r0, r4
    25f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
    25fc:	4b2b      	ldr	r3, [pc, #172]	; (26ac <pvPortMalloc+0x154>)
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
    25fe:	482c      	ldr	r0, [pc, #176]	; (26b0 <pvPortMalloc+0x158>)
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    2600:	4e29      	ldr	r6, [pc, #164]	; (26a8 <pvPortMalloc+0x150>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    2602:	4d28      	ldr	r5, [pc, #160]	; (26a4 <pvPortMalloc+0x14c>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    2604:	4f2b      	ldr	r7, [pc, #172]	; (26b4 <pvPortMalloc+0x15c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
    2606:	075a      	lsls	r2, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
    2608:	bf18      	it	ne
    260a:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    260c:	f020 0007 	bic.w	r0, r0, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    2610:	bf18      	it	ne
    2612:	f023 0307 	bicne.w	r3, r3, #7
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
    2616:	461a      	mov	r2, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    2618:	1ac3      	subs	r3, r0, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    261a:	6033      	str	r3, [r6, #0]
	pxEnd = ( void * ) uxAddress;
    261c:	6008      	str	r0, [r1, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    261e:	4e20      	ldr	r6, [pc, #128]	; (26a0 <pvPortMalloc+0x148>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    2620:	603b      	str	r3, [r7, #0]
	xStart.xBlockSize = ( size_t ) 0;
    2622:	2100      	movs	r1, #0
    2624:	e9c5 2100 	strd	r2, r1, [r5]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    2628:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
	pxEnd->pxNextFreeBlock = NULL;
    262c:	e9c0 1100 	strd	r1, r1, [r0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    2630:	6035      	str	r5, [r6, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    2632:	e9c2 0300 	strd	r0, r3, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    2636:	e79a      	b.n	256e <pvPortMalloc+0x16>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    2638:	1899      	adds	r1, r3, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
    263a:	074f      	lsls	r7, r1, #29
    263c:	d008      	beq.n	2650 <pvPortMalloc+0xf8>
    263e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2642:	f383 8811 	msr	BASEPRI, r3
    2646:	f3bf 8f6f 	isb	sy
    264a:	f3bf 8f4f 	dsb	sy
    264e:	e7fe      	b.n	264e <pvPortMalloc+0xf6>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    2650:	604c      	str	r4, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    2652:	4c14      	ldr	r4, [pc, #80]	; (26a4 <pvPortMalloc+0x14c>)
						pxBlock->xBlockSize = xWantedSize;
    2654:	605a      	str	r2, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    2656:	e000      	b.n	265a <pvPortMalloc+0x102>
    2658:	4614      	mov	r4, r2
    265a:	6822      	ldr	r2, [r4, #0]
    265c:	4291      	cmp	r1, r2
    265e:	d8fb      	bhi.n	2658 <pvPortMalloc+0x100>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    2660:	f8d4 e004 	ldr.w	lr, [r4, #4]
    2664:	684f      	ldr	r7, [r1, #4]
    2666:	eb04 080e 	add.w	r8, r4, lr
    266a:	4541      	cmp	r1, r8
    266c:	d009      	beq.n	2682 <pvPortMalloc+0x12a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    266e:	eb01 0e07 	add.w	lr, r1, r7
    2672:	4572      	cmp	r2, lr
    2674:	d009      	beq.n	268a <pvPortMalloc+0x132>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    2676:	600a      	str	r2, [r1, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    2678:	428c      	cmp	r4, r1
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    267a:	685f      	ldr	r7, [r3, #4]
    267c:	bf18      	it	ne
    267e:	6021      	strne	r1, [r4, #0]
    2680:	e798      	b.n	25b4 <pvPortMalloc+0x5c>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    2682:	4477      	add	r7, lr
    2684:	6067      	str	r7, [r4, #4]
    2686:	4621      	mov	r1, r4
    2688:	e7f1      	b.n	266e <pvPortMalloc+0x116>
		if( pxIterator->pxNextFreeBlock != pxEnd )
    268a:	4282      	cmp	r2, r0
    268c:	d0f3      	beq.n	2676 <pvPortMalloc+0x11e>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    268e:	e9d2 2000 	ldrd	r2, r0, [r2]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    2692:	4407      	add	r7, r0
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    2694:	600a      	str	r2, [r1, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    2696:	604f      	str	r7, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    2698:	e7ee      	b.n	2678 <pvPortMalloc+0x120>
    269a:	bf00      	nop
    269c:	0000cc60 	.word	0x0000cc60
    26a0:	00020c64 	.word	0x00020c64
    26a4:	00020c70 	.word	0x00020c70
    26a8:	00020c6c 	.word	0x00020c6c
    26ac:	0000cc64 	.word	0x0000cc64
    26b0:	00020c5c 	.word	0x00020c5c
    26b4:	00020c68 	.word	0x00020c68

000026b8 <vPortFree>:
	if( pv != NULL )
    26b8:	b1d8      	cbz	r0, 26f2 <vPortFree+0x3a>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
    26ba:	4a27      	ldr	r2, [pc, #156]	; (2758 <vPortFree+0xa0>)
{
    26bc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
    26be:	6812      	ldr	r2, [r2, #0]
    26c0:	f850 3c04 	ldr.w	r3, [r0, #-4]
    26c4:	4213      	tst	r3, r2
    26c6:	d00b      	beq.n	26e0 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
    26c8:	f850 1c08 	ldr.w	r1, [r0, #-8]
    26cc:	b191      	cbz	r1, 26f4 <vPortFree+0x3c>
    26ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    26d2:	f383 8811 	msr	BASEPRI, r3
    26d6:	f3bf 8f6f 	isb	sy
    26da:	f3bf 8f4f 	dsb	sy
    26de:	e7fe      	b.n	26de <vPortFree+0x26>
    26e0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    26e4:	f383 8811 	msr	BASEPRI, r3
    26e8:	f3bf 8f6f 	isb	sy
    26ec:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
    26f0:	e7fe      	b.n	26f0 <vPortFree+0x38>
    26f2:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    26f4:	ea23 0302 	bic.w	r3, r3, r2
    26f8:	f840 3c04 	str.w	r3, [r0, #-4]
    26fc:	4604      	mov	r4, r0
				vTaskSuspendAll();
    26fe:	f7fe feb1 	bl	1464 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
    2702:	4916      	ldr	r1, [pc, #88]	; (275c <vPortFree+0xa4>)
    2704:	f854 0c04 	ldr.w	r0, [r4, #-4]
    2708:	680b      	ldr	r3, [r1, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    270a:	4a15      	ldr	r2, [pc, #84]	; (2760 <vPortFree+0xa8>)
					xFreeBytesRemaining += pxLink->xBlockSize;
    270c:	4403      	add	r3, r0
    270e:	600b      	str	r3, [r1, #0]
		puc -= xHeapStructSize;
    2710:	f1a4 0308 	sub.w	r3, r4, #8
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    2714:	e000      	b.n	2718 <vPortFree+0x60>
    2716:	460a      	mov	r2, r1
    2718:	6811      	ldr	r1, [r2, #0]
    271a:	428b      	cmp	r3, r1
    271c:	d8fb      	bhi.n	2716 <vPortFree+0x5e>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    271e:	6854      	ldr	r4, [r2, #4]
    2720:	1915      	adds	r5, r2, r4
    2722:	42ab      	cmp	r3, r5
    2724:	d00a      	beq.n	273c <vPortFree+0x84>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    2726:	181c      	adds	r4, r3, r0
    2728:	42a1      	cmp	r1, r4
    272a:	d00b      	beq.n	2744 <vPortFree+0x8c>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    272c:	6019      	str	r1, [r3, #0]
	if( pxIterator != pxBlockToInsert )
    272e:	429a      	cmp	r2, r3
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    2730:	bf18      	it	ne
    2732:	6013      	strne	r3, [r2, #0]
}
    2734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
    2738:	f7fe bff0 	b.w	171c <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    273c:	4420      	add	r0, r4
    273e:	6050      	str	r0, [r2, #4]
    2740:	4613      	mov	r3, r2
    2742:	e7f0      	b.n	2726 <vPortFree+0x6e>
		if( pxIterator->pxNextFreeBlock != pxEnd )
    2744:	4c07      	ldr	r4, [pc, #28]	; (2764 <vPortFree+0xac>)
    2746:	6824      	ldr	r4, [r4, #0]
    2748:	42a1      	cmp	r1, r4
    274a:	d0ef      	beq.n	272c <vPortFree+0x74>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    274c:	e9d1 1400 	ldrd	r1, r4, [r1]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    2750:	4420      	add	r0, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    2752:	6019      	str	r1, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    2754:	6058      	str	r0, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    2756:	e7ea      	b.n	272e <vPortFree+0x76>
    2758:	00020c64 	.word	0x00020c64
    275c:	00020c68 	.word	0x00020c68
    2760:	00020c70 	.word	0x00020c70
    2764:	0000cc60 	.word	0x0000cc60

00002768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
    2768:	4808      	ldr	r0, [pc, #32]	; (278c <prvPortStartFirstTask+0x24>)
    276a:	6800      	ldr	r0, [r0, #0]
    276c:	6800      	ldr	r0, [r0, #0]
    276e:	f380 8808 	msr	MSP, r0
    2772:	f04f 0000 	mov.w	r0, #0
    2776:	f380 8814 	msr	CONTROL, r0
    277a:	b662      	cpsie	i
    277c:	b661      	cpsie	f
    277e:	f3bf 8f4f 	dsb	sy
    2782:	f3bf 8f6f 	isb	sy
    2786:	df00      	svc	0
    2788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
    278a:	0000      	.short	0x0000
    278c:	e000ed08 	.word	0xe000ed08

00002790 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
    2790:	f8df 000c 	ldr.w	r0, [pc, #12]	; 27a0 <vPortEnableVFP+0x10>
    2794:	6801      	ldr	r1, [r0, #0]
    2796:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    279a:	6001      	str	r1, [r0, #0]
    279c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
    279e:	0000      	.short	0x0000
    27a0:	e000ed88 	.word	0xe000ed88

000027a4 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
    27a4:	4b0e      	ldr	r3, [pc, #56]	; (27e0 <prvTaskExitError+0x3c>)
    27a6:	681b      	ldr	r3, [r3, #0]
{
    27a8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
    27aa:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
    27ac:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
    27ae:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
    27b0:	d008      	beq.n	27c4 <prvTaskExitError+0x20>
    27b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    27b6:	f383 8811 	msr	BASEPRI, r3
    27ba:	f3bf 8f6f 	isb	sy
    27be:	f3bf 8f4f 	dsb	sy
    27c2:	e7fe      	b.n	27c2 <prvTaskExitError+0x1e>
    27c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    27c8:	f383 8811 	msr	BASEPRI, r3
    27cc:	f3bf 8f6f 	isb	sy
    27d0:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
    27d4:	9b01      	ldr	r3, [sp, #4]
    27d6:	2b00      	cmp	r3, #0
    27d8:	d0fc      	beq.n	27d4 <prvTaskExitError+0x30>
}
    27da:	b002      	add	sp, #8
    27dc:	4770      	bx	lr
    27de:	bf00      	nop
    27e0:	0000c614 	.word	0x0000c614

000027e4 <pxPortInitialiseStack>:
{
    27e4:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
    27e6:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    27ea:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    27ee:	4c07      	ldr	r4, [pc, #28]	; (280c <pxPortInitialiseStack+0x28>)
    27f0:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    27f4:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    27f8:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    27fc:	e940 1502 	strd	r1, r5, [r0, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    2800:	f840 3c24 	str.w	r3, [r0, #-36]
}
    2804:	bc30      	pop	{r4, r5}
    2806:	3844      	subs	r0, #68	; 0x44
    2808:	4770      	bx	lr
    280a:	bf00      	nop
    280c:	000027a5 	.word	0x000027a5

00002810 <SVC_Handler>:
	__asm volatile (
    2810:	4b07      	ldr	r3, [pc, #28]	; (2830 <pxCurrentTCBConst2>)
    2812:	6819      	ldr	r1, [r3, #0]
    2814:	6808      	ldr	r0, [r1, #0]
    2816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    281a:	f380 8809 	msr	PSP, r0
    281e:	f3bf 8f6f 	isb	sy
    2822:	f04f 0000 	mov.w	r0, #0
    2826:	f380 8811 	msr	BASEPRI, r0
    282a:	4770      	bx	lr
    282c:	f3af 8000 	nop.w

00002830 <pxCurrentTCBConst2>:
    2830:	0000ca80 	.word	0x0000ca80

00002834 <vPortEnterCritical>:
    2834:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2838:	f383 8811 	msr	BASEPRI, r3
    283c:	f3bf 8f6f 	isb	sy
    2840:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
    2844:	4a0a      	ldr	r2, [pc, #40]	; (2870 <vPortEnterCritical+0x3c>)
    2846:	6813      	ldr	r3, [r2, #0]
    2848:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
    284a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
    284c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
    284e:	d000      	beq.n	2852 <vPortEnterCritical+0x1e>
}
    2850:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    2852:	4b08      	ldr	r3, [pc, #32]	; (2874 <vPortEnterCritical+0x40>)
    2854:	681b      	ldr	r3, [r3, #0]
    2856:	f013 0fff 	tst.w	r3, #255	; 0xff
    285a:	d0f9      	beq.n	2850 <vPortEnterCritical+0x1c>
    285c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2860:	f383 8811 	msr	BASEPRI, r3
    2864:	f3bf 8f6f 	isb	sy
    2868:	f3bf 8f4f 	dsb	sy
    286c:	e7fe      	b.n	286c <vPortEnterCritical+0x38>
    286e:	bf00      	nop
    2870:	0000c614 	.word	0x0000c614
    2874:	e000ed04 	.word	0xe000ed04

00002878 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
    2878:	4a08      	ldr	r2, [pc, #32]	; (289c <vPortExitCritical+0x24>)
    287a:	6813      	ldr	r3, [r2, #0]
    287c:	b943      	cbnz	r3, 2890 <vPortExitCritical+0x18>
    287e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2882:	f383 8811 	msr	BASEPRI, r3
    2886:	f3bf 8f6f 	isb	sy
    288a:	f3bf 8f4f 	dsb	sy
    288e:	e7fe      	b.n	288e <vPortExitCritical+0x16>
	uxCriticalNesting--;
    2890:	3b01      	subs	r3, #1
    2892:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
    2894:	b90b      	cbnz	r3, 289a <vPortExitCritical+0x22>
	__asm volatile
    2896:	f383 8811 	msr	BASEPRI, r3
}
    289a:	4770      	bx	lr
    289c:	0000c614 	.word	0x0000c614

000028a0 <PendSV_Handler>:
	__asm volatile
    28a0:	f3ef 8009 	mrs	r0, PSP
    28a4:	f3bf 8f6f 	isb	sy
    28a8:	4b15      	ldr	r3, [pc, #84]	; (2900 <pxCurrentTCBConst>)
    28aa:	681a      	ldr	r2, [r3, #0]
    28ac:	f01e 0f10 	tst.w	lr, #16
    28b0:	bf08      	it	eq
    28b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    28b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28ba:	6010      	str	r0, [r2, #0]
    28bc:	e92d 0009 	stmdb	sp!, {r0, r3}
    28c0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
    28c4:	f380 8811 	msr	BASEPRI, r0
    28c8:	f3bf 8f4f 	dsb	sy
    28cc:	f3bf 8f6f 	isb	sy
    28d0:	f7fe ffdc 	bl	188c <vTaskSwitchContext>
    28d4:	f04f 0000 	mov.w	r0, #0
    28d8:	f380 8811 	msr	BASEPRI, r0
    28dc:	bc09      	pop	{r0, r3}
    28de:	6819      	ldr	r1, [r3, #0]
    28e0:	6808      	ldr	r0, [r1, #0]
    28e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28e6:	f01e 0f10 	tst.w	lr, #16
    28ea:	bf08      	it	eq
    28ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    28f0:	f380 8809 	msr	PSP, r0
    28f4:	f3bf 8f6f 	isb	sy
    28f8:	4770      	bx	lr
    28fa:	bf00      	nop
    28fc:	f3af 8000 	nop.w

00002900 <pxCurrentTCBConst>:
    2900:	0000ca80 	.word	0x0000ca80

00002904 <SysTick_Handler>:
{
    2904:	b508      	push	{r3, lr}
	__asm volatile
    2906:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    290a:	f383 8811 	msr	BASEPRI, r3
    290e:	f3bf 8f6f 	isb	sy
    2912:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
    2916:	f7fe fdcb 	bl	14b0 <xTaskIncrementTick>
    291a:	b118      	cbz	r0, 2924 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    291c:	4b03      	ldr	r3, [pc, #12]	; (292c <SysTick_Handler+0x28>)
    291e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2922:	601a      	str	r2, [r3, #0]
	__asm volatile
    2924:	2300      	movs	r3, #0
    2926:	f383 8811 	msr	BASEPRI, r3
}
    292a:	bd08      	pop	{r3, pc}
    292c:	e000ed04 	.word	0xe000ed04

00002930 <vPortSuppressTicksAndSleep>:
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
    2930:	4a40      	ldr	r2, [pc, #256]	; (2a34 <vPortSuppressTicksAndSleep+0x104>)
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
    2932:	4941      	ldr	r1, [pc, #260]	; (2a38 <vPortSuppressTicksAndSleep+0x108>)
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
    2934:	6813      	ldr	r3, [r2, #0]
	{
    2936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    293a:	680c      	ldr	r4, [r1, #0]
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
    293c:	4d3f      	ldr	r5, [pc, #252]	; (2a3c <vPortSuppressTicksAndSleep+0x10c>)
    293e:	4940      	ldr	r1, [pc, #256]	; (2a40 <vPortSuppressTicksAndSleep+0x110>)
		if( ulReloadValue > ulStoppedTimerCompensation )
    2940:	4f40      	ldr	r7, [pc, #256]	; (2a44 <vPortSuppressTicksAndSleep+0x114>)
    2942:	4284      	cmp	r4, r0
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
    2944:	f023 0301 	bic.w	r3, r3, #1
    2948:	bf28      	it	cs
    294a:	4604      	movcs	r4, r0
    294c:	6013      	str	r3, [r2, #0]
    294e:	46a0      	mov	r8, r4
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
    2950:	6809      	ldr	r1, [r1, #0]
    2952:	682c      	ldr	r4, [r5, #0]
		if( ulReloadValue > ulStoppedTimerCompensation )
    2954:	683a      	ldr	r2, [r7, #0]
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
    2956:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
    295a:	fb04 1406 	mla	r4, r4, r6, r1
		if( ulReloadValue > ulStoppedTimerCompensation )
    295e:	42a2      	cmp	r2, r4
			ulReloadValue -= ulStoppedTimerCompensation;
    2960:	bf38      	it	cc
    2962:	1aa4      	subcc	r4, r4, r2
		__asm volatile( "cpsid i" ::: "memory" );
    2964:	b672      	cpsid	i
		__asm volatile( "dsb" );
    2966:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
    296a:	f3bf 8f6f 	isb	sy
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
    296e:	f7ff f9f9 	bl	1d64 <eTaskConfirmSleepModeStatus>
    2972:	b970      	cbnz	r0, 2992 <vPortSuppressTicksAndSleep+0x62>
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
    2974:	4b32      	ldr	r3, [pc, #200]	; (2a40 <vPortSuppressTicksAndSleep+0x110>)
    2976:	4a34      	ldr	r2, [pc, #208]	; (2a48 <vPortSuppressTicksAndSleep+0x118>)
    2978:	681b      	ldr	r3, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
    297a:	492e      	ldr	r1, [pc, #184]	; (2a34 <vPortSuppressTicksAndSleep+0x104>)
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
    297c:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
    297e:	680b      	ldr	r3, [r1, #0]
    2980:	f043 0301 	orr.w	r3, r3, #1
    2984:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
    2986:	682b      	ldr	r3, [r5, #0]
    2988:	3b01      	subs	r3, #1
    298a:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
    298c:	b662      	cpsie	i
	}
    298e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
    2992:	492d      	ldr	r1, [pc, #180]	; (2a48 <vPortSuppressTicksAndSleep+0x118>)
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    2994:	4a2a      	ldr	r2, [pc, #168]	; (2a40 <vPortSuppressTicksAndSleep+0x110>)
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
    2996:	600c      	str	r4, [r1, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
    2998:	4b26      	ldr	r3, [pc, #152]	; (2a34 <vPortSuppressTicksAndSleep+0x104>)
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    299a:	2100      	movs	r1, #0
    299c:	6011      	str	r1, [r2, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
    299e:	681a      	ldr	r2, [r3, #0]
    29a0:	f042 0201 	orr.w	r2, r2, #1
    29a4:	601a      	str	r2, [r3, #0]
			if( xModifiableIdleTime > 0 )
    29a6:	f1b8 0f00 	cmp.w	r8, #0
    29aa:	d004      	beq.n	29b6 <vPortSuppressTicksAndSleep+0x86>
				__asm volatile( "dsb" ::: "memory" );
    29ac:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
    29b0:	bf30      	wfi
				__asm volatile( "isb" );
    29b2:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsie i" ::: "memory" );
    29b6:	b662      	cpsie	i
			__asm volatile( "dsb" );
    29b8:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
    29bc:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
    29c0:	b672      	cpsid	i
			__asm volatile( "dsb" );
    29c2:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
    29c6:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
    29ca:	4b1a      	ldr	r3, [pc, #104]	; (2a34 <vPortSuppressTicksAndSleep+0x104>)
    29cc:	2206      	movs	r2, #6
    29ce:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
    29d0:	681b      	ldr	r3, [r3, #0]
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
    29d2:	682a      	ldr	r2, [r5, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
    29d4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
    29d8:	4b19      	ldr	r3, [pc, #100]	; (2a40 <vPortSuppressTicksAndSleep+0x110>)
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
    29da:	d00a      	beq.n	29f2 <vPortSuppressTicksAndSleep+0xc2>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
    29dc:	681b      	ldr	r3, [r3, #0]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
    29de:	6839      	ldr	r1, [r7, #0]
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
    29e0:	4413      	add	r3, r2
    29e2:	3b01      	subs	r3, #1
    29e4:	1b1c      	subs	r4, r3, r4
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
    29e6:	42a1      	cmp	r1, r4
    29e8:	d921      	bls.n	2a2e <vPortSuppressTicksAndSleep+0xfe>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
    29ea:	1e54      	subs	r4, r2, #1
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
    29ec:	4b16      	ldr	r3, [pc, #88]	; (2a48 <vPortSuppressTicksAndSleep+0x118>)
    29ee:	601c      	str	r4, [r3, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
    29f0:	e00b      	b.n	2a0a <vPortSuppressTicksAndSleep+0xda>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
    29f2:	6819      	ldr	r1, [r3, #0]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
    29f4:	4814      	ldr	r0, [pc, #80]	; (2a48 <vPortSuppressTicksAndSleep+0x118>)
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
    29f6:	fb08 f302 	mul.w	r3, r8, r2
    29fa:	1a5e      	subs	r6, r3, r1
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
    29fc:	1acb      	subs	r3, r1, r3
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
    29fe:	fbb6 f6f2 	udiv	r6, r6, r2
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
    2a02:	fb06 2202 	mla	r2, r6, r2, r2
    2a06:	441a      	add	r2, r3
    2a08:	6002      	str	r2, [r0, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    2a0a:	4b0d      	ldr	r3, [pc, #52]	; (2a40 <vPortSuppressTicksAndSleep+0x110>)
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
    2a0c:	4a09      	ldr	r2, [pc, #36]	; (2a34 <vPortSuppressTicksAndSleep+0x104>)
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    2a0e:	2100      	movs	r1, #0
    2a10:	6019      	str	r1, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
    2a12:	6813      	ldr	r3, [r2, #0]
    2a14:	f043 0301 	orr.w	r3, r3, #1
    2a18:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
    2a1a:	4630      	mov	r0, r6
    2a1c:	f7fe fd30 	bl	1480 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
    2a20:	682b      	ldr	r3, [r5, #0]
    2a22:	4a09      	ldr	r2, [pc, #36]	; (2a48 <vPortSuppressTicksAndSleep+0x118>)
    2a24:	3b01      	subs	r3, #1
    2a26:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
    2a28:	b662      	cpsie	i
	}
    2a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
    2a2e:	42a2      	cmp	r2, r4
    2a30:	d2dc      	bcs.n	29ec <vPortSuppressTicksAndSleep+0xbc>
    2a32:	e7da      	b.n	29ea <vPortSuppressTicksAndSleep+0xba>
    2a34:	e000e010 	.word	0xe000e010
    2a38:	00020c88 	.word	0x00020c88
    2a3c:	00020c84 	.word	0x00020c84
    2a40:	e000e018 	.word	0xe000e018
    2a44:	00020c80 	.word	0x00020c80
    2a48:	e000e014 	.word	0xe000e014

00002a4c <vPortSetupTimerInterrupt>:
{
    2a4c:	b470      	push	{r4, r5, r6}
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
    2a4e:	480a      	ldr	r0, [pc, #40]	; (2a78 <vPortSetupTimerInterrupt+0x2c>)
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
    2a50:	490a      	ldr	r1, [pc, #40]	; (2a7c <vPortSetupTimerInterrupt+0x30>)
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    2a52:	4a0b      	ldr	r2, [pc, #44]	; (2a80 <vPortSetupTimerInterrupt+0x34>)
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
    2a54:	4c0b      	ldr	r4, [pc, #44]	; (2a84 <vPortSetupTimerInterrupt+0x38>)
    2a56:	6004      	str	r4, [r0, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
    2a58:	262a      	movs	r6, #42	; 0x2a
    2a5a:	600e      	str	r6, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = 0UL;
    2a5c:	4b0a      	ldr	r3, [pc, #40]	; (2a88 <vPortSetupTimerInterrupt+0x3c>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    2a5e:	4d0b      	ldr	r5, [pc, #44]	; (2a8c <vPortSetupTimerInterrupt+0x40>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    2a60:	480b      	ldr	r0, [pc, #44]	; (2a90 <vPortSetupTimerInterrupt+0x44>)
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    2a62:	212d      	movs	r1, #45	; 0x2d
    2a64:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    2a66:	3c01      	subs	r4, #1
	portNVIC_SYSTICK_CTRL_REG = 0UL;
    2a68:	2200      	movs	r2, #0
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
    2a6a:	2107      	movs	r1, #7
	portNVIC_SYSTICK_CTRL_REG = 0UL;
    2a6c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    2a6e:	602a      	str	r2, [r5, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    2a70:	6004      	str	r4, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
    2a72:	6019      	str	r1, [r3, #0]
}
    2a74:	bc70      	pop	{r4, r5, r6}
    2a76:	4770      	bx	lr
    2a78:	00020c84 	.word	0x00020c84
    2a7c:	00020c88 	.word	0x00020c88
    2a80:	00020c80 	.word	0x00020c80
    2a84:	00060ae0 	.word	0x00060ae0
    2a88:	e000e010 	.word	0xe000e010
    2a8c:	e000e018 	.word	0xe000e018
    2a90:	e000e014 	.word	0xe000e014

00002a94 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
    2a94:	4b45      	ldr	r3, [pc, #276]	; (2bac <xPortStartScheduler+0x118>)
    2a96:	4a46      	ldr	r2, [pc, #280]	; (2bb0 <xPortStartScheduler+0x11c>)
    2a98:	6819      	ldr	r1, [r3, #0]
    2a9a:	4291      	cmp	r1, r2
    2a9c:	d041      	beq.n	2b22 <xPortStartScheduler+0x8e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
    2a9e:	681a      	ldr	r2, [r3, #0]
    2aa0:	4b44      	ldr	r3, [pc, #272]	; (2bb4 <xPortStartScheduler+0x120>)
    2aa2:	429a      	cmp	r2, r3
    2aa4:	d034      	beq.n	2b10 <xPortStartScheduler+0x7c>
{
    2aa6:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    2aa8:	4b43      	ldr	r3, [pc, #268]	; (2bb8 <xPortStartScheduler+0x124>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    2aaa:	4c44      	ldr	r4, [pc, #272]	; (2bbc <xPortStartScheduler+0x128>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    2aac:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    2aae:	4944      	ldr	r1, [pc, #272]	; (2bc0 <xPortStartScheduler+0x12c>)
{
    2ab0:	b085      	sub	sp, #20
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    2ab2:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    2ab4:	20ff      	movs	r0, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    2ab6:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    2ab8:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    2aba:	781b      	ldrb	r3, [r3, #0]
    2abc:	b2db      	uxtb	r3, r3
    2abe:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    2ac2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
    2ac6:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    2aca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    2ace:	2007      	movs	r0, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
    2ad0:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    2ad2:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    2ad4:	6008      	str	r0, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
    2ad6:	bf48      	it	mi
    2ad8:	2206      	movmi	r2, #6
    2ada:	d401      	bmi.n	2ae0 <xPortStartScheduler+0x4c>
    2adc:	e00f      	b.n	2afe <xPortStartScheduler+0x6a>
    2ade:	4602      	mov	r2, r0
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
    2ae0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2ae4:	005b      	lsls	r3, r3, #1
    2ae6:	b2db      	uxtb	r3, r3
    2ae8:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
    2aec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2af0:	061b      	lsls	r3, r3, #24
    2af2:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
    2af6:	d4f2      	bmi.n	2ade <xPortStartScheduler+0x4a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
    2af8:	2a04      	cmp	r2, #4
    2afa:	d01b      	beq.n	2b34 <xPortStartScheduler+0xa0>
    2afc:	600a      	str	r2, [r1, #0]
	__asm volatile
    2afe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2b02:	f383 8811 	msr	BASEPRI, r3
    2b06:	f3bf 8f6f 	isb	sy
    2b0a:	f3bf 8f4f 	dsb	sy
    2b0e:	e7fe      	b.n	2b0e <xPortStartScheduler+0x7a>
    2b10:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2b14:	f383 8811 	msr	BASEPRI, r3
    2b18:	f3bf 8f6f 	isb	sy
    2b1c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
    2b20:	e7fe      	b.n	2b20 <xPortStartScheduler+0x8c>
    2b22:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2b26:	f383 8811 	msr	BASEPRI, r3
    2b2a:	f3bf 8f6f 	isb	sy
    2b2e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
    2b32:	e7fe      	b.n	2b32 <xPortStartScheduler+0x9e>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    2b34:	9a02      	ldr	r2, [sp, #8]
    2b36:	4820      	ldr	r0, [pc, #128]	; (2bb8 <xPortStartScheduler+0x124>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    2b38:	4b22      	ldr	r3, [pc, #136]	; (2bc4 <xPortStartScheduler+0x130>)
	uxCriticalNesting = 0;
    2b3a:	4c23      	ldr	r4, [pc, #140]	; (2bc8 <xPortStartScheduler+0x134>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    2b3c:	b2d2      	uxtb	r2, r2
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    2b3e:	f44f 6580 	mov.w	r5, #1024	; 0x400
    2b42:	600d      	str	r5, [r1, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    2b44:	7002      	strb	r2, [r0, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    2b46:	681a      	ldr	r2, [r3, #0]
    2b48:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
    2b4c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    2b4e:	681a      	ldr	r2, [r3, #0]
    2b50:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
    2b54:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
    2b56:	2500      	movs	r5, #0
	vPortSetupTimerInterrupt();
    2b58:	f7ff ff78 	bl	2a4c <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
    2b5c:	6025      	str	r5, [r4, #0]
	vPortEnableVFP();
    2b5e:	f7ff fe17 	bl	2790 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
    2b62:	4a1a      	ldr	r2, [pc, #104]	; (2bcc <xPortStartScheduler+0x138>)
    2b64:	6813      	ldr	r3, [r2, #0]
    2b66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    2b6a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
    2b6c:	f7ff fdfc 	bl	2768 <prvPortStartFirstTask>
	vTaskSwitchContext();
    2b70:	f7fe fe8c 	bl	188c <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
    2b74:	6823      	ldr	r3, [r4, #0]
volatile uint32_t ulDummy = 0;
    2b76:	9503      	str	r5, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
    2b78:	3301      	adds	r3, #1
    2b7a:	d008      	beq.n	2b8e <xPortStartScheduler+0xfa>
    2b7c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2b80:	f383 8811 	msr	BASEPRI, r3
    2b84:	f3bf 8f6f 	isb	sy
    2b88:	f3bf 8f4f 	dsb	sy
    2b8c:	e7fe      	b.n	2b8c <xPortStartScheduler+0xf8>
    2b8e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2b92:	f383 8811 	msr	BASEPRI, r3
    2b96:	f3bf 8f6f 	isb	sy
    2b9a:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
    2b9e:	9b03      	ldr	r3, [sp, #12]
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d0fc      	beq.n	2b9e <xPortStartScheduler+0x10a>
}
    2ba4:	2000      	movs	r0, #0
    2ba6:	b005      	add	sp, #20
    2ba8:	bd30      	pop	{r4, r5, pc}
    2baa:	bf00      	nop
    2bac:	e000ed00 	.word	0xe000ed00
    2bb0:	410fc271 	.word	0x410fc271
    2bb4:	410fc270 	.word	0x410fc270
    2bb8:	e000e400 	.word	0xe000e400
    2bbc:	00020c78 	.word	0x00020c78
    2bc0:	00020c7c 	.word	0x00020c7c
    2bc4:	e000ed20 	.word	0xe000ed20
    2bc8:	0000c614 	.word	0x0000c614
    2bcc:	e000ef34 	.word	0xe000ef34

00002bd0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
    2bd0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
    2bd4:	2b0f      	cmp	r3, #15
    2bd6:	d90e      	bls.n	2bf6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
    2bd8:	4910      	ldr	r1, [pc, #64]	; (2c1c <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
    2bda:	4a11      	ldr	r2, [pc, #68]	; (2c20 <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
    2bdc:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
    2bde:	7812      	ldrb	r2, [r2, #0]
    2be0:	429a      	cmp	r2, r3
    2be2:	d908      	bls.n	2bf6 <vPortValidateInterruptPriority+0x26>
    2be4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2be8:	f383 8811 	msr	BASEPRI, r3
    2bec:	f3bf 8f6f 	isb	sy
    2bf0:	f3bf 8f4f 	dsb	sy
    2bf4:	e7fe      	b.n	2bf4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
    2bf6:	4b0b      	ldr	r3, [pc, #44]	; (2c24 <vPortValidateInterruptPriority+0x54>)
    2bf8:	4a0b      	ldr	r2, [pc, #44]	; (2c28 <vPortValidateInterruptPriority+0x58>)
    2bfa:	681b      	ldr	r3, [r3, #0]
    2bfc:	6812      	ldr	r2, [r2, #0]
    2bfe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2c02:	4293      	cmp	r3, r2
    2c04:	d908      	bls.n	2c18 <vPortValidateInterruptPriority+0x48>
    2c06:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2c0a:	f383 8811 	msr	BASEPRI, r3
    2c0e:	f3bf 8f6f 	isb	sy
    2c12:	f3bf 8f4f 	dsb	sy
    2c16:	e7fe      	b.n	2c16 <vPortValidateInterruptPriority+0x46>
	}
    2c18:	4770      	bx	lr
    2c1a:	bf00      	nop
    2c1c:	e000e3f0 	.word	0xe000e3f0
    2c20:	00020c78 	.word	0x00020c78
    2c24:	e000ed0c 	.word	0xe000ed0c
    2c28:	00020c7c 	.word	0x00020c7c

00002c2c <prvReadBytesFromBuffer>:
static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
    2c2c:	429a      	cmp	r2, r3
{
    2c2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	xCount = configMIN( xBytesAvailable, xMaxCount );
    2c32:	4690      	mov	r8, r2
    2c34:	bf28      	it	cs
    2c36:	4698      	movcs	r8, r3

	if( xCount > ( size_t ) 0 )
    2c38:	f1b8 0f00 	cmp.w	r8, #0
    2c3c:	d01e      	beq.n	2c7c <prvReadBytesFromBuffer+0x50>
	{
		xNextTail = pxStreamBuffer->xTail;
    2c3e:	6804      	ldr	r4, [r0, #0]

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
    2c40:	6883      	ldr	r3, [r0, #8]
    2c42:	eba3 0904 	sub.w	r9, r3, r4
    2c46:	45c1      	cmp	r9, r8
    2c48:	bf28      	it	cs
    2c4a:	46c1      	movcs	r9, r8

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
    2c4c:	454a      	cmp	r2, r9
    2c4e:	d218      	bcs.n	2c82 <prvReadBytesFromBuffer+0x56>
    2c50:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2c54:	f383 8811 	msr	BASEPRI, r3
    2c58:	f3bf 8f6f 	isb	sy
    2c5c:	f3bf 8f4f 	dsb	sy
    2c60:	e7fe      	b.n	2c60 <prvReadBytesFromBuffer+0x34>
		that could be read in the first read... */
		if( xCount > xFirstLength )
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
			memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2c62:	eb07 0009 	add.w	r0, r7, r9
    2c66:	eba8 0209 	sub.w	r2, r8, r9
    2c6a:	69a9      	ldr	r1, [r5, #24]
    2c6c:	f007 ff57 	bl	ab1e <memcpy>

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;

		if( xNextTail >= pxStreamBuffer->xLength )
    2c70:	68ab      	ldr	r3, [r5, #8]
		xNextTail += xCount;
    2c72:	4444      	add	r4, r8
		if( xNextTail >= pxStreamBuffer->xLength )
    2c74:	42a3      	cmp	r3, r4
		{
			xNextTail -= pxStreamBuffer->xLength;
    2c76:	bf98      	it	ls
    2c78:	1ae4      	subls	r4, r4, r3
		}

		pxStreamBuffer->xTail = xNextTail;
    2c7a:	602c      	str	r4, [r5, #0]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
}
    2c7c:	4640      	mov	r0, r8
    2c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
    2c82:	eb04 0509 	add.w	r5, r4, r9
    2c86:	42ab      	cmp	r3, r5
    2c88:	d208      	bcs.n	2c9c <prvReadBytesFromBuffer+0x70>
    2c8a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2c8e:	f383 8811 	msr	BASEPRI, r3
    2c92:	f3bf 8f6f 	isb	sy
    2c96:	f3bf 8f4f 	dsb	sy
    2c9a:	e7fe      	b.n	2c9a <prvReadBytesFromBuffer+0x6e>
		memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2c9c:	460f      	mov	r7, r1
    2c9e:	6981      	ldr	r1, [r0, #24]
    2ca0:	4605      	mov	r5, r0
    2ca2:	4616      	mov	r6, r2
    2ca4:	4421      	add	r1, r4
    2ca6:	464a      	mov	r2, r9
    2ca8:	4638      	mov	r0, r7
    2caa:	f007 ff38 	bl	ab1e <memcpy>
		if( xCount > xFirstLength )
    2cae:	45c8      	cmp	r8, r9
    2cb0:	d9de      	bls.n	2c70 <prvReadBytesFromBuffer+0x44>
			configASSERT( xCount <= xMaxCount );
    2cb2:	4546      	cmp	r6, r8
    2cb4:	d2d5      	bcs.n	2c62 <prvReadBytesFromBuffer+0x36>
    2cb6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2cba:	f383 8811 	msr	BASEPRI, r3
    2cbe:	f3bf 8f6f 	isb	sy
    2cc2:	f3bf 8f4f 	dsb	sy
    2cc6:	e7fe      	b.n	2cc6 <prvReadBytesFromBuffer+0x9a>

00002cc8 <prvWriteBytesToBuffer.part.1>:
static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
    2cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
    2ccc:	6883      	ldr	r3, [r0, #8]
	xNextHead = pxStreamBuffer->xHead;
    2cce:	6845      	ldr	r5, [r0, #4]
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
    2cd0:	eba3 0805 	sub.w	r8, r3, r5
    2cd4:	4590      	cmp	r8, r2
    2cd6:	bf28      	it	cs
    2cd8:	4690      	movcs	r8, r2
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
    2cda:	eb05 0408 	add.w	r4, r5, r8
    2cde:	42a3      	cmp	r3, r4
    2ce0:	d208      	bcs.n	2cf4 <prvWriteBytesToBuffer.part.1+0x2c>
    2ce2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2ce6:	f383 8811 	msr	BASEPRI, r3
    2cea:	f3bf 8f6f 	isb	sy
    2cee:	f3bf 8f4f 	dsb	sy
    2cf2:	e7fe      	b.n	2cf2 <prvWriteBytesToBuffer.part.1+0x2a>
	memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2cf4:	4604      	mov	r4, r0
    2cf6:	6980      	ldr	r0, [r0, #24]
    2cf8:	4616      	mov	r6, r2
    2cfa:	4428      	add	r0, r5
    2cfc:	4642      	mov	r2, r8
    2cfe:	460f      	mov	r7, r1
    2d00:	f007 ff0d 	bl	ab1e <memcpy>
	if( xCount > xFirstLength )
    2d04:	4546      	cmp	r6, r8
    2d06:	d912      	bls.n	2d2e <prvWriteBytesToBuffer.part.1+0x66>
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
    2d08:	68a3      	ldr	r3, [r4, #8]
    2d0a:	eba6 0208 	sub.w	r2, r6, r8
    2d0e:	429a      	cmp	r2, r3
    2d10:	d908      	bls.n	2d24 <prvWriteBytesToBuffer.part.1+0x5c>
    2d12:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2d16:	f383 8811 	msr	BASEPRI, r3
    2d1a:	f3bf 8f6f 	isb	sy
    2d1e:	f3bf 8f4f 	dsb	sy
    2d22:	e7fe      	b.n	2d22 <prvWriteBytesToBuffer.part.1+0x5a>
		memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2d24:	eb07 0108 	add.w	r1, r7, r8
    2d28:	69a0      	ldr	r0, [r4, #24]
    2d2a:	f007 fef8 	bl	ab1e <memcpy>
	if( xNextHead >= pxStreamBuffer->xLength )
    2d2e:	68a2      	ldr	r2, [r4, #8]
	xNextHead += xCount;
    2d30:	4435      	add	r5, r6
	if( xNextHead >= pxStreamBuffer->xLength )
    2d32:	4295      	cmp	r5, r2
		xNextHead -= pxStreamBuffer->xLength;
    2d34:	bf28      	it	cs
    2d36:	1aad      	subcs	r5, r5, r2
	pxStreamBuffer->xHead = xNextHead;
    2d38:	6065      	str	r5, [r4, #4]
}
    2d3a:	4630      	mov	r0, r6
    2d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00002d40 <xStreamBufferGenericCreateStatic>:
	{
    2d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2d44:	b083      	sub	sp, #12
    2d46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		configASSERT( pucStreamBufferStorageArea );
    2d48:	b35b      	cbz	r3, 2da2 <xStreamBufferGenericCreateStatic+0x62>
		configASSERT( pxStaticStreamBuffer );
    2d4a:	b164      	cbz	r4, 2d66 <xStreamBufferGenericCreateStatic+0x26>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
    2d4c:	4281      	cmp	r1, r0
    2d4e:	4606      	mov	r6, r0
    2d50:	460d      	mov	r5, r1
    2d52:	d911      	bls.n	2d78 <xStreamBufferGenericCreateStatic+0x38>
    2d54:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2d58:	f383 8811 	msr	BASEPRI, r3
    2d5c:	f3bf 8f6f 	isb	sy
    2d60:	f3bf 8f4f 	dsb	sy
    2d64:	e7fe      	b.n	2d64 <xStreamBufferGenericCreateStatic+0x24>
    2d66:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2d6a:	f383 8811 	msr	BASEPRI, r3
    2d6e:	f3bf 8f6f 	isb	sy
    2d72:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticStreamBuffer );
    2d76:	e7fe      	b.n	2d76 <xStreamBufferGenericCreateStatic+0x36>
			xTriggerLevelBytes = ( size_t ) 1; /*lint !e9044 Function parameter deliberately modified to ensure it is in range. */
    2d78:	2900      	cmp	r1, #0
    2d7a:	bf08      	it	eq
    2d7c:	2501      	moveq	r5, #1
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
    2d7e:	2804      	cmp	r0, #4
    2d80:	d918      	bls.n	2db4 <xStreamBufferGenericCreateStatic+0x74>
    2d82:	461f      	mov	r7, r3
			volatile size_t xSize = sizeof( StaticStreamBuffer_t );
    2d84:	2324      	movs	r3, #36	; 0x24
    2d86:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( StreamBuffer_t ) );
    2d88:	f8dd 8004 	ldr.w	r8, [sp, #4]
    2d8c:	4598      	cmp	r8, r3
    2d8e:	d01a      	beq.n	2dc6 <xStreamBufferGenericCreateStatic+0x86>
    2d90:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2d94:	f383 8811 	msr	BASEPRI, r3
    2d98:	f3bf 8f6f 	isb	sy
    2d9c:	f3bf 8f4f 	dsb	sy
    2da0:	e7fe      	b.n	2da0 <xStreamBufferGenericCreateStatic+0x60>
    2da2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2da6:	f383 8811 	msr	BASEPRI, r3
    2daa:	f3bf 8f6f 	isb	sy
    2dae:	f3bf 8f4f 	dsb	sy
		configASSERT( pucStreamBufferStorageArea );
    2db2:	e7fe      	b.n	2db2 <xStreamBufferGenericCreateStatic+0x72>
    2db4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2db8:	f383 8811 	msr	BASEPRI, r3
    2dbc:	f3bf 8f6f 	isb	sy
    2dc0:	f3bf 8f4f 	dsb	sy
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
    2dc4:	e7fe      	b.n	2dc4 <xStreamBufferGenericCreateStatic+0x84>
			prvInitialiseNewStreamBuffer( pxStreamBuffer,
    2dc6:	4691      	mov	r9, r2
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
    2dc8:	2155      	movs	r1, #85	; 0x55
    2dca:	4602      	mov	r2, r0
    2dcc:	4638      	mov	r0, r7
    2dce:	f007 fece 	bl	ab6e <memset>
    2dd2:	4287      	cmp	r7, r0
    2dd4:	d008      	beq.n	2de8 <xStreamBufferGenericCreateStatic+0xa8>
    2dd6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2dda:	f383 8811 	msr	BASEPRI, r3
    2dde:	f3bf 8f6f 	isb	sy
    2de2:	f3bf 8f4f 	dsb	sy
    2de6:	e7fe      	b.n	2de6 <xStreamBufferGenericCreateStatic+0xa6>
	}
	#endif

	memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
    2de8:	4642      	mov	r2, r8
    2dea:	2100      	movs	r1, #0
    2dec:	4620      	mov	r0, r4
    2dee:	f007 febe 	bl	ab6e <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
    2df2:	61a7      	str	r7, [r4, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    2df4:	e9c4 6502 	strd	r6, r5, [r4, #8]

	if( xIsMessageBuffer != pdFALSE )
	{
		pxStreamBuffer->ucFlags |= sbFLAGS_IS_MESSAGE_BUFFER;
    2df8:	7f23      	ldrb	r3, [r4, #28]
	if( xIsMessageBuffer != pdFALSE )
    2dfa:	f1b9 0f00 	cmp.w	r9, #0
    2dfe:	d001      	beq.n	2e04 <xStreamBufferGenericCreateStatic+0xc4>
		pxStreamBuffer->ucFlags |= sbFLAGS_IS_MESSAGE_BUFFER;
    2e00:	f043 0301 	orr.w	r3, r3, #1
			pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
    2e04:	f043 0302 	orr.w	r3, r3, #2
	}
    2e08:	4620      	mov	r0, r4
			pxStreamBuffer->ucFlags |= sbFLAGS_IS_STATICALLY_ALLOCATED;
    2e0a:	7723      	strb	r3, [r4, #28]
	}
    2e0c:	b003      	add	sp, #12
    2e0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2e12:	bf00      	nop

00002e14 <xStreamBufferReset>:
	configASSERT( pxStreamBuffer );
    2e14:	b168      	cbz	r0, 2e32 <xStreamBufferReset+0x1e>
	if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
    2e16:	6903      	ldr	r3, [r0, #16]
    2e18:	b10b      	cbz	r3, 2e1e <xStreamBufferReset+0xa>
BaseType_t xReturn = pdFAIL, xIsMessageBuffer;
    2e1a:	2000      	movs	r0, #0
}
    2e1c:	4770      	bx	lr
{
    2e1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if( pxStreamBuffer->xTaskWaitingToSend == NULL )
    2e22:	f8d0 8014 	ldr.w	r8, [r0, #20]
    2e26:	f1b8 0f00 	cmp.w	r8, #0
    2e2a:	d00b      	beq.n	2e44 <xStreamBufferReset+0x30>
BaseType_t xReturn = pdFAIL, xIsMessageBuffer;
    2e2c:	4618      	mov	r0, r3
}
    2e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2e32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2e36:	f383 8811 	msr	BASEPRI, r3
    2e3a:	f3bf 8f6f 	isb	sy
    2e3e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxStreamBuffer );
    2e42:	e7fe      	b.n	2e42 <xStreamBufferReset+0x2e>
			if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2e44:	7f03      	ldrb	r3, [r0, #28]
		uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
    2e46:	f8d0 a020 	ldr.w	sl, [r0, #32]
			if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2e4a:	6985      	ldr	r5, [r0, #24]
    2e4c:	f013 0601 	ands.w	r6, r3, #1
    2e50:	4604      	mov	r4, r0
    2e52:	e9d0 7902 	ldrd	r7, r9, [r0, #8]
    2e56:	d01f      	beq.n	2e98 <xStreamBufferReset+0x84>
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
    2e58:	463a      	mov	r2, r7
    2e5a:	2155      	movs	r1, #85	; 0x55
    2e5c:	4628      	mov	r0, r5
    2e5e:	f007 fe86 	bl	ab6e <memset>
    2e62:	4285      	cmp	r5, r0
    2e64:	d008      	beq.n	2e78 <xStreamBufferReset+0x64>
    2e66:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2e6a:	f383 8811 	msr	BASEPRI, r3
    2e6e:	f3bf 8f6f 	isb	sy
    2e72:	f3bf 8f4f 	dsb	sy
    2e76:	e7fe      	b.n	2e76 <xStreamBufferReset+0x62>
	memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
    2e78:	4641      	mov	r1, r8
    2e7a:	2224      	movs	r2, #36	; 0x24
    2e7c:	4620      	mov	r0, r4
    2e7e:	f007 fe76 	bl	ab6e <memset>
		pxStreamBuffer->ucFlags |= sbFLAGS_IS_MESSAGE_BUFFER;
    2e82:	7f23      	ldrb	r3, [r4, #28]
	pxStreamBuffer->pucBuffer = pucBuffer;
    2e84:	61a5      	str	r5, [r4, #24]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    2e86:	e9c4 7902 	strd	r7, r9, [r4, #8]
		pxStreamBuffer->ucFlags |= sbFLAGS_IS_MESSAGE_BUFFER;
    2e8a:	f043 0301 	orr.w	r3, r3, #1
    2e8e:	7723      	strb	r3, [r4, #28]
				pxStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
    2e90:	f8c4 a020 	str.w	sl, [r4, #32]
			xReturn = pdPASS;
    2e94:	2001      	movs	r0, #1
    2e96:	e7ca      	b.n	2e2e <xStreamBufferReset+0x1a>
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
    2e98:	463a      	mov	r2, r7
    2e9a:	2155      	movs	r1, #85	; 0x55
    2e9c:	4628      	mov	r0, r5
    2e9e:	f007 fe66 	bl	ab6e <memset>
    2ea2:	42a8      	cmp	r0, r5
    2ea4:	4680      	mov	r8, r0
    2ea6:	d1de      	bne.n	2e66 <xStreamBufferReset+0x52>
	memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
    2ea8:	4631      	mov	r1, r6
    2eaa:	2220      	movs	r2, #32
    2eac:	4620      	mov	r0, r4
    2eae:	f007 fe5e 	bl	ab6e <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
    2eb2:	f8c4 8018 	str.w	r8, [r4, #24]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    2eb6:	e9c4 7902 	strd	r7, r9, [r4, #8]
	if( xIsMessageBuffer != pdFALSE )
    2eba:	e7e9      	b.n	2e90 <xStreamBufferReset+0x7c>

00002ebc <xStreamBufferSend>:
{
    2ebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2ec0:	b087      	sub	sp, #28
    2ec2:	9301      	str	r3, [sp, #4]
	configASSERT( pvTxData );
    2ec4:	b321      	cbz	r1, 2f10 <xStreamBufferSend+0x54>
	configASSERT( pxStreamBuffer );
    2ec6:	b1d0      	cbz	r0, 2efe <xStreamBufferSend+0x42>
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    2ec8:	7f03      	ldrb	r3, [r0, #28]
    2eca:	07dc      	lsls	r4, r3, #31
	if( xTicksToWait != ( TickType_t ) 0 )
    2ecc:	9b01      	ldr	r3, [sp, #4]
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    2ece:	bf4c      	ite	mi
    2ed0:	f102 0804 	addmi.w	r8, r2, #4
size_t xRequiredSpace = xDataLengthBytes;
    2ed4:	4690      	movpl	r8, r2
    2ed6:	460f      	mov	r7, r1
    2ed8:	4616      	mov	r6, r2
    2eda:	4605      	mov	r5, r0
	if( xTicksToWait != ( TickType_t ) 0 )
    2edc:	bb0b      	cbnz	r3, 2f22 <xStreamBufferSend+0x66>
	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
    2ede:	68ab      	ldr	r3, [r5, #8]
    2ee0:	682c      	ldr	r4, [r5, #0]
	xSpace -= pxStreamBuffer->xHead;
    2ee2:	686a      	ldr	r2, [r5, #4]
	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
    2ee4:	441c      	add	r4, r3
    2ee6:	3c01      	subs	r4, #1
	xSpace -= ( size_t ) 1;
    2ee8:	1aa4      	subs	r4, r4, r2
	if( xSpace >= pxStreamBuffer->xLength )
    2eea:	42a3      	cmp	r3, r4
    2eec:	d95e      	bls.n	2fac <xStreamBufferSend+0xf0>
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2eee:	9603      	str	r6, [sp, #12]
	if( xSpace == ( size_t ) 0 )
    2ef0:	2c00      	cmp	r4, #0
    2ef2:	d146      	bne.n	2f82 <xStreamBufferSend+0xc6>
		xReturn = 0;
    2ef4:	2400      	movs	r4, #0
}
    2ef6:	4620      	mov	r0, r4
    2ef8:	b007      	add	sp, #28
    2efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2efe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2f02:	f383 8811 	msr	BASEPRI, r3
    2f06:	f3bf 8f6f 	isb	sy
    2f0a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxStreamBuffer );
    2f0e:	e7fe      	b.n	2f0e <xStreamBufferSend+0x52>
    2f10:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2f14:	f383 8811 	msr	BASEPRI, r3
    2f18:	f3bf 8f6f 	isb	sy
    2f1c:	f3bf 8f4f 	dsb	sy
	configASSERT( pvTxData );
    2f20:	e7fe      	b.n	2f20 <xStreamBufferSend+0x64>
		vTaskSetTimeOutState( &xTimeOut );
    2f22:	a804      	add	r0, sp, #16
    2f24:	f7fe fea8 	bl	1c78 <vTaskSetTimeOutState>
			taskENTER_CRITICAL();
    2f28:	f7ff fc84 	bl	2834 <vPortEnterCritical>
	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
    2f2c:	68ab      	ldr	r3, [r5, #8]
    2f2e:	682c      	ldr	r4, [r5, #0]
	xSpace -= pxStreamBuffer->xHead;
    2f30:	686a      	ldr	r2, [r5, #4]
	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
    2f32:	441c      	add	r4, r3
    2f34:	3c01      	subs	r4, #1
	xSpace -= ( size_t ) 1;
    2f36:	1aa4      	subs	r4, r4, r2
	if( xSpace >= pxStreamBuffer->xLength )
    2f38:	42a3      	cmp	r3, r4
		xSpace -= pxStreamBuffer->xLength;
    2f3a:	bf98      	it	ls
    2f3c:	1ae4      	subls	r4, r4, r3
				if( xSpace < xRequiredSpace )
    2f3e:	45a0      	cmp	r8, r4
					( void ) xTaskNotifyStateClear( NULL );
    2f40:	f04f 0000 	mov.w	r0, #0
				if( xSpace < xRequiredSpace )
    2f44:	d964      	bls.n	3010 <xStreamBufferSend+0x154>
					( void ) xTaskNotifyStateClear( NULL );
    2f46:	f7ff f91d 	bl	2184 <xTaskNotifyStateClear>
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
    2f4a:	f8d5 9014 	ldr.w	r9, [r5, #20]
    2f4e:	f1b9 0f00 	cmp.w	r9, #0
    2f52:	d12d      	bne.n	2fb0 <xStreamBufferSend+0xf4>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    2f54:	f7fe ff22 	bl	1d9c <xTaskGetCurrentTaskHandle>
    2f58:	6168      	str	r0, [r5, #20]
			taskEXIT_CRITICAL();
    2f5a:	f7ff fc8d 	bl	2878 <vPortExitCritical>
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
    2f5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2f62:	9b01      	ldr	r3, [sp, #4]
    2f64:	464a      	mov	r2, r9
    2f66:	4648      	mov	r0, r9
    2f68:	f7ff f81c 	bl	1fa4 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
    2f6c:	f8c5 9014 	str.w	r9, [r5, #20]
		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    2f70:	a901      	add	r1, sp, #4
    2f72:	a804      	add	r0, sp, #16
    2f74:	f7fe fea8 	bl	1cc8 <xTaskCheckForTimeOut>
    2f78:	2800      	cmp	r0, #0
    2f7a:	d0d5      	beq.n	2f28 <xStreamBufferSend+0x6c>
	if( xSpace == ( size_t ) 0 )
    2f7c:	2c00      	cmp	r4, #0
    2f7e:	d0ae      	beq.n	2ede <xStreamBufferSend+0x22>
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    2f80:	9603      	str	r6, [sp, #12]
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
    2f82:	7f2b      	ldrb	r3, [r5, #28]
    2f84:	07db      	lsls	r3, r3, #31
    2f86:	d51c      	bpl.n	2fc2 <xStreamBufferSend+0x106>
	else if( xSpace >= xRequiredSpace )
    2f88:	45a0      	cmp	r8, r4
    2f8a:	d8b3      	bhi.n	2ef4 <xStreamBufferSend+0x38>
	configASSERT( xCount > ( size_t ) 0 );
    2f8c:	2204      	movs	r2, #4
    2f8e:	a903      	add	r1, sp, #12
    2f90:	4628      	mov	r0, r5
    2f92:	f7ff fe99 	bl	2cc8 <prvWriteBytesToBuffer.part.1>
	if( xShouldWrite != pdFALSE )
    2f96:	9a03      	ldr	r2, [sp, #12]
	configASSERT( xCount > ( size_t ) 0 );
    2f98:	b9ca      	cbnz	r2, 2fce <xStreamBufferSend+0x112>
    2f9a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2f9e:	f383 8811 	msr	BASEPRI, r3
    2fa2:	f3bf 8f6f 	isb	sy
    2fa6:	f3bf 8f4f 	dsb	sy
    2faa:	e7fe      	b.n	2faa <xStreamBufferSend+0xee>
		xSpace -= pxStreamBuffer->xLength;
    2fac:	1ae4      	subs	r4, r4, r3
    2fae:	e79e      	b.n	2eee <xStreamBufferSend+0x32>
    2fb0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    2fb4:	f383 8811 	msr	BASEPRI, r3
    2fb8:	f3bf 8f6f 	isb	sy
    2fbc:	f3bf 8f4f 	dsb	sy
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
    2fc0:	e7fe      	b.n	2fc0 <xStreamBufferSend+0x104>
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace ); /*lint !e9044 Function parameter modified to ensure it is capped to available space. */
    2fc2:	42a6      	cmp	r6, r4
    2fc4:	4632      	mov	r2, r6
    2fc6:	bf28      	it	cs
    2fc8:	4622      	movcs	r2, r4
    2fca:	9203      	str	r2, [sp, #12]
	if( xShouldWrite != pdFALSE )
    2fcc:	e7e4      	b.n	2f98 <xStreamBufferSend+0xdc>
    2fce:	4639      	mov	r1, r7
    2fd0:	4628      	mov	r0, r5
    2fd2:	f7ff fe79 	bl	2cc8 <prvWriteBytesToBuffer.part.1>
	if( xReturn > ( size_t ) 0 )
    2fd6:	4604      	mov	r4, r0
    2fd8:	2800      	cmp	r0, #0
    2fda:	d08c      	beq.n	2ef6 <xStreamBufferSend+0x3a>
	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    2fdc:	68aa      	ldr	r2, [r5, #8]
    2fde:	686b      	ldr	r3, [r5, #4]
	xCount -= pxStreamBuffer->xTail;
    2fe0:	6829      	ldr	r1, [r5, #0]
	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    2fe2:	4413      	add	r3, r2
	xCount -= pxStreamBuffer->xTail;
    2fe4:	1a5b      	subs	r3, r3, r1
	if ( xCount >= pxStreamBuffer->xLength )
    2fe6:	429a      	cmp	r2, r3
		xCount -= pxStreamBuffer->xLength;
    2fe8:	bf98      	it	ls
    2fea:	1a9b      	subls	r3, r3, r2
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    2fec:	68ea      	ldr	r2, [r5, #12]
    2fee:	429a      	cmp	r2, r3
    2ff0:	d881      	bhi.n	2ef6 <xStreamBufferSend+0x3a>
			sbSEND_COMPLETED( pxStreamBuffer );
    2ff2:	f7fe fa37 	bl	1464 <vTaskSuspendAll>
    2ff6:	692b      	ldr	r3, [r5, #16]
    2ff8:	b13b      	cbz	r3, 300a <xStreamBufferSend+0x14e>
    2ffa:	2300      	movs	r3, #0
    2ffc:	461a      	mov	r2, r3
    2ffe:	4619      	mov	r1, r3
    3000:	6928      	ldr	r0, [r5, #16]
    3002:	f7ff f843 	bl	208c <xTaskGenericNotify>
    3006:	2300      	movs	r3, #0
    3008:	612b      	str	r3, [r5, #16]
    300a:	f7fe fb87 	bl	171c <xTaskResumeAll>
	return xReturn;
    300e:	e772      	b.n	2ef6 <xStreamBufferSend+0x3a>
					taskEXIT_CRITICAL();
    3010:	f7ff fc32 	bl	2878 <vPortExitCritical>
					break;
    3014:	e7b2      	b.n	2f7c <xStreamBufferSend+0xc0>
    3016:	bf00      	nop

00003018 <xStreamBufferReceive>:
	configASSERT( pvRxData );
    3018:	b341      	cbz	r1, 306c <xStreamBufferReceive+0x54>
	configASSERT( pxStreamBuffer );
    301a:	b1f0      	cbz	r0, 305a <xStreamBufferReceive+0x42>
{
    301c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3020:	4699      	mov	r9, r3
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    3022:	7f03      	ldrb	r3, [r0, #28]
		xBytesToStoreMessageLength = 0;
    3024:	f013 0f01 	tst.w	r3, #1
{
    3028:	b083      	sub	sp, #12
    302a:	4688      	mov	r8, r1
    302c:	4617      	mov	r7, r2
    302e:	4605      	mov	r5, r0
		xBytesToStoreMessageLength = 0;
    3030:	bf14      	ite	ne
    3032:	2604      	movne	r6, #4
    3034:	2600      	moveq	r6, #0
	if( xTicksToWait != ( TickType_t ) 0 )
    3036:	f1b9 0f00 	cmp.w	r9, #0
    303a:	d120      	bne.n	307e <xStreamBufferReceive+0x66>
	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    303c:	6883      	ldr	r3, [r0, #8]
    303e:	6844      	ldr	r4, [r0, #4]
	xCount -= pxStreamBuffer->xTail;
    3040:	682a      	ldr	r2, [r5, #0]
	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    3042:	441c      	add	r4, r3
	xCount -= pxStreamBuffer->xTail;
    3044:	1aa4      	subs	r4, r4, r2
	if ( xCount >= pxStreamBuffer->xLength )
    3046:	42a3      	cmp	r3, r4
		xCount -= pxStreamBuffer->xLength;
    3048:	bf98      	it	ls
    304a:	1ae4      	subls	r4, r4, r3
	if( xBytesAvailable > xBytesToStoreMessageLength )
    304c:	42b4      	cmp	r4, r6
    304e:	d824      	bhi.n	309a <xStreamBufferReceive+0x82>
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    3050:	2400      	movs	r4, #0
}
    3052:	4620      	mov	r0, r4
    3054:	b003      	add	sp, #12
    3056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    305a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    305e:	f383 8811 	msr	BASEPRI, r3
    3062:	f3bf 8f6f 	isb	sy
    3066:	f3bf 8f4f 	dsb	sy
	configASSERT( pxStreamBuffer );
    306a:	e7fe      	b.n	306a <xStreamBufferReceive+0x52>
    306c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    3070:	f383 8811 	msr	BASEPRI, r3
    3074:	f3bf 8f6f 	isb	sy
    3078:	f3bf 8f4f 	dsb	sy
	configASSERT( pvRxData );
    307c:	e7fe      	b.n	307c <xStreamBufferReceive+0x64>
		taskENTER_CRITICAL();
    307e:	f7ff fbd9 	bl	2834 <vPortEnterCritical>
	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    3082:	68ab      	ldr	r3, [r5, #8]
    3084:	686c      	ldr	r4, [r5, #4]
	xCount -= pxStreamBuffer->xTail;
    3086:	682a      	ldr	r2, [r5, #0]
	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    3088:	441c      	add	r4, r3
	xCount -= pxStreamBuffer->xTail;
    308a:	1aa4      	subs	r4, r4, r2
	if ( xCount >= pxStreamBuffer->xLength )
    308c:	42a3      	cmp	r3, r4
		xCount -= pxStreamBuffer->xLength;
    308e:	bf98      	it	ls
    3090:	1ae4      	subls	r4, r4, r3
			if( xBytesAvailable <= xBytesToStoreMessageLength )
    3092:	42a6      	cmp	r6, r4
    3094:	d21b      	bcs.n	30ce <xStreamBufferReceive+0xb6>
		taskEXIT_CRITICAL();
    3096:	f7ff fbef 	bl	2878 <vPortExitCritical>
	if( xBytesToStoreMessageLength != ( size_t ) 0 )
    309a:	bb36      	cbnz	r6, 30ea <xStreamBufferReceive+0xd2>
		xNextMessageLength = xBufferLengthBytes;
    309c:	9701      	str	r7, [sp, #4]
    309e:	463a      	mov	r2, r7
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    30a0:	4623      	mov	r3, r4
    30a2:	4641      	mov	r1, r8
    30a4:	4628      	mov	r0, r5
    30a6:	f7ff fdc1 	bl	2c2c <prvReadBytesFromBuffer>
		if( xReceivedLength != ( size_t ) 0 )
    30aa:	4604      	mov	r4, r0
    30ac:	2800      	cmp	r0, #0
    30ae:	d0cf      	beq.n	3050 <xStreamBufferReceive+0x38>
			sbRECEIVE_COMPLETED( pxStreamBuffer );
    30b0:	f7fe f9d8 	bl	1464 <vTaskSuspendAll>
    30b4:	696b      	ldr	r3, [r5, #20]
    30b6:	b13b      	cbz	r3, 30c8 <xStreamBufferReceive+0xb0>
    30b8:	2300      	movs	r3, #0
    30ba:	461a      	mov	r2, r3
    30bc:	4619      	mov	r1, r3
    30be:	6968      	ldr	r0, [r5, #20]
    30c0:	f7fe ffe4 	bl	208c <xTaskGenericNotify>
    30c4:	2300      	movs	r3, #0
    30c6:	616b      	str	r3, [r5, #20]
    30c8:	f7fe fb28 	bl	171c <xTaskResumeAll>
	return xReceivedLength;
    30cc:	e7c1      	b.n	3052 <xStreamBufferReceive+0x3a>
				( void ) xTaskNotifyStateClear( NULL );
    30ce:	2000      	movs	r0, #0
    30d0:	f7ff f858 	bl	2184 <xTaskNotifyStateClear>
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
    30d4:	692c      	ldr	r4, [r5, #16]
    30d6:	b1d4      	cbz	r4, 310e <xStreamBufferReceive+0xf6>
    30d8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    30dc:	f383 8811 	msr	BASEPRI, r3
    30e0:	f3bf 8f6f 	isb	sy
    30e4:	f3bf 8f4f 	dsb	sy
    30e8:	e7fe      	b.n	30e8 <xStreamBufferReceive+0xd0>
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    30ea:	4623      	mov	r3, r4
    30ec:	4632      	mov	r2, r6
    30ee:	a901      	add	r1, sp, #4
    30f0:	4628      	mov	r0, r5
		xOriginalTail = pxStreamBuffer->xTail;
    30f2:	f8d5 9000 	ldr.w	r9, [r5]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    30f6:	f7ff fd99 	bl	2c2c <prvReadBytesFromBuffer>
		if( xNextMessageLength > xBufferLengthBytes )
    30fa:	9a01      	ldr	r2, [sp, #4]
    30fc:	4297      	cmp	r7, r2
		xBytesAvailable -= xBytesToStoreMessageLength;
    30fe:	eba4 0406 	sub.w	r4, r4, r6
		if( xNextMessageLength > xBufferLengthBytes )
    3102:	d2cd      	bcs.n	30a0 <xStreamBufferReceive+0x88>
			xNextMessageLength = 0;
    3104:	2200      	movs	r2, #0
			pxStreamBuffer->xTail = xOriginalTail;
    3106:	f8c5 9000 	str.w	r9, [r5]
			xNextMessageLength = 0;
    310a:	9201      	str	r2, [sp, #4]
    310c:	e7c8      	b.n	30a0 <xStreamBufferReceive+0x88>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    310e:	f7fe fe45 	bl	1d9c <xTaskGetCurrentTaskHandle>
    3112:	6128      	str	r0, [r5, #16]
		taskEXIT_CRITICAL();
    3114:	f7ff fbb0 	bl	2878 <vPortExitCritical>
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
    3118:	464b      	mov	r3, r9
    311a:	4622      	mov	r2, r4
    311c:	4620      	mov	r0, r4
    311e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3122:	f7fe ff3f 	bl	1fa4 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
    3126:	612c      	str	r4, [r5, #16]
	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    3128:	686c      	ldr	r4, [r5, #4]
    312a:	68ab      	ldr	r3, [r5, #8]
    312c:	e788      	b.n	3040 <xStreamBufferReceive+0x28>
    312e:	bf00      	nop

00003130 <xStreamBufferIsEmpty>:
	configASSERT( pxStreamBuffer );
    3130:	b130      	cbz	r0, 3140 <xStreamBufferIsEmpty+0x10>
	xTail = pxStreamBuffer->xTail;
    3132:	6803      	ldr	r3, [r0, #0]
	if( pxStreamBuffer->xHead == xTail )
    3134:	6840      	ldr	r0, [r0, #4]
}
    3136:	1ac0      	subs	r0, r0, r3
    3138:	fab0 f080 	clz	r0, r0
    313c:	0940      	lsrs	r0, r0, #5
    313e:	4770      	bx	lr
    3140:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    3144:	f383 8811 	msr	BASEPRI, r3
    3148:	f3bf 8f6f 	isb	sy
    314c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxStreamBuffer );
    3150:	e7fe      	b.n	3150 <xStreamBufferIsEmpty+0x20>
    3152:	bf00      	nop

00003154 <xStreamBufferIsFull>:
	configASSERT( pxStreamBuffer );
    3154:	b198      	cbz	r0, 317e <xStreamBufferIsFull+0x2a>
	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
    3156:	6882      	ldr	r2, [r0, #8]
    3158:	6803      	ldr	r3, [r0, #0]
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    315a:	7f01      	ldrb	r1, [r0, #28]
	xSpace -= pxStreamBuffer->xHead;
    315c:	6840      	ldr	r0, [r0, #4]
	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
    315e:	4413      	add	r3, r2
    3160:	3b01      	subs	r3, #1
	xSpace -= ( size_t ) 1;
    3162:	1a1b      	subs	r3, r3, r0
		xBytesToStoreMessageLength = 0;
    3164:	f011 0f01 	tst.w	r1, #1
    3168:	bf14      	ite	ne
    316a:	2004      	movne	r0, #4
    316c:	2000      	moveq	r0, #0
	if( xSpace >= pxStreamBuffer->xLength )
    316e:	429a      	cmp	r2, r3
		xSpace -= pxStreamBuffer->xLength;
    3170:	bf98      	it	ls
    3172:	1a9b      	subls	r3, r3, r2
}
    3174:	4298      	cmp	r0, r3
    3176:	bf34      	ite	cc
    3178:	2000      	movcc	r0, #0
    317a:	2001      	movcs	r0, #1
    317c:	4770      	bx	lr
    317e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    3182:	f383 8811 	msr	BASEPRI, r3
    3186:	f3bf 8f6f 	isb	sy
    318a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxStreamBuffer );
    318e:	e7fe      	b.n	318e <xStreamBufferIsFull+0x3a>

00003190 <_sbrk>:
caddr_t _sbrk ( int incr )
{
  static unsigned char *heap = NULL;
  unsigned char *prev_heap;

  if (heap == NULL) {
    3190:	4b07      	ldr	r3, [pc, #28]	; (31b0 <_sbrk+0x20>)
    3192:	681a      	ldr	r2, [r3, #0]
    3194:	b90a      	cbnz	r2, 319a <_sbrk+0xa>
    heap = (unsigned char *)&_heap_start;
    3196:	4a07      	ldr	r2, [pc, #28]	; (31b4 <_sbrk+0x24>)
    3198:	601a      	str	r2, [r3, #0]
  }
  prev_heap = heap;
    319a:	6819      	ldr	r1, [r3, #0]

  heap += incr;
    319c:	180a      	adds	r2, r1, r0

  if ((unsigned)heap > (unsigned)&_heap_end){
		  return (caddr_t) -1;
  }
  return (caddr_t) prev_heap;
}
    319e:	4806      	ldr	r0, [pc, #24]	; (31b8 <_sbrk+0x28>)
  heap += incr;
    31a0:	601a      	str	r2, [r3, #0]
}
    31a2:	4282      	cmp	r2, r0
    31a4:	bf94      	ite	ls
    31a6:	4608      	movls	r0, r1
    31a8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
    31ac:	4770      	bx	lr
    31ae:	bf00      	nop
    31b0:	00020c8c 	.word	0x00020c8c
    31b4:	0005c2b8 	.word	0x0005c2b8
    31b8:	0005c6b8 	.word	0x0005c6b8

000031bc <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
    31bc:	b538      	push	{r3, r4, r5, lr}
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
    31be:	4d08      	ldr	r5, [pc, #32]	; (31e0 <prvHelpCommand+0x24>)
    31c0:	4b08      	ldr	r3, [pc, #32]	; (31e4 <prvHelpCommand+0x28>)
    31c2:	682c      	ldr	r4, [r5, #0]
    31c4:	2c00      	cmp	r4, #0
    31c6:	bf08      	it	eq
    31c8:	461c      	moveq	r4, r3
		pxCommand = &xRegisteredCommands;
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
    31ca:	460a      	mov	r2, r1
    31cc:	6823      	ldr	r3, [r4, #0]
    31ce:	6859      	ldr	r1, [r3, #4]
    31d0:	f007 fe26 	bl	ae20 <strncpy>
	pxCommand = pxCommand->pxNext;
    31d4:	6860      	ldr	r0, [r4, #4]
    31d6:	6028      	str	r0, [r5, #0]
	{
		xReturn = pdTRUE;
	}

	return xReturn;
}
    31d8:	3000      	adds	r0, #0
    31da:	bf18      	it	ne
    31dc:	2001      	movne	r0, #1
    31de:	bd38      	pop	{r3, r4, r5, pc}
    31e0:	00021094 	.word	0x00021094
    31e4:	0000c618 	.word	0x0000c618

000031e8 <FreeRTOS_CLIProcessCommand>:
{
    31e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( pxCommand == NULL )
    31ec:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 32ac <FreeRTOS_CLIProcessCommand+0xc4>
    31f0:	f8d8 4000 	ldr.w	r4, [r8]
{
    31f4:	4606      	mov	r6, r0
    31f6:	4689      	mov	r9, r1
    31f8:	4692      	mov	sl, r2
	if( pxCommand == NULL )
    31fa:	b154      	cbz	r4, 3212 <FreeRTOS_CLIProcessCommand+0x2a>
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
    31fc:	6823      	ldr	r3, [r4, #0]
    31fe:	4632      	mov	r2, r6
    3200:	689b      	ldr	r3, [r3, #8]
    3202:	4651      	mov	r1, sl
    3204:	4648      	mov	r0, r9
    3206:	4798      	blx	r3
		if( xReturn == pdFALSE )
    3208:	b908      	cbnz	r0, 320e <FreeRTOS_CLIProcessCommand+0x26>
			pxCommand = NULL;
    320a:	f8c8 0000 	str.w	r0, [r8]
}
    320e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    3212:	4c23      	ldr	r4, [pc, #140]	; (32a0 <FreeRTOS_CLIProcessCommand+0xb8>)
    3214:	f8c8 4000 	str.w	r4, [r8]
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
    3218:	6827      	ldr	r7, [r4, #0]
    321a:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( pcRegisteredCommandString );
    321c:	4628      	mov	r0, r5
    321e:	f007 fde5 	bl	adec <strlen>
    3222:	4603      	mov	r3, r0
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
    3224:	4602      	mov	r2, r0
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
    3226:	5cf3      	ldrb	r3, [r6, r3]
    3228:	f013 0fdf 	tst.w	r3, #223	; 0xdf
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
    322c:	4629      	mov	r1, r5
    322e:	4630      	mov	r0, r6
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
    3230:	d102      	bne.n	3238 <FreeRTOS_CLIProcessCommand+0x50>
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
    3232:	f007 fde3 	bl	adfc <strncmp>
    3236:	b160      	cbz	r0, 3252 <FreeRTOS_CLIProcessCommand+0x6a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
    3238:	6864      	ldr	r4, [r4, #4]
    323a:	f8c8 4000 	str.w	r4, [r8]
    323e:	2c00      	cmp	r4, #0
    3240:	d1ea      	bne.n	3218 <FreeRTOS_CLIProcessCommand+0x30>
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    3242:	4652      	mov	r2, sl
    3244:	4648      	mov	r0, r9
    3246:	4917      	ldr	r1, [pc, #92]	; (32a4 <FreeRTOS_CLIProcessCommand+0xbc>)
    3248:	f007 fdea 	bl	ae20 <strncpy>
		xReturn = pdFALSE;
    324c:	4620      	mov	r0, r4
}
    324e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
    3252:	f997 500c 	ldrsb.w	r5, [r7, #12]
    3256:	2d00      	cmp	r5, #0
    3258:	dbd0      	blt.n	31fc <FreeRTOS_CLIProcessCommand+0x14>
{
int8_t cParameters = 0;
BaseType_t xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
    325a:	7833      	ldrb	r3, [r6, #0]
    325c:	b1f3      	cbz	r3, 329c <FreeRTOS_CLIProcessCommand+0xb4>
BaseType_t xLastCharacterWasSpace = pdFALSE;
    325e:	4601      	mov	r1, r0
	while( *pcCommandString != 0x00 )
    3260:	4632      	mov	r2, r6
    3262:	e003      	b.n	326c <FreeRTOS_CLIProcessCommand+0x84>
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
    3264:	2100      	movs	r1, #0
	while( *pcCommandString != 0x00 )
    3266:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    326a:	b13b      	cbz	r3, 327c <FreeRTOS_CLIProcessCommand+0x94>
		if( ( *pcCommandString ) == ' ' )
    326c:	2b20      	cmp	r3, #32
    326e:	d1f9      	bne.n	3264 <FreeRTOS_CLIProcessCommand+0x7c>
				cParameters++;
    3270:	1c43      	adds	r3, r0, #1
			if( xLastCharacterWasSpace != pdTRUE )
    3272:	2900      	cmp	r1, #0
    3274:	d1f7      	bne.n	3266 <FreeRTOS_CLIProcessCommand+0x7e>
				cParameters++;
    3276:	b258      	sxtb	r0, r3
				xLastCharacterWasSpace = pdTRUE;
    3278:	2101      	movs	r1, #1
    327a:	e7f4      	b.n	3266 <FreeRTOS_CLIProcessCommand+0x7e>
		pcCommandString++;
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
    327c:	b959      	cbnz	r1, 3296 <FreeRTOS_CLIProcessCommand+0xae>
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
    327e:	4285      	cmp	r5, r0
    3280:	d0bc      	beq.n	31fc <FreeRTOS_CLIProcessCommand+0x14>
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
    3282:	4652      	mov	r2, sl
    3284:	4648      	mov	r0, r9
    3286:	4908      	ldr	r1, [pc, #32]	; (32a8 <FreeRTOS_CLIProcessCommand+0xc0>)
    3288:	f007 fdca 	bl	ae20 <strncpy>
		pxCommand = NULL;
    328c:	2000      	movs	r0, #0
    328e:	f8c8 0000 	str.w	r0, [r8]
}
    3292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	{
		cParameters--;
    3296:	3801      	subs	r0, #1
    3298:	b240      	sxtb	r0, r0
    329a:	e7f0      	b.n	327e <FreeRTOS_CLIProcessCommand+0x96>
int8_t cParameters = 0;
    329c:	4618      	mov	r0, r3
    329e:	e7ee      	b.n	327e <FreeRTOS_CLIProcessCommand+0x96>
    32a0:	0000c618 	.word	0x0000c618
    32a4:	0000b630 	.word	0x0000b630
    32a8:	0000b5d8 	.word	0x0000b5d8
    32ac:	00021090 	.word	0x00021090

000032b0 <FreeRTOS_CLIGetOutputBuffer>:
}
    32b0:	4800      	ldr	r0, [pc, #0]	; (32b4 <FreeRTOS_CLIGetOutputBuffer+0x4>)
    32b2:	4770      	bx	lr
    32b4:	00020c90 	.word	0x00020c90

000032b8 <prvUARTCommandConsoleTask>:
					NULL );						/* A handle is not required, so just pass NULL. */
}
/*-----------------------------------------------------------*/

static void prvUARTCommandConsoleTask( void *pvParameters )
{
    32b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32bc:	b083      	sub	sp, #12
	( void ) pvParameters;

	/* Obtain the address of the output buffer.  Note there is no mutual
	exclusion on this buffer as it is assumed only one command console interface
	will be used at any one time. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
    32be:	f7ff fff7 	bl	32b0 <FreeRTOS_CLIGetOutputBuffer>

	/* Initialise the UART. */
	xPort = xSerialPortInitMinimal( configCLI_BAUD_RATE, cmdQUEUE_LENGTH );
    32c2:	2119      	movs	r1, #25
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
    32c4:	4605      	mov	r5, r0
	xPort = xSerialPortInitMinimal( configCLI_BAUD_RATE, cmdQUEUE_LENGTH );
    32c6:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
    32ca:	f000 fa33 	bl	3734 <xSerialPortInitMinimal>

	/* Send the welcome message. */
	vSerialPutString( xPort, ( signed char * ) pcWelcomeMessage, ( unsigned short ) strlen( pcWelcomeMessage ) );
    32ce:	224f      	movs	r2, #79	; 0x4f
    32d0:	4939      	ldr	r1, [pc, #228]	; (33b8 <prvUARTCommandConsoleTask+0x100>)
    32d2:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 33c4 <prvUARTCommandConsoleTask+0x10c>
    32d6:	4f39      	ldr	r7, [pc, #228]	; (33bc <prvUARTCommandConsoleTask+0x104>)

			/* Was it the end of the line? */
			if( cRxedChar == '\n' || cRxedChar == '\r' )
			{
				/* Just to space the output from the input. */
				vSerialPutString( xPort, ( signed char * ) pcNewLine, ( unsigned short ) strlen( pcNewLine ) );
    32d8:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 33c8 <prvUARTCommandConsoleTask+0x110>

				/* All the strings generated by the input command have been
				sent.  Clear the input string ready to receive the next command.
				Remember the command that was just processed first in case it is
				to be processed again. */
				strcpy( cLastInputString, cInputString );
    32dc:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 33cc <prvUARTCommandConsoleTask+0x114>
	xPort = xSerialPortInitMinimal( configCLI_BAUD_RATE, cmdQUEUE_LENGTH );
    32e0:	4604      	mov	r4, r0
	vSerialPutString( xPort, ( signed char * ) pcWelcomeMessage, ( unsigned short ) strlen( pcWelcomeMessage ) );
    32e2:	f000 fa6f 	bl	37c4 <vSerialPutString>
					xReturned = FreeRTOS_CLIProcessCommand( cInputString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );
    32e6:	46d8      	mov	r8, fp
uint8_t ucInputIndex = 0;
    32e8:	2600      	movs	r6, #0
		while( xSerialGetChar( xPort, &cRxedChar, portMAX_DELAY ) != pdPASS );
    32ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    32ee:	f10d 0107 	add.w	r1, sp, #7
    32f2:	4620      	mov	r0, r4
    32f4:	f000 fa5a 	bl	37ac <xSerialGetChar>
    32f8:	2801      	cmp	r0, #1
    32fa:	d1f6      	bne.n	32ea <prvUARTCommandConsoleTask+0x32>
		if( xSemaphoreTake( xTxMutex, cmdMAX_MUTEX_WAIT ) == pdPASS )
    32fc:	f44f 7196 	mov.w	r1, #300	; 0x12c
    3300:	6838      	ldr	r0, [r7, #0]
    3302:	f7fd fd6f 	bl	de4 <xQueueSemaphoreTake>
    3306:	2801      	cmp	r0, #1
    3308:	d1ef      	bne.n	32ea <prvUARTCommandConsoleTask+0x32>
			xSerialPutChar( xPort, cRxedChar, portMAX_DELAY );
    330a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    330e:	f99d 1007 	ldrsb.w	r1, [sp, #7]
    3312:	4620      	mov	r0, r4
    3314:	f000 fa64 	bl	37e0 <xSerialPutChar>
			if( cRxedChar == '\n' || cRxedChar == '\r' )
    3318:	f99d 3007 	ldrsb.w	r3, [sp, #7]
    331c:	2b0a      	cmp	r3, #10
    331e:	d017      	beq.n	3350 <prvUARTCommandConsoleTask+0x98>
    3320:	2b0d      	cmp	r3, #13
    3322:	d015      	beq.n	3350 <prvUARTCommandConsoleTask+0x98>
			{
				if( cRxedChar == '\r' )
				{
					/* Ignore the character. */
				}
				else if( ( cRxedChar == '\b' ) || ( cRxedChar == cmdASCII_DEL ) )
    3324:	2b08      	cmp	r3, #8
    3326:	d039      	beq.n	339c <prvUARTCommandConsoleTask+0xe4>
    3328:	2b7f      	cmp	r3, #127	; 0x7f
    332a:	d037      	beq.n	339c <prvUARTCommandConsoleTask+0xe4>
				else
				{
					/* A character was entered.  Add it to the string entered so
					far.  When a \n is entered the complete	string will be
					passed to the command interpreter. */
					if( ( cRxedChar >= ' ' ) && ( cRxedChar <= '~' ) )
    332c:	b2db      	uxtb	r3, r3
    332e:	f1a3 0220 	sub.w	r2, r3, #32
    3332:	2a5e      	cmp	r2, #94	; 0x5e
    3334:	d805      	bhi.n	3342 <prvUARTCommandConsoleTask+0x8a>
					{
						if( ucInputIndex < cmdMAX_INPUT_SIZE )
    3336:	2e31      	cmp	r6, #49	; 0x31
    3338:	d803      	bhi.n	3342 <prvUARTCommandConsoleTask+0x8a>
						{
							cInputString[ ucInputIndex ] = cRxedChar;
							ucInputIndex++;
    333a:	1c72      	adds	r2, r6, #1
							cInputString[ ucInputIndex ] = cRxedChar;
    333c:	f80b 3006 	strb.w	r3, [fp, r6]
							ucInputIndex++;
    3340:	b2d6      	uxtb	r6, r2
					}
				}
			}

			/* Must ensure to give the mutex back. */
			xSemaphoreGive( xTxMutex );
    3342:	2300      	movs	r3, #0
    3344:	461a      	mov	r2, r3
    3346:	4619      	mov	r1, r3
    3348:	6838      	ldr	r0, [r7, #0]
    334a:	f7fd fab7 	bl	8bc <xQueueGenericSend>
    334e:	e7cc      	b.n	32ea <prvUARTCommandConsoleTask+0x32>
				vSerialPutString( xPort, ( signed char * ) pcNewLine, ( unsigned short ) strlen( pcNewLine ) );
    3350:	2202      	movs	r2, #2
    3352:	4651      	mov	r1, sl
    3354:	4620      	mov	r0, r4
    3356:	f000 fa35 	bl	37c4 <vSerialPutString>
				if( ucInputIndex == 0 )
    335a:	b33e      	cbz	r6, 33ac <prvUARTCommandConsoleTask+0xf4>
					xReturned = FreeRTOS_CLIProcessCommand( cInputString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );
    335c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3360:	4629      	mov	r1, r5
    3362:	4640      	mov	r0, r8
    3364:	f7ff ff40 	bl	31e8 <FreeRTOS_CLIProcessCommand>
    3368:	4606      	mov	r6, r0
					vSerialPutString( xPort, ( signed char * ) pcOutputString, ( unsigned short ) strlen( pcOutputString ) );
    336a:	4628      	mov	r0, r5
    336c:	f007 fd3e 	bl	adec <strlen>
    3370:	4629      	mov	r1, r5
    3372:	b282      	uxth	r2, r0
    3374:	4620      	mov	r0, r4
    3376:	f000 fa25 	bl	37c4 <vSerialPutString>
				} while( xReturned != pdFALSE );
    337a:	2e00      	cmp	r6, #0
    337c:	d1ee      	bne.n	335c <prvUARTCommandConsoleTask+0xa4>
				strcpy( cLastInputString, cInputString );
    337e:	4641      	mov	r1, r8
    3380:	4648      	mov	r0, r9
    3382:	f007 fd2b 	bl	addc <strcpy>
				memset( cInputString, 0x00, cmdMAX_INPUT_SIZE );
    3386:	4631      	mov	r1, r6
    3388:	2232      	movs	r2, #50	; 0x32
    338a:	4640      	mov	r0, r8
    338c:	f007 fbef 	bl	ab6e <memset>
				vSerialPutString( xPort, ( signed char * ) pcEndOfOutputMessage, ( unsigned short ) strlen( pcEndOfOutputMessage ) );
    3390:	2238      	movs	r2, #56	; 0x38
    3392:	490b      	ldr	r1, [pc, #44]	; (33c0 <prvUARTCommandConsoleTask+0x108>)
    3394:	4620      	mov	r0, r4
    3396:	f000 fa15 	bl	37c4 <vSerialPutString>
    339a:	e7d2      	b.n	3342 <prvUARTCommandConsoleTask+0x8a>
					if( ucInputIndex > 0 )
    339c:	2e00      	cmp	r6, #0
    339e:	d0d0      	beq.n	3342 <prvUARTCommandConsoleTask+0x8a>
						ucInputIndex--;
    33a0:	3e01      	subs	r6, #1
    33a2:	b2f6      	uxtb	r6, r6
						cInputString[ ucInputIndex ] = '\0';
    33a4:	2300      	movs	r3, #0
    33a6:	f80b 3006 	strb.w	r3, [fp, r6]
    33aa:	e7ca      	b.n	3342 <prvUARTCommandConsoleTask+0x8a>
					strcpy( cInputString, cLastInputString );
    33ac:	4649      	mov	r1, r9
    33ae:	4640      	mov	r0, r8
    33b0:	f007 fd14 	bl	addc <strcpy>
    33b4:	e7d2      	b.n	335c <prvUARTCommandConsoleTask+0xa4>
    33b6:	bf00      	nop
    33b8:	0000b6c8 	.word	0x0000b6c8
    33bc:	00021100 	.word	0x00021100
    33c0:	0000b718 	.word	0x0000b718
    33c4:	00021098 	.word	0x00021098
    33c8:	0000b9c0 	.word	0x0000b9c0
    33cc:	000210cc 	.word	0x000210cc

000033d0 <vUARTCommandConsoleStart>:
{
    33d0:	b530      	push	{r4, r5, lr}
    33d2:	4604      	mov	r4, r0
    33d4:	b083      	sub	sp, #12
	xTxMutex = xSemaphoreCreateMutex();
    33d6:	2001      	movs	r0, #1
{
    33d8:	460d      	mov	r5, r1
	xTxMutex = xSemaphoreCreateMutex();
    33da:	f7fd fb37 	bl	a4c <xQueueCreateMutex>
    33de:	4b0b      	ldr	r3, [pc, #44]	; (340c <vUARTCommandConsoleStart+0x3c>)
    33e0:	6018      	str	r0, [r3, #0]
	configASSERT( xTxMutex );
    33e2:	b148      	cbz	r0, 33f8 <vUARTCommandConsoleStart+0x28>
	xTaskCreate( 	prvUARTCommandConsoleTask,	/* The task that implements the command console. */
    33e4:	2300      	movs	r3, #0
    33e6:	9500      	str	r5, [sp, #0]
    33e8:	4622      	mov	r2, r4
    33ea:	9301      	str	r3, [sp, #4]
    33ec:	4908      	ldr	r1, [pc, #32]	; (3410 <vUARTCommandConsoleStart+0x40>)
    33ee:	4809      	ldr	r0, [pc, #36]	; (3414 <vUARTCommandConsoleStart+0x44>)
    33f0:	f7fd ff32 	bl	1258 <xTaskCreate>
}
    33f4:	b003      	add	sp, #12
    33f6:	bd30      	pop	{r4, r5, pc}
    33f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    33fc:	f383 8811 	msr	BASEPRI, r3
    3400:	f3bf 8f6f 	isb	sy
    3404:	f3bf 8f4f 	dsb	sy
	configASSERT( xTxMutex );
    3408:	e7fe      	b.n	3408 <vUARTCommandConsoleStart+0x38>
    340a:	bf00      	nop
    340c:	00021100 	.word	0x00021100
    3410:	0000b754 	.word	0x0000b754
    3414:	000032b9 	.word	0x000032b9

00003418 <printchar>:
static void printchar(char **str, int c)
{
	//extern int putchar(int c);
	extern void uart_write_byte(unsigned char c);

	if (str) {
    3418:	b2c9      	uxtb	r1, r1
    341a:	b128      	cbz	r0, 3428 <printchar+0x10>
		**str = (char)c;
    341c:	6803      	ldr	r3, [r0, #0]
    341e:	7019      	strb	r1, [r3, #0]
		++(*str);
    3420:	6803      	ldr	r3, [r0, #0]
    3422:	3301      	adds	r3, #1
    3424:	6003      	str	r3, [r0, #0]
	else
	{
		(void)uart_write_byte(c);
		//(void)putchar(c);
	}
}
    3426:	4770      	bx	lr
		(void)uart_write_byte(c);
    3428:	4608      	mov	r0, r1
    342a:	f001 bb69 	b.w	4b00 <uart_write_byte>

0000342e <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
    342e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	register int pc = 0, padchar = ' ';

	if (width > 0) {
    3432:	1e14      	subs	r4, r2, #0
{
    3434:	4607      	mov	r7, r0
    3436:	460d      	mov	r5, r1
	if (width > 0) {
    3438:	dc16      	bgt.n	3468 <prints+0x3a>
	register int pc = 0, padchar = ' ';
    343a:	f04f 0820 	mov.w	r8, #32
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
    343e:	07db      	lsls	r3, r3, #31
    3440:	d51f      	bpl.n	3482 <prints+0x54>
	register int pc = 0, padchar = ' ';
    3442:	2300      	movs	r3, #0
    3444:	1b5e      	subs	r6, r3, r5
    3446:	e021      	b.n	348c <prints+0x5e>
		for (ptr = string; *ptr; ++ptr) ++len;
    3448:	3201      	adds	r2, #1
    344a:	5ca9      	ldrb	r1, [r5, r2]
    344c:	2900      	cmp	r1, #0
    344e:	d1fb      	bne.n	3448 <prints+0x1a>
		if (len >= width) width = 0;
    3450:	42a2      	cmp	r2, r4
		else width -= len;
    3452:	bfb4      	ite	lt
    3454:	1aa4      	sublt	r4, r4, r2
		if (len >= width) width = 0;
    3456:	460c      	movge	r4, r1
		if (pad & PAD_ZERO) padchar = '0';
    3458:	f013 0f02 	tst.w	r3, #2
    345c:	bf0c      	ite	eq
    345e:	f04f 0820 	moveq.w	r8, #32
    3462:	f04f 0830 	movne.w	r8, #48	; 0x30
    3466:	e7ea      	b.n	343e <prints+0x10>
		register int len = 0;
    3468:	2200      	movs	r2, #0
    346a:	e7ee      	b.n	344a <prints+0x1c>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
    346c:	4641      	mov	r1, r8
    346e:	4638      	mov	r0, r7
    3470:	f7ff ffd2 	bl	3418 <printchar>
		for ( ; width > 0; --width) {
    3474:	3e01      	subs	r6, #1
    3476:	2e00      	cmp	r6, #0
    3478:	dcf8      	bgt.n	346c <prints+0x3e>
    347a:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
    347e:	1ae4      	subs	r4, r4, r3
    3480:	e7e0      	b.n	3444 <prints+0x16>
    3482:	4626      	mov	r6, r4
    3484:	e7f7      	b.n	3476 <prints+0x48>
			++pc;
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
    3486:	4638      	mov	r0, r7
    3488:	f7ff ffc6 	bl	3418 <printchar>
		++pc;
    348c:	eb06 0905 	add.w	r9, r6, r5
	for ( ; *string ; ++string) {
    3490:	f815 1b01 	ldrb.w	r1, [r5], #1
    3494:	2900      	cmp	r1, #0
    3496:	d1f6      	bne.n	3486 <prints+0x58>
    3498:	4625      	mov	r5, r4
	}
	for ( ; width > 0; --width) {
    349a:	2d00      	cmp	r5, #0
    349c:	dc07      	bgt.n	34ae <prints+0x80>
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
    349e:	2c00      	cmp	r4, #0
    34a0:	bfac      	ite	ge
    34a2:	eb09 0004 	addge.w	r0, r9, r4
    34a6:	f109 0000 	addlt.w	r0, r9, #0
    34aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		printchar (out, padchar);
    34ae:	4641      	mov	r1, r8
    34b0:	4638      	mov	r0, r7
    34b2:	f7ff ffb1 	bl	3418 <printchar>
	for ( ; width > 0; --width) {
    34b6:	3d01      	subs	r5, #1
    34b8:	e7ef      	b.n	349a <prints+0x6c>

000034ba <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
    34ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    34be:	b085      	sub	sp, #20
    34c0:	4680      	mov	r8, r0
    34c2:	461c      	mov	r4, r3
    34c4:	e9dd 590c 	ldrd	r5, r9, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = (unsigned int)i;

	if (i == 0) {
    34c8:	b951      	cbnz	r1, 34e0 <printi+0x26>
		print_buf[0] = '0';
    34ca:	2330      	movs	r3, #48	; 0x30
    34cc:	f8ad 3004 	strh.w	r3, [sp, #4]
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
    34d0:	462a      	mov	r2, r5
    34d2:	464b      	mov	r3, r9
    34d4:	a901      	add	r1, sp, #4
    34d6:	f7ff ffaa 	bl	342e <prints>
			*--s = '-';
		}
	}

	return pc + prints (out, s, width, pad);
}
    34da:	b005      	add	sp, #20
    34dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (sg && b == 10 && i < 0) {
    34e0:	b123      	cbz	r3, 34ec <printi+0x32>
    34e2:	2a0a      	cmp	r2, #10
    34e4:	d129      	bne.n	353a <printi+0x80>
    34e6:	2900      	cmp	r1, #0
    34e8:	da27      	bge.n	353a <printi+0x80>
		u = (unsigned int)-i;
    34ea:	4249      	negs	r1, r1
	*s = '\0';
    34ec:	2300      	movs	r3, #0
    34ee:	f88d 300f 	strb.w	r3, [sp, #15]
			t += letbase - '0' - 10;
    34f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	s = print_buf + PRINT_BUF_LEN-1;
    34f4:	f10d 070f 	add.w	r7, sp, #15
			t += letbase - '0' - 10;
    34f8:	3b3a      	subs	r3, #58	; 0x3a
		t = (unsigned int)u % b;
    34fa:	fbb1 fcf2 	udiv	ip, r1, r2
    34fe:	fb02 101c 	mls	r0, r2, ip, r1
		if( t >= 10 )
    3502:	2809      	cmp	r0, #9
			t += letbase - '0' - 10;
    3504:	bf88      	it	hi
    3506:	18c0      	addhi	r0, r0, r3
		*--s = (char)(t + '0');
    3508:	3030      	adds	r0, #48	; 0x30
	while (u) {
    350a:	428a      	cmp	r2, r1
		*--s = (char)(t + '0');
    350c:	f107 36ff 	add.w	r6, r7, #4294967295	; 0xffffffff
    3510:	f807 0c01 	strb.w	r0, [r7, #-1]
	while (u) {
    3514:	d913      	bls.n	353e <printi+0x84>
	if (neg) {
    3516:	b144      	cbz	r4, 352a <printi+0x70>
		if( width && (pad & PAD_ZERO) ) {
    3518:	b1a5      	cbz	r5, 3544 <printi+0x8a>
    351a:	f019 0f02 	tst.w	r9, #2
    351e:	d011      	beq.n	3544 <printi+0x8a>
			printchar (out, '-');
    3520:	212d      	movs	r1, #45	; 0x2d
    3522:	4640      	mov	r0, r8
    3524:	f7ff ff78 	bl	3418 <printchar>
			--width;
    3528:	3d01      	subs	r5, #1
	return pc + prints (out, s, width, pad);
    352a:	464b      	mov	r3, r9
    352c:	462a      	mov	r2, r5
    352e:	4631      	mov	r1, r6
    3530:	4640      	mov	r0, r8
    3532:	f7ff ff7c 	bl	342e <prints>
    3536:	4420      	add	r0, r4
    3538:	e7cf      	b.n	34da <printi+0x20>
	register int t, neg = 0, pc = 0;
    353a:	2400      	movs	r4, #0
    353c:	e7d6      	b.n	34ec <printi+0x32>
		u /= b;
    353e:	4661      	mov	r1, ip
    3540:	4637      	mov	r7, r6
    3542:	e7da      	b.n	34fa <printi+0x40>
			*--s = '-';
    3544:	232d      	movs	r3, #45	; 0x2d
    3546:	f806 3c01 	strb.w	r3, [r6, #-1]
	register int t, neg = 0, pc = 0;
    354a:	2400      	movs	r4, #0
			*--s = '-';
    354c:	1ebe      	subs	r6, r7, #2
    354e:	e7ec      	b.n	352a <printi+0x70>

00003550 <print>:

int print( char **out, const char *format, va_list args )
{
    3550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
				register char *s = (char *)va_arg( args, int );
    3554:	f8df 9108 	ldr.w	r9, [pc, #264]	; 3660 <print+0x110>
{
    3558:	b087      	sub	sp, #28
    355a:	4607      	mov	r7, r0
    355c:	460e      	mov	r6, r1
    355e:	4614      	mov	r4, r2
	register int pc = 0;
    3560:	2500      	movs	r5, #0
				width *= 10;
    3562:	f04f 080a 	mov.w	r8, #10
	for (; *format != 0; ++format) {
    3566:	7833      	ldrb	r3, [r6, #0]
    3568:	b93b      	cbnz	r3, 357a <print+0x2a>
		    printchar (out, '\r');
		  printchar (out, *format);
		  ++pc;
		}
	}
	if (out) **out = '\0';
    356a:	b117      	cbz	r7, 3572 <print+0x22>
    356c:	683b      	ldr	r3, [r7, #0]
    356e:	2200      	movs	r2, #0
    3570:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
    3572:	4628      	mov	r0, r5
    3574:	b007      	add	sp, #28
    3576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (*format == '%') {
    357a:	2b25      	cmp	r3, #37	; 0x25
    357c:	d162      	bne.n	3644 <print+0xf4>
			if (*format == '\0') break;
    357e:	7873      	ldrb	r3, [r6, #1]
    3580:	2b00      	cmp	r3, #0
    3582:	d0f2      	beq.n	356a <print+0x1a>
			if (*format == '%') goto out;
    3584:	2b25      	cmp	r3, #37	; 0x25
    3586:	f106 0201 	add.w	r2, r6, #1
    358a:	d05a      	beq.n	3642 <print+0xf2>
			if (*format == '-') {
    358c:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
    358e:	bf06      	itte	eq
    3590:	1cb2      	addeq	r2, r6, #2
				pad = PAD_RIGHT;
    3592:	2301      	moveq	r3, #1
			width = pad = 0;
    3594:	2300      	movne	r3, #0
				++format;
    3596:	4616      	mov	r6, r2
			while (*format == '0') {
    3598:	f812 1b01 	ldrb.w	r1, [r2], #1
    359c:	2930      	cmp	r1, #48	; 0x30
    359e:	d015      	beq.n	35cc <print+0x7c>
			width = pad = 0;
    35a0:	2200      	movs	r2, #0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
    35a2:	4630      	mov	r0, r6
    35a4:	f810 1b01 	ldrb.w	r1, [r0], #1
    35a8:	f1a1 0c30 	sub.w	ip, r1, #48	; 0x30
    35ac:	fa5f fe8c 	uxtb.w	lr, ip
    35b0:	f1be 0f09 	cmp.w	lr, #9
    35b4:	d90d      	bls.n	35d2 <print+0x82>
			if( *format == 's' ) {
    35b6:	2973      	cmp	r1, #115	; 0x73
    35b8:	d10f      	bne.n	35da <print+0x8a>
				register char *s = (char *)va_arg( args, int );
    35ba:	6821      	ldr	r1, [r4, #0]
    35bc:	3404      	adds	r4, #4
				pc += prints (out, s?s:"(null)", width, pad);
    35be:	2900      	cmp	r1, #0
    35c0:	bf08      	it	eq
    35c2:	4649      	moveq	r1, r9
				pc += prints (out, scr, width, pad);
    35c4:	4638      	mov	r0, r7
    35c6:	f7ff ff32 	bl	342e <prints>
    35ca:	e014      	b.n	35f6 <print+0xa6>
				pad |= PAD_ZERO;
    35cc:	f043 0302 	orr.w	r3, r3, #2
    35d0:	e7e1      	b.n	3596 <print+0x46>
				width += *format - '0';
    35d2:	fb08 c202 	mla	r2, r8, r2, ip
			for ( ; *format >= '0' && *format <= '9'; ++format) {
    35d6:	4606      	mov	r6, r0
    35d8:	e7e3      	b.n	35a2 <print+0x52>
			if( *format == 'd' ) {
    35da:	2964      	cmp	r1, #100	; 0x64
    35dc:	d10e      	bne.n	35fc <print+0xac>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
    35de:	2061      	movs	r0, #97	; 0x61
    35e0:	e9cd 3001 	strd	r3, r0, [sp, #4]
    35e4:	4621      	mov	r1, r4
    35e6:	9200      	str	r2, [sp, #0]
    35e8:	2301      	movs	r3, #1
    35ea:	220a      	movs	r2, #10
    35ec:	6809      	ldr	r1, [r1, #0]
    35ee:	4638      	mov	r0, r7
    35f0:	3404      	adds	r4, #4
    35f2:	f7ff ff62 	bl	34ba <printi>
    35f6:	4405      	add	r5, r0
	for (; *format != 0; ++format) {
    35f8:	3601      	adds	r6, #1
    35fa:	e7b4      	b.n	3566 <print+0x16>
			if( *format == 'x' ) {
    35fc:	2978      	cmp	r1, #120	; 0x78
    35fe:	d107      	bne.n	3610 <print+0xc0>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
    3600:	4621      	mov	r1, r4
    3602:	2061      	movs	r0, #97	; 0x61
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
    3604:	e9cd 3001 	strd	r3, r0, [sp, #4]
    3608:	9200      	str	r2, [sp, #0]
    360a:	2300      	movs	r3, #0
    360c:	2210      	movs	r2, #16
    360e:	e7ed      	b.n	35ec <print+0x9c>
			if( *format == 'X' ) {
    3610:	2958      	cmp	r1, #88	; 0x58
    3612:	d102      	bne.n	361a <print+0xca>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
    3614:	4621      	mov	r1, r4
    3616:	2041      	movs	r0, #65	; 0x41
    3618:	e7f4      	b.n	3604 <print+0xb4>
			if( *format == 'u' ) {
    361a:	2975      	cmp	r1, #117	; 0x75
    361c:	d106      	bne.n	362c <print+0xdc>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
    361e:	2061      	movs	r0, #97	; 0x61
    3620:	e9cd 3001 	strd	r3, r0, [sp, #4]
    3624:	4621      	mov	r1, r4
    3626:	9200      	str	r2, [sp, #0]
    3628:	2300      	movs	r3, #0
    362a:	e7de      	b.n	35ea <print+0x9a>
			if( *format == 'c' ) {
    362c:	2963      	cmp	r1, #99	; 0x63
    362e:	d1e3      	bne.n	35f8 <print+0xa8>
				scr[0] = (char)va_arg( args, int );
    3630:	6821      	ldr	r1, [r4, #0]
    3632:	f88d 1014 	strb.w	r1, [sp, #20]
				scr[1] = '\0';
    3636:	2100      	movs	r1, #0
    3638:	f88d 1015 	strb.w	r1, [sp, #21]
				scr[0] = (char)va_arg( args, int );
    363c:	3404      	adds	r4, #4
				pc += prints (out, scr, width, pad);
    363e:	a905      	add	r1, sp, #20
    3640:	e7c0      	b.n	35c4 <print+0x74>
			++format;
    3642:	4616      	mov	r6, r2
		  if (*format == '\n')
    3644:	7833      	ldrb	r3, [r6, #0]
    3646:	2b0a      	cmp	r3, #10
    3648:	d103      	bne.n	3652 <print+0x102>
		    printchar (out, '\r');
    364a:	210d      	movs	r1, #13
    364c:	4638      	mov	r0, r7
    364e:	f7ff fee3 	bl	3418 <printchar>
		  printchar (out, *format);
    3652:	7831      	ldrb	r1, [r6, #0]
    3654:	4638      	mov	r0, r7
    3656:	f7ff fedf 	bl	3418 <printchar>
		  ++pc;
    365a:	3501      	adds	r5, #1
    365c:	e7cc      	b.n	35f8 <print+0xa8>
    365e:	bf00      	nop
    3660:	0000b758 	.word	0x0000b758

00003664 <UartSendTrace>:

int UartSendTrace(const char *format, ...)
{
    3664:	b40f      	push	{r0, r1, r2, r3}
    3666:	b507      	push	{r0, r1, r2, lr}
    3668:	aa04      	add	r2, sp, #16
        va_list args;

        va_start( args, format );
        return print( 0, format, args );
    366a:	2000      	movs	r0, #0
{
    366c:	f852 1b04 	ldr.w	r1, [r2], #4
        va_start( args, format );
    3670:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
    3672:	f7ff ff6d 	bl	3550 <print>
}
    3676:	b003      	add	sp, #12
    3678:	f85d eb04 	ldr.w	lr, [sp], #4
    367c:	b004      	add	sp, #16
    367e:	4770      	bx	lr

00003680 <printf>:

int printf(const char *format, ...)
{
    3680:	b40f      	push	{r0, r1, r2, r3}
    3682:	b507      	push	{r0, r1, r2, lr}
    3684:	aa04      	add	r2, sp, #16
        va_list args;

        va_start( args, format );
        return print( 0, format, args );
    3686:	2000      	movs	r0, #0
{
    3688:	f852 1b04 	ldr.w	r1, [r2], #4
        va_start( args, format );
    368c:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
    368e:	f7ff ff5f 	bl	3550 <print>
}
    3692:	b003      	add	sp, #12
    3694:	f85d eb04 	ldr.w	lr, [sp], #4
    3698:	b004      	add	sp, #16
    369a:	4770      	bx	lr

0000369c <NVIC_Handler_UART>:
 */
#define UART_INT_PRIORITY		( configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1 )


void NVIC_Handler_UART(void)
{
    369c:	b570      	push	{r4, r5, r6, lr}
    369e:	b082      	sub	sp, #8
	/* Now we can declare the local variables. */
	signed char     cChar;
	portBASE_TYPE     xHigherPriorityTaskWoken = pdFALSE;
    36a0:	2300      	movs	r3, #0
    36a2:	9301      	str	r3, [sp, #4]
	//portBASE_TYPE retstatus;

	U8     nSource;

	/* What caused the interrupt? */
  nSource = uart_int_source();
    36a4:	f001 fa0c 	bl	4ac0 <uart_int_source>

  //UartSendTrace("NVIC_Handler_UART0 nSource = %d\n", nSource);

  while(nSource != UART_IIR_NO_INT)
    36a8:	2801      	cmp	r0, #1
    36aa:	d033      	beq.n	3714 <NVIC_Handler_UART+0x78>
    36ac:	4604      	mov	r4, r0
  		/*
  		portENTER_CRITICAL();
  			xQueueSendFromISR(xRxedChars, &cChar, &xHigherPriorityTaskWoken);
  		portEXIT_CRITICAL();
  		*/
      if(xQueueIsQueueFullFromISR(xRxedChars) != pdTRUE)
    36ae:	4d1f      	ldr	r5, [pc, #124]	; (372c <NVIC_Handler_UART+0x90>)
    36b0:	e007      	b.n	36c2 <NVIC_Handler_UART+0x26>
        xQueueSendFromISR(xRxedChars, &cChar, &xHigherPriorityTaskWoken);
        portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);
      }
  	}

    if(nSource == UART_IIR_MSI)
    36b2:	bb34      	cbnz	r4, 3702 <NVIC_Handler_UART+0x66>
    {
      //UartSendTrace("UART_IIR_MSI\n");
      uart_clear_msr();
    36b4:	f001 fa0c 	bl	4ad0 <uart_clear_msr>
    {
      //UartSendTrace("UART_IIR_RLSI\n");
      uart_clear_lsr();
    }

    nSource = uart_int_source();
    36b8:	f001 fa02 	bl	4ac0 <uart_int_source>
  while(nSource != UART_IIR_NO_INT)
    36bc:	2801      	cmp	r0, #1
    nSource = uart_int_source();
    36be:	4604      	mov	r4, r0
  while(nSource != UART_IIR_NO_INT)
    36c0:	d028      	beq.n	3714 <NVIC_Handler_UART+0x78>
  	if ((nSource == UART_IIR_RDI) || (nSource == UART_IIR_TOI))
    36c2:	f004 03f7 	and.w	r3, r4, #247	; 0xf7
    36c6:	2b04      	cmp	r3, #4
    36c8:	d1f3      	bne.n	36b2 <NVIC_Handler_UART+0x16>
  		cChar = uart_read_byte();
    36ca:	f001 fa0d 	bl	4ae8 <uart_read_byte>
    36ce:	f88d 0003 	strb.w	r0, [sp, #3]
      if(xQueueIsQueueFullFromISR(xRxedChars) != pdTRUE)
    36d2:	6828      	ldr	r0, [r5, #0]
    36d4:	f7fd fc74 	bl	fc0 <xQueueIsQueueFullFromISR>
    36d8:	2801      	cmp	r0, #1
    36da:	d012      	beq.n	3702 <NVIC_Handler_UART+0x66>
	__asm volatile
    36dc:	f3ef 8611 	mrs	r6, BASEPRI
    36e0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    36e4:	f383 8811 	msr	BASEPRI, r3
    36e8:	f3bf 8f6f 	isb	sy
    36ec:	f3bf 8f4f 	dsb	sy
        xQueueSendFromISR(xRxedChars, &cChar, &xHigherPriorityTaskWoken);
    36f0:	2300      	movs	r3, #0
    36f2:	aa01      	add	r2, sp, #4
    36f4:	f10d 0103 	add.w	r1, sp, #3
    36f8:	6828      	ldr	r0, [r5, #0]
    36fa:	f7fd f9e1 	bl	ac0 <xQueueGenericSendFromISR>
	__asm volatile
    36fe:	f386 8811 	msr	BASEPRI, r6
    if(nSource == UART_IIR_RLSI)
    3702:	2c06      	cmp	r4, #6
    3704:	d1d8      	bne.n	36b8 <NVIC_Handler_UART+0x1c>
      uart_clear_lsr();
    3706:	f001 f9e9 	bl	4adc <uart_clear_lsr>
    nSource = uart_int_source();
    370a:	f001 f9d9 	bl	4ac0 <uart_int_source>
  while(nSource != UART_IIR_NO_INT)
    370e:	2801      	cmp	r0, #1
    nSource = uart_int_source();
    3710:	4604      	mov	r4, r0
  while(nSource != UART_IIR_NO_INT)
    3712:	d1d6      	bne.n	36c2 <NVIC_Handler_UART+0x26>
  }

  /* Call the IntQ test function for this channel. */
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    3714:	9b01      	ldr	r3, [sp, #4]
    3716:	b13b      	cbz	r3, 3728 <NVIC_Handler_UART+0x8c>
    3718:	4b05      	ldr	r3, [pc, #20]	; (3730 <NVIC_Handler_UART+0x94>)
    371a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    371e:	601a      	str	r2, [r3, #0]
    3720:	f3bf 8f4f 	dsb	sy
    3724:	f3bf 8f6f 	isb	sy

}
    3728:	b002      	add	sp, #8
    372a:	bd70      	pop	{r4, r5, r6, pc}
    372c:	00021108 	.word	0x00021108
    3730:	e000ed04 	.word	0xe000ed04

00003734 <xSerialPortInitMinimal>:

xComPortHandle xSerialPortInitMinimal( unsigned long ulWantedBaud, unsigned portBASE_TYPE uxQueueLength )
{
    3734:	b570      	push	{r4, r5, r6, lr}
 * Create the rx and tx queues.
 */
static void vprvSerialCreateQueues(  unsigned portBASE_TYPE uxQueueLength, QueueHandle_t *pxRxedChars, QueueHandle_t *pxCharsForTx )
{
	/* Create the queues used to hold Rx and Tx characters. */
	xRxedChars = xQueueCreate( uxQueueLength, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
    3736:	2200      	movs	r2, #0
{
    3738:	460e      	mov	r6, r1
    373a:	4604      	mov	r4, r0
	xRxedChars = xQueueCreate( uxQueueLength, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
    373c:	4608      	mov	r0, r1
    373e:	2101      	movs	r1, #1
    3740:	f7fd f86e 	bl	820 <xQueueGenericCreate>
    3744:	4d16      	ldr	r5, [pc, #88]	; (37a0 <xSerialPortInitMinimal+0x6c>)
	xCharsForTx = xQueueCreate( uxQueueLength + 1, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
    3746:	2101      	movs	r1, #1
    3748:	2200      	movs	r2, #0
	xRxedChars = xQueueCreate( uxQueueLength, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
    374a:	6028      	str	r0, [r5, #0]
	xCharsForTx = xQueueCreate( uxQueueLength + 1, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
    374c:	1870      	adds	r0, r6, r1
    374e:	f7fd f867 	bl	820 <xQueueGenericCreate>
    3752:	4a14      	ldr	r2, [pc, #80]	; (37a4 <xSerialPortInitMinimal+0x70>)
	if( ( xRxedChars != serINVALID_QUEUE ) &&
    3754:	682b      	ldr	r3, [r5, #0]
	xCharsForTx = xQueueCreate( uxQueueLength + 1, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
    3756:	6010      	str	r0, [r2, #0]
	if( ( xRxedChars != serINVALID_QUEUE ) &&
    3758:	b1c3      	cbz	r3, 378c <xSerialPortInitMinimal+0x58>
    375a:	b1a0      	cbz	r0, 3786 <xSerialPortInitMinimal+0x52>
	  ( xCharsForTx != serINVALID_QUEUE ) &&
    375c:	b1a4      	cbz	r4, 3788 <xSerialPortInitMinimal+0x54>
		portENTER_CRITICAL();
    375e:	f7ff f869 	bl	2834 <vPortEnterCritical>
      uart_int_enable();
    3762:	f001 f9a7 	bl	4ab4 <uart_int_enable>
      U8 uartId = uart_id();
    3766:	f001 f94f 	bl	4a08 <uart_id>
        MOS_IRQn_AttachIsr(NVIC_Handler_UART, UART0_IRQn, UART_INT_PRIORITY);
    376a:	2206      	movs	r2, #6
      if (uartId == 0)
    376c:	b180      	cbz	r0, 3790 <xSerialPortInitMinimal+0x5c>
        MOS_IRQn_AttachIsr(NVIC_Handler_UART, UART2_IRQn, UART_INT_PRIORITY);
    376e:	480e      	ldr	r0, [pc, #56]	; (37a8 <xSerialPortInitMinimal+0x74>)
    3770:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3774:	f003 fbe8 	bl	6f48 <MOS_IRQn_AttachIsr>
        MOS_IRQn_Unmask(UART2_IRQn);
    3778:	f64f 70ff 	movw	r0, #65535	; 0xffff
    377c:	f003 fc42 	bl	7004 <MOS_IRQn_Unmask>
		portEXIT_CRITICAL();
    3780:	f7ff f87a 	bl	2878 <vPortExitCritical>
xComPortHandle    xReturn = serHANDLE;
    3784:	2001      	movs	r0, #1
}
    3786:	bd70      	pop	{r4, r5, r6, pc}
		xReturn = serINVALID_COMPORT_HANDLER;
    3788:	4620      	mov	r0, r4
}
    378a:	bd70      	pop	{r4, r5, r6, pc}
		xReturn = serINVALID_COMPORT_HANDLER;
    378c:	4618      	mov	r0, r3
}
    378e:	bd70      	pop	{r4, r5, r6, pc}
        MOS_IRQn_AttachIsr(NVIC_Handler_UART, UART0_IRQn, UART_INT_PRIORITY);
    3790:	2118      	movs	r1, #24
    3792:	4805      	ldr	r0, [pc, #20]	; (37a8 <xSerialPortInitMinimal+0x74>)
    3794:	f003 fbd8 	bl	6f48 <MOS_IRQn_AttachIsr>
        MOS_IRQn_Unmask(UART0_IRQn);
    3798:	2018      	movs	r0, #24
    379a:	f003 fc33 	bl	7004 <MOS_IRQn_Unmask>
    379e:	e7ef      	b.n	3780 <xSerialPortInitMinimal+0x4c>
    37a0:	00021108 	.word	0x00021108
    37a4:	00021104 	.word	0x00021104
    37a8:	0000369d 	.word	0x0000369d

000037ac <xSerialGetChar>:
{
    37ac:	b508      	push	{r3, lr}
	if( xQueueReceive( xRxedChars, pcRxedChar, xBlockTime ) )
    37ae:	4b04      	ldr	r3, [pc, #16]	; (37c0 <xSerialGetChar+0x14>)
    37b0:	6818      	ldr	r0, [r3, #0]
    37b2:	f7fd fa55 	bl	c60 <xQueueReceive>
}
    37b6:	3000      	adds	r0, #0
    37b8:	bf18      	it	ne
    37ba:	2001      	movne	r0, #1
    37bc:	bd08      	pop	{r3, pc}
    37be:	bf00      	nop
    37c0:	00021108 	.word	0x00021108

000037c4 <vSerialPutString>:
	while( *pxNext )
    37c4:	f991 0000 	ldrsb.w	r0, [r1]
    37c8:	b148      	cbz	r0, 37de <vSerialPutString+0x1a>
{
    37ca:	b510      	push	{r4, lr}
    37cc:	460c      	mov	r4, r1
  uart_write_byte(cOutChar);
    37ce:	b2c0      	uxtb	r0, r0
    37d0:	f001 f996 	bl	4b00 <uart_write_byte>
	while( *pxNext )
    37d4:	f914 0f01 	ldrsb.w	r0, [r4, #1]!
    37d8:	2800      	cmp	r0, #0
    37da:	d1f8      	bne.n	37ce <vSerialPutString+0xa>
}
    37dc:	bd10      	pop	{r4, pc}
    37de:	4770      	bx	lr

000037e0 <xSerialPutChar>:
{
    37e0:	b508      	push	{r3, lr}
  uart_write_byte(cOutChar);
    37e2:	b2c8      	uxtb	r0, r1
    37e4:	f001 f98c 	bl	4b00 <uart_write_byte>
}
    37e8:	2001      	movs	r0, #1
    37ea:	bd08      	pop	{r3, pc}

000037ec <NVIC_Handler_AUDIO>:
  MHAL_AUD_VADClearInt();
}
#endif

void NVIC_Handler_AUDIO(void)
{
    37ec:	b510      	push	{r4, lr}
    37ee:	b082      	sub	sp, #8
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    37f0:	2400      	movs	r4, #0
    37f2:	9401      	str	r4, [sp, #4]
  //uint32_t nCmd = AUDIO_CMD_NONE;

  //AUD_MSG("NVIC_Handler_AUDIO ms = %d\n", xTaskGetTickCount()*portTICK_PERIOD_MS);
  //AUD_MSG("NVIC_Handler_AUDIO ms2 = %d\n", (timer_get_count()/TIMER_DELAY_1ms));

  if (MHAL_AUD_DMAIsRunning())
    37f4:	f001 f84e 	bl	4894 <MHAL_AUD_DMAIsRunning>
    37f8:	b958      	cbnz	r0, 3812 <NVIC_Handler_AUDIO+0x26>
      //AUD_MSG("AUDIO ISR: OVERRUN, delta = 0x%x\n", _u32AudDeltaTime);
    }
  }

  /* Call the IntQ test function for this channel. */
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    37fa:	9b01      	ldr	r3, [sp, #4]
    37fc:	b13b      	cbz	r3, 380e <NVIC_Handler_AUDIO+0x22>
    37fe:	4b1e      	ldr	r3, [pc, #120]	; (3878 <NVIC_Handler_AUDIO+0x8c>)
    3800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3804:	601a      	str	r2, [r3, #0]
    3806:	f3bf 8f4f 	dsb	sy
    380a:	f3bf 8f6f 	isb	sy

}
    380e:	b002      	add	sp, #8
    3810:	bd10      	pop	{r4, pc}
    MHAL_AUD_DMAGetIntStatus(&bFull, &bOverrun);
    3812:	f10d 0103 	add.w	r1, sp, #3
    3816:	f10d 0002 	add.w	r0, sp, #2
    381a:	f000 ff89 	bl	4730 <MHAL_AUD_DMAGetIntStatus>
    if(bFull)
    381e:	f89d 1002 	ldrb.w	r1, [sp, #2]
    3822:	b981      	cbnz	r1, 3846 <NVIC_Handler_AUDIO+0x5a>
    else if(bOverrun)
    3824:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3828:	2b00      	cmp	r3, #0
    382a:	d0e6      	beq.n	37fa <NVIC_Handler_AUDIO+0xe>
      MHAL_AUD_DMAEnableInt(TRUE, FALSE);
    382c:	2001      	movs	r0, #1
    382e:	f000 ff8b 	bl	4748 <MHAL_AUD_DMAEnableInt>
      if(MHAL_AUD_DMAIsRunning())
    3832:	f001 f82f 	bl	4894 <MHAL_AUD_DMAIsRunning>
    3836:	2800      	cmp	r0, #0
    3838:	d0df      	beq.n	37fa <NVIC_Handler_AUDIO+0xe>
        xSemaphoreGiveFromISR(_tAudIntSem, &xHigherPriorityTaskWoken);
    383a:	4b10      	ldr	r3, [pc, #64]	; (387c <NVIC_Handler_AUDIO+0x90>)
    383c:	a901      	add	r1, sp, #4
    383e:	6818      	ldr	r0, [r3, #0]
    3840:	f7fd f9ae 	bl	ba0 <xQueueGiveFromISR>
    3844:	e7d9      	b.n	37fa <NVIC_Handler_AUDIO+0xe>
      MHAL_AUD_DMAEnableInt(FALSE, FALSE);
    3846:	4621      	mov	r1, r4
    3848:	4620      	mov	r0, r4
    384a:	f000 ff7d 	bl	4748 <MHAL_AUD_DMAEnableInt>
      MHAL_AUD_DMAStop();
    384e:	f001 f811 	bl	4874 <MHAL_AUD_DMAStop>
      MHAL_AUD_DMAClearInt();
    3852:	f001 f825 	bl	48a0 <MHAL_AUD_DMAClearInt>
      AUD_MSG("AUDIO ISR: FULL (STOP), delta = 0x%x\r\n", _u32AudDeltaTime);
    3856:	4b0a      	ldr	r3, [pc, #40]	; (3880 <NVIC_Handler_AUDIO+0x94>)
    3858:	4c0a      	ldr	r4, [pc, #40]	; (3884 <NVIC_Handler_AUDIO+0x98>)
    385a:	681b      	ldr	r3, [r3, #0]
    385c:	03db      	lsls	r3, r3, #15
    385e:	d405      	bmi.n	386c <NVIC_Handler_AUDIO+0x80>
      _eAudState = E_AUD_STATE_XRUN;
    3860:	4a09      	ldr	r2, [pc, #36]	; (3888 <NVIC_Handler_AUDIO+0x9c>)
    3862:	2104      	movs	r1, #4
      _u32AudDeltaTime = 0;
    3864:	2300      	movs	r3, #0
      _eAudState = E_AUD_STATE_XRUN;
    3866:	7011      	strb	r1, [r2, #0]
      _u32AudDeltaTime = 0;
    3868:	6023      	str	r3, [r4, #0]
      _eAudState = E_AUD_STATE_XRUN;
    386a:	e7c6      	b.n	37fa <NVIC_Handler_AUDIO+0xe>
      AUD_MSG("AUDIO ISR: FULL (STOP), delta = 0x%x\r\n", _u32AudDeltaTime);
    386c:	6821      	ldr	r1, [r4, #0]
    386e:	4807      	ldr	r0, [pc, #28]	; (388c <NVIC_Handler_AUDIO+0xa0>)
    3870:	f7ff fef8 	bl	3664 <UartSendTrace>
    3874:	e7f4      	b.n	3860 <NVIC_Handler_AUDIO+0x74>
    3876:	bf00      	nop
    3878:	e000ed04 	.word	0xe000ed04
    387c:	00021118 	.word	0x00021118
    3880:	0000ca14 	.word	0x0000ca14
    3884:	00021120 	.word	0x00021120
    3888:	0002110f 	.word	0x0002110f
    388c:	0000b8d4 	.word	0x0000b8d4

00003890 <MDrv_AUD_SetBitWidth>:
    xSemaphoreGive(_tAudMutex);
  }
}

void MDrv_AUD_SetBitWidth(AUD_Width_e eWidth)
{
    3890:	b570      	push	{r4, r5, r6, lr}
  if( xSemaphoreTake( _tAudMutex, portMAX_DELAY ) == pdPASS )
    3892:	4d18      	ldr	r5, [pc, #96]	; (38f4 <MDrv_AUD_SetBitWidth+0x64>)
{
    3894:	4604      	mov	r4, r0
  if( xSemaphoreTake( _tAudMutex, portMAX_DELAY ) == pdPASS )
    3896:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    389a:	6828      	ldr	r0, [r5, #0]
    389c:	f7fd faa2 	bl	de4 <xQueueSemaphoreTake>
    38a0:	2801      	cmp	r0, #1
    38a2:	d000      	beq.n	38a6 <MDrv_AUD_SetBitWidth+0x16>
      default:
        AUD_ERROR("MDrv_AUD_SetBitWidth failed\r\n");
    }
    xSemaphoreGive(_tAudMutex);
  }
}
    38a4:	bd70      	pop	{r4, r5, r6, pc}
    switch(eWidth)
    38a6:	2c01      	cmp	r4, #1
    38a8:	d004      	beq.n	38b4 <MDrv_AUD_SetBitWidth+0x24>
    38aa:	b266      	sxtb	r6, r4
    38ac:	b1ce      	cbz	r6, 38e2 <MDrv_AUD_SetBitWidth+0x52>
    38ae:	2c02      	cmp	r4, #2
    38b0:	d10f      	bne.n	38d2 <MDrv_AUD_SetBitWidth+0x42>
        MHAL_AUD_DMASetWidth(AUD_DMA_WIDTH32);
    38b2:	4620      	mov	r0, r4
    38b4:	f001 f802 	bl	48bc <MHAL_AUD_DMASetWidth>
        MHAL_AUD_I2SSetBitWidth(AUD_I2S_WIDTH32);
    38b8:	4620      	mov	r0, r4
    38ba:	f000 fd3d 	bl	4338 <MHAL_AUD_I2SSetBitWidth>
        _eAudWidth = eWidth;
    38be:	4b0e      	ldr	r3, [pc, #56]	; (38f8 <MDrv_AUD_SetBitWidth+0x68>)
    38c0:	701c      	strb	r4, [r3, #0]
    xSemaphoreGive(_tAudMutex);
    38c2:	2300      	movs	r3, #0
    38c4:	6828      	ldr	r0, [r5, #0]
    38c6:	461a      	mov	r2, r3
    38c8:	4619      	mov	r1, r3
}
    38ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    xSemaphoreGive(_tAudMutex);
    38ce:	f7fc bff5 	b.w	8bc <xQueueGenericSend>
        AUD_ERROR("MDrv_AUD_SetBitWidth failed\r\n");
    38d2:	4b0a      	ldr	r3, [pc, #40]	; (38fc <MDrv_AUD_SetBitWidth+0x6c>)
    38d4:	681b      	ldr	r3, [r3, #0]
    38d6:	07db      	lsls	r3, r3, #31
    38d8:	d5f3      	bpl.n	38c2 <MDrv_AUD_SetBitWidth+0x32>
    38da:	4809      	ldr	r0, [pc, #36]	; (3900 <MDrv_AUD_SetBitWidth+0x70>)
    38dc:	f7ff fec2 	bl	3664 <UartSendTrace>
    38e0:	e7ef      	b.n	38c2 <MDrv_AUD_SetBitWidth+0x32>
        MHAL_AUD_DMASetWidth(AUD_DMA_WIDTH16);
    38e2:	4630      	mov	r0, r6
    38e4:	f000 ffea 	bl	48bc <MHAL_AUD_DMASetWidth>
        MHAL_AUD_I2SSetBitWidth(AUD_I2S_WIDTH16);
    38e8:	4630      	mov	r0, r6
    38ea:	f000 fd25 	bl	4338 <MHAL_AUD_I2SSetBitWidth>
        _eAudWidth = eWidth;
    38ee:	4b02      	ldr	r3, [pc, #8]	; (38f8 <MDrv_AUD_SetBitWidth+0x68>)
    38f0:	701e      	strb	r6, [r3, #0]
        break;
    38f2:	e7e6      	b.n	38c2 <MDrv_AUD_SetBitWidth+0x32>
    38f4:	0002111c 	.word	0x0002111c
    38f8:	00021110 	.word	0x00021110
    38fc:	0000ca14 	.word	0x0000ca14
    3900:	0000b854 	.word	0x0000b854

00003904 <MDrv_AUD_SetMicNo>:

BOOL MDrv_AUD_SetMicNo(AUD_MIC_e eMicNo)
{
  if(eMicNo == AUD_MIC_MAX)
    3904:	2804      	cmp	r0, #4
{
    3906:	b538      	push	{r3, r4, r5, lr}
  if(eMicNo == AUD_MIC_MAX)
    3908:	d00f      	beq.n	392a <MDrv_AUD_SetMicNo+0x26>
  {
    AUD_ERROR("MDrv_AUD_SetMICNo failed\r\n");
    return TRUE;
  }

  if (AUDIO_DMIC_NO  < (eMicNo+1)*2)
    390a:	1c43      	adds	r3, r0, #1
    390c:	2b03      	cmp	r3, #3
    390e:	4604      	mov	r4, r0
    3910:	dd01      	ble.n	3916 <MDrv_AUD_SetMicNo+0x12>
    return FALSE;
    3912:	2000      	movs	r0, #0
    }
    xSemaphoreGive(_tAudMutex);
  }

  return TRUE;
}
    3914:	bd38      	pop	{r3, r4, r5, pc}
  if( xSemaphoreTake( _tAudMutex, portMAX_DELAY ) == pdPASS )
    3916:	4d27      	ldr	r5, [pc, #156]	; (39b4 <MDrv_AUD_SetMicNo+0xb0>)
    3918:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    391c:	6828      	ldr	r0, [r5, #0]
    391e:	f7fd fa61 	bl	de4 <xQueueSemaphoreTake>
    3922:	2801      	cmp	r0, #1
    3924:	d009      	beq.n	393a <MDrv_AUD_SetMicNo+0x36>
    return TRUE;
    3926:	2001      	movs	r0, #1
}
    3928:	bd38      	pop	{r3, r4, r5, pc}
    AUD_ERROR("MDrv_AUD_SetMICNo failed\r\n");
    392a:	4b23      	ldr	r3, [pc, #140]	; (39b8 <MDrv_AUD_SetMicNo+0xb4>)
    392c:	681b      	ldr	r3, [r3, #0]
    392e:	07da      	lsls	r2, r3, #31
    3930:	d5f9      	bpl.n	3926 <MDrv_AUD_SetMicNo+0x22>
    3932:	4822      	ldr	r0, [pc, #136]	; (39bc <MDrv_AUD_SetMicNo+0xb8>)
    3934:	f7ff fe96 	bl	3664 <UartSendTrace>
    3938:	e7f5      	b.n	3926 <MDrv_AUD_SetMicNo+0x22>
    switch(eMicNo)
    393a:	2c03      	cmp	r4, #3
    393c:	d832      	bhi.n	39a4 <MDrv_AUD_SetMicNo+0xa0>
    393e:	e8df f004 	tbb	[pc, r4]
    3942:	1d27      	.short	0x1d27
    3944:	0213      	.short	0x0213
        MHAL_AUD_DMASetChn(AUD_DMA_CHN8);
    3946:	2003      	movs	r0, #3
    3948:	f000 ffc8 	bl	48dc <MHAL_AUD_DMASetChn>
        MHAL_AUD_I2SSetChn(AUD_I2S_CHN8);
    394c:	2002      	movs	r0, #2
    394e:	f000 fd69 	bl	4424 <MHAL_AUD_I2SSetChn>
        _eAudMicNo = eMicNo;
    3952:	4b1b      	ldr	r3, [pc, #108]	; (39c0 <MDrv_AUD_SetMicNo+0xbc>)
    3954:	2203      	movs	r2, #3
    3956:	701a      	strb	r2, [r3, #0]
    xSemaphoreGive(_tAudMutex);
    3958:	2300      	movs	r3, #0
    395a:	6828      	ldr	r0, [r5, #0]
    395c:	461a      	mov	r2, r3
    395e:	4619      	mov	r1, r3
    3960:	f7fc ffac 	bl	8bc <xQueueGenericSend>
    3964:	2001      	movs	r0, #1
}
    3966:	bd38      	pop	{r3, r4, r5, pc}
        MHAL_AUD_DMASetChn(AUD_DMA_CHN6);
    3968:	2002      	movs	r0, #2
    396a:	f000 ffb7 	bl	48dc <MHAL_AUD_DMASetChn>
        MHAL_AUD_I2SSetChn(AUD_I2S_CHN8);
    396e:	2002      	movs	r0, #2
    3970:	f000 fd58 	bl	4424 <MHAL_AUD_I2SSetChn>
        _eAudMicNo = eMicNo;
    3974:	4b12      	ldr	r3, [pc, #72]	; (39c0 <MDrv_AUD_SetMicNo+0xbc>)
    3976:	2202      	movs	r2, #2
    3978:	701a      	strb	r2, [r3, #0]
        break;
    397a:	e7ed      	b.n	3958 <MDrv_AUD_SetMicNo+0x54>
        MHAL_AUD_DMASetChn(AUD_DMA_CHN4);
    397c:	2001      	movs	r0, #1
    397e:	f000 ffad 	bl	48dc <MHAL_AUD_DMASetChn>
        MHAL_AUD_I2SSetChn(AUD_I2S_CHN4);
    3982:	2001      	movs	r0, #1
    3984:	f000 fd4e 	bl	4424 <MHAL_AUD_I2SSetChn>
        _eAudMicNo = eMicNo;
    3988:	4b0d      	ldr	r3, [pc, #52]	; (39c0 <MDrv_AUD_SetMicNo+0xbc>)
    398a:	2201      	movs	r2, #1
    398c:	701a      	strb	r2, [r3, #0]
        break;
    398e:	e7e3      	b.n	3958 <MDrv_AUD_SetMicNo+0x54>
        MHAL_AUD_DMASetChn(AUD_DMA_CHN2);
    3990:	2000      	movs	r0, #0
    3992:	f000 ffa3 	bl	48dc <MHAL_AUD_DMASetChn>
        MHAL_AUD_I2SSetChn(AUD_I2S_CHN2);
    3996:	2000      	movs	r0, #0
    3998:	f000 fd44 	bl	4424 <MHAL_AUD_I2SSetChn>
        _eAudMicNo = eMicNo;
    399c:	4b08      	ldr	r3, [pc, #32]	; (39c0 <MDrv_AUD_SetMicNo+0xbc>)
    399e:	2200      	movs	r2, #0
    39a0:	701a      	strb	r2, [r3, #0]
        break;
    39a2:	e7d9      	b.n	3958 <MDrv_AUD_SetMicNo+0x54>
        AUD_ERROR("MDrv_AUD_SetMICNo failed\r\n");
    39a4:	4b04      	ldr	r3, [pc, #16]	; (39b8 <MDrv_AUD_SetMicNo+0xb4>)
    39a6:	681b      	ldr	r3, [r3, #0]
    39a8:	07db      	lsls	r3, r3, #31
    39aa:	d5d5      	bpl.n	3958 <MDrv_AUD_SetMicNo+0x54>
    39ac:	4803      	ldr	r0, [pc, #12]	; (39bc <MDrv_AUD_SetMicNo+0xb8>)
    39ae:	f7ff fe59 	bl	3664 <UartSendTrace>
    39b2:	e7d1      	b.n	3958 <MDrv_AUD_SetMicNo+0x54>
    39b4:	0002111c 	.word	0x0002111c
    39b8:	0000ca14 	.word	0x0000ca14
    39bc:	0000b878 	.word	0x0000b878
    39c0:	0002110e 	.word	0x0002110e

000039c4 <MDrv_AUD_Init>:
{
    39c4:	b538      	push	{r3, r4, r5, lr}
  _tAudIntSem = xSemaphoreCreateBinary();
    39c6:	2203      	movs	r2, #3
    39c8:	2100      	movs	r1, #0
    39ca:	2001      	movs	r0, #1
    39cc:	f7fc ff28 	bl	820 <xQueueGenericCreate>
    39d0:	4b3d      	ldr	r3, [pc, #244]	; (3ac8 <MDrv_AUD_Init+0x104>)
    39d2:	6018      	str	r0, [r3, #0]
  configASSERT( _tAudIntSem );
    39d4:	2800      	cmp	r0, #0
    39d6:	d04f      	beq.n	3a78 <MDrv_AUD_Init+0xb4>
  _tAudMutex = xSemaphoreCreateMutex();
    39d8:	2001      	movs	r0, #1
    39da:	f7fd f837 	bl	a4c <xQueueCreateMutex>
    39de:	4c3b      	ldr	r4, [pc, #236]	; (3acc <MDrv_AUD_Init+0x108>)
    39e0:	6020      	str	r0, [r4, #0]
  configASSERT( _tAudMutex );
    39e2:	2800      	cmp	r0, #0
    39e4:	d03f      	beq.n	3a66 <MDrv_AUD_Init+0xa2>
  _eAudState = E_AUD_STATE_INIT;
    39e6:	4b3a      	ldr	r3, [pc, #232]	; (3ad0 <MDrv_AUD_Init+0x10c>)
    39e8:	2201      	movs	r2, #1
    39ea:	701a      	strb	r2, [r3, #0]
  MHAL_AUD_Init();
    39ec:	f000 ffbe 	bl	496c <MHAL_AUD_Init>
  MHAL_AUD_I2SInit();
    39f0:	f000 fe26 	bl	4640 <MHAL_AUD_I2SInit>
  MHAL_AUD_I2SSetFmt(_mgrI2S.eI2sFmt);
    39f4:	4b37      	ldr	r3, [pc, #220]	; (3ad4 <MDrv_AUD_Init+0x110>)
    39f6:	7818      	ldrb	r0, [r3, #0]
    39f8:	f000 fc8c 	bl	4314 <MHAL_AUD_I2SSetFmt>
  MDrv_AUD_SetMicNo(_eAudMicNo);
    39fc:	4b36      	ldr	r3, [pc, #216]	; (3ad8 <MDrv_AUD_Init+0x114>)
    39fe:	7818      	ldrb	r0, [r3, #0]
    3a00:	f7ff ff80 	bl	3904 <MDrv_AUD_SetMicNo>
  if( xSemaphoreTake( _tAudMutex, portMAX_DELAY ) == pdPASS )
    3a04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3a08:	6820      	ldr	r0, [r4, #0]
    3a0a:	f7fd f9eb 	bl	de4 <xQueueSemaphoreTake>
    3a0e:	2801      	cmp	r0, #1
    3a10:	4605      	mov	r5, r0
    3a12:	d03a      	beq.n	3a8a <MDrv_AUD_Init+0xc6>
  MDrv_AUD_SetBitWidth(_eAudWidth);
    3a14:	4b31      	ldr	r3, [pc, #196]	; (3adc <MDrv_AUD_Init+0x118>)
    3a16:	7818      	ldrb	r0, [r3, #0]
    3a18:	f7ff ff3a 	bl	3890 <MDrv_AUD_SetBitWidth>
  MHAL_AUD_DMAEnableSigGen(_bAudGenEable);
    3a1c:	4b30      	ldr	r3, [pc, #192]	; (3ae0 <MDrv_AUD_Init+0x11c>)
    3a1e:	7818      	ldrb	r0, [r3, #0]
    3a20:	f000 ff74 	bl	490c <MHAL_AUD_DMAEnableSigGen>
  memset(_gMcuDmaBuf, 0xa, AUDIO_DMA_BUF_SIZE);
    3a24:	f44f 4210 	mov.w	r2, #36864	; 0x9000
    3a28:	210a      	movs	r1, #10
    3a2a:	482e      	ldr	r0, [pc, #184]	; (3ae4 <MDrv_AUD_Init+0x120>)
    3a2c:	f007 f89f 	bl	ab6e <memset>
  MHAL_AUD_DMASetBufAddr(_gMcuDmaBuf, AUDIO_DMA_BUF_SIZE);
    3a30:	f44f 4110 	mov.w	r1, #36864	; 0x9000
    3a34:	482b      	ldr	r0, [pc, #172]	; (3ae4 <MDrv_AUD_Init+0x120>)
    3a36:	f000 fe39 	bl	46ac <MHAL_AUD_DMASetBufAddr>
  AUD_MSG("MDrv_AUD_Init memory size = 0x%x, addr = 0x%x\r\n", AUDIO_DMA_BUF_SIZE, _gMcuDmaBuf);
    3a3a:	4b2b      	ldr	r3, [pc, #172]	; (3ae8 <MDrv_AUD_Init+0x124>)
    3a3c:	681b      	ldr	r3, [r3, #0]
    3a3e:	03db      	lsls	r3, r3, #15
    3a40:	d43b      	bmi.n	3aba <MDrv_AUD_Init+0xf6>
  MHAL_AUD_DMASetBufOverThr(nOverrunTh);
    3a42:	f44f 6040 	mov.w	r0, #3072	; 0xc00
    3a46:	f000 fe51 	bl	46ec <MHAL_AUD_DMASetBufOverThr>
  MHAL_AUD_DMAEnableInt(FALSE, FALSE);
    3a4a:	2100      	movs	r1, #0
    3a4c:	4608      	mov	r0, r1
    3a4e:	f000 fe7b 	bl	4748 <MHAL_AUD_DMAEnableInt>
  MOS_IRQn_AttachIsr(NVIC_Handler_AUDIO, AUDIO_IRQn, AUDIO_INT_PRIORITY);
    3a52:	4826      	ldr	r0, [pc, #152]	; (3aec <MDrv_AUD_Init+0x128>)
    3a54:	2206      	movs	r2, #6
    3a56:	2102      	movs	r1, #2
    3a58:	f003 fa76 	bl	6f48 <MOS_IRQn_AttachIsr>
  MOS_IRQn_Unmask(AUDIO_IRQn);
    3a5c:	2002      	movs	r0, #2
}
    3a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  MOS_IRQn_Unmask(AUDIO_IRQn);
    3a62:	f003 bacf 	b.w	7004 <MOS_IRQn_Unmask>
	__asm volatile
    3a66:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    3a6a:	f383 8811 	msr	BASEPRI, r3
    3a6e:	f3bf 8f6f 	isb	sy
    3a72:	f3bf 8f4f 	dsb	sy
  configASSERT( _tAudMutex );
    3a76:	e7fe      	b.n	3a76 <MDrv_AUD_Init+0xb2>
    3a78:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    3a7c:	f383 8811 	msr	BASEPRI, r3
    3a80:	f3bf 8f6f 	isb	sy
    3a84:	f3bf 8f4f 	dsb	sy
  configASSERT( _tAudIntSem );
    3a88:	e7fe      	b.n	3a88 <MDrv_AUD_Init+0xc4>
        MHAL_AUD_DMASetModeExt(0x0317);
    3a8a:	f240 3017 	movw	r0, #791	; 0x317
    3a8e:	f000 ff37 	bl	4900 <MHAL_AUD_DMASetModeExt>
        MHAL_AUD_DMicSelPhase(0x0904);//for 48kHz 2.4M
    3a92:	f640 1004 	movw	r0, #2308	; 0x904
    3a96:	f000 ff55 	bl	4944 <MHAL_AUD_DMicSelPhase>
        MHAL_AUD_I2SSetSynthRate(AUD_I2S_RATE_48K);
    3a9a:	2004      	movs	r0, #4
    3a9c:	f000 fd40 	bl	4520 <MHAL_AUD_I2SSetSynthRate>
        MHAL_AUD_I2SSetMsMode(AUD_I2S_MSMODE_MASTER);
    3aa0:	4628      	mov	r0, r5
    3aa2:	f000 fc9f 	bl	43e4 <MHAL_AUD_I2SSetMsMode>
        _eAudRate = eRate;
    3aa6:	4d12      	ldr	r5, [pc, #72]	; (3af0 <MDrv_AUD_Init+0x12c>)
    xSemaphoreGive(_tAudMutex);
    3aa8:	6820      	ldr	r0, [r4, #0]
    3aaa:	2300      	movs	r3, #0
        _eAudRate = eRate;
    3aac:	2404      	movs	r4, #4
    xSemaphoreGive(_tAudMutex);
    3aae:	461a      	mov	r2, r3
    3ab0:	4619      	mov	r1, r3
        _eAudRate = eRate;
    3ab2:	702c      	strb	r4, [r5, #0]
    xSemaphoreGive(_tAudMutex);
    3ab4:	f7fc ff02 	bl	8bc <xQueueGenericSend>
    3ab8:	e7ac      	b.n	3a14 <MDrv_AUD_Init+0x50>
  AUD_MSG("MDrv_AUD_Init memory size = 0x%x, addr = 0x%x\r\n", AUDIO_DMA_BUF_SIZE, _gMcuDmaBuf);
    3aba:	4a0a      	ldr	r2, [pc, #40]	; (3ae4 <MDrv_AUD_Init+0x120>)
    3abc:	480d      	ldr	r0, [pc, #52]	; (3af4 <MDrv_AUD_Init+0x130>)
    3abe:	f44f 4110 	mov.w	r1, #36864	; 0x9000
    3ac2:	f7ff fdcf 	bl	3664 <UartSendTrace>
    3ac6:	e7bc      	b.n	3a42 <MDrv_AUD_Init+0x7e>
    3ac8:	00021118 	.word	0x00021118
    3acc:	0002111c 	.word	0x0002111c
    3ad0:	0002110f 	.word	0x0002110f
    3ad4:	00021114 	.word	0x00021114
    3ad8:	0002110e 	.word	0x0002110e
    3adc:	00021110 	.word	0x00021110
    3ae0:	0002110d 	.word	0x0002110d
    3ae4:	00031900 	.word	0x00031900
    3ae8:	0000ca14 	.word	0x0000ca14
    3aec:	000037ed 	.word	0x000037ed
    3af0:	0000c620 	.word	0x0000c620
    3af4:	0000b7b0 	.word	0x0000b7b0

00003af8 <MDrv_AUD_GetMicNo>:

U8 MDrv_AUD_GetMicNo(void)
{
    3af8:	b538      	push	{r3, r4, r5, lr}
  U8 nChn = 0;
  if( xSemaphoreTake( _tAudMutex, portMAX_DELAY ) == pdPASS )
    3afa:	4d12      	ldr	r5, [pc, #72]	; (3b44 <MDrv_AUD_GetMicNo+0x4c>)
    3afc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3b00:	6828      	ldr	r0, [r5, #0]
    3b02:	f7fd f96f 	bl	de4 <xQueueSemaphoreTake>
    3b06:	2801      	cmp	r0, #1
    3b08:	d002      	beq.n	3b10 <MDrv_AUD_GetMicNo+0x18>
  U8 nChn = 0;
    3b0a:	2400      	movs	r4, #0
        AUD_ERROR("MDrv_AUD_GetMicNo failed\r\n");
    }
    xSemaphoreGive(_tAudMutex);
  }
  return nChn;
}
    3b0c:	4620      	mov	r0, r4
    3b0e:	bd38      	pop	{r3, r4, r5, pc}
    switch(_eAudMicNo)
    3b10:	4b0d      	ldr	r3, [pc, #52]	; (3b48 <MDrv_AUD_GetMicNo+0x50>)
    3b12:	781b      	ldrb	r3, [r3, #0]
    3b14:	2b03      	cmp	r3, #3
    3b16:	d90c      	bls.n	3b32 <MDrv_AUD_GetMicNo+0x3a>
        AUD_ERROR("MDrv_AUD_GetMicNo failed\r\n");
    3b18:	4b0c      	ldr	r3, [pc, #48]	; (3b4c <MDrv_AUD_GetMicNo+0x54>)
    3b1a:	681c      	ldr	r4, [r3, #0]
    3b1c:	f014 0401 	ands.w	r4, r4, #1
    3b20:	d10a      	bne.n	3b38 <MDrv_AUD_GetMicNo+0x40>
    xSemaphoreGive(_tAudMutex);
    3b22:	2300      	movs	r3, #0
    3b24:	6828      	ldr	r0, [r5, #0]
    3b26:	461a      	mov	r2, r3
    3b28:	4619      	mov	r1, r3
    3b2a:	f7fc fec7 	bl	8bc <xQueueGenericSend>
}
    3b2e:	4620      	mov	r0, r4
    3b30:	bd38      	pop	{r3, r4, r5, pc}
    3b32:	4a07      	ldr	r2, [pc, #28]	; (3b50 <MDrv_AUD_GetMicNo+0x58>)
    3b34:	5cd4      	ldrb	r4, [r2, r3]
    3b36:	e7f4      	b.n	3b22 <MDrv_AUD_GetMicNo+0x2a>
        AUD_ERROR("MDrv_AUD_GetMicNo failed\r\n");
    3b38:	4806      	ldr	r0, [pc, #24]	; (3b54 <MDrv_AUD_GetMicNo+0x5c>)
    3b3a:	f7ff fd93 	bl	3664 <UartSendTrace>
  U8 nChn = 0;
    3b3e:	2400      	movs	r4, #0
    3b40:	e7ef      	b.n	3b22 <MDrv_AUD_GetMicNo+0x2a>
    3b42:	bf00      	nop
    3b44:	0002111c 	.word	0x0002111c
    3b48:	0002110e 	.word	0x0002110e
    3b4c:	0000ca14 	.word	0x0000ca14
    3b50:	0000b760 	.word	0x0000b760
    3b54:	0000b78c 	.word	0x0000b78c

00003b58 <MDrv_AUD_GetBitWidth>:

U8 MDrv_AUD_GetBitWidth(void)
{
    3b58:	b538      	push	{r3, r4, r5, lr}
  U8 nWidth = 0;
  if( xSemaphoreTake( _tAudMutex, portMAX_DELAY ) == pdPASS )
    3b5a:	4d12      	ldr	r5, [pc, #72]	; (3ba4 <MDrv_AUD_GetBitWidth+0x4c>)
    3b5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3b60:	6828      	ldr	r0, [r5, #0]
    3b62:	f7fd f93f 	bl	de4 <xQueueSemaphoreTake>
    3b66:	2801      	cmp	r0, #1
    3b68:	d002      	beq.n	3b70 <MDrv_AUD_GetBitWidth+0x18>
  U8 nWidth = 0;
    3b6a:	2400      	movs	r4, #0
        AUD_ERROR("MDrv_AUD_GetBitWidth failed\r\n");
    }
    xSemaphoreGive(_tAudMutex);
  }
  return nWidth;
}
    3b6c:	4620      	mov	r0, r4
    3b6e:	bd38      	pop	{r3, r4, r5, pc}
    switch(_eAudWidth)
    3b70:	4b0d      	ldr	r3, [pc, #52]	; (3ba8 <MDrv_AUD_GetBitWidth+0x50>)
    3b72:	781b      	ldrb	r3, [r3, #0]
    3b74:	2b02      	cmp	r3, #2
    3b76:	d90c      	bls.n	3b92 <MDrv_AUD_GetBitWidth+0x3a>
        AUD_ERROR("MDrv_AUD_GetBitWidth failed\r\n");
    3b78:	4b0c      	ldr	r3, [pc, #48]	; (3bac <MDrv_AUD_GetBitWidth+0x54>)
    3b7a:	681c      	ldr	r4, [r3, #0]
    3b7c:	f014 0401 	ands.w	r4, r4, #1
    3b80:	d10a      	bne.n	3b98 <MDrv_AUD_GetBitWidth+0x40>
    xSemaphoreGive(_tAudMutex);
    3b82:	2300      	movs	r3, #0
    3b84:	6828      	ldr	r0, [r5, #0]
    3b86:	461a      	mov	r2, r3
    3b88:	4619      	mov	r1, r3
    3b8a:	f7fc fe97 	bl	8bc <xQueueGenericSend>
}
    3b8e:	4620      	mov	r0, r4
    3b90:	bd38      	pop	{r3, r4, r5, pc}
    3b92:	4a07      	ldr	r2, [pc, #28]	; (3bb0 <MDrv_AUD_GetBitWidth+0x58>)
    3b94:	5cd4      	ldrb	r4, [r2, r3]
    3b96:	e7f4      	b.n	3b82 <MDrv_AUD_GetBitWidth+0x2a>
        AUD_ERROR("MDrv_AUD_GetBitWidth failed\r\n");
    3b98:	4806      	ldr	r0, [pc, #24]	; (3bb4 <MDrv_AUD_GetBitWidth+0x5c>)
    3b9a:	f7ff fd63 	bl	3664 <UartSendTrace>
  U8 nWidth = 0;
    3b9e:	2400      	movs	r4, #0
    3ba0:	e7ef      	b.n	3b82 <MDrv_AUD_GetBitWidth+0x2a>
    3ba2:	bf00      	nop
    3ba4:	0002111c 	.word	0x0002111c
    3ba8:	00021110 	.word	0x00021110
    3bac:	0000ca14 	.word	0x0000ca14
    3bb0:	0000b764 	.word	0x0000b764
    3bb4:	0000b768 	.word	0x0000b768

00003bb8 <MDrv_AUD_SigGenEnable>:
  }
}
#endif

void MDrv_AUD_SigGenEnable(Bool bEn)
{
    3bb8:	b570      	push	{r4, r5, r6, lr}
  if( xSemaphoreTake( _tAudMutex, portMAX_DELAY ) == pdPASS )
    3bba:	4c0d      	ldr	r4, [pc, #52]	; (3bf0 <MDrv_AUD_SigGenEnable+0x38>)
{
    3bbc:	4605      	mov	r5, r0
  if( xSemaphoreTake( _tAudMutex, portMAX_DELAY ) == pdPASS )
    3bbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3bc2:	6820      	ldr	r0, [r4, #0]
    3bc4:	f7fd f90e 	bl	de4 <xQueueSemaphoreTake>
    3bc8:	2801      	cmp	r0, #1
    3bca:	d000      	beq.n	3bce <MDrv_AUD_SigGenEnable+0x16>
    {
      MHAL_AUD_DMAEnableSigGen(_bAudGenEable);
    }
    xSemaphoreGive(_tAudMutex);
  }
}
    3bcc:	bd70      	pop	{r4, r5, r6, pc}
    if (E_AUD_STATE_NONE != _eAudState)
    3bce:	4b09      	ldr	r3, [pc, #36]	; (3bf4 <MDrv_AUD_SigGenEnable+0x3c>)
    _bAudGenEable = bEn;
    3bd0:	4a09      	ldr	r2, [pc, #36]	; (3bf8 <MDrv_AUD_SigGenEnable+0x40>)
    if (E_AUD_STATE_NONE != _eAudState)
    3bd2:	781b      	ldrb	r3, [r3, #0]
    _bAudGenEable = bEn;
    3bd4:	7015      	strb	r5, [r2, #0]
    if (E_AUD_STATE_NONE != _eAudState)
    3bd6:	b93b      	cbnz	r3, 3be8 <MDrv_AUD_SigGenEnable+0x30>
    xSemaphoreGive(_tAudMutex);
    3bd8:	2300      	movs	r3, #0
    3bda:	6820      	ldr	r0, [r4, #0]
    3bdc:	461a      	mov	r2, r3
    3bde:	4619      	mov	r1, r3
}
    3be0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    xSemaphoreGive(_tAudMutex);
    3be4:	f7fc be6a 	b.w	8bc <xQueueGenericSend>
      MHAL_AUD_DMAEnableSigGen(_bAudGenEable);
    3be8:	4628      	mov	r0, r5
    3bea:	f000 fe8f 	bl	490c <MHAL_AUD_DMAEnableSigGen>
    3bee:	e7f3      	b.n	3bd8 <MDrv_AUD_SigGenEnable+0x20>
    3bf0:	0002111c 	.word	0x0002111c
    3bf4:	0002110f 	.word	0x0002110f
    3bf8:	0002110d 	.word	0x0002110d

00003bfc <MDrv_AUD_Start>:


BOOL MDrv_AUD_Start(void)
{
    3bfc:	b538      	push	{r3, r4, r5, lr}
  BOOL bRet = FALSE;
  if( xSemaphoreTake( _tAudMutex, portMAX_DELAY ) == pdPASS )
    3bfe:	4c17      	ldr	r4, [pc, #92]	; (3c5c <MDrv_AUD_Start+0x60>)
    3c00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3c04:	6820      	ldr	r0, [r4, #0]
    3c06:	f7fd f8ed 	bl	de4 <xQueueSemaphoreTake>
    3c0a:	2801      	cmp	r0, #1
    3c0c:	d002      	beq.n	3c14 <MDrv_AUD_Start+0x18>
  BOOL bRet = FALSE;
    3c0e:	2500      	movs	r5, #0
    }
    _eAudState = E_AUD_STATE_START;
    xSemaphoreGive(_tAudMutex);
  }
  return bRet;
}
    3c10:	4628      	mov	r0, r5
    3c12:	bd38      	pop	{r3, r4, r5, pc}
    if(!MHAL_AUD_DMAIsRunning())
    3c14:	f000 fe3e 	bl	4894 <MHAL_AUD_DMAIsRunning>
    3c18:	b158      	cbz	r0, 3c32 <MDrv_AUD_Start+0x36>
  BOOL bRet = FALSE;
    3c1a:	2500      	movs	r5, #0
    _eAudState = E_AUD_STATE_START;
    3c1c:	4910      	ldr	r1, [pc, #64]	; (3c60 <MDrv_AUD_Start+0x64>)
    xSemaphoreGive(_tAudMutex);
    3c1e:	6820      	ldr	r0, [r4, #0]
    3c20:	2300      	movs	r3, #0
    _eAudState = E_AUD_STATE_START;
    3c22:	2402      	movs	r4, #2
    3c24:	700c      	strb	r4, [r1, #0]
    xSemaphoreGive(_tAudMutex);
    3c26:	461a      	mov	r2, r3
    3c28:	4619      	mov	r1, r3
    3c2a:	f7fc fe47 	bl	8bc <xQueueGenericSend>
}
    3c2e:	4628      	mov	r0, r5
    3c30:	bd38      	pop	{r3, r4, r5, pc}
      MHAL_AUD_DMAReset();
    3c32:	f000 fd1b 	bl	466c <MHAL_AUD_DMAReset>
      taskENTER_CRITICAL();
    3c36:	f7fe fdfd 	bl	2834 <vPortEnterCritical>
      AUD_MSG("MDrv_AUD_Start: ms = %d\r\n", xTaskGetTickCount()*portTICK_PERIOD_MS);
    3c3a:	4b0a      	ldr	r3, [pc, #40]	; (3c64 <MDrv_AUD_Start+0x68>)
    3c3c:	681b      	ldr	r3, [r3, #0]
    3c3e:	03db      	lsls	r3, r3, #15
    3c40:	d405      	bmi.n	3c4e <MDrv_AUD_Start+0x52>
      MHAL_AUD_DMAStart();
    3c42:	f000 fe01 	bl	4848 <MHAL_AUD_DMAStart>
      bRet = TRUE;
    3c46:	2501      	movs	r5, #1
      taskEXIT_CRITICAL();
    3c48:	f7fe fe16 	bl	2878 <vPortExitCritical>
      bRet = TRUE;
    3c4c:	e7e6      	b.n	3c1c <MDrv_AUD_Start+0x20>
      AUD_MSG("MDrv_AUD_Start: ms = %d\r\n", xTaskGetTickCount()*portTICK_PERIOD_MS);
    3c4e:	f7fd fc11 	bl	1474 <xTaskGetTickCount>
    3c52:	4601      	mov	r1, r0
    3c54:	4804      	ldr	r0, [pc, #16]	; (3c68 <MDrv_AUD_Start+0x6c>)
    3c56:	f7ff fd05 	bl	3664 <UartSendTrace>
    3c5a:	e7f2      	b.n	3c42 <MDrv_AUD_Start+0x46>
    3c5c:	0002111c 	.word	0x0002111c
    3c60:	0002110f 	.word	0x0002110f
    3c64:	0000ca14 	.word	0x0000ca14
    3c68:	0000b89c 	.word	0x0000b89c

00003c6c <MDrv_AUD_Stop>:

void MDrv_AUD_Stop(void)
{
    3c6c:	b570      	push	{r4, r5, r6, lr}
  if( xSemaphoreTake( _tAudMutex, portMAX_DELAY ) == pdPASS )
    3c6e:	4c14      	ldr	r4, [pc, #80]	; (3cc0 <MDrv_AUD_Stop+0x54>)
    3c70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3c74:	6820      	ldr	r0, [r4, #0]
    3c76:	f7fd f8b5 	bl	de4 <xQueueSemaphoreTake>
    3c7a:	2801      	cmp	r0, #1
    3c7c:	d000      	beq.n	3c80 <MDrv_AUD_Stop+0x14>
    }
    _u32AudDeltaTime = 0;
    _eAudState = E_AUD_STATE_STOP;
    xSemaphoreGive(_tAudMutex);
  }
}
    3c7e:	bd70      	pop	{r4, r5, r6, pc}
    if(MHAL_AUD_DMAIsRunning())
    3c80:	f000 fe08 	bl	4894 <MHAL_AUD_DMAIsRunning>
    3c84:	b148      	cbz	r0, 3c9a <MDrv_AUD_Stop+0x2e>
      AUD_MSG("MDrv_AUD_Stop\r\n");
    3c86:	4b0f      	ldr	r3, [pc, #60]	; (3cc4 <MDrv_AUD_Stop+0x58>)
    3c88:	681b      	ldr	r3, [r3, #0]
    3c8a:	03db      	lsls	r3, r3, #15
    3c8c:	d413      	bmi.n	3cb6 <MDrv_AUD_Stop+0x4a>
      MHAL_AUD_DMAEnableInt(FALSE, FALSE);
    3c8e:	2100      	movs	r1, #0
    3c90:	4608      	mov	r0, r1
    3c92:	f000 fd59 	bl	4748 <MHAL_AUD_DMAEnableInt>
      MHAL_AUD_DMAStop();
    3c96:	f000 fded 	bl	4874 <MHAL_AUD_DMAStop>
    _u32AudDeltaTime = 0;
    3c9a:	4e0b      	ldr	r6, [pc, #44]	; (3cc8 <MDrv_AUD_Stop+0x5c>)
    _eAudState = E_AUD_STATE_STOP;
    3c9c:	4d0b      	ldr	r5, [pc, #44]	; (3ccc <MDrv_AUD_Stop+0x60>)
    xSemaphoreGive(_tAudMutex);
    3c9e:	6820      	ldr	r0, [r4, #0]
    _u32AudDeltaTime = 0;
    3ca0:	2400      	movs	r4, #0
    3ca2:	6034      	str	r4, [r6, #0]
    xSemaphoreGive(_tAudMutex);
    3ca4:	4623      	mov	r3, r4
    3ca6:	4622      	mov	r2, r4
    3ca8:	4621      	mov	r1, r4
    _eAudState = E_AUD_STATE_STOP;
    3caa:	2403      	movs	r4, #3
    3cac:	702c      	strb	r4, [r5, #0]
}
    3cae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    xSemaphoreGive(_tAudMutex);
    3cb2:	f7fc be03 	b.w	8bc <xQueueGenericSend>
      AUD_MSG("MDrv_AUD_Stop\r\n");
    3cb6:	4806      	ldr	r0, [pc, #24]	; (3cd0 <MDrv_AUD_Stop+0x64>)
    3cb8:	f7ff fcd4 	bl	3664 <UartSendTrace>
    3cbc:	e7e7      	b.n	3c8e <MDrv_AUD_Stop+0x22>
    3cbe:	bf00      	nop
    3cc0:	0002111c 	.word	0x0002111c
    3cc4:	0000ca14 	.word	0x0000ca14
    3cc8:	00021120 	.word	0x00021120
    3ccc:	0002110f 	.word	0x0002110f
    3cd0:	0000b8bc 	.word	0x0000b8bc

00003cd4 <MDrv_AUD_IsXrun>:

BOOL MDrv_AUD_IsXrun(void)
{
    return (_eAudState==E_AUD_STATE_XRUN?TRUE:FALSE);
    3cd4:	4b03      	ldr	r3, [pc, #12]	; (3ce4 <MDrv_AUD_IsXrun+0x10>)
    3cd6:	7818      	ldrb	r0, [r3, #0]
}
    3cd8:	f1a0 0004 	sub.w	r0, r0, #4
    3cdc:	fab0 f080 	clz	r0, r0
    3ce0:	0940      	lsrs	r0, r0, #5
    3ce2:	4770      	bx	lr
    3ce4:	0002110f 	.word	0x0002110f

00003ce8 <MDrv_AUD_ReadPCM>:

BOOL MDrv_AUD_ReadPCM(S16 *psSampleBuffer, U32 u32SampleCount, U32 *pu32ReturnCount, BOOL bBlock )
{
    3ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3cec:	b085      	sub	sp, #20
  U32 u32UnderrunSize = AUDIO_UNDERRUN_SIZE;

  U32 u32BufferSize = u32SampleCount * 2; //2 bytes per pcm sample
  U8 *pcBuffer = (U8 *)psSampleBuffer;

  *pu32ReturnCount = 0;
    3cee:	2600      	movs	r6, #0

  if (0 == u32BufferSize)
    3cf0:	004f      	lsls	r7, r1, #1
{
    3cf2:	9201      	str	r2, [sp, #4]
    3cf4:	4699      	mov	r9, r3
  *pu32ReturnCount = 0;
    3cf6:	6016      	str	r6, [r2, #0]
  if (0 == u32BufferSize)
    3cf8:	d06b      	beq.n	3dd2 <MDrv_AUD_ReadPCM+0xea>
    return FALSE;

  if (u32BufferSize < AUDIO_UNDERRUN_SIZE)
    3cfa:	f5b7 6ff0 	cmp.w	r7, #1920	; 0x780
    3cfe:	4c43      	ldr	r4, [pc, #268]	; (3e0c <MDrv_AUD_ReadPCM+0x124>)
    3d00:	4680      	mov	r8, r0
    3d02:	bf34      	ite	cc
    3d04:	46bb      	movcc	fp, r7
    3d06:	f44f 6bf0 	movcs.w	fp, #1920	; 0x780
    u32UnderrunSize = u32BufferSize;

  do {
      if( xSemaphoreTake(_tAudMutex, portMAX_DELAY ) == pdPASS )
    3d0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3d0e:	6820      	ldr	r0, [r4, #0]
    3d10:	f7fd f868 	bl	de4 <xQueueSemaphoreTake>
    3d14:	2801      	cmp	r0, #1
    3d16:	4682      	mov	sl, r0
    3d18:	d1f7      	bne.n	3d0a <MDrv_AUD_ReadPCM+0x22>
    	{
        if (!MHAL_AUD_DMAIsRunning())
    3d1a:	f000 fdbb 	bl	4894 <MHAL_AUD_DMAIsRunning>
    3d1e:	4605      	mov	r5, r0
    3d20:	2800      	cmp	r0, #0
    3d22:	d05b      	beq.n	3ddc <MDrv_AUD_ReadPCM+0xf4>
            xSemaphoreTake(_tAudIntSem, 0);
          xSemaphoreGive(_tAudMutex);
          AUD_ERROR("MDrv_AUD_ReadPCM: audio is not active\n");
          return FALSE;
        }
        else if (MHAL_AUD_DMAGetBufLevel() > u32UnderrunSize || !bBlock)
    3d24:	f000 fcec 	bl	4700 <MHAL_AUD_DMAGetBufLevel>
    3d28:	4558      	cmp	r0, fp
    3d2a:	d822      	bhi.n	3d72 <MDrv_AUD_ReadPCM+0x8a>
    3d2c:	f1b9 0f00 	cmp.w	r9, #0
    3d30:	d134      	bne.n	3d9c <MDrv_AUD_ReadPCM+0xb4>
        {
          MHAL_AUD_DMAReadData((U8 *)pcBuffer, u32BufferSize, &nReadSize);
    3d32:	4639      	mov	r1, r7
    3d34:	4640      	mov	r0, r8
    3d36:	aa03      	add	r2, sp, #12
    3d38:	f000 fd20 	bl	477c <MHAL_AUD_DMAReadData>
          pcBuffer += nReadSize;
          u32BufferSize -= nReadSize;
          u32ReturnSize +=  nReadSize;
    3d3c:	9d03      	ldr	r5, [sp, #12]
          xSemaphoreGive(_tAudMutex);
    3d3e:	6820      	ldr	r0, [r4, #0]
    3d40:	464b      	mov	r3, r9
    3d42:	464a      	mov	r2, r9
    3d44:	4649      	mov	r1, r9
          u32ReturnSize +=  nReadSize;
    3d46:	442e      	add	r6, r5
          xSemaphoreGive(_tAudMutex);
    3d48:	f7fc fdb8 	bl	8bc <xQueueGenericSend>

          if ((bBlock && (0 == u32BufferSize)) || !bBlock)
          {
            *pu32ReturnCount = u32ReturnSize / 2; //2 bytes per pcm sample
            _u32AudDeltaTime += (*pu32ReturnCount/16)/((_eAudMicNo+1)*2); //FIX me
    3d4c:	4b30      	ldr	r3, [pc, #192]	; (3e10 <MDrv_AUD_ReadPCM+0x128>)
    3d4e:	4831      	ldr	r0, [pc, #196]	; (3e14 <MDrv_AUD_ReadPCM+0x12c>)
    3d50:	781b      	ldrb	r3, [r3, #0]
    3d52:	6801      	ldr	r1, [r0, #0]
    3d54:	3301      	adds	r3, #1
    3d56:	005a      	lsls	r2, r3, #1
    3d58:	0973      	lsrs	r3, r6, #5
    3d5a:	fbb3 f3f2 	udiv	r3, r3, r2
            *pu32ReturnCount = u32ReturnSize / 2; //2 bytes per pcm sample
    3d5e:	9a01      	ldr	r2, [sp, #4]
    3d60:	0876      	lsrs	r6, r6, #1
            _u32AudDeltaTime += (*pu32ReturnCount/16)/((_eAudMicNo+1)*2); //FIX me
    3d62:	440b      	add	r3, r1
            *pu32ReturnCount = u32ReturnSize / 2; //2 bytes per pcm sample
    3d64:	6016      	str	r6, [r2, #0]
            _u32AudDeltaTime += (*pu32ReturnCount/16)/((_eAudMicNo+1)*2); //FIX me
    3d66:	6003      	str	r3, [r0, #0]
            return TRUE;
    3d68:	2501      	movs	r5, #1
          }
        }
      }

   } while(1);
}
    3d6a:	4628      	mov	r0, r5
    3d6c:	b005      	add	sp, #20
    3d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          MHAL_AUD_DMAReadData((U8 *)pcBuffer, u32BufferSize, &nReadSize);
    3d72:	4639      	mov	r1, r7
    3d74:	4640      	mov	r0, r8
    3d76:	aa03      	add	r2, sp, #12
    3d78:	f000 fd00 	bl	477c <MHAL_AUD_DMAReadData>
          pcBuffer += nReadSize;
    3d7c:	9d03      	ldr	r5, [sp, #12]
          xSemaphoreGive(_tAudMutex);
    3d7e:	6820      	ldr	r0, [r4, #0]
    3d80:	2300      	movs	r3, #0
    3d82:	461a      	mov	r2, r3
    3d84:	4619      	mov	r1, r3
          pcBuffer += nReadSize;
    3d86:	44a8      	add	r8, r5
          u32BufferSize -= nReadSize;
    3d88:	1b7f      	subs	r7, r7, r5
          u32ReturnSize +=  nReadSize;
    3d8a:	442e      	add	r6, r5
          xSemaphoreGive(_tAudMutex);
    3d8c:	f7fc fd96 	bl	8bc <xQueueGenericSend>
          if ((bBlock && (0 == u32BufferSize)) || !bBlock)
    3d90:	f1b9 0f00 	cmp.w	r9, #0
    3d94:	d0da      	beq.n	3d4c <MDrv_AUD_ReadPCM+0x64>
    3d96:	2f00      	cmp	r7, #0
    3d98:	d1b7      	bne.n	3d0a <MDrv_AUD_ReadPCM+0x22>
    3d9a:	e7d7      	b.n	3d4c <MDrv_AUD_ReadPCM+0x64>
          MHAL_AUD_DMAClearInt();
    3d9c:	f000 fd80 	bl	48a0 <MHAL_AUD_DMAClearInt>
          MHAL_AUD_DMAEnableInt(TRUE, TRUE);
    3da0:	4651      	mov	r1, sl
    3da2:	4650      	mov	r0, sl
    3da4:	f000 fcd0 	bl	4748 <MHAL_AUD_DMAEnableInt>
          xSemaphoreGive(_tAudMutex);
    3da8:	2300      	movs	r3, #0
    3daa:	461a      	mov	r2, r3
    3dac:	4619      	mov	r1, r3
    3dae:	6820      	ldr	r0, [r4, #0]
    3db0:	f7fc fd84 	bl	8bc <xQueueGenericSend>
          if (xSemaphoreTake(_tAudIntSem, AUDIO_WAIT_OVERRUN_TIME) == pdTRUE)
    3db4:	4b18      	ldr	r3, [pc, #96]	; (3e18 <MDrv_AUD_ReadPCM+0x130>)
    3db6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3dba:	6818      	ldr	r0, [r3, #0]
    3dbc:	f7fd f812 	bl	de4 <xQueueSemaphoreTake>
    3dc0:	2801      	cmp	r0, #1
    3dc2:	d0a2      	beq.n	3d0a <MDrv_AUD_ReadPCM+0x22>
            AUD_ERROR("MDrv_AUD_ReadPCM: AUDIO_WAIT_OVERRUN_TIME failed\r\n");
    3dc4:	4b15      	ldr	r3, [pc, #84]	; (3e1c <MDrv_AUD_ReadPCM+0x134>)
    3dc6:	681b      	ldr	r3, [r3, #0]
    3dc8:	07db      	lsls	r3, r3, #31
    3dca:	d502      	bpl.n	3dd2 <MDrv_AUD_ReadPCM+0xea>
    3dcc:	4814      	ldr	r0, [pc, #80]	; (3e20 <MDrv_AUD_ReadPCM+0x138>)
    3dce:	f7ff fc49 	bl	3664 <UartSendTrace>
            return FALSE;
    3dd2:	2500      	movs	r5, #0
}
    3dd4:	4628      	mov	r0, r5
    3dd6:	b005      	add	sp, #20
    3dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (uxSemaphoreGetCount(_tAudIntSem))
    3ddc:	4e0e      	ldr	r6, [pc, #56]	; (3e18 <MDrv_AUD_ReadPCM+0x130>)
    3dde:	6830      	ldr	r0, [r6, #0]
    3de0:	f7fd f8da 	bl	f98 <uxQueueMessagesWaiting>
    3de4:	b968      	cbnz	r0, 3e02 <MDrv_AUD_ReadPCM+0x11a>
          xSemaphoreGive(_tAudMutex);
    3de6:	2300      	movs	r3, #0
    3de8:	461a      	mov	r2, r3
    3dea:	4619      	mov	r1, r3
    3dec:	6820      	ldr	r0, [r4, #0]
    3dee:	f7fc fd65 	bl	8bc <xQueueGenericSend>
          AUD_ERROR("MDrv_AUD_ReadPCM: audio is not active\n");
    3df2:	4b0a      	ldr	r3, [pc, #40]	; (3e1c <MDrv_AUD_ReadPCM+0x134>)
    3df4:	681b      	ldr	r3, [r3, #0]
    3df6:	07da      	lsls	r2, r3, #31
    3df8:	d5eb      	bpl.n	3dd2 <MDrv_AUD_ReadPCM+0xea>
    3dfa:	480a      	ldr	r0, [pc, #40]	; (3e24 <MDrv_AUD_ReadPCM+0x13c>)
    3dfc:	f7ff fc32 	bl	3664 <UartSendTrace>
    3e00:	e7b3      	b.n	3d6a <MDrv_AUD_ReadPCM+0x82>
            xSemaphoreTake(_tAudIntSem, 0);
    3e02:	6830      	ldr	r0, [r6, #0]
    3e04:	4629      	mov	r1, r5
    3e06:	f7fc ffed 	bl	de4 <xQueueSemaphoreTake>
    3e0a:	e7ec      	b.n	3de6 <MDrv_AUD_ReadPCM+0xfe>
    3e0c:	0002111c 	.word	0x0002111c
    3e10:	0002110e 	.word	0x0002110e
    3e14:	00021120 	.word	0x00021120
    3e18:	00021118 	.word	0x00021118
    3e1c:	0000ca14 	.word	0x0000ca14
    3e20:	0000b818 	.word	0x0000b818
    3e24:	0000b7e8 	.word	0x0000b7e8

00003e28 <MDrv_AUD_I2SEnable>:
}
#endif

#if defined(CONFIG_AUD_I2S)
void MDrv_AUD_I2SEnable(Bool bEn)
{
    3e28:	b570      	push	{r4, r5, r6, lr}
  if( xSemaphoreTake( _tAudMutex, portMAX_DELAY ) == pdPASS )
    3e2a:	4c0d      	ldr	r4, [pc, #52]	; (3e60 <MDrv_AUD_I2SEnable+0x38>)
{
    3e2c:	4605      	mov	r5, r0
  if( xSemaphoreTake( _tAudMutex, portMAX_DELAY ) == pdPASS )
    3e2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3e32:	6820      	ldr	r0, [r4, #0]
    3e34:	f7fc ffd6 	bl	de4 <xQueueSemaphoreTake>
    3e38:	2801      	cmp	r0, #1
    3e3a:	d000      	beq.n	3e3e <MDrv_AUD_I2SEnable+0x16>
    {
      MHAL_AUD_I2SEnable(_mgrI2S.bEnable);
    }
    xSemaphoreGive(_tAudMutex);
  }
}
    3e3c:	bd70      	pop	{r4, r5, r6, pc}
    if (E_AUD_STATE_NONE != _eAudState)
    3e3e:	4b09      	ldr	r3, [pc, #36]	; (3e64 <MDrv_AUD_I2SEnable+0x3c>)
    _mgrI2S.bEnable = bEn;
    3e40:	4a09      	ldr	r2, [pc, #36]	; (3e68 <MDrv_AUD_I2SEnable+0x40>)
    if (E_AUD_STATE_NONE != _eAudState)
    3e42:	781b      	ldrb	r3, [r3, #0]
    _mgrI2S.bEnable = bEn;
    3e44:	7055      	strb	r5, [r2, #1]
    if (E_AUD_STATE_NONE != _eAudState)
    3e46:	b93b      	cbnz	r3, 3e58 <MDrv_AUD_I2SEnable+0x30>
    xSemaphoreGive(_tAudMutex);
    3e48:	2300      	movs	r3, #0
    3e4a:	6820      	ldr	r0, [r4, #0]
    3e4c:	461a      	mov	r2, r3
    3e4e:	4619      	mov	r1, r3
}
    3e50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    xSemaphoreGive(_tAudMutex);
    3e54:	f7fc bd32 	b.w	8bc <xQueueGenericSend>
      MHAL_AUD_I2SEnable(_mgrI2S.bEnable);
    3e58:	4628      	mov	r0, r5
    3e5a:	f000 fba5 	bl	45a8 <MHAL_AUD_I2SEnable>
    3e5e:	e7f3      	b.n	3e48 <MDrv_AUD_I2SEnable+0x20>
    3e60:	0002111c 	.word	0x0002111c
    3e64:	0002110f 	.word	0x0002110f
    3e68:	00021114 	.word	0x00021114

00003e6c <MDrv_AUD_AECEnable>:
#endif

#if defined(CONFIG_AUD_AEC)
void MDrv_AUD_AECEnable(Bool bEn)
{
    3e6c:	b570      	push	{r4, r5, r6, lr}
  if( xSemaphoreTake( _tAudMutex, portMAX_DELAY ) == pdPASS )
    3e6e:	4c0d      	ldr	r4, [pc, #52]	; (3ea4 <MDrv_AUD_AECEnable+0x38>)
{
    3e70:	4605      	mov	r5, r0
  if( xSemaphoreTake( _tAudMutex, portMAX_DELAY ) == pdPASS )
    3e72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3e76:	6820      	ldr	r0, [r4, #0]
    3e78:	f7fc ffb4 	bl	de4 <xQueueSemaphoreTake>
    3e7c:	2801      	cmp	r0, #1
    3e7e:	d000      	beq.n	3e82 <MDrv_AUD_AECEnable+0x16>
    {
      MHAL_AUD_DMAEnableAEC(_bAudAecEnable);
    }
    xSemaphoreGive(_tAudMutex);
  }
}
    3e80:	bd70      	pop	{r4, r5, r6, pc}
    if (E_AUD_STATE_NONE != _eAudState)
    3e82:	4b09      	ldr	r3, [pc, #36]	; (3ea8 <MDrv_AUD_AECEnable+0x3c>)
    _bAudAecEnable = bEn;
    3e84:	4a09      	ldr	r2, [pc, #36]	; (3eac <MDrv_AUD_AECEnable+0x40>)
    if (E_AUD_STATE_NONE != _eAudState)
    3e86:	781b      	ldrb	r3, [r3, #0]
    _bAudAecEnable = bEn;
    3e88:	7015      	strb	r5, [r2, #0]
    if (E_AUD_STATE_NONE != _eAudState)
    3e8a:	b93b      	cbnz	r3, 3e9c <MDrv_AUD_AECEnable+0x30>
    xSemaphoreGive(_tAudMutex);
    3e8c:	2300      	movs	r3, #0
    3e8e:	6820      	ldr	r0, [r4, #0]
    3e90:	461a      	mov	r2, r3
    3e92:	4619      	mov	r1, r3
}
    3e94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    xSemaphoreGive(_tAudMutex);
    3e98:	f7fc bd10 	b.w	8bc <xQueueGenericSend>
      MHAL_AUD_DMAEnableAEC(_bAudAecEnable);
    3e9c:	4628      	mov	r0, r5
    3e9e:	f000 fd3f 	bl	4920 <MHAL_AUD_DMAEnableAEC>
    3ea2:	e7f3      	b.n	3e8c <MDrv_AUD_AECEnable+0x20>
    3ea4:	0002111c 	.word	0x0002111c
    3ea8:	0002110f 	.word	0x0002110f
    3eac:	0002110c 	.word	0x0002110c

00003eb0 <MDrv_AUD_AECIsEnable>:

BOOL MDrv_AUD_AECIsEnable(void)
{
    return _bAudAecEnable;
    3eb0:	4b01      	ldr	r3, [pc, #4]	; (3eb8 <MDrv_AUD_AECIsEnable+0x8>)
}
    3eb2:	7818      	ldrb	r0, [r3, #0]
    3eb4:	4770      	bx	lr
    3eb6:	bf00      	nop
    3eb8:	0002110c 	.word	0x0002110c

00003ebc <MDrv_BDMA_Copy>:
#define BDMA_MSG(fmt, args...) MOS_DBG_PRINT(MOS_DBG_LEVEL_BDMA, "[BDMA]" fmt, ##args)
#define BDMA_ERROR(fmt, args...) MOS_DBG_ERROR(fmt, ##args);


BOOL MDrv_BDMA_Copy(U32 u32Src, U32 u32Dst, U32 u32Len, BDMA_Mode_e eMode)
{
    3ebc:	b508      	push	{r3, lr}
    BDMA_Ch ch;
    switch(eMode)
    3ebe:	2b03      	cmp	r3, #3
    3ec0:	d820      	bhi.n	3f04 <MDrv_BDMA_Copy+0x48>
    3ec2:	e8df f003 	tbb	[pc, r3]
    3ec6:	0f17      	.short	0x0f17
    3ec8:	0207      	.short	0x0207
      case E_BDMA_CPtoCP:
        ch = E_BDMA_CH0;
        MHal_BDMA_IMItoIMI(ch, u32Src, u32Dst, u32Len);
        break;
      case E_BDMA_HKtoHK:
      	ch = E_BDMA_CH1;
    3eca:	2001      	movs	r0, #1
        break;
      default:
        BDMA_ERROR("MDrv_BDMA_Copy: mode %d failed\n", eMode);
        return FALSE;
    }
    MHal_BDMA_PollingDone(ch);
    3ecc:	f001 fa34 	bl	5338 <MHal_BDMA_PollingDone>

    return TRUE;
    3ed0:	2001      	movs	r0, #1

}
    3ed2:	bd08      	pop	{r3, pc}
        MHal_BDMA_IMItoIMI(ch, u32Src, u32Dst, u32Len);
    3ed4:	4613      	mov	r3, r2
    3ed6:	460a      	mov	r2, r1
    3ed8:	4601      	mov	r1, r0
    3eda:	2000      	movs	r0, #0
    3edc:	f001 fa7e 	bl	53dc <MHal_BDMA_IMItoIMI>
        ch = E_BDMA_CH0;
    3ee0:	2000      	movs	r0, #0
        break;
    3ee2:	e7f3      	b.n	3ecc <MDrv_BDMA_Copy+0x10>
        MHal_BDMA_MIUtoIMI(ch, u32Src, u32Dst, u32Len);
    3ee4:	4613      	mov	r3, r2
    3ee6:	460a      	mov	r2, r1
    3ee8:	4601      	mov	r1, r0
    3eea:	2001      	movs	r0, #1
    3eec:	f001 fa52 	bl	5394 <MHal_BDMA_MIUtoIMI>
        ch = E_BDMA_CH1;
    3ef0:	2001      	movs	r0, #1
        break;
    3ef2:	e7eb      	b.n	3ecc <MDrv_BDMA_Copy+0x10>
        MHal_BDMA_IMItoMIU(ch, u32Src, u32Dst, u32Len);
    3ef4:	4613      	mov	r3, r2
    3ef6:	460a      	mov	r2, r1
    3ef8:	4601      	mov	r1, r0
    3efa:	2000      	movs	r0, #0
    3efc:	f001 fa26 	bl	534c <MHal_BDMA_IMItoMIU>
        ch = E_BDMA_CH0;
    3f00:	2000      	movs	r0, #0
        break;
    3f02:	e7e3      	b.n	3ecc <MDrv_BDMA_Copy+0x10>
        BDMA_ERROR("MDrv_BDMA_Copy: mode %d failed\n", eMode);
    3f04:	4a06      	ldr	r2, [pc, #24]	; (3f20 <MDrv_BDMA_Copy+0x64>)
    3f06:	6812      	ldr	r2, [r2, #0]
    3f08:	f012 0201 	ands.w	r2, r2, #1
    3f0c:	d101      	bne.n	3f12 <MDrv_BDMA_Copy+0x56>
        return FALSE;
    3f0e:	4610      	mov	r0, r2
}
    3f10:	bd08      	pop	{r3, pc}
        BDMA_ERROR("MDrv_BDMA_Copy: mode %d failed\n", eMode);
    3f12:	4619      	mov	r1, r3
    3f14:	4803      	ldr	r0, [pc, #12]	; (3f24 <MDrv_BDMA_Copy+0x68>)
    3f16:	f7ff fba5 	bl	3664 <UartSendTrace>
        return FALSE;
    3f1a:	2000      	movs	r0, #0
}
    3f1c:	bd08      	pop	{r3, pc}
    3f1e:	bf00      	nop
    3f20:	0000ca14 	.word	0x0000ca14
    3f24:	0000b904 	.word	0x0000b904

00003f28 <NVIC_Handler_MBX>:

/*-----------------------------------------------------------*/


void NVIC_Handler_MBX(void)
{
    3f28:	b500      	push	{lr}
    3f2a:	b083      	sub	sp, #12
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    3f2c:	2300      	movs	r3, #0

  MHal_CPUINT_Clear(E_CPUINT_CP , E_CPUINT_HK0);
    3f2e:	2101      	movs	r1, #1
    3f30:	2003      	movs	r0, #3
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    3f32:	9301      	str	r3, [sp, #4]
  MHal_CPUINT_Clear(E_CPUINT_CP , E_CPUINT_HK0);
    3f34:	f001 f9ec 	bl	5310 <MHal_CPUINT_Clear>

  MBX_MSG("NVIC_Handler_MBX ms = %d\r\n", xTaskGetTickCount()*portTICK_PERIOD_MS);
    3f38:	4b0e      	ldr	r3, [pc, #56]	; (3f74 <NVIC_Handler_MBX+0x4c>)
    3f3a:	681b      	ldr	r3, [r3, #0]
    3f3c:	039b      	lsls	r3, r3, #14
    3f3e:	d411      	bmi.n	3f64 <NVIC_Handler_MBX+0x3c>

  xSemaphoreGiveFromISR(_mgrMBX.tMbxIntSem, &xHigherPriorityTaskWoken);
    3f40:	4b0d      	ldr	r3, [pc, #52]	; (3f78 <NVIC_Handler_MBX+0x50>)
    3f42:	a901      	add	r1, sp, #4
    3f44:	6a18      	ldr	r0, [r3, #32]
    3f46:	f7fc fe2b 	bl	ba0 <xQueueGiveFromISR>

  /* Call the IntQ test function for this channel. */
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    3f4a:	9b01      	ldr	r3, [sp, #4]
    3f4c:	b13b      	cbz	r3, 3f5e <NVIC_Handler_MBX+0x36>
    3f4e:	4b0b      	ldr	r3, [pc, #44]	; (3f7c <NVIC_Handler_MBX+0x54>)
    3f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3f54:	601a      	str	r2, [r3, #0]
    3f56:	f3bf 8f4f 	dsb	sy
    3f5a:	f3bf 8f6f 	isb	sy

}
    3f5e:	b003      	add	sp, #12
    3f60:	f85d fb04 	ldr.w	pc, [sp], #4
  MBX_MSG("NVIC_Handler_MBX ms = %d\r\n", xTaskGetTickCount()*portTICK_PERIOD_MS);
    3f64:	f7fd fa86 	bl	1474 <xTaskGetTickCount>
    3f68:	4601      	mov	r1, r0
    3f6a:	4805      	ldr	r0, [pc, #20]	; (3f80 <NVIC_Handler_MBX+0x58>)
    3f6c:	f7ff fb7a 	bl	3664 <UartSendTrace>
    3f70:	e7e6      	b.n	3f40 <NVIC_Handler_MBX+0x18>
    3f72:	bf00      	nop
    3f74:	0000ca14 	.word	0x0000ca14
    3f78:	0000c624 	.word	0x0000c624
    3f7c:	e000ed04 	.word	0xe000ed04
    3f80:	0000ba48 	.word	0x0000ba48

00003f84 <MDrv_MBX_Init>:

void MDrv_MBX_Init(void)
{
    3f84:	b538      	push	{r3, r4, r5, lr}

  MHAL_MBX_Init(E_MBX_ROLE_CP);
    3f86:	2001      	movs	r0, #1

  _mgrMBX.eMbxHostRole = E_MBX_ROLE_CP;
    3f88:	4c17      	ldr	r4, [pc, #92]	; (3fe8 <MDrv_MBX_Init+0x64>)
  MHAL_MBX_Init(E_MBX_ROLE_CP);
    3f8a:	f000 fdc5 	bl	4b18 <MHAL_MBX_Init>
  _mgrMBX.eMbxRole2Cpu[E_MBX_ROLE_CP] = E_CPUINT_CP;
    3f8e:	2303      	movs	r3, #3
  _mgrMBX.eMbxHostRole = E_MBX_ROLE_CP;
    3f90:	f240 1001 	movw	r0, #257	; 0x101
    3f94:	8020      	strh	r0, [r4, #0]
  _mgrMBX.eMbxRole2Cpu[E_MBX_ROLE_HK] = E_CPUINT_HK0;

  _mgrMBX.eMbxIntNum = HK0ToCP_IRQn;
    3f96:	f44f 75ac 	mov.w	r5, #344	; 0x158

  // Create the semaphore to guard a shared resource.
  _mgrMBX.tMbxIntSem = xSemaphoreCreateBinary();
    3f9a:	461a      	mov	r2, r3
    3f9c:	2100      	movs	r1, #0
    3f9e:	2001      	movs	r0, #1
  _mgrMBX.eMbxIntNum = HK0ToCP_IRQn;
    3fa0:	62a5      	str	r5, [r4, #40]	; 0x28
  _mgrMBX.eMbxRole2Cpu[E_MBX_ROLE_CP] = E_CPUINT_CP;
    3fa2:	70a3      	strb	r3, [r4, #2]
  _mgrMBX.tMbxIntSem = xSemaphoreCreateBinary();
    3fa4:	f7fc fc3c 	bl	820 <xQueueGenericCreate>
    3fa8:	6220      	str	r0, [r4, #32]
  configASSERT(_mgrMBX.tMbxIntSem);
    3faa:	b1a0      	cbz	r0, 3fd6 <MDrv_MBX_Init+0x52>
  _mgrMBX.tMbxMutex = xSemaphoreCreateMutex();
    3fac:	2001      	movs	r0, #1
    3fae:	f7fc fd4d 	bl	a4c <xQueueCreateMutex>
    3fb2:	6260      	str	r0, [r4, #36]	; 0x24
  configASSERT(_mgrMBX.tMbxMutex);
    3fb4:	b130      	cbz	r0, 3fc4 <MDrv_MBX_Init+0x40>

  MOS_IRQn_AttachIsr(NVIC_Handler_MBX, _mgrMBX.eMbxIntNum, MBX_INT_PRIORITY);
    3fb6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    3fb8:	480c      	ldr	r0, [pc, #48]	; (3fec <MDrv_MBX_Init+0x68>)
    3fba:	2205      	movs	r2, #5
  //MOS_IRQn_AttachIsr(INTC_Handler_HK0ToCP_IRQn, HK0ToCP_IRQn, 0);
  //MOS_IRQn_AttachIsr(INTC_Handler_HK1ToCP_IRQn, HK1ToCP_IRQn, 0);
  //MOS_IRQn_Unmask(HK0ToCP_IRQn);
  //MOS_IRQn_Unmask(HK1ToCP_IRQn);
}
    3fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  MOS_IRQn_AttachIsr(NVIC_Handler_MBX, _mgrMBX.eMbxIntNum, MBX_INT_PRIORITY);
    3fc0:	f002 bfc2 	b.w	6f48 <MOS_IRQn_AttachIsr>
    3fc4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    3fc8:	f383 8811 	msr	BASEPRI, r3
    3fcc:	f3bf 8f6f 	isb	sy
    3fd0:	f3bf 8f4f 	dsb	sy
  configASSERT(_mgrMBX.tMbxMutex);
    3fd4:	e7fe      	b.n	3fd4 <MDrv_MBX_Init+0x50>
    3fd6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    3fda:	f383 8811 	msr	BASEPRI, r3
    3fde:	f3bf 8f6f 	isb	sy
    3fe2:	f3bf 8f4f 	dsb	sy
  configASSERT(_mgrMBX.tMbxIntSem);
    3fe6:	e7fe      	b.n	3fe6 <MDrv_MBX_Init+0x62>
    3fe8:	0000c624 	.word	0x0000c624
    3fec:	00003f29 	.word	0x00003f29

00003ff0 <MDrv_MBX_SendMsg>:


MBX_Result MDrv_MBX_SendMsg(MBX_Msg *pMsg)
{
    3ff0:	b570      	push	{r4, r5, r6, lr}
    3ff2:	b082      	sub	sp, #8
  MBX_Result mbxResult = E_MBX_SUCCESS;
  MBXHAL_Fire_Status mbxHalFireStatus;
  U32 u32WaitCnt = 0;
  //parameter check:
  if(NULL == pMsg)
    3ff4:	2800      	cmp	r0, #0
    3ff6:	d041      	beq.n	407c <MDrv_MBX_SendMsg+0x8c>
    3ff8:	4605      	mov	r5, r0
    3ffa:	4e24      	ldr	r6, [pc, #144]	; (408c <MDrv_MBX_SendMsg+0x9c>)
    3ffc:	f44f 3480 	mov.w	r4, #65536	; 0x10000
    4000:	e004      	b.n	400c <MDrv_MBX_SendMsg+0x1c>
    {
      MBX_ERROR("MDrv_MBX_SendMsg: MHAL_MBX_GetFireStatus failed = %d\r\n ", mbxResult);
      return E_MBX_ERR_INVALID_PARAM;
    }

    if(E_MBXHAL_FIRE_SUCCESS == mbxHalFireStatus)
    4002:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4006:	b18b      	cbz	r3, 402c <MDrv_MBX_SendMsg+0x3c>
      break;

    //check If Timeout:
    u32WaitCnt++;
    if(u32WaitCnt >= 0x10000)
    4008:	3c01      	subs	r4, #1
    400a:	d00f      	beq.n	402c <MDrv_MBX_SendMsg+0x3c>
    mbxResult = MHAL_MBX_GetFireStatus(_mgrMBX.eMbxHostRole, pMsg->eRoleID, &mbxHalFireStatus);
    400c:	f10d 0207 	add.w	r2, sp, #7
    4010:	7829      	ldrb	r1, [r5, #0]
    4012:	7830      	ldrb	r0, [r6, #0]
    4014:	f000 ff5c 	bl	4ed0 <MHAL_MBX_GetFireStatus>
    if(E_MBX_SUCCESS != mbxResult)
    4018:	2800      	cmp	r0, #0
    401a:	d0f2      	beq.n	4002 <MDrv_MBX_SendMsg+0x12>
      MBX_ERROR("MDrv_MBX_SendMsg: MHAL_MBX_GetFireStatus failed = %d\r\n ", mbxResult);
    401c:	4b1c      	ldr	r3, [pc, #112]	; (4090 <MDrv_MBX_SendMsg+0xa0>)
    401e:	681b      	ldr	r3, [r3, #0]
    4020:	07da      	lsls	r2, r3, #31
    4022:	d423      	bmi.n	406c <MDrv_MBX_SendMsg+0x7c>
    return E_MBX_ERR_INVALID_PARAM;
    4024:	2407      	movs	r4, #7
  {
    MBX_ERROR("MDrv_MBX_SendMsg: MHAL_MBX_Fire Failed! Result=%d\r\n", mbxResult);
  }

  return mbxResult;
}
    4026:	4620      	mov	r0, r4
    4028:	b002      	add	sp, #8
    402a:	bd70      	pop	{r4, r5, r6, pc}
  MHAL_MBX_ClearAll(pMsg, _mgrMBX.eMbxHostRole);
    402c:	7831      	ldrb	r1, [r6, #0]
    402e:	4628      	mov	r0, r5
    4030:	f000 fde2 	bl	4bf8 <MHAL_MBX_ClearAll>
  mbxResult = MHAL_MBX_Fire(pMsg, _mgrMBX.eMbxHostRole);
    4034:	7831      	ldrb	r1, [r6, #0]
    4036:	4628      	mov	r0, r5
    4038:	f000 fe5e 	bl	4cf8 <MHAL_MBX_Fire>
  if(E_MBX_SUCCESS == mbxResult)
    403c:	4604      	mov	r4, r0
    403e:	b150      	cbz	r0, 4056 <MDrv_MBX_SendMsg+0x66>
    MBX_ERROR("MDrv_MBX_SendMsg: MHAL_MBX_Fire Failed! Result=%d\r\n", mbxResult);
    4040:	4b13      	ldr	r3, [pc, #76]	; (4090 <MDrv_MBX_SendMsg+0xa0>)
    4042:	681b      	ldr	r3, [r3, #0]
    4044:	07db      	lsls	r3, r3, #31
    4046:	d5ee      	bpl.n	4026 <MDrv_MBX_SendMsg+0x36>
    4048:	4601      	mov	r1, r0
    404a:	4812      	ldr	r0, [pc, #72]	; (4094 <MDrv_MBX_SendMsg+0xa4>)
    404c:	f7ff fb0a 	bl	3664 <UartSendTrace>
}
    4050:	4620      	mov	r0, r4
    4052:	b002      	add	sp, #8
    4054:	bd70      	pop	{r4, r5, r6, pc}
    MHal_CPUINT_Fire(_mgrMBX.eMbxRole2Cpu[pMsg->eRoleID], _mgrMBX.eMbxRole2Cpu[_mgrMBX.eMbxHostRole]);
    4056:	782b      	ldrb	r3, [r5, #0]
    4058:	7832      	ldrb	r2, [r6, #0]
    405a:	4433      	add	r3, r6
    405c:	4416      	add	r6, r2
    405e:	7858      	ldrb	r0, [r3, #1]
    4060:	7871      	ldrb	r1, [r6, #1]
    4062:	f001 f93f 	bl	52e4 <MHal_CPUINT_Fire>
}
    4066:	4620      	mov	r0, r4
    4068:	b002      	add	sp, #8
    406a:	bd70      	pop	{r4, r5, r6, pc}
      MBX_ERROR("MDrv_MBX_SendMsg: MHAL_MBX_GetFireStatus failed = %d\r\n ", mbxResult);
    406c:	4601      	mov	r1, r0
    406e:	480a      	ldr	r0, [pc, #40]	; (4098 <MDrv_MBX_SendMsg+0xa8>)
    4070:	f7ff faf8 	bl	3664 <UartSendTrace>
      return E_MBX_ERR_INVALID_PARAM;
    4074:	2407      	movs	r4, #7
}
    4076:	4620      	mov	r0, r4
    4078:	b002      	add	sp, #8
    407a:	bd70      	pop	{r4, r5, r6, pc}
    MBX_ERROR("MDrv_MBX_SendMsg: E_MBX_ERR_INVALID_PARAM!\r\n");
    407c:	4b04      	ldr	r3, [pc, #16]	; (4090 <MDrv_MBX_SendMsg+0xa0>)
    407e:	681b      	ldr	r3, [r3, #0]
    4080:	07d9      	lsls	r1, r3, #31
    4082:	d5cf      	bpl.n	4024 <MDrv_MBX_SendMsg+0x34>
    4084:	4805      	ldr	r0, [pc, #20]	; (409c <MDrv_MBX_SendMsg+0xac>)
    4086:	f7ff faed 	bl	3664 <UartSendTrace>
    408a:	e7cb      	b.n	4024 <MDrv_MBX_SendMsg+0x34>
    408c:	0000c624 	.word	0x0000c624
    4090:	0000ca14 	.word	0x0000ca14
    4094:	0000ba08 	.word	0x0000ba08
    4098:	0000b9c4 	.word	0x0000b9c4
    409c:	0000b98c 	.word	0x0000b98c

000040a0 <MDrv_MBX_RecvMsg>:
  return mbxResult;
}


MBX_Result MDrv_MBX_RecvMsg(MBX_Msg *pMsg, BOOL bBlock)
{
    40a0:	b570      	push	{r4, r5, r6, lr}
  TickType_t xTicksToWait;
  MBX_Result mbxResult = E_MBX_SUCCESS;

  //parameter check:
  if((pMsg == NULL))
    40a2:	b350      	cbz	r0, 40fa <MDrv_MBX_RecvMsg+0x5a>
  {
    MBX_ERROR("MDrv_MBX_RecvMsg: E_MBX_ERR_INVALID_PARAM!\r\n");
    return E_MBX_ERR_INVALID_PARAM;
  }

  if(bBlock)
    40a4:	4d1a      	ldr	r5, [pc, #104]	; (4110 <MDrv_MBX_RecvMsg+0x70>)
    40a6:	4606      	mov	r6, r0
    40a8:	460c      	mov	r4, r1
    40aa:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    40ac:	b951      	cbnz	r1, 40c4 <MDrv_MBX_RecvMsg+0x24>
    MOS_IRQn_Unmask(_mgrMBX.eMbxIntNum);
  }
  else
  {
    xTicksToWait = 0;
    MOS_IRQn_Mask(_mgrMBX.eMbxIntNum);
    40ae:	f002 ff83 	bl	6fb8 <MOS_IRQn_Mask>
    xTicksToWait = 0;
    40b2:	4621      	mov	r1, r4
  }

  if(xSemaphoreTake(_mgrMBX.tMbxIntSem, xTicksToWait) == pdPASS)
    40b4:	6a28      	ldr	r0, [r5, #32]
    40b6:	f7fc fe95 	bl	de4 <xQueueSemaphoreTake>
    40ba:	2801      	cmp	r0, #1
    40bc:	d00b      	beq.n	40d6 <MDrv_MBX_RecvMsg+0x36>
  MBX_Result mbxResult = E_MBX_SUCCESS;
    40be:	2400      	movs	r4, #0
  {
    MBX_ERROR("MDrv_MBX_RecvMsg: Failed! Result=%d\r\n", mbxResult);
  }

  return mbxResult;
}
    40c0:	4620      	mov	r0, r4
    40c2:	bd70      	pop	{r4, r5, r6, pc}
    MOS_IRQn_Unmask(_mgrMBX.eMbxIntNum);
    40c4:	f002 ff9e 	bl	7004 <MOS_IRQn_Unmask>
    xTicksToWait = portMAX_DELAY;
    40c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  if(xSemaphoreTake(_mgrMBX.tMbxIntSem, xTicksToWait) == pdPASS)
    40cc:	6a28      	ldr	r0, [r5, #32]
    40ce:	f7fc fe89 	bl	de4 <xQueueSemaphoreTake>
    40d2:	2801      	cmp	r0, #1
    40d4:	d1f3      	bne.n	40be <MDrv_MBX_RecvMsg+0x1e>
    mbxResult = MHAL_MBX_Recv(pMsg,  _mgrMBX.eMbxHostRole);
    40d6:	7829      	ldrb	r1, [r5, #0]
    40d8:	4630      	mov	r0, r6
    40da:	f000 ff23 	bl	4f24 <MHAL_MBX_Recv>
  if((E_MBX_SUCCESS != mbxResult) && (E_MBX_ERR_NO_MORE_MSG != mbxResult))
    40de:	4604      	mov	r4, r0
    40e0:	2800      	cmp	r0, #0
    40e2:	d0ec      	beq.n	40be <MDrv_MBX_RecvMsg+0x1e>
    40e4:	280e      	cmp	r0, #14
    40e6:	d0eb      	beq.n	40c0 <MDrv_MBX_RecvMsg+0x20>
    MBX_ERROR("MDrv_MBX_RecvMsg: Failed! Result=%d\r\n", mbxResult);
    40e8:	4b0a      	ldr	r3, [pc, #40]	; (4114 <MDrv_MBX_RecvMsg+0x74>)
    40ea:	681b      	ldr	r3, [r3, #0]
    40ec:	07db      	lsls	r3, r3, #31
    40ee:	d5e7      	bpl.n	40c0 <MDrv_MBX_RecvMsg+0x20>
    40f0:	4601      	mov	r1, r0
    40f2:	4809      	ldr	r0, [pc, #36]	; (4118 <MDrv_MBX_RecvMsg+0x78>)
    40f4:	f7ff fab6 	bl	3664 <UartSendTrace>
    40f8:	e7e2      	b.n	40c0 <MDrv_MBX_RecvMsg+0x20>
    MBX_ERROR("MDrv_MBX_RecvMsg: E_MBX_ERR_INVALID_PARAM!\r\n");
    40fa:	4b06      	ldr	r3, [pc, #24]	; (4114 <MDrv_MBX_RecvMsg+0x74>)
    40fc:	681b      	ldr	r3, [r3, #0]
    40fe:	07da      	lsls	r2, r3, #31
    4100:	d401      	bmi.n	4106 <MDrv_MBX_RecvMsg+0x66>
    return E_MBX_ERR_INVALID_PARAM;
    4102:	2407      	movs	r4, #7
    4104:	e7dc      	b.n	40c0 <MDrv_MBX_RecvMsg+0x20>
    MBX_ERROR("MDrv_MBX_RecvMsg: E_MBX_ERR_INVALID_PARAM!\r\n");
    4106:	4805      	ldr	r0, [pc, #20]	; (411c <MDrv_MBX_RecvMsg+0x7c>)
    4108:	f7ff faac 	bl	3664 <UartSendTrace>
    return E_MBX_ERR_INVALID_PARAM;
    410c:	2407      	movs	r4, #7
    410e:	e7d7      	b.n	40c0 <MDrv_MBX_RecvMsg+0x20>
    4110:	0000c624 	.word	0x0000c624
    4114:	0000ca14 	.word	0x0000ca14
    4118:	0000b95c 	.word	0x0000b95c
    411c:	0000b924 	.word	0x0000b924

00004120 <MDrv_MBX_RecvMsgEndExt>:

MBX_Result MDrv_MBX_RecvMsgEndExt(MBX_Msg *pMsg, BOOL bSuccess)
{
  MBX_Result mbxResult;

  mbxResult = MHAL_MBX_RecvEndExt(pMsg->eRoleID, _mgrMBX.eMbxHostRole, bSuccess);
    4120:	4b02      	ldr	r3, [pc, #8]	; (412c <MDrv_MBX_RecvMsgEndExt+0xc>)
    4122:	7800      	ldrb	r0, [r0, #0]
    4124:	460a      	mov	r2, r1
    4126:	7819      	ldrb	r1, [r3, #0]
    4128:	f000 bf6e 	b.w	5008 <MHAL_MBX_RecvEndExt>
    412c:	0000c624 	.word	0x0000c624

00004130 <NVIC_Handler_NOPMIRQ>:
static IRQn_CTX_t _tFiqCtxTbl[64];

/*-----------------------------------------------------------*/

void NVIC_Handler_NOPMIRQ(void)
{
    4130:	b538      	push	{r3, r4, r5, lr}
    4132:	4d0c      	ldr	r5, [pc, #48]	; (4164 <NVIC_Handler_NOPMIRQ+0x34>)
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  IRQn_ISR_t pdfIntcIsr;

  //UartSendTrace("NVIC_Handler_NOPMIRQ....\n");

  for (u32IRQ = 0; u32IRQ < 64; u32IRQ++)
    4134:	2400      	movs	r4, #0
    4136:	e002      	b.n	413e <NVIC_Handler_NOPMIRQ+0xe>
    4138:	3401      	adds	r4, #1
    413a:	2c40      	cmp	r4, #64	; 0x40
    413c:	d011      	beq.n	4162 <NVIC_Handler_NOPMIRQ+0x32>
  {
  	if (!_tIrqCtxTbl[u32IRQ].bIsMask && MHal_INTC_IRQStatus(u32IRQ))
    413e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
    4142:	791b      	ldrb	r3, [r3, #4]
    4144:	2b00      	cmp	r3, #0
    4146:	d1f7      	bne.n	4138 <NVIC_Handler_NOPMIRQ+0x8>
    4148:	4620      	mov	r0, r4
    414a:	f000 ffb3 	bl	50b4 <MHal_INTC_IRQStatus>
    414e:	2800      	cmp	r0, #0
    4150:	d0f2      	beq.n	4138 <NVIC_Handler_NOPMIRQ+0x8>
  	{
  		pdfIntcIsr =  _tIrqCtxTbl[u32IRQ].pdfIntcIsr;
    4152:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
      if (pdfIntcIsr)
    4156:	2b00      	cmp	r3, #0
    4158:	d0ee      	beq.n	4138 <NVIC_Handler_NOPMIRQ+0x8>
  for (u32IRQ = 0; u32IRQ < 64; u32IRQ++)
    415a:	3401      	adds	r4, #1
        pdfIntcIsr();
    415c:	4798      	blx	r3
  for (u32IRQ = 0; u32IRQ < 64; u32IRQ++)
    415e:	2c40      	cmp	r4, #64	; 0x40
    4160:	d1ed      	bne.n	413e <NVIC_Handler_NOPMIRQ+0xe>
      //MHal_INTC_IRQClear(u32IRQ);
    }
  }
  /* Call the IntQ test function for this channel. */
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}
    4162:	bd38      	pop	{r3, r4, r5, pc}
    4164:	00021324 	.word	0x00021324

00004168 <NVIC_Handler_NOPMFIQ>:

void NVIC_Handler_NOPMFIQ(void)
{
    4168:	b538      	push	{r3, r4, r5, lr}
    416a:	4d0f      	ldr	r5, [pc, #60]	; (41a8 <NVIC_Handler_NOPMFIQ+0x40>)
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  IRQn_ISR_t pdfIntcIsr;

  //UartSendTrace("NVIC_Handler_NOPMFIQ....\n");

  for (u32FIQ = 0; u32FIQ < 64; u32FIQ++)
    416c:	2400      	movs	r4, #0
    416e:	e005      	b.n	417c <NVIC_Handler_NOPMFIQ+0x14>
  	{
  		pdfIntcIsr =  _tFiqCtxTbl[u32FIQ].pdfIntcIsr;
      if (pdfIntcIsr)
        pdfIntcIsr();
    }
    MHal_INTC_FIQClear(u32FIQ);
    4170:	4620      	mov	r0, r4
  for (u32FIQ = 0; u32FIQ < 64; u32FIQ++)
    4172:	3401      	adds	r4, #1
    MHal_INTC_FIQClear(u32FIQ);
    4174:	f000 fff2 	bl	515c <MHal_INTC_FIQClear>
  for (u32FIQ = 0; u32FIQ < 64; u32FIQ++)
    4178:	2c40      	cmp	r4, #64	; 0x40
    417a:	d014      	beq.n	41a6 <NVIC_Handler_NOPMFIQ+0x3e>
  	if (!_tFiqCtxTbl[u32FIQ].bIsMask && MHal_INTC_FIQStatus(u32FIQ))
    417c:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
    4180:	791b      	ldrb	r3, [r3, #4]
    4182:	2b00      	cmp	r3, #0
    4184:	d1f4      	bne.n	4170 <NVIC_Handler_NOPMFIQ+0x8>
    4186:	4620      	mov	r0, r4
    4188:	f000 ffbe 	bl	5108 <MHal_INTC_FIQStatus>
    418c:	2800      	cmp	r0, #0
    418e:	d0ef      	beq.n	4170 <NVIC_Handler_NOPMFIQ+0x8>
  		pdfIntcIsr =  _tFiqCtxTbl[u32FIQ].pdfIntcIsr;
    4190:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
      if (pdfIntcIsr)
    4194:	2b00      	cmp	r3, #0
    4196:	d0eb      	beq.n	4170 <NVIC_Handler_NOPMFIQ+0x8>
        pdfIntcIsr();
    4198:	4798      	blx	r3
    MHal_INTC_FIQClear(u32FIQ);
    419a:	4620      	mov	r0, r4
  for (u32FIQ = 0; u32FIQ < 64; u32FIQ++)
    419c:	3401      	adds	r4, #1
    MHal_INTC_FIQClear(u32FIQ);
    419e:	f000 ffdd 	bl	515c <MHal_INTC_FIQClear>
  for (u32FIQ = 0; u32FIQ < 64; u32FIQ++)
    41a2:	2c40      	cmp	r4, #64	; 0x40
    41a4:	d1ea      	bne.n	417c <NVIC_Handler_NOPMFIQ+0x14>
  }
  /* Call the IntQ test function for this channel. */
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}
    41a6:	bd38      	pop	{r3, r4, r5, pc}
    41a8:	00021124 	.word	0x00021124

000041ac <MDrv_INTC_Init>:

void MDrv_INTC_Init(void)
{
    41ac:	b570      	push	{r4, r5, r6, lr}
  U32 u32Id;
  for (u32Id = 0; u32Id < 64; u32Id++)
    41ae:	2300      	movs	r3, #0
    41b0:	4d10      	ldr	r5, [pc, #64]	; (41f4 <MDrv_INTC_Init+0x48>)
    41b2:	4c11      	ldr	r4, [pc, #68]	; (41f8 <MDrv_INTC_Init+0x4c>)
  {
    _tIrqCtxTbl[u32Id].bIsMask = 1;
    _tIrqCtxTbl[u32Id].pdfIntcIsr = 0;
    41b4:	4618      	mov	r0, r3
    _tIrqCtxTbl[u32Id].bIsMask = 1;
    41b6:	2101      	movs	r1, #1
    41b8:	00da      	lsls	r2, r3, #3
    41ba:	18ae      	adds	r6, r5, r2
    _tFiqCtxTbl[u32Id].bIsMask = 1;
    41bc:	4422      	add	r2, r4
    _tIrqCtxTbl[u32Id].bIsMask = 1;
    41be:	7131      	strb	r1, [r6, #4]
    _tFiqCtxTbl[u32Id].bIsMask = 1;
    41c0:	7111      	strb	r1, [r2, #4]
    _tIrqCtxTbl[u32Id].pdfIntcIsr = 0;
    41c2:	f845 0033 	str.w	r0, [r5, r3, lsl #3]
    _tFiqCtxTbl[u32Id].pdfIntcIsr = 0;
    41c6:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
  for (u32Id = 0; u32Id < 64; u32Id++)
    41ca:	3301      	adds	r3, #1
    41cc:	2b40      	cmp	r3, #64	; 0x40
    41ce:	d1f3      	bne.n	41b8 <MDrv_INTC_Init+0xc>
  }

  MOS_IRQn_AttachIsr(NVIC_Handler_NOPMIRQ, NOPMIRQ_IRQn, INTC_NOPMIRQ_INT_PRIORITY);
    41d0:	2206      	movs	r2, #6
    41d2:	2100      	movs	r1, #0
    41d4:	4809      	ldr	r0, [pc, #36]	; (41fc <MDrv_INTC_Init+0x50>)
    41d6:	f002 feb7 	bl	6f48 <MOS_IRQn_AttachIsr>
  MOS_IRQn_Unmask(NOPMIRQ_IRQn);
    41da:	2000      	movs	r0, #0
    41dc:	f002 ff12 	bl	7004 <MOS_IRQn_Unmask>

  MOS_IRQn_AttachIsr(NVIC_Handler_NOPMFIQ, NOPMFIQ_IRQn, INTC_NOPMFIQ_INT_PRIORITY);
    41e0:	4807      	ldr	r0, [pc, #28]	; (4200 <MDrv_INTC_Init+0x54>)
    41e2:	2205      	movs	r2, #5
    41e4:	2101      	movs	r1, #1
    41e6:	f002 feaf 	bl	6f48 <MOS_IRQn_AttachIsr>
  MOS_IRQn_Unmask(NOPMFIQ_IRQn);
    41ea:	2001      	movs	r0, #1

}
    41ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MOS_IRQn_Unmask(NOPMFIQ_IRQn);
    41f0:	f002 bf08 	b.w	7004 <MOS_IRQn_Unmask>
    41f4:	00021324 	.word	0x00021324
    41f8:	00021124 	.word	0x00021124
    41fc:	00004131 	.word	0x00004131
    4200:	00004169 	.word	0x00004169

00004204 <MDrv_INTC_IRQAttach>:

void MDrv_INTC_IRQAttach(void *pdfIntcIsr, U32 u32IntcNumber)
{
  _tIrqCtxTbl[u32IntcNumber].pdfIntcIsr = (IRQn_ISR_t)pdfIntcIsr;
    4204:	4b01      	ldr	r3, [pc, #4]	; (420c <MDrv_INTC_IRQAttach+0x8>)
    4206:	f843 0031 	str.w	r0, [r3, r1, lsl #3]
}
    420a:	4770      	bx	lr
    420c:	00021324 	.word	0x00021324

00004210 <MDrv_INTC_FIQAttach>:
  _tIrqCtxTbl[u32IntcNumber].pdfIntcIsr = (IRQn_ISR_t)0;
}

void MDrv_INTC_FIQAttach(void *pdfIntcIsr, U32 u32IntcNumber)
{
	_tFiqCtxTbl[u32IntcNumber].pdfIntcIsr = (IRQn_ISR_t)pdfIntcIsr;
    4210:	4b01      	ldr	r3, [pc, #4]	; (4218 <MDrv_INTC_FIQAttach+0x8>)
    4212:	f843 0031 	str.w	r0, [r3, r1, lsl #3]
}
    4216:	4770      	bx	lr
    4218:	00021124 	.word	0x00021124

0000421c <MDrv_INTC_IRQSetMask>:
{
	_tFiqCtxTbl[u32IntcNumber].pdfIntcIsr = (IRQn_ISR_t)0;
}

void MDrv_INTC_IRQSetMask(U32 u32IntcNumber, BOOL bSetMask)
{
    421c:	b538      	push	{r3, r4, r5, lr}
    421e:	4605      	mov	r5, r0
  if (bSetMask)
    4220:	b139      	cbz	r1, 4232 <MDrv_INTC_IRQSetMask+0x16>
  {
    MHal_INTC_IRQMask(u32IntcNumber);
    4222:	f000 ffbf 	bl	51a4 <MHal_INTC_IRQMask>
	  _tIrqCtxTbl[u32IntcNumber].bIsMask = 1;
    4226:	4807      	ldr	r0, [pc, #28]	; (4244 <MDrv_INTC_IRQSetMask+0x28>)
    4228:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
    422c:	2301      	movs	r3, #1
    422e:	7103      	strb	r3, [r0, #4]
  else
  {
    MHal_INTC_IRQUnMask(u32IntcNumber);
	  _tIrqCtxTbl[u32IntcNumber].bIsMask = 0;
	}
}
    4230:	bd38      	pop	{r3, r4, r5, pc}
    MHal_INTC_IRQUnMask(u32IntcNumber);
    4232:	460c      	mov	r4, r1
    4234:	f000 ffdc 	bl	51f0 <MHal_INTC_IRQUnMask>
	  _tIrqCtxTbl[u32IntcNumber].bIsMask = 0;
    4238:	4802      	ldr	r0, [pc, #8]	; (4244 <MDrv_INTC_IRQSetMask+0x28>)
    423a:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
    423e:	7104      	strb	r4, [r0, #4]
}
    4240:	bd38      	pop	{r3, r4, r5, pc}
    4242:	bf00      	nop
    4244:	00021324 	.word	0x00021324

00004248 <MDrv_INTC_FIQSetMask>:

void MDrv_INTC_FIQSetMask(U32 u32IntcNumber, BOOL bSetMask)
{
    4248:	b538      	push	{r3, r4, r5, lr}
    424a:	4605      	mov	r5, r0
  if (bSetMask)
    424c:	b139      	cbz	r1, 425e <MDrv_INTC_FIQSetMask+0x16>
  {
	  MHal_INTC_FIQMask(u32IntcNumber);
    424e:	f000 fff9 	bl	5244 <MHal_INTC_FIQMask>
	  _tFiqCtxTbl[u32IntcNumber].bIsMask = 1;
    4252:	4807      	ldr	r0, [pc, #28]	; (4270 <MDrv_INTC_FIQSetMask+0x28>)
    4254:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
    4258:	2301      	movs	r3, #1
    425a:	7103      	strb	r3, [r0, #4]
  else
  {
	  MHal_INTC_FIQUnMask(u32IntcNumber);
	  _tFiqCtxTbl[u32IntcNumber].bIsMask = 0;
	}
}
    425c:	bd38      	pop	{r3, r4, r5, pc}
	  MHal_INTC_FIQUnMask(u32IntcNumber);
    425e:	460c      	mov	r4, r1
    4260:	f001 f816 	bl	5290 <MHal_INTC_FIQUnMask>
	  _tFiqCtxTbl[u32IntcNumber].bIsMask = 0;
    4264:	4802      	ldr	r0, [pc, #8]	; (4270 <MDrv_INTC_FIQSetMask+0x28>)
    4266:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
    426a:	7104      	strb	r4, [r0, #4]
}
    426c:	bd38      	pop	{r3, r4, r5, pc}
    426e:	bf00      	nop
    4270:	00021124 	.word	0x00021124

00004274 <MDrv_PM_Suspend>:

}
#endif

void MDrv_PM_Suspend(void)
{
    4274:	b510      	push	{r4, lr}
  //if (_ePMmode == E_PM_MODE_NORMAL)
  {
    if(_ePMStatus == E_PM_STATUS_WAKEUP)
    4276:	4c0a      	ldr	r4, [pc, #40]	; (42a0 <MDrv_PM_Suspend+0x2c>)
    4278:	7823      	ldrb	r3, [r4, #0]
    427a:	b103      	cbz	r3, 427e <MDrv_PM_Suspend+0xa>

      //PM_MSG("MDrv_PM_Suspend: Suspend ACPU (%d)\n", MHal_Timer_GetTick()/TIMER_DELAY_1ms);
      PM_MSG("MDrv_PM_Suspend: Suspend ACPU (%d)\r\n",xTaskGetTickCount()*portTICK_PERIOD_MS);
    }
  }
}
    427c:	bd10      	pop	{r4, pc}
      Mhal_PM_Suspend();
    427e:	f001 f8f1 	bl	5464 <Mhal_PM_Suspend>
      PM_MSG("MDrv_PM_Suspend: Suspend ACPU (%d)\r\n",xTaskGetTickCount()*portTICK_PERIOD_MS);
    4282:	4b08      	ldr	r3, [pc, #32]	; (42a4 <MDrv_PM_Suspend+0x30>)
    4284:	681b      	ldr	r3, [r3, #0]
      _ePMStatus = E_PM_STATUS_SLEEP;
    4286:	2201      	movs	r2, #1
      PM_MSG("MDrv_PM_Suspend: Suspend ACPU (%d)\r\n",xTaskGetTickCount()*portTICK_PERIOD_MS);
    4288:	029b      	lsls	r3, r3, #10
      _ePMStatus = E_PM_STATUS_SLEEP;
    428a:	7022      	strb	r2, [r4, #0]
      PM_MSG("MDrv_PM_Suspend: Suspend ACPU (%d)\r\n",xTaskGetTickCount()*portTICK_PERIOD_MS);
    428c:	d5f6      	bpl.n	427c <MDrv_PM_Suspend+0x8>
    428e:	f7fd f8f1 	bl	1474 <xTaskGetTickCount>
}
    4292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      PM_MSG("MDrv_PM_Suspend: Suspend ACPU (%d)\r\n",xTaskGetTickCount()*portTICK_PERIOD_MS);
    4296:	4601      	mov	r1, r0
    4298:	4803      	ldr	r0, [pc, #12]	; (42a8 <MDrv_PM_Suspend+0x34>)
    429a:	f7ff b9e3 	b.w	3664 <UartSendTrace>
    429e:	bf00      	nop
    42a0:	00021524 	.word	0x00021524
    42a4:	0000ca14 	.word	0x0000ca14
    42a8:	0000ba94 	.word	0x0000ba94

000042ac <MDrv_PM_Resume>:

void MDrv_PM_Resume(void)
{
    42ac:	b510      	push	{r4, lr}
  //if (_ePMmode == E_PM_MODE_NORMAL)
  {
    if(_ePMStatus == E_PM_STATUS_SLEEP)
    42ae:	4c0b      	ldr	r4, [pc, #44]	; (42dc <MDrv_PM_Resume+0x30>)
    42b0:	7823      	ldrb	r3, [r4, #0]
    42b2:	2b01      	cmp	r3, #1
    42b4:	d000      	beq.n	42b8 <MDrv_PM_Resume+0xc>

      //PM_MSG("MDrv_PM_Resume: Resume ACPU (%d)\n", MHal_Timer_GetTick()/TIMER_DELAY_1ms);
      PM_MSG("MDrv_PM_Resume: Resume ACPU (%d)\r\n",xTaskGetTickCount()*portTICK_PERIOD_MS);
    }
  }
}
    42b6:	bd10      	pop	{r4, pc}
      Mhal_PM_Resume();
    42b8:	f001 f8d6 	bl	5468 <Mhal_PM_Resume>
      MHal_BDMA_Resume(); //restore cm4 bdma
    42bc:	f001 f8d0 	bl	5460 <MHal_BDMA_Resume>
      PM_MSG("MDrv_PM_Resume: Resume ACPU (%d)\r\n",xTaskGetTickCount()*portTICK_PERIOD_MS);
    42c0:	4b07      	ldr	r3, [pc, #28]	; (42e0 <MDrv_PM_Resume+0x34>)
    42c2:	681b      	ldr	r3, [r3, #0]
      _ePMStatus = E_PM_STATUS_WAKEUP;
    42c4:	2200      	movs	r2, #0
      PM_MSG("MDrv_PM_Resume: Resume ACPU (%d)\r\n",xTaskGetTickCount()*portTICK_PERIOD_MS);
    42c6:	029b      	lsls	r3, r3, #10
      _ePMStatus = E_PM_STATUS_WAKEUP;
    42c8:	7022      	strb	r2, [r4, #0]
      PM_MSG("MDrv_PM_Resume: Resume ACPU (%d)\r\n",xTaskGetTickCount()*portTICK_PERIOD_MS);
    42ca:	d5f4      	bpl.n	42b6 <MDrv_PM_Resume+0xa>
    42cc:	f7fd f8d2 	bl	1474 <xTaskGetTickCount>
}
    42d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      PM_MSG("MDrv_PM_Resume: Resume ACPU (%d)\r\n",xTaskGetTickCount()*portTICK_PERIOD_MS);
    42d4:	4601      	mov	r1, r0
    42d6:	4803      	ldr	r0, [pc, #12]	; (42e4 <MDrv_PM_Resume+0x38>)
    42d8:	f7ff b9c4 	b.w	3664 <UartSendTrace>
    42dc:	00021524 	.word	0x00021524
    42e0:	0000ca14 	.word	0x0000ca14
    42e4:	0000ba6c 	.word	0x0000ba6c

000042e8 <MDrv_CPU_SetFreq>:
static CPU_FREQ_e _eCPUFreq = E_CPU_FREQ_NONE;

/*-----------------------------------------------------------*/

void MDrv_CPU_SetFreq(CPU_FREQ_e eFreq)
{
    42e8:	b538      	push	{r3, r4, r5, lr}
  if (_eCPUFreq == E_CPU_FREQ_NONE)
    42ea:	4d09      	ldr	r5, [pc, #36]	; (4310 <MDrv_CPU_SetFreq+0x28>)
    42ec:	782b      	ldrb	r3, [r5, #0]
{
    42ee:	4604      	mov	r4, r0
  if (_eCPUFreq == E_CPU_FREQ_NONE)
    42f0:	b13b      	cbz	r3, 4302 <MDrv_CPU_SetFreq+0x1a>
    MHal_CPU_Init();
    MOS_mDelay(1);
  }


  if(_eCPUFreq != eFreq)
    42f2:	429c      	cmp	r4, r3
    42f4:	d100      	bne.n	42f8 <MDrv_CPU_SetFreq+0x10>
  {
    MHal_CPU_SetFreq(eFreq);
    _eCPUFreq = eFreq;
  }
}
    42f6:	bd38      	pop	{r3, r4, r5, pc}
    MHal_CPU_SetFreq(eFreq);
    42f8:	4620      	mov	r0, r4
    42fa:	f001 f8c7 	bl	548c <MHal_CPU_SetFreq>
    _eCPUFreq = eFreq;
    42fe:	702c      	strb	r4, [r5, #0]
}
    4300:	bd38      	pop	{r3, r4, r5, pc}
    MHal_CPU_Init();
    4302:	f001 f8c1 	bl	5488 <MHal_CPU_Init>
    MOS_mDelay(1);
    4306:	2001      	movs	r0, #1
    4308:	f002 fe9c 	bl	7044 <MOS_mDelay>
    430c:	782b      	ldrb	r3, [r5, #0]
    430e:	e7f0      	b.n	42f2 <MDrv_CPU_SetFreq+0xa>
    4310:	00021525 	.word	0x00021525

00004314 <MHAL_AUD_I2SSetFmt>:


BOOL MHAL_AUD_I2SSetFmt(AudI2sFmt_e eFmt)
{
  U16 nSel;
  switch(eFmt)
    4314:	b110      	cbz	r0, 431c <MHAL_AUD_I2SSetFmt+0x8>
    4316:	2801      	cmp	r0, #1
    4318:	d109      	bne.n	432e <MHAL_AUD_I2SSetFmt+0x1a>
    431a:	2040      	movs	r0, #64	; 0x40
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    431c:	4a05      	ldr	r2, [pc, #20]	; (4334 <MHAL_AUD_I2SSetFmt+0x20>)
    431e:	8813      	ldrh	r3, [r2, #0]
    4320:	b29b      	uxth	r3, r3
    4322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    4326:	4318      	orrs	r0, r3
    4328:	8010      	strh	r0, [r2, #0]
          return FALSE;
  }

  _HaydnInsertReg16(REG_I2S_TDM_CFG_00, REG_CODEC_I2S_RX_FMT, (nSel?REG_CODEC_I2S_RX_FMT:0));
  //_gaI2sCfg[eI2s].eFormat = eFmt;
  return TRUE;
    432a:	2001      	movs	r0, #1
    432c:	4770      	bx	lr
          return FALSE;
    432e:	2000      	movs	r0, #0
}
    4330:	4770      	bx	lr
    4332:	bf00      	nop
    4334:	40064ac0 	.word	0x40064ac0

00004338 <MHAL_AUD_I2SSetBitWidth>:

BOOL MHAL_AUD_I2SSetBitWidth(AudI2SWidth_e eWidth)
{
  U16 nSel;
  switch(eWidth)
    4338:	b118      	cbz	r0, 4342 <MHAL_AUD_I2SSetBitWidth+0xa>
    433a:	2802      	cmp	r0, #2
    433c:	d826      	bhi.n	438c <MHAL_AUD_I2SSetBitWidth+0x54>
    433e:	f44f 7000 	mov.w	r0, #512	; 0x200
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    4342:	4a26      	ldr	r2, [pc, #152]	; (43dc <MHAL_AUD_I2SSetBitWidth+0xa4>)
    4344:	8813      	ldrh	r3, [r2, #0]
    4346:	b29b      	uxth	r3, r3
    4348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    434c:	4318      	orrs	r0, r3
    434e:	8010      	strh	r0, [r2, #0]
  return (*pnReg);
    4350:	8813      	ldrh	r3, [r2, #0]

BOOL MHAL_AUD_I2SUpdate(void)
{
  U16 nBits = 0;

  if (_HaydnReadReg(REG_I2S_TDM_CFG_00)&REG_CODEC_I2S_RX_ENC_WDTH)
    4352:	0599      	lsls	r1, r3, #22
    4354:	d51c      	bpl.n	4390 <MHAL_AUD_I2SSetBitWidth+0x58>
  return (*pnReg);
    4356:	8813      	ldrh	r3, [r2, #0]
    nBits = 32;
  else
    nBits = 16;

  if (_HaydnReadReg(REG_I2S_TDM_CFG_00)&REG_CODEC_I2S_RX_TDM_MODE)
    4358:	049b      	lsls	r3, r3, #18
    435a:	d52a      	bpl.n	43b2 <MHAL_AUD_I2SSetBitWidth+0x7a>
    435c:	2280      	movs	r2, #128	; 0x80
    435e:	f44f 7380 	mov.w	r3, #256	; 0x100
  return (*pnReg);
    4362:	491e      	ldr	r1, [pc, #120]	; (43dc <MHAL_AUD_I2SSetBitWidth+0xa4>)
    4364:	8809      	ldrh	r1, [r1, #0]
    nBits *= ((_HaydnReadReg(REG_I2S_TDM_CFG_00)&REG_CODEC_I2S_RX_CHLEN)?8:4);
    4366:	f411 7f80 	tst.w	r1, #256	; 0x100
    436a:	bf08      	it	eq
    436c:	4613      	moveq	r3, r2
  else
    nBits *= 2;

  switch(nBits)
    436e:	2b80      	cmp	r3, #128	; 0x80
    4370:	d029      	beq.n	43c6 <MHAL_AUD_I2SSetBitWidth+0x8e>
    4372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4376:	d11a      	bne.n	43ae <MHAL_AUD_I2SSetBitWidth+0x76>
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    4378:	4a19      	ldr	r2, [pc, #100]	; (43e0 <MHAL_AUD_I2SSetBitWidth+0xa8>)
    437a:	8813      	ldrh	r3, [r2, #0]
    437c:	b29b      	uxth	r3, r3
    437e:	f023 0303 	bic.w	r3, r3, #3
    4382:	f043 0303 	orr.w	r3, r3, #3
    4386:	8013      	strh	r3, [r2, #0]
  return TRUE;
    4388:	2001      	movs	r0, #1
    438a:	4770      	bx	lr
          return FALSE;
    438c:	2000      	movs	r0, #0
}
    438e:	4770      	bx	lr
  return (*pnReg);
    4390:	8813      	ldrh	r3, [r2, #0]
  if (_HaydnReadReg(REG_I2S_TDM_CFG_00)&REG_CODEC_I2S_RX_TDM_MODE)
    4392:	049a      	lsls	r2, r3, #18
    4394:	d502      	bpl.n	439c <MHAL_AUD_I2SSetBitWidth+0x64>
    4396:	2240      	movs	r2, #64	; 0x40
    4398:	2380      	movs	r3, #128	; 0x80
    439a:	e7e2      	b.n	4362 <MHAL_AUD_I2SSetBitWidth+0x2a>
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    439c:	4a10      	ldr	r2, [pc, #64]	; (43e0 <MHAL_AUD_I2SSetBitWidth+0xa8>)
    439e:	8813      	ldrh	r3, [r2, #0]
    43a0:	f023 0303 	bic.w	r3, r3, #3
    43a4:	041b      	lsls	r3, r3, #16
    43a6:	0c1b      	lsrs	r3, r3, #16
    43a8:	8013      	strh	r3, [r2, #0]
  return TRUE;
    43aa:	2001      	movs	r0, #1
    43ac:	4770      	bx	lr
  switch(nBits)
    43ae:	2b40      	cmp	r3, #64	; 0x40
    43b0:	d1fb      	bne.n	43aa <MHAL_AUD_I2SSetBitWidth+0x72>
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    43b2:	4a0b      	ldr	r2, [pc, #44]	; (43e0 <MHAL_AUD_I2SSetBitWidth+0xa8>)
    43b4:	8813      	ldrh	r3, [r2, #0]
    43b6:	b29b      	uxth	r3, r3
    43b8:	f023 0303 	bic.w	r3, r3, #3
    43bc:	f043 0301 	orr.w	r3, r3, #1
    43c0:	8013      	strh	r3, [r2, #0]
  return TRUE;
    43c2:	2001      	movs	r0, #1
    43c4:	4770      	bx	lr
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    43c6:	4a06      	ldr	r2, [pc, #24]	; (43e0 <MHAL_AUD_I2SSetBitWidth+0xa8>)
    43c8:	8813      	ldrh	r3, [r2, #0]
    43ca:	b29b      	uxth	r3, r3
    43cc:	f023 0303 	bic.w	r3, r3, #3
    43d0:	f043 0302 	orr.w	r3, r3, #2
    43d4:	8013      	strh	r3, [r2, #0]
  return TRUE;
    43d6:	2001      	movs	r0, #1
    43d8:	4770      	bx	lr
    43da:	bf00      	nop
    43dc:	40064ac0 	.word	0x40064ac0
    43e0:	40064a68 	.word	0x40064a68

000043e4 <MHAL_AUD_I2SSetMsMode>:
  switch(eMsMode)
    43e4:	b198      	cbz	r0, 440e <MHAL_AUD_I2SSetMsMode+0x2a>
    43e6:	2801      	cmp	r0, #1
    43e8:	d10f      	bne.n	440a <MHAL_AUD_I2SSetMsMode+0x26>
  INSREG8(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    43ea:	4a0c      	ldr	r2, [pc, #48]	; (441c <MHAL_AUD_I2SSetMsMode+0x38>)
    43ec:	7813      	ldrb	r3, [r2, #0]
    43ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    43f2:	7013      	strb	r3, [r2, #0]
    43f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    43f8:	4a09      	ldr	r2, [pc, #36]	; (4420 <MHAL_AUD_I2SSetMsMode+0x3c>)
    43fa:	8813      	ldrh	r3, [r2, #0]
    43fc:	b29b      	uxth	r3, r3
    43fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    4402:	4318      	orrs	r0, r3
    4404:	8010      	strh	r0, [r2, #0]
  return TRUE;
    4406:	2001      	movs	r0, #1
    4408:	4770      	bx	lr
          return FALSE;
    440a:	2000      	movs	r0, #0
}
    440c:	4770      	bx	lr
  INSREG8(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    440e:	4a03      	ldr	r2, [pc, #12]	; (441c <MHAL_AUD_I2SSetMsMode+0x38>)
    4410:	7813      	ldrb	r3, [r2, #0]
    4412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4416:	7013      	strb	r3, [r2, #0]
  _HaydnInsertReg16(REG_I2S_TDM_CFG_00, REG_CODEC_I2S_RX_MS_MODE, (nMsMode?REG_CODEC_I2S_RX_MS_MODE:0));
    4418:	e7ee      	b.n	43f8 <MHAL_AUD_I2SSetMsMode+0x14>
    441a:	bf00      	nop
    441c:	40064a45 	.word	0x40064a45
    4420:	40064ac0 	.word	0x40064ac0

00004424 <MHAL_AUD_I2SSetChn>:
  switch(eChn)
    4424:	2801      	cmp	r0, #1
    4426:	d051      	beq.n	44cc <MHAL_AUD_I2SSetChn+0xa8>
    4428:	2800      	cmp	r0, #0
    442a:	d043      	beq.n	44b4 <MHAL_AUD_I2SSetChn+0x90>
    442c:	2802      	cmp	r0, #2
    442e:	d12c      	bne.n	448a <MHAL_AUD_I2SSetChn+0x66>
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    4430:	4a39      	ldr	r2, [pc, #228]	; (4518 <MHAL_AUD_I2SSetChn+0xf4>)
    4432:	8813      	ldrh	r3, [r2, #0]
    4434:	b29b      	uxth	r3, r3
    4436:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    443a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    443e:	8013      	strh	r3, [r2, #0]
    4440:	8813      	ldrh	r3, [r2, #0]
    4442:	b29b      	uxth	r3, r3
    4444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    4448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    444c:	8013      	strh	r3, [r2, #0]
  return (*pnReg);
    444e:	4b32      	ldr	r3, [pc, #200]	; (4518 <MHAL_AUD_I2SSetChn+0xf4>)
    4450:	881a      	ldrh	r2, [r3, #0]
  if (_HaydnReadReg(REG_I2S_TDM_CFG_00)&REG_CODEC_I2S_RX_ENC_WDTH)
    4452:	0591      	lsls	r1, r2, #22
    4454:	d41b      	bmi.n	448e <MHAL_AUD_I2SSetChn+0x6a>
  return (*pnReg);
    4456:	881b      	ldrh	r3, [r3, #0]
  if (_HaydnReadReg(REG_I2S_TDM_CFG_00)&REG_CODEC_I2S_RX_TDM_MODE)
    4458:	049b      	lsls	r3, r3, #18
    445a:	d54a      	bpl.n	44f2 <MHAL_AUD_I2SSetChn+0xce>
    445c:	2380      	movs	r3, #128	; 0x80
    445e:	2240      	movs	r2, #64	; 0x40
  return (*pnReg);
    4460:	492d      	ldr	r1, [pc, #180]	; (4518 <MHAL_AUD_I2SSetChn+0xf4>)
    4462:	8809      	ldrh	r1, [r1, #0]
    nBits *= ((_HaydnReadReg(REG_I2S_TDM_CFG_00)&REG_CODEC_I2S_RX_CHLEN)?8:4);
    4464:	f411 7f80 	tst.w	r1, #256	; 0x100
    4468:	bf08      	it	eq
    446a:	4613      	moveq	r3, r2
  switch(nBits)
    446c:	2b80      	cmp	r3, #128	; 0x80
    446e:	d049      	beq.n	4504 <MHAL_AUD_I2SSetChn+0xe0>
    4470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4474:	d112      	bne.n	449c <MHAL_AUD_I2SSetChn+0x78>
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    4476:	4a29      	ldr	r2, [pc, #164]	; (451c <MHAL_AUD_I2SSetChn+0xf8>)
    4478:	8813      	ldrh	r3, [r2, #0]
    447a:	b29b      	uxth	r3, r3
    447c:	f023 0303 	bic.w	r3, r3, #3
    4480:	f043 0303 	orr.w	r3, r3, #3
    4484:	8013      	strh	r3, [r2, #0]
  return TRUE;
    4486:	2001      	movs	r0, #1
}
    4488:	4770      	bx	lr
        return FALSE;
    448a:	2000      	movs	r0, #0
    448c:	4770      	bx	lr
  return (*pnReg);
    448e:	881b      	ldrh	r3, [r3, #0]
  if (_HaydnReadReg(REG_I2S_TDM_CFG_00)&REG_CODEC_I2S_RX_TDM_MODE)
    4490:	049a      	lsls	r2, r3, #18
    4492:	d505      	bpl.n	44a0 <MHAL_AUD_I2SSetChn+0x7c>
    4494:	f44f 7380 	mov.w	r3, #256	; 0x100
    4498:	2280      	movs	r2, #128	; 0x80
    449a:	e7e1      	b.n	4460 <MHAL_AUD_I2SSetChn+0x3c>
  switch(nBits)
    449c:	2b40      	cmp	r3, #64	; 0x40
    449e:	d1f2      	bne.n	4486 <MHAL_AUD_I2SSetChn+0x62>
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    44a0:	4a1e      	ldr	r2, [pc, #120]	; (451c <MHAL_AUD_I2SSetChn+0xf8>)
    44a2:	8813      	ldrh	r3, [r2, #0]
    44a4:	b29b      	uxth	r3, r3
    44a6:	f023 0303 	bic.w	r3, r3, #3
    44aa:	f043 0301 	orr.w	r3, r3, #1
    44ae:	8013      	strh	r3, [r2, #0]
  return TRUE;
    44b0:	2001      	movs	r0, #1
    44b2:	4770      	bx	lr
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    44b4:	4a18      	ldr	r2, [pc, #96]	; (4518 <MHAL_AUD_I2SSetChn+0xf4>)
    44b6:	8813      	ldrh	r3, [r2, #0]
    44b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    44bc:	041b      	lsls	r3, r3, #16
    44be:	0c1b      	lsrs	r3, r3, #16
    44c0:	8013      	strh	r3, [r2, #0]
  return (*pnReg);
    44c2:	4b15      	ldr	r3, [pc, #84]	; (4518 <MHAL_AUD_I2SSetChn+0xf4>)
    44c4:	881a      	ldrh	r2, [r3, #0]
  if (_HaydnReadReg(REG_I2S_TDM_CFG_00)&REG_CODEC_I2S_RX_ENC_WDTH)
    44c6:	0591      	lsls	r1, r2, #22
    44c8:	d4e1      	bmi.n	448e <MHAL_AUD_I2SSetChn+0x6a>
    44ca:	e7c4      	b.n	4456 <MHAL_AUD_I2SSetChn+0x32>
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    44cc:	4a12      	ldr	r2, [pc, #72]	; (4518 <MHAL_AUD_I2SSetChn+0xf4>)
    44ce:	8813      	ldrh	r3, [r2, #0]
    44d0:	b29b      	uxth	r3, r3
    44d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    44d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    44da:	8013      	strh	r3, [r2, #0]
    44dc:	8813      	ldrh	r3, [r2, #0]
    44de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    44e2:	041b      	lsls	r3, r3, #16
    44e4:	0c1b      	lsrs	r3, r3, #16
    44e6:	8013      	strh	r3, [r2, #0]
  return (*pnReg);
    44e8:	4b0b      	ldr	r3, [pc, #44]	; (4518 <MHAL_AUD_I2SSetChn+0xf4>)
    44ea:	881a      	ldrh	r2, [r3, #0]
  if (_HaydnReadReg(REG_I2S_TDM_CFG_00)&REG_CODEC_I2S_RX_ENC_WDTH)
    44ec:	0591      	lsls	r1, r2, #22
    44ee:	d4ce      	bmi.n	448e <MHAL_AUD_I2SSetChn+0x6a>
    44f0:	e7b1      	b.n	4456 <MHAL_AUD_I2SSetChn+0x32>
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    44f2:	4a0a      	ldr	r2, [pc, #40]	; (451c <MHAL_AUD_I2SSetChn+0xf8>)
    44f4:	8813      	ldrh	r3, [r2, #0]
    44f6:	f023 0303 	bic.w	r3, r3, #3
    44fa:	041b      	lsls	r3, r3, #16
    44fc:	0c1b      	lsrs	r3, r3, #16
    44fe:	8013      	strh	r3, [r2, #0]
  return TRUE;
    4500:	2001      	movs	r0, #1
    4502:	4770      	bx	lr
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    4504:	4a05      	ldr	r2, [pc, #20]	; (451c <MHAL_AUD_I2SSetChn+0xf8>)
    4506:	8813      	ldrh	r3, [r2, #0]
    4508:	b29b      	uxth	r3, r3
    450a:	f023 0303 	bic.w	r3, r3, #3
    450e:	f043 0302 	orr.w	r3, r3, #2
    4512:	8013      	strh	r3, [r2, #0]
  return TRUE;
    4514:	2001      	movs	r0, #1
    4516:	4770      	bx	lr
    4518:	40064ac0 	.word	0x40064ac0
    451c:	40064a68 	.word	0x40064a68

00004520 <MHAL_AUD_I2SSetSynthRate>:
  if(eRate >= AUD_I2S_RATE_NUM)
    4520:	2805      	cmp	r0, #5
    4522:	d835      	bhi.n	4590 <MHAL_AUD_I2SSetSynthRate+0x70>
   if(eRate == AUD_I2S_RATE_SLAVE)
    4524:	b350      	cbz	r0, 457c <MHAL_AUD_I2SSetSynthRate+0x5c>
{
    4526:	b430      	push	{r4, r5}
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    4528:	4d1a      	ldr	r5, [pc, #104]	; (4594 <MHAL_AUD_I2SSetSynthRate+0x74>)
    452a:	4a1b      	ldr	r2, [pc, #108]	; (4598 <MHAL_AUD_I2SSetSynthRate+0x78>)
    452c:	882b      	ldrh	r3, [r5, #0]
  nValue = (U16)(_u32SynthRateTbl[eRate]>>16)&0xffff;
    452e:	491b      	ldr	r1, [pc, #108]	; (459c <MHAL_AUD_I2SSetSynthRate+0x7c>)
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    4530:	4c1b      	ldr	r4, [pc, #108]	; (45a0 <MHAL_AUD_I2SSetSynthRate+0x80>)
  nValue = (U16)(_u32SynthRateTbl[eRate]>>16)&0xffff;
    4532:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    4536:	481b      	ldr	r0, [pc, #108]	; (45a4 <MHAL_AUD_I2SSetSynthRate+0x84>)
    4538:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    453c:	041b      	lsls	r3, r3, #16
    453e:	0c1b      	lsrs	r3, r3, #16
    4540:	802b      	strh	r3, [r5, #0]
    4542:	8813      	ldrh	r3, [r2, #0]
    4544:	b29b      	uxth	r3, r3
    4546:	f023 0302 	bic.w	r3, r3, #2
    454a:	f043 0302 	orr.w	r3, r3, #2
    454e:	8013      	strh	r3, [r2, #0]
  nValue = (U16)(_u32SynthRateTbl[eRate]>>16)&0xffff;
    4550:	0c0b      	lsrs	r3, r1, #16
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    4552:	8825      	ldrh	r5, [r4, #0]
    4554:	8023      	strh	r3, [r4, #0]
  nValue = (U16)(_u32SynthRateTbl[eRate] & 0xffff);
    4556:	b289      	uxth	r1, r1
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    4558:	8803      	ldrh	r3, [r0, #0]
    455a:	8001      	strh	r1, [r0, #0]
    455c:	8813      	ldrh	r3, [r2, #0]
    455e:	b29b      	uxth	r3, r3
    4560:	f023 0301 	bic.w	r3, r3, #1
    4564:	f043 0301 	orr.w	r3, r3, #1
    4568:	8013      	strh	r3, [r2, #0]
    456a:	8813      	ldrh	r3, [r2, #0]
    456c:	f023 0301 	bic.w	r3, r3, #1
    4570:	041b      	lsls	r3, r3, #16
    4572:	0c1b      	lsrs	r3, r3, #16
  return TRUE;
    4574:	2001      	movs	r0, #1
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    4576:	8013      	strh	r3, [r2, #0]
}
    4578:	bc30      	pop	{r4, r5}
    457a:	4770      	bx	lr
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    457c:	4a05      	ldr	r2, [pc, #20]	; (4594 <MHAL_AUD_I2SSetSynthRate+0x74>)
    457e:	8813      	ldrh	r3, [r2, #0]
    4580:	b29b      	uxth	r3, r3
    4582:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    4586:	f043 0310 	orr.w	r3, r3, #16
    458a:	8013      	strh	r3, [r2, #0]
      return TRUE;
    458c:	2001      	movs	r0, #1
    458e:	4770      	bx	lr
      return FALSE;
    4590:	2000      	movs	r0, #0
}
    4592:	4770      	bx	lr
    4594:	40064a44 	.word	0x40064a44
    4598:	40064bd8 	.word	0x40064bd8
    459c:	0000bac8 	.word	0x0000bac8
    45a0:	40064bd4 	.word	0x40064bd4
    45a4:	40064bd0 	.word	0x40064bd0

000045a8 <MHAL_AUD_I2SEnable>:

  return TRUE;
}

BOOL MHAL_AUD_I2SEnable(BOOL bEnable)
{
    45a8:	b410      	push	{r4}
  _HaydnInsertReg8(0x000ed8, 0x0f, (bEnable?0x04:0x01)); // I2S TDM Mode 1:0x4 PDM Mode 1:0x1
    45aa:	b330      	cbz	r0, 45fa <MHAL_AUD_I2SEnable+0x52>
  INSREG8(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    45ac:	4820      	ldr	r0, [pc, #128]	; (4630 <MHAL_AUD_I2SEnable+0x88>)
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    45ae:	4a21      	ldr	r2, [pc, #132]	; (4634 <MHAL_AUD_I2SEnable+0x8c>)
  INSREG8(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    45b0:	7803      	ldrb	r3, [r0, #0]
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    45b2:	4921      	ldr	r1, [pc, #132]	; (4638 <MHAL_AUD_I2SEnable+0x90>)
  INSREG8(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    45b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    45b8:	f043 0304 	orr.w	r3, r3, #4
    45bc:	7003      	strb	r3, [r0, #0]
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    45be:	8813      	ldrh	r3, [r2, #0]
    45c0:	b29b      	uxth	r3, r3
    45c2:	f023 0310 	bic.w	r3, r3, #16
    45c6:	f043 0310 	orr.w	r3, r3, #16
    45ca:	8013      	strh	r3, [r2, #0]
    45cc:	880b      	ldrh	r3, [r1, #0]
    45ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    45d2:	800b      	strh	r3, [r1, #0]
    45d4:	8813      	ldrh	r3, [r2, #0]
    45d6:	b29b      	uxth	r3, r3
    45d8:	f023 0301 	bic.w	r3, r3, #1
    45dc:	f043 0301 	orr.w	r3, r3, #1
    45e0:	8013      	strh	r3, [r2, #0]
    45e2:	2004      	movs	r0, #4
    45e4:	4a15      	ldr	r2, [pc, #84]	; (463c <MHAL_AUD_I2SEnable+0x94>)
  //_HaydnInsertReg16(REG_PAGA_CTRL_18, REG_ENABLE_CLK_NF_SYNTH_REF, (bEnable?REG_ENABLE_CLK_NF_SYNTH_REF:0));

  _HaydnInsertReg16(0x032404, 0x04, (bEnable?0x04:0)); //I2S RX -> DMA

  return TRUE;
}
    45e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    45ea:	8813      	ldrh	r3, [r2, #0]
    45ec:	b29b      	uxth	r3, r3
    45ee:	f023 0304 	bic.w	r3, r3, #4
    45f2:	4318      	orrs	r0, r3
    45f4:	8010      	strh	r0, [r2, #0]
}
    45f6:	2001      	movs	r0, #1
    45f8:	4770      	bx	lr
  INSREG8(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    45fa:	4c0d      	ldr	r4, [pc, #52]	; (4630 <MHAL_AUD_I2SEnable+0x88>)
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    45fc:	4a0d      	ldr	r2, [pc, #52]	; (4634 <MHAL_AUD_I2SEnable+0x8c>)
  INSREG8(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    45fe:	7823      	ldrb	r3, [r4, #0]
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    4600:	490d      	ldr	r1, [pc, #52]	; (4638 <MHAL_AUD_I2SEnable+0x90>)
  INSREG8(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    4602:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    4606:	f043 0301 	orr.w	r3, r3, #1
    460a:	7023      	strb	r3, [r4, #0]
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    460c:	8813      	ldrh	r3, [r2, #0]
    460e:	f023 0310 	bic.w	r3, r3, #16
    4612:	041b      	lsls	r3, r3, #16
    4614:	0c1b      	lsrs	r3, r3, #16
    4616:	8013      	strh	r3, [r2, #0]
    4618:	880b      	ldrh	r3, [r1, #0]
    461a:	f3c3 030e 	ubfx	r3, r3, #0, #15
    461e:	800b      	strh	r3, [r1, #0]
    4620:	8813      	ldrh	r3, [r2, #0]
    4622:	f023 0301 	bic.w	r3, r3, #1
    4626:	041b      	lsls	r3, r3, #16
    4628:	0c1b      	lsrs	r3, r3, #16
    462a:	8013      	strh	r3, [r2, #0]
  _HaydnInsertReg16(0x032404, 0x04, (bEnable?0x04:0)); //I2S RX -> DMA
    462c:	e7da      	b.n	45e4 <MHAL_AUD_I2SEnable+0x3c>
    462e:	bf00      	nop
    4630:	40001db0 	.word	0x40001db0
    4634:	40064a60 	.word	0x40064a60
    4638:	40064ac0 	.word	0x40064ac0
    463c:	40064808 	.word	0x40064808

00004640 <MHAL_AUD_I2SInit>:
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    4640:	4908      	ldr	r1, [pc, #32]	; (4664 <MHAL_AUD_I2SInit+0x24>)
    4642:	4a09      	ldr	r2, [pc, #36]	; (4668 <MHAL_AUD_I2SInit+0x28>)
    4644:	880b      	ldrh	r3, [r1, #0]
    4646:	b29b      	uxth	r3, r3
    4648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    464c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4650:	800b      	strh	r3, [r1, #0]
    4652:	8813      	ldrh	r3, [r2, #0]
    4654:	b29b      	uxth	r3, r3
    4656:	f023 0308 	bic.w	r3, r3, #8
    465a:	f043 0308 	orr.w	r3, r3, #8
    465e:	8013      	strh	r3, [r2, #0]

void MHAL_AUD_I2SInit(void)
{
  _HaydnInsertReg16(REG_PAGA_CTRL_18, REG_ENABLE_CLK_NF_SYNTH_REF, REG_ENABLE_CLK_NF_SYNTH_REF); //for I2S clock from Pagnini PLL
  _HaydnInsertReg16(REG_I2S_TDM_CFG_00, REG_CODEC_I2S_RX_BCK_DG_EN, REG_CODEC_I2S_RX_BCK_DG_EN);
}
    4660:	4770      	bx	lr
    4662:	bf00      	nop
    4664:	40064a60 	.word	0x40064a60
    4668:	40064ac0 	.word	0x40064ac0

0000466c <MHAL_AUD_DMAReset>:
  *pnReg = nValue;
    466c:	4b0b      	ldr	r3, [pc, #44]	; (469c <MHAL_AUD_DMAReset+0x30>)
  return (*pnReg);
    466e:	4a0c      	ldr	r2, [pc, #48]	; (46a0 <MHAL_AUD_DMAReset+0x34>)
  _gpDmaWrPtr = _gpDmaWrBuf;
    4670:	480c      	ldr	r0, [pc, #48]	; (46a4 <MHAL_AUD_DMAReset+0x38>)
    4672:	490d      	ldr	r1, [pc, #52]	; (46a8 <MHAL_AUD_DMAReset+0x3c>)
  //_gaI2sCfg[eI2s].nTdmChannel = nChannel;
  return TRUE;
}

void MHAL_AUD_DMAReset(void)
{
    4674:	b410      	push	{r4}
  *pnReg = nValue;
    4676:	2400      	movs	r4, #0
    4678:	801c      	strh	r4, [r3, #0]
  return (*pnReg);
    467a:	8813      	ldrh	r3, [r2, #0]
    467c:	b29b      	uxth	r3, r3
  nConfigValue |= REG_SW_RST_DMA;
    467e:	f443 4400 	orr.w	r4, r3, #32768	; 0x8000
  *pnReg = nValue;
    4682:	f3c3 030e 	ubfx	r3, r3, #0, #15
    4686:	8014      	strh	r4, [r2, #0]
    4688:	8013      	strh	r3, [r2, #0]
  return (*pnReg);
    468a:	8813      	ldrh	r3, [r2, #0]
  //_TRACE((_CUS8 | LEVEL_4, "HalAudioDmaReset"));
  HaydnDmaReset();
}
    468c:	f85d 4b04 	ldr.w	r4, [sp], #4
  nConfigValue |= (REG_WR_SWAP | REG_MIU_REQUSTER_ENABLE);
    4690:	f043 0309 	orr.w	r3, r3, #9
  *pnReg = nValue;
    4694:	8013      	strh	r3, [r2, #0]
  _gpDmaWrPtr = _gpDmaWrBuf;
    4696:	6803      	ldr	r3, [r0, #0]
    4698:	600b      	str	r3, [r1, #0]
}
    469a:	4770      	bx	lr
    469c:	400648d0 	.word	0x400648d0
    46a0:	400648c0 	.word	0x400648c0
    46a4:	0002152c 	.word	0x0002152c
    46a8:	00021530 	.word	0x00021530

000046ac <MHAL_AUD_DMASetBufAddr>:

void MHAL_AUD_DMASetBufAddr(U8 *pnBufAddr, U32 nBufSize)
{
    46ac:	b430      	push	{r4, r5}
  _gpDmaWrBuf = _gpDmaWrPtr = pBuf;
    46ae:	4a09      	ldr	r2, [pc, #36]	; (46d4 <MHAL_AUD_DMASetBufAddr+0x28>)
    46b0:	4b09      	ldr	r3, [pc, #36]	; (46d8 <MHAL_AUD_DMASetBufAddr+0x2c>)
  _gnDmaWrBufSize = nBufSize;
    46b2:	4d0a      	ldr	r5, [pc, #40]	; (46dc <MHAL_AUD_DMASetBufAddr+0x30>)
  _gpDmaWrBuf = _gpDmaWrPtr = pBuf;
    46b4:	6010      	str	r0, [r2, #0]
    46b6:	6018      	str	r0, [r3, #0]
  *pnReg = nValue;
    46b8:	4c09      	ldr	r4, [pc, #36]	; (46e0 <MHAL_AUD_DMASetBufAddr+0x34>)
    46ba:	4a0a      	ldr	r2, [pc, #40]	; (46e4 <MHAL_AUD_DMASetBufAddr+0x38>)
    46bc:	4b0a      	ldr	r3, [pc, #40]	; (46e8 <MHAL_AUD_DMASetBufAddr+0x3c>)
  _gnDmaWrBufSize = nBufSize;
    46be:	6029      	str	r1, [r5, #0]
  nMiuAddrLo = (nOffset / MIU_WORD_BYTE_SIZE) & REG_WR_BASE_ADDR_LO_MSK;
    46c0:	f3c0 150f 	ubfx	r5, r0, #4, #16
  nMiuSize = (nBufSize / MIU_WORD_BYTE_SIZE) & REG_WR_BUFF_SIZE_MSK;
    46c4:	f3c1 110f 	ubfx	r1, r1, #4, #16
  nMiuAddrHi = ((nOffset / MIU_WORD_BYTE_SIZE) >> REG_WR_BASE_ADDR_HI_OFFSET) & REG_WR_BASE_ADDR_HI_MSK;
    46c8:	0d00      	lsrs	r0, r0, #20
  *pnReg = nValue;
    46ca:	8025      	strh	r5, [r4, #0]
    46cc:	8010      	strh	r0, [r2, #0]
  //_TRACE((_CUS8 | LEVEL_4, "HalAudioDmaRecSetBufAddr: pnBufAddr:%x, nBufSize:%d", pnBufAddr, nBufSize));
  HaydnDmaSetWrMcuBuf(pnBufAddr, nBufSize);
  HaydnDmaSetWrMiuAddr((U32)pnBufAddr, nBufSize);
}
    46ce:	bc30      	pop	{r4, r5}
  *pnReg = nValue;
    46d0:	8019      	strh	r1, [r3, #0]
}
    46d2:	4770      	bx	lr
    46d4:	00021530 	.word	0x00021530
    46d8:	0002152c 	.word	0x0002152c
    46dc:	00021528 	.word	0x00021528
    46e0:	400648c4 	.word	0x400648c4
    46e4:	400648c8 	.word	0x400648c8
    46e8:	400648cc 	.word	0x400648cc

000046ec <MHAL_AUD_DMASetBufOverThr>:
  nMiuOverrunTh = (nOverrunTh / MIU_WORD_BYTE_SIZE) & REG_WR_OVERRUN_TH_MSK;
    46ec:	f3c0 100f 	ubfx	r0, r0, #4, #16
  nMiuOverrunTh += DMA_INTERNAL_FIFO_SIZE; //lvl count include local buffer size
    46f0:	3008      	adds	r0, #8
  *pnReg = nValue;
    46f2:	4b02      	ldr	r3, [pc, #8]	; (46fc <MHAL_AUD_DMASetBufOverThr+0x10>)
  nMiuOverrunTh += DMA_INTERNAL_FIFO_SIZE; //lvl count include local buffer size
    46f4:	b280      	uxth	r0, r0
  *pnReg = nValue;
    46f6:	8018      	strh	r0, [r3, #0]

void MHAL_AUD_DMASetBufOverThr(U32 nOverrun)
{
  //_TRACE((_CUS8 | LEVEL_4, "HalAudioDmaRecSetBufThreshold: nOverrun:%d, nUnderrun:%d", nOverrun, nUnderrun));
  HaydnDmaSetWrOverrunTh(nOverrun);
}
    46f8:	4770      	bx	lr
    46fa:	bf00      	nop
    46fc:	400648d4 	.word	0x400648d4

00004700 <MHAL_AUD_DMAGetBufLevel>:
  return (*pnReg);
    4700:	4a09      	ldr	r2, [pc, #36]	; (4728 <MHAL_AUD_DMAGetBufLevel+0x28>)
    4702:	490a      	ldr	r1, [pc, #40]	; (472c <MHAL_AUD_DMAGetBufLevel+0x2c>)
    4704:	8813      	ldrh	r3, [r2, #0]
  nConfigValue |= REG_WR_LEVEL_CNT_MASK;
    4706:	f043 0320 	orr.w	r3, r3, #32
  *pnReg = nValue;
    470a:	8013      	strh	r3, [r2, #0]
  return (*pnReg);
    470c:	8808      	ldrh	r0, [r1, #0]
    470e:	8813      	ldrh	r3, [r2, #0]
  nConfigValue = ((nConfigValue > DMA_INTERNAL_FIFO_SIZE) ? (nConfigValue - DMA_INTERNAL_FIFO_SIZE) : 0);
    4710:	2808      	cmp	r0, #8
    4712:	bf38      	it	cc
    4714:	2008      	movcc	r0, #8
  nConfigValue &= ~REG_WR_LEVEL_CNT_MASK;
    4716:	f023 0320 	bic.w	r3, r3, #32
  nConfigValue = ((nConfigValue > DMA_INTERNAL_FIFO_SIZE) ? (nConfigValue - DMA_INTERNAL_FIFO_SIZE) : 0);
    471a:	3808      	subs	r0, #8
  nConfigValue &= ~REG_WR_LEVEL_CNT_MASK;
    471c:	041b      	lsls	r3, r3, #16
    471e:	0c1b      	lsrs	r3, r3, #16
  nWrevelByteSize = nConfigValue * MIU_WORD_BYTE_SIZE;
    4720:	b280      	uxth	r0, r0

U32 MHAL_AUD_DMAGetBufLevel(void)
{
  //_TRACE((_CUS8 | LEVEL_4, "HalAudioDmaRecGetBufInfo: pnDataSize:%x, pbOverrun:%x, pbUnderrun:%x", pnDataSize, pbOverrun, pbUnderrun));
  return HaydnDmaWrLevelCnt();
}
    4722:	0100      	lsls	r0, r0, #4
  *pnReg = nValue;
    4724:	8013      	strh	r3, [r2, #0]
}
    4726:	4770      	bx	lr
    4728:	400648c0 	.word	0x400648c0
    472c:	400648e8 	.word	0x400648e8

00004730 <MHAL_AUD_DMAGetIntStatus>:
  return (*pnReg);
    4730:	4a04      	ldr	r2, [pc, #16]	; (4744 <MHAL_AUD_DMAGetIntStatus+0x14>)
    4732:	8813      	ldrh	r3, [r2, #0]
  if(nConfigValue & REG_WR_FULL_FLAG)
    4734:	f003 0301 	and.w	r3, r3, #1
    4738:	7003      	strb	r3, [r0, #0]
  return (*pnReg);
    473a:	8813      	ldrh	r3, [r2, #0]
  if(nConfigValue & REG_WR_OVERRUN_FLAG)
    473c:	f3c3 0340 	ubfx	r3, r3, #1, #1

void MHAL_AUD_DMAGetIntStatus(Bool *pbFull, Bool *pbOverrun)
{
  //_TRACE((_CUS8 | LEVEL_4, "HalAudioDmaRecGetBufInfo: pnDataSize:%x, pbOverrun:%x, pbUnderrun:%x", pnDataSize, pbOverrun, pbUnderrun));
  *pbFull = HaydnDmaWrIsFull();
  *pbOverrun  = HaydnDmaWrIsOverrun();
    4740:	700b      	strb	r3, [r1, #0]
}
    4742:	4770      	bx	lr
    4744:	400648ec 	.word	0x400648ec

00004748 <MHAL_AUD_DMAEnableInt>:
  return (*pnReg);
    4748:	4b0b      	ldr	r3, [pc, #44]	; (4778 <MHAL_AUD_DMAEnableInt+0x30>)
    474a:	881b      	ldrh	r3, [r3, #0]
    474c:	b29b      	uxth	r3, r3
  if(!bOverrun)
    474e:	b969      	cbnz	r1, 476c <MHAL_AUD_DMAEnableInt+0x24>
    nConfigValue |= REG_WR_OVERRUN_INT_EN;
    4750:	f043 0306 	orr.w	r3, r3, #6
  if(!bFull)
    4754:	b920      	cbnz	r0, 4760 <MHAL_AUD_DMAEnableInt+0x18>
  *pnReg = nValue;
    4756:	4a08      	ldr	r2, [pc, #32]	; (4778 <MHAL_AUD_DMAEnableInt+0x30>)
    nConfigValue |= REG_WR_FULL_INT_EN;
    4758:	f043 0301 	orr.w	r3, r3, #1
  *pnReg = nValue;
    475c:	8013      	strh	r3, [r2, #0]
void MHAL_AUD_DMAEnableInt(Bool bFull, Bool bOverrun)
{
  //_TRACE((_CUS8 | LEVEL_4, "HalAudioDmaRecCtrlInt: bFull:%d, bOverrun:%d, bUnderrun:%d", bFull, bOverrun, bUnderrun));
  Bool bLocalFull = FALSE;
  HaydnDmaCtrlWrInt(bLocalFull, bOverrun, bFull);
}
    475e:	4770      	bx	lr
    nConfigValue &= ~REG_WR_FULL_INT_EN;
    4760:	f023 0301 	bic.w	r3, r3, #1
  *pnReg = nValue;
    4764:	4a04      	ldr	r2, [pc, #16]	; (4778 <MHAL_AUD_DMAEnableInt+0x30>)
    nConfigValue &= ~REG_WR_FULL_INT_EN;
    4766:	b29b      	uxth	r3, r3
  *pnReg = nValue;
    4768:	8013      	strh	r3, [r2, #0]
}
    476a:	4770      	bx	lr
    nConfigValue &= ~REG_WR_OVERRUN_INT_EN;
    476c:	f023 0302 	bic.w	r3, r3, #2
    4770:	f043 0304 	orr.w	r3, r3, #4
    4774:	e7ee      	b.n	4754 <MHAL_AUD_DMAEnableInt+0xc>
    4776:	bf00      	nop
    4778:	400648e0 	.word	0x400648e0

0000477c <MHAL_AUD_DMAReadData>:

void MHAL_AUD_DMAReadData(U8 *pnDestAddr, U32 nDataSize, U32 *pnDataRead)
{
    477c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return (*pnReg);
    4780:	4d2b      	ldr	r5, [pc, #172]	; (4830 <MHAL_AUD_DMAReadData+0xb4>)
    4782:	4c2c      	ldr	r4, [pc, #176]	; (4834 <MHAL_AUD_DMAReadData+0xb8>)
    4784:	882b      	ldrh	r3, [r5, #0]
  nConfigValue |= REG_WR_LEVEL_CNT_MASK;
    4786:	f043 0320 	orr.w	r3, r3, #32
  *pnReg = nValue;
    478a:	802b      	strh	r3, [r5, #0]
  return (*pnReg);
    478c:	8823      	ldrh	r3, [r4, #0]
    478e:	882c      	ldrh	r4, [r5, #0]
  nConfigValue = ((nConfigValue > DMA_INTERNAL_FIFO_SIZE) ? (nConfigValue - DMA_INTERNAL_FIFO_SIZE) : 0);
    4790:	2b08      	cmp	r3, #8
    4792:	bf38      	it	cc
    4794:	2308      	movcc	r3, #8
  nConfigValue &= ~REG_WR_LEVEL_CNT_MASK;
    4796:	f024 0420 	bic.w	r4, r4, #32
  nConfigValue = ((nConfigValue > DMA_INTERNAL_FIFO_SIZE) ? (nConfigValue - DMA_INTERNAL_FIFO_SIZE) : 0);
    479a:	3b08      	subs	r3, #8
  nConfigValue &= ~REG_WR_LEVEL_CNT_MASK;
    479c:	0424      	lsls	r4, r4, #16
    479e:	0c24      	lsrs	r4, r4, #16
  nWrevelByteSize = nConfigValue * MIU_WORD_BYTE_SIZE;
    47a0:	b29b      	uxth	r3, r3
  *pnReg = nValue;
    47a2:	802c      	strh	r4, [r5, #0]
{
    47a4:	4616      	mov	r6, r2
  if(nBufDataSize == 0)
    47a6:	011c      	lsls	r4, r3, #4
    47a8:	b34b      	cbz	r3, 47fe <MHAL_AUD_DMAReadData+0x82>
  if((U32)_gpDmaWrPtr + nDataSize <= (U32)_gpDmaWrBuf + _gnDmaWrBufSize)
    47aa:	4d23      	ldr	r5, [pc, #140]	; (4838 <MHAL_AUD_DMAReadData+0xbc>)
    47ac:	f8df 9094 	ldr.w	r9, [pc, #148]	; 4844 <MHAL_AUD_DMAReadData+0xc8>
    47b0:	4a22      	ldr	r2, [pc, #136]	; (483c <MHAL_AUD_DMAReadData+0xc0>)
    47b2:	682f      	ldr	r7, [r5, #0]
    47b4:	f8d9 3000 	ldr.w	r3, [r9]
    47b8:	6815      	ldr	r5, [r2, #0]
    47ba:	428c      	cmp	r4, r1
    47bc:	bf28      	it	cs
    47be:	460c      	movcs	r4, r1
    47c0:	eb03 0a04 	add.w	sl, r3, r4
    47c4:	443d      	add	r5, r7
    47c6:	45aa      	cmp	sl, r5
    47c8:	d91c      	bls.n	4804 <MHAL_AUD_DMAReadData+0x88>
    nReadSize = (U32)_gpDmaWrBuf + _gnDmaWrBufSize - (U32)_gpDmaWrPtr;
    47ca:	eba5 0a03 	sub.w	sl, r5, r3
    nRemainSize = nDataSize - nReadSize;
    47ce:	1b5d      	subs	r5, r3, r5
    memcpy(pData, _gpDmaWrPtr, nReadSize);
    47d0:	4619      	mov	r1, r3
    47d2:	4652      	mov	r2, sl
    nRemainSize = nDataSize - nReadSize;
    47d4:	4425      	add	r5, r4
    memcpy(pData, _gpDmaWrPtr, nReadSize);
    47d6:	4680      	mov	r8, r0
    47d8:	f006 f9a1 	bl	ab1e <memcpy>
    _gpDmaWrPtr = _gpDmaWrBuf;
    47dc:	f8c9 7000 	str.w	r7, [r9]
  if(nRemainSize > 0)
    47e0:	b9dd      	cbnz	r5, 481a <MHAL_AUD_DMAReadData+0x9e>
  *pnReg = nValue;
    47e2:	4b17      	ldr	r3, [pc, #92]	; (4840 <MHAL_AUD_DMAReadData+0xc4>)
  return (*pnReg);
    47e4:	4a12      	ldr	r2, [pc, #72]	; (4830 <MHAL_AUD_DMAReadData+0xb4>)
  nConfigValue = (nDataSize / MIU_WORD_BYTE_SIZE) & REG_WR_SIZE_MSK;
    47e6:	f3c4 110f 	ubfx	r1, r4, #4, #16
  *pnReg = nValue;
    47ea:	8019      	strh	r1, [r3, #0]
  return (*pnReg);
    47ec:	8813      	ldrh	r3, [r2, #0]
    47ee:	b29b      	uxth	r3, r3
  nConfigValue |= REG_WR_TRIG;
    47f0:	f023 0110 	bic.w	r1, r3, #16
    47f4:	b289      	uxth	r1, r1
    47f6:	f043 0310 	orr.w	r3, r3, #16
  *pnReg = nValue;
    47fa:	8013      	strh	r3, [r2, #0]
    47fc:	8011      	strh	r1, [r2, #0]
  U32 nActualSize;
  //_TRACE((_CUS8 | LEVEL_4, "HalAudioDmaRecReadData: pnDestAddr:%x, nDataSize:%d, pnDataRead:%x", pnDestAddr, nDataSize, pnDataRead));
  //printf("HalAudioDmaRecReadData: pnDestAddr:%x, nDataSize:%d,
  //pnDataRead:%x\r\n", pnDestAddr, nDataSize, pnDataRead);
  nActualSize = HaydnDmaReadWrData(pnDestAddr, nDataSize);
  *pnDataRead = nActualSize;
    47fe:	6034      	str	r4, [r6, #0]
}
    4800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    memcpy(pData, _gpDmaWrPtr, nReadSize);
    4804:	4619      	mov	r1, r3
    4806:	4622      	mov	r2, r4
    _gpDmaWrPtr += nReadSize;
    4808:	45aa      	cmp	sl, r5
    480a:	bf14      	ite	ne
    480c:	4655      	movne	r5, sl
    480e:	463d      	moveq	r5, r7
    memcpy(pData, _gpDmaWrPtr, nReadSize);
    4810:	f006 f985 	bl	ab1e <memcpy>
    _gpDmaWrPtr += nReadSize;
    4814:	f8c9 5000 	str.w	r5, [r9]
    4818:	e7e3      	b.n	47e2 <MHAL_AUD_DMAReadData+0x66>
    memcpy(pData + nReadSize, _gpDmaWrPtr, nRemainSize);
    481a:	462a      	mov	r2, r5
    481c:	eb08 000a 	add.w	r0, r8, sl
    4820:	4639      	mov	r1, r7
    _gpDmaWrPtr += nRemainSize;
    4822:	443d      	add	r5, r7
    memcpy(pData + nReadSize, _gpDmaWrPtr, nRemainSize);
    4824:	f006 f97b 	bl	ab1e <memcpy>
    _gpDmaWrPtr += nRemainSize;
    4828:	f8c9 5000 	str.w	r5, [r9]
    482c:	e7d9      	b.n	47e2 <MHAL_AUD_DMAReadData+0x66>
    482e:	bf00      	nop
    4830:	400648c0 	.word	0x400648c0
    4834:	400648e8 	.word	0x400648e8
    4838:	0002152c 	.word	0x0002152c
    483c:	00021528 	.word	0x00021528
    4840:	400648d0 	.word	0x400648d0
    4844:	00021530 	.word	0x00021530

00004848 <MHAL_AUD_DMAStart>:
  return (*pnReg);
    4848:	4a08      	ldr	r2, [pc, #32]	; (486c <MHAL_AUD_DMAStart+0x24>)
void MHAL_AUD_DMAStart(void)
{
  //_TRACE((_CUS8 | LEVEL_4, "HalAudioDmaRecStart"));
  HaydnDmaIntClear(BACH_INT_CLR_WR_FULL);
  HaydnDmaEnableWr(True);
  gbDmaWrEnable = True;
    484a:	4809      	ldr	r0, [pc, #36]	; (4870 <MHAL_AUD_DMAStart+0x28>)
  return (*pnReg);
    484c:	8813      	ldrh	r3, [r2, #0]
    484e:	b29b      	uxth	r3, r3
      nConfigValue |= REG_WR_FULL_FLAG_CLR;
    4850:	f023 0180 	bic.w	r1, r3, #128	; 0x80
    4854:	b289      	uxth	r1, r1
    4856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  *pnReg = nValue;
    485a:	8013      	strh	r3, [r2, #0]
    485c:	8011      	strh	r1, [r2, #0]
  return (*pnReg);
    485e:	8813      	ldrh	r3, [r2, #0]
  gbDmaWrEnable = True;
    4860:	2101      	movs	r1, #1
    nConfigValue |= REG_WR_ENABLE;
    4862:	f043 0302 	orr.w	r3, r3, #2
  *pnReg = nValue;
    4866:	8013      	strh	r3, [r2, #0]
  gbDmaWrEnable = True;
    4868:	7001      	strb	r1, [r0, #0]
}
    486a:	4770      	bx	lr
    486c:	400648c0 	.word	0x400648c0
    4870:	00021534 	.word	0x00021534

00004874 <MHAL_AUD_DMAStop>:
  return (*pnReg);
    4874:	4a05      	ldr	r2, [pc, #20]	; (488c <MHAL_AUD_DMAStop+0x18>)

void MHAL_AUD_DMAStop(void)
{
  //_TRACE((_CUS8 | LEVEL_4, "HalAudioDmaRecStop"));
  HaydnDmaEnableWr(False);
  gbDmaWrEnable = False;
    4876:	4906      	ldr	r1, [pc, #24]	; (4890 <MHAL_AUD_DMAStop+0x1c>)
  return (*pnReg);
    4878:	8813      	ldrh	r3, [r2, #0]
    nConfigValue &= ~REG_WR_ENABLE;
    487a:	f023 0302 	bic.w	r3, r3, #2
    487e:	041b      	lsls	r3, r3, #16
    4880:	0c1b      	lsrs	r3, r3, #16
  gbDmaWrEnable = False;
    4882:	2000      	movs	r0, #0
  *pnReg = nValue;
    4884:	8013      	strh	r3, [r2, #0]
  gbDmaWrEnable = False;
    4886:	7008      	strb	r0, [r1, #0]
}
    4888:	4770      	bx	lr
    488a:	bf00      	nop
    488c:	400648c0 	.word	0x400648c0
    4890:	00021534 	.word	0x00021534

00004894 <MHAL_AUD_DMAIsRunning>:
  HaydnDmaEnableWr(True);
}

Bool MHAL_AUD_DMAIsRunning(void)
{
  return gbDmaWrEnable;
    4894:	4b01      	ldr	r3, [pc, #4]	; (489c <MHAL_AUD_DMAIsRunning+0x8>)
}
    4896:	7818      	ldrb	r0, [r3, #0]
    4898:	4770      	bx	lr
    489a:	bf00      	nop
    489c:	00021534 	.word	0x00021534

000048a0 <MHAL_AUD_DMAClearInt>:
  return (*pnReg);
    48a0:	4a05      	ldr	r2, [pc, #20]	; (48b8 <MHAL_AUD_DMAClearInt+0x18>)
    48a2:	8813      	ldrh	r3, [r2, #0]
    48a4:	b29b      	uxth	r3, r3
      nConfigValue |= REG_WR_FULL_FLAG_CLR;
    48a6:	f023 0180 	bic.w	r1, r3, #128	; 0x80
    48aa:	b289      	uxth	r1, r1
    48ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  *pnReg = nValue;
    48b0:	8013      	strh	r3, [r2, #0]
    48b2:	8011      	strh	r1, [r2, #0]

void MHAL_AUD_DMAClearInt(void)
{
  HaydnDmaIntClear(BACH_INT_CLR_WR_FULL);
}
    48b4:	4770      	bx	lr
    48b6:	bf00      	nop
    48b8:	400648c0 	.word	0x400648c0

000048bc <MHAL_AUD_DMASetWidth>:
}

void MHAL_AUD_DMASetWidth(AudDmaWidth_e eWidth)
{
  U16 nSel;
  switch(eWidth)
    48bc:	b118      	cbz	r0, 48c6 <MHAL_AUD_DMASetWidth+0xa>
    48be:	2802      	cmp	r0, #2
    48c0:	d808      	bhi.n	48d4 <MHAL_AUD_DMASetWidth+0x18>
    48c2:	f44f 7000 	mov.w	r0, #512	; 0x200
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    48c6:	4a04      	ldr	r2, [pc, #16]	; (48d8 <MHAL_AUD_DMASetWidth+0x1c>)
    48c8:	8813      	ldrh	r3, [r2, #0]
    48ca:	b29b      	uxth	r3, r3
    48cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    48d0:	4318      	orrs	r0, r3
    48d2:	8010      	strh	r0, [r2, #0]
      default:
          return;
  }

  _HaydnInsertReg16(0x32460, REG_WR_BIT_MODE, (nSel?REG_WR_BIT_MODE:0));
}
    48d4:	4770      	bx	lr
    48d6:	bf00      	nop
    48d8:	400648c0 	.word	0x400648c0

000048dc <MHAL_AUD_DMASetChn>:
  return (*pnReg);
    48dc:	4a06      	ldr	r2, [pc, #24]	; (48f8 <MHAL_AUD_DMASetChn+0x1c>)
    48de:	8813      	ldrh	r3, [r2, #0]
    48e0:	2803      	cmp	r0, #3
    48e2:	b29b      	uxth	r3, r3
  U16 nChn = 0;
  U16 nConfigValue = 0;

  nConfigValue = _HaydnReadReg(0x032480);

  switch(eChn)
    48e4:	d806      	bhi.n	48f4 <MHAL_AUD_DMASetChn+0x18>
    default:
      return;
  }

  nConfigValue &= ~(0x7);
  nConfigValue |= nChn;
    48e6:	4905      	ldr	r1, [pc, #20]	; (48fc <MHAL_AUD_DMASetChn+0x20>)
    48e8:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
  nConfigValue &= ~(0x7);
    48ec:	f023 0307 	bic.w	r3, r3, #7
  nConfigValue |= nChn;
    48f0:	430b      	orrs	r3, r1
  *pnReg = nValue;
    48f2:	8013      	strh	r3, [r2, #0]
  _HaydnWriteReg(0x032480, nConfigValue);
  //_HaydnWriteReg(0x032480, 0x0080); //[2:0] 0:2ch, 1:4ch, 2:6ch, 3:8ch
}
    48f4:	4770      	bx	lr
    48f6:	bf00      	nop
    48f8:	40064900 	.word	0x40064900
    48fc:	0000bac0 	.word	0x0000bac0

00004900 <MHAL_AUD_DMASetModeExt>:
  *pnReg = nValue;
    4900:	4b01      	ldr	r3, [pc, #4]	; (4908 <MHAL_AUD_DMASetModeExt+0x8>)
    4902:	8018      	strh	r0, [r3, #0]
}

void MHAL_AUD_DMASetModeExt(U16 val)
{
  _HaydnWriteReg(0x03240A, val);
}
    4904:	4770      	bx	lr
    4906:	bf00      	nop
    4908:	40064814 	.word	0x40064814

0000490c <MHAL_AUD_DMAEnableSigGen>:
  *pnReg = nValue;
    490c:	4b03      	ldr	r3, [pc, #12]	; (491c <MHAL_AUD_DMAEnableSigGen+0x10>)


void MHAL_AUD_DMAEnableSigGen(Bool bEn)
{
  if (bEn)
    490e:	b118      	cbz	r0, 4918 <MHAL_AUD_DMAEnableSigGen+0xc>
  *pnReg = nValue;
    4910:	f242 0221 	movw	r2, #8225	; 0x2021
    4914:	801a      	strh	r2, [r3, #0]
    4916:	4770      	bx	lr
    4918:	8018      	strh	r0, [r3, #0]
    _HaydnWriteReg(0x032406, 0); //[15:12] SIN_FREQ_SEL
  //[11:8]  SIN_GAIN
  //[5:4]   SIN_PATH_SEL     //0:normal, 1:fifo in, 2:hpf in, 3:reserved
  //[2:1]   SIN_PATH_SEL_LR  //0:LR, 1:L, 2:R, 3:reserved
  //[0]     SIN_ENABLE
}
    491a:	4770      	bx	lr
    491c:	4006480c 	.word	0x4006480c

00004920 <MHAL_AUD_DMAEnableAEC>:
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    4920:	4a07      	ldr	r2, [pc, #28]	; (4940 <MHAL_AUD_DMAEnableAEC+0x20>)
    4922:	8813      	ldrh	r3, [r2, #0]

void MHAL_AUD_DMAEnableAEC(Bool bEn)
{
  if (bEn)
    4924:	b130      	cbz	r0, 4934 <MHAL_AUD_DMAEnableAEC+0x14>
  INSREG16(GET_REG8_ADDR(MCU_RIU_BASE_ADDR, nAddr), nMask, nVal);
    4926:	b29b      	uxth	r3, r3
    4928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    492c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4930:	8013      	strh	r3, [r2, #0]
    4932:	4770      	bx	lr
    4934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    4938:	041b      	lsls	r3, r3, #16
    493a:	0c1b      	lsrs	r3, r3, #16
    493c:	8013      	strh	r3, [r2, #0]
    _HaydnInsertReg16(0x032404, 0x3<<8, 0x1<<8);
  else
    _HaydnInsertReg16(0x032404, 0x3<<8, 0x0<<8);
}
    493e:	4770      	bx	lr
    4940:	40064808 	.word	0x40064808

00004944 <MHAL_AUD_DMicSelPhase>:
[15] auto mode
[13:8] phase for ch2
[5:0] phase for ch1
*/
void MHAL_AUD_DMicSelPhase(U16 u16Sel)
{
    4944:	b410      	push	{r4}
  *pnReg = nValue;
    4946:	4905      	ldr	r1, [pc, #20]	; (495c <MHAL_AUD_DMicSelPhase+0x18>)
    4948:	4c05      	ldr	r4, [pc, #20]	; (4960 <MHAL_AUD_DMicSelPhase+0x1c>)
    494a:	4a06      	ldr	r2, [pc, #24]	; (4964 <MHAL_AUD_DMicSelPhase+0x20>)
    494c:	4b06      	ldr	r3, [pc, #24]	; (4968 <MHAL_AUD_DMicSelPhase+0x24>)
    494e:	8020      	strh	r0, [r4, #0]
    4950:	8008      	strh	r0, [r1, #0]
  _HaydnWriteReg(0x032424, u16Sel); //sel
  _HaydnWriteReg(0x032428, u16Sel); //sel
  _HaydnWriteReg(0x03242C, u16Sel); //sel
  _HaydnWriteReg(0x032430, u16Sel); //sel
}
    4952:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pnReg = nValue;
    4956:	8010      	strh	r0, [r2, #0]
    4958:	8018      	strh	r0, [r3, #0]
}
    495a:	4770      	bx	lr
    495c:	40064850 	.word	0x40064850
    4960:	40064848 	.word	0x40064848
    4964:	40064858 	.word	0x40064858
    4968:	40064860 	.word	0x40064860

0000496c <MHAL_AUD_Init>:
  return (*pnReg);
    496c:	4a1d      	ldr	r2, [pc, #116]	; (49e4 <MHAL_AUD_Init+0x78>)
  *pnReg = nValue;
    496e:	491e      	ldr	r1, [pc, #120]	; (49e8 <MHAL_AUD_Init+0x7c>)
  return (*pnReg);
    4970:	8813      	ldrh	r3, [r2, #0]
  *pnReg = nValue;
    4972:	481e      	ldr	r0, [pc, #120]	; (49ec <MHAL_AUD_Init+0x80>)

void MHAL_AUD_Init(void)
{
    4974:	b4f0      	push	{r4, r5, r6, r7}

  _HaydnWriteReg(0x032D02, 0x8000); //[15] bck from vrec
  _HaydnWriteReg(0x032D14, 0x0001); //[0] sel data to iir
  _HaydnWriteReg(0x03228C, 0x0001); //[1:0] sel data to vad
*/
  _HaydnWriteReg(0x000ed8, _HaydnReadReg(0x000ed8) | 0x0001); //pad mux
    4976:	f043 0301 	orr.w	r3, r3, #1
  *pnReg = nValue;
    497a:	4d1d      	ldr	r5, [pc, #116]	; (49f0 <MHAL_AUD_Init+0x84>)
    497c:	8013      	strh	r3, [r2, #0]
    497e:	4c1d      	ldr	r4, [pc, #116]	; (49f4 <MHAL_AUD_Init+0x88>)
    4980:	4f1d      	ldr	r7, [pc, #116]	; (49f8 <MHAL_AUD_Init+0x8c>)
    4982:	4e1e      	ldr	r6, [pc, #120]	; (49fc <MHAL_AUD_Init+0x90>)
    4984:	230b      	movs	r3, #11
    4986:	802b      	strh	r3, [r5, #0]
    4988:	2231      	movs	r2, #49	; 0x31
    498a:	2301      	movs	r3, #1
    498c:	8023      	strh	r3, [r4, #0]
    498e:	800a      	strh	r2, [r1, #0]
    4990:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    4994:	8002      	strh	r2, [r0, #0]
    4996:	2200      	movs	r2, #0
    4998:	8002      	strh	r2, [r0, #0]
    499a:	803b      	strh	r3, [r7, #0]
    499c:	8032      	strh	r2, [r6, #0]
    499e:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
    49a2:	f640 1104 	movw	r1, #2308	; 0x904
    49a6:	f824 1c38 	strh.w	r1, [r4, #-56]
    49aa:	87ab      	strh	r3, [r5, #60]	; 0x3c
    49ac:	f824 1c30 	strh.w	r1, [r4, #-48]
    49b0:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
    49b4:	f824 1c28 	strh.w	r1, [r4, #-40]
    49b8:	f8a5 304c 	strh.w	r3, [r5, #76]	; 0x4c
    49bc:	4b10      	ldr	r3, [pc, #64]	; (4a00 <MHAL_AUD_Init+0x94>)
    49be:	f824 1c20 	strh.w	r1, [r4, #-32]
  return (*pnReg);
    49c2:	4910      	ldr	r1, [pc, #64]	; (4a04 <MHAL_AUD_Init+0x98>)
  *pnReg = nValue;
    49c4:	862a      	strh	r2, [r5, #48]	; 0x30
    49c6:	f240 141f 	movw	r4, #287	; 0x11f
    49ca:	8004      	strh	r4, [r0, #0]
    49cc:	801a      	strh	r2, [r3, #0]
  return (*pnReg);
    49ce:	880b      	ldrh	r3, [r1, #0]
    49d0:	b29b      	uxth	r3, r3
      nConfigValue |= REG_WR_FULL_FLAG_CLR;
    49d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    49d6:	b292      	uxth	r2, r2
    49d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  *pnReg = nValue;
    49dc:	800b      	strh	r3, [r1, #0]
  //[2:1]   SIN_PATH_SEL_LR  //0:LR, 1:L, 2:R, 3:reserved
  //[0]     SIN_ENABLE

  HaydnDmaIntClear(BACH_INT_CLR_WR_FULL);

}
    49de:	bcf0      	pop	{r4, r5, r6, r7}
  *pnReg = nValue;
    49e0:	800a      	strh	r2, [r1, #0]
}
    49e2:	4770      	bx	lr
    49e4:	40001db0 	.word	0x40001db0
    49e8:	40064804 	.word	0x40064804
    49ec:	40064818 	.word	0x40064818
    49f0:	40064810 	.word	0x40064810
    49f4:	40064880 	.word	0x40064880
    49f8:	40064808 	.word	0x40064808
    49fc:	40064900 	.word	0x40064900
    4a00:	4006480c 	.word	0x4006480c
    4a04:	400648c0 	.word	0x400648c0

00004a08 <uart_id>:
#if ( UART_BASE == REG_ADDR_BASE_UART1 )
  return 1;
#else
  return 0;
#endif
}
    4a08:	2000      	movs	r0, #0
    4a0a:	4770      	bx	lr

00004a0c <uart_init>:
//    u16Val = INREG16(REG_PM_UART_PAD);
//    u16Val &= ~(7<<6);
//    OUTREG16(REG_PM_UART_PAD, (u16Val |(0x1<<6)));

    // Enable uart clock
    u16Val = INREG16(REG_PM_UART_CLK);
    4a0c:	4a20      	ldr	r2, [pc, #128]	; (4a90 <uart_init+0x84>)

    // Disable all interrupts
    UART_REG8(UART_IER) = 0x00;

    // Set "reg_mcr_loopback";
    UART_REG8(UART_MCR) |= 0x10;
    4a0e:	4821      	ldr	r0, [pc, #132]	; (4a94 <uart_init+0x88>)
    u16Val = INREG16(REG_PM_UART_CLK);
    4a10:	8813      	ldrh	r3, [r2, #0]
    4a12:	b29b      	uxth	r3, r3
    u16Val &= ~(0x1f<<8);
    4a14:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    OUTREG16(REG_PM_UART_CLK, (u16Val | (0x14<<8)));
    4a18:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
    4a1c:	8013      	strh	r3, [r2, #0]
    UART_REG8(UART_RST) &= ~0x01;
    4a1e:	4b1e      	ldr	r3, [pc, #120]	; (4a98 <uart_init+0x8c>)
    4a20:	781a      	ldrb	r2, [r3, #0]
    4a22:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    4a26:	701a      	strb	r2, [r3, #0]
    UART_REG8(UART_RST) |= 0x01;
    4a28:	781a      	ldrb	r2, [r3, #0]
    4a2a:	f042 0201 	orr.w	r2, r2, #1
    4a2e:	701a      	strb	r2, [r3, #0]
    UART_REG8(UART_IER) = 0x00;
    4a30:	4a1a      	ldr	r2, [pc, #104]	; (4a9c <uart_init+0x90>)
    4a32:	2300      	movs	r3, #0
    4a34:	7013      	strb	r3, [r2, #0]
    UART_REG8(UART_MCR) |= 0x10;
    4a36:	7801      	ldrb	r1, [r0, #0]
    4a38:	f041 0110 	orr.w	r1, r1, #16
    4a3c:	7001      	strb	r1, [r0, #0]

    // Poll "reg_usr_busy" till 0; (10 times)
    while(UART_REG8(UART_USR) & 0x01 && count++ < 10)
    4a3e:	4918      	ldr	r1, [pc, #96]	; (4aa0 <uart_init+0x94>)
    4a40:	7808      	ldrb	r0, [r1, #0]
    4a42:	07c0      	lsls	r0, r0, #31
    4a44:	d512      	bpl.n	4a6c <uart_init+0x60>
    4a46:	3301      	adds	r3, #1
    4a48:	b2db      	uxtb	r3, r3
    4a4a:	2b0b      	cmp	r3, #11
    4a4c:	d1f8      	bne.n	4a40 <uart_init+0x34>
    }
    else // Set divisor
    {
        //U16 DLR = ((UART_CLK+(8*UART_BAUDRATE)) / (16 * UART_BAUDRATE));
        U16 DLR = (UART_CLK / (16 * UART_BAUDRATE));
        UART_REG8(UART_LCR) |= UART_LCR_DLAB;
    4a4e:	4b15      	ldr	r3, [pc, #84]	; (4aa4 <uart_init+0x98>)
    4a50:	7819      	ldrb	r1, [r3, #0]
    4a52:	f041 0180 	orr.w	r1, r1, #128	; 0x80
    4a56:	7019      	strb	r1, [r3, #0]
        UART_REG8(UART_DLL) = DLR & 0xFF;
    4a58:	4913      	ldr	r1, [pc, #76]	; (4aa8 <uart_init+0x9c>)
    4a5a:	200d      	movs	r0, #13
    4a5c:	7008      	strb	r0, [r1, #0]
        UART_REG8(UART_DLM) = (DLR >> 8) & 0xFF;
    4a5e:	2100      	movs	r1, #0
    4a60:	7011      	strb	r1, [r2, #0]
        UART_REG8(UART_LCR) &= ~(UART_LCR_DLAB);
    4a62:	781a      	ldrb	r2, [r3, #0]
    4a64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4a68:	701a      	strb	r2, [r3, #0]
    4a6a:	e005      	b.n	4a78 <uart_init+0x6c>
    if(count == 10)
    4a6c:	2b0a      	cmp	r3, #10
    4a6e:	d1ee      	bne.n	4a4e <uart_init+0x42>
        SetDebugFlag(FLAG_INIT_UART_BUSY); /* 0x0BF1 */
    4a70:	4b0e      	ldr	r3, [pc, #56]	; (4aac <uart_init+0xa0>)
    4a72:	f640 32f1 	movw	r2, #3057	; 0xbf1
    4a76:	601a      	str	r2, [r3, #0]
    }

    // Set 8 bit char, 1 stop bit, no parity
    UART_REG8(UART_LCR) = UART_LCR_WLEN8 & ~(UART_LCR_STOP2 | UART_LCR_PARITY);
    4a78:	4b0a      	ldr	r3, [pc, #40]	; (4aa4 <uart_init+0x98>)
    4a7a:	2203      	movs	r2, #3
    4a7c:	701a      	strb	r2, [r3, #0]

    // Unset loopback
    UART_REG8(UART_MCR) &= ~0x10;
    4a7e:	4a05      	ldr	r2, [pc, #20]	; (4a94 <uart_init+0x88>)
    4a80:	7813      	ldrb	r3, [r2, #0]
    4a82:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    4a86:	7013      	strb	r3, [r2, #0]

    // Enable TX/RX fifo
    UART_REG8(UART_FCR) = UART_FCR_ENABLE_FIFO | UART_FCR_CLEAR_RCVR | UART_FCR_CLEAR_XMIT;
    4a88:	4b09      	ldr	r3, [pc, #36]	; (4ab0 <uart_init+0xa4>)
    4a8a:	2207      	movs	r2, #7
    4a8c:	701a      	strb	r2, [r3, #0]
    UART_REG8(UART_LCR) &= ~(UART_LCR_DLAB);
    UART_REG8(UART_LCR) = UART_LCR_WLEN8 & ~(UART_LCR_STOP2 | UART_LCR_PARITY);
    UART_REG8(UART_MCR) = UART_MCR_AFCE | UART_MCR_RTS;
    UART_REG8(UART_FCR) = UART_FCR_ENABLE_FIFO | UART_FCR_CLEAR_RCVR | UART_FCR_CLEAR_XMIT;
#endif
}
    4a8e:	4770      	bx	lr
    4a90:	40001dc4 	.word	0x40001dc4
    4a94:	40001820 	.word	0x40001820
    4a98:	40001870 	.word	0x40001870
    4a9c:	40001808 	.word	0x40001808
    4aa0:	40001838 	.word	0x40001838
    4aa4:	40001818 	.word	0x40001818
    4aa8:	40001800 	.word	0x40001800
    4aac:	40206700 	.word	0x40206700
    4ab0:	40001810 	.word	0x40001810

00004ab4 <uart_int_enable>:
#endif

void uart_int_enable(void)
{
    // Enable all interrupts
  UART_REG8(UART_IER) = UART_IER_RDI | UART_IER_RLSI | UART_IER_MSI;
    4ab4:	4b01      	ldr	r3, [pc, #4]	; (4abc <uart_int_enable+0x8>)
    4ab6:	220d      	movs	r2, #13
    4ab8:	701a      	strb	r2, [r3, #0]
}
    4aba:	4770      	bx	lr
    4abc:	40001808 	.word	0x40001808

00004ac0 <uart_int_source>:

U8 uart_int_source(void)
{
	return UART_REG8(UART_IIR) & UART_IIR_ID_MASK;
    4ac0:	4b02      	ldr	r3, [pc, #8]	; (4acc <uart_int_source+0xc>)
    4ac2:	7818      	ldrb	r0, [r3, #0]
}
    4ac4:	f000 000f 	and.w	r0, r0, #15
    4ac8:	4770      	bx	lr
    4aca:	bf00      	nop
    4acc:	40001810 	.word	0x40001810

00004ad0 <uart_clear_msr>:

void uart_clear_msr(void)
{
	U8 nSource=0;
  nSource = UART_REG8(UART_MSR);
    4ad0:	4b01      	ldr	r3, [pc, #4]	; (4ad8 <uart_clear_msr+0x8>)
    4ad2:	781b      	ldrb	r3, [r3, #0]

  (void)nSource;
}
    4ad4:	4770      	bx	lr
    4ad6:	bf00      	nop
    4ad8:	40001830 	.word	0x40001830

00004adc <uart_clear_lsr>:

void uart_clear_lsr(void)
{
	U8 nSource=0;
  nSource = UART_REG8(UART_LSR);
    4adc:	4b01      	ldr	r3, [pc, #4]	; (4ae4 <uart_clear_lsr+0x8>)
    4ade:	781b      	ldrb	r3, [r3, #0]
  (void)nSource;
}
    4ae0:	4770      	bx	lr
    4ae2:	bf00      	nop
    4ae4:	40001828 	.word	0x40001828

00004ae8 <uart_read_byte>:

U8 uart_read_byte(void)
{
  while (!(UART_REG8(UART_LSR) & UART_LSR_DR));
    4ae8:	4a03      	ldr	r2, [pc, #12]	; (4af8 <uart_read_byte+0x10>)
    4aea:	7813      	ldrb	r3, [r2, #0]
    4aec:	07db      	lsls	r3, r3, #31
    4aee:	d5fc      	bpl.n	4aea <uart_read_byte+0x2>
  return UART_REG8(UART_RX);
    4af0:	4b02      	ldr	r3, [pc, #8]	; (4afc <uart_read_byte+0x14>)
    4af2:	7818      	ldrb	r0, [r3, #0]
}
    4af4:	4770      	bx	lr
    4af6:	bf00      	nop
    4af8:	40001828 	.word	0x40001828
    4afc:	40001800 	.word	0x40001800

00004b00 <uart_write_byte>:
    // uart_start_putk(c);
// }

void uart_write_byte(U8 c)
{
    while (!(UART_REG8(UART_LSR) & UART_LSR_THRE));
    4b00:	4a03      	ldr	r2, [pc, #12]	; (4b10 <uart_write_byte+0x10>)
    4b02:	7813      	ldrb	r3, [r2, #0]
    4b04:	069b      	lsls	r3, r3, #26
    4b06:	d5fc      	bpl.n	4b02 <uart_write_byte+0x2>

    UART_REG8(UART_TX) = c;
    4b08:	4b02      	ldr	r3, [pc, #8]	; (4b14 <uart_write_byte+0x14>)
    4b0a:	7018      	strb	r0, [r3, #0]
}
    4b0c:	4770      	bx	lr
    4b0e:	bf00      	nop
    4b10:	40001828 	.word	0x40001828
    4b14:	40001800 	.word	0x40001800

00004b18 <MHAL_MBX_Init>:
/// @return E_MBX_SUCCESS: success
/// @attention
/// <b>[MXLIB] <em> </em></b>
//-------------------------------------------------------------------------------------------------
MBX_Result MHAL_MBX_Init(MBX_ROLE_ID eHostRole)
{
    4b18:	b4f0      	push	{r4, r5, r6, r7}
MBX_Result MHAL_MBX_SetConfig(MBX_ROLE_ID eHostRole)
{
    S32 s32MailIdx;

    /* clear host mail box register. */
    if(E_MBX_ROLE_HK == eHostRole) //It is HouseKeeping
    4b1a:	b9b8      	cbnz	r0, 4b4c <MHAL_MBX_Init+0x34>
    {
        for(s32MailIdx=0; s32MailIdx<16; s32MailIdx++)
        {
            REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[E_MBX_ROLE_HK][E_MBX_ROLE_CP], s32MailIdx) = 0x00;
    4b1c:	4b2f      	ldr	r3, [pc, #188]	; (4bdc <MHAL_MBX_Init+0xc4>)
    4b1e:	4d30      	ldr	r5, [pc, #192]	; (4be0 <MHAL_MBX_Init+0xc8>)
    4b20:	4c30      	ldr	r4, [pc, #192]	; (4be4 <MHAL_MBX_Init+0xcc>)
    4b22:	4931      	ldr	r1, [pc, #196]	; (4be8 <MHAL_MBX_Init+0xd0>)
    4b24:	4a31      	ldr	r2, [pc, #196]	; (4bec <MHAL_MBX_Init+0xd4>)
    4b26:	7018      	strb	r0, [r3, #0]
    4b28:	7028      	strb	r0, [r5, #0]
    4b2a:	7020      	strb	r0, [r4, #0]
    4b2c:	7008      	strb	r0, [r1, #0]
    4b2e:	7010      	strb	r0, [r2, #0]
    4b30:	7258      	strb	r0, [r3, #9]
    4b32:	72e8      	strb	r0, [r5, #11]
    4b34:	7260      	strb	r0, [r4, #9]
    4b36:	72c8      	strb	r0, [r1, #11]
    4b38:	7250      	strb	r0, [r2, #9]
    4b3a:	7518      	strb	r0, [r3, #20]
    4b3c:	7528      	strb	r0, [r5, #20]
    4b3e:	7520      	strb	r0, [r4, #20]
    4b40:	7508      	strb	r0, [r1, #20]
    4b42:	7510      	strb	r0, [r2, #20]
    4b44:	7758      	strb	r0, [r3, #29]
}
    4b46:	bcf0      	pop	{r4, r5, r6, r7}
    4b48:	2000      	movs	r0, #0
    4b4a:	4770      	bx	lr
    }
    else
    {
        for(s32MailIdx=0; s32MailIdx<16; s32MailIdx++)
        {
            REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[eHostRole][E_MBX_ROLE_HK], s32MailIdx) = 0x00;
    4b4c:	4b28      	ldr	r3, [pc, #160]	; (4bf0 <MHAL_MBX_Init+0xd8>)
    4b4e:	4929      	ldr	r1, [pc, #164]	; (4bf4 <MHAL_MBX_Init+0xdc>)
    4b50:	f833 3020 	ldrh.w	r3, [r3, r0, lsl #2]
    4b54:	4419      	add	r1, r3
    4b56:	004b      	lsls	r3, r1, #1
    4b58:	1c5d      	adds	r5, r3, #1
    4b5a:	1c9c      	adds	r4, r3, #2
    4b5c:	1cd8      	adds	r0, r3, #3
    4b5e:	0089      	lsls	r1, r1, #2
    4b60:	006d      	lsls	r5, r5, #1
    4b62:	0064      	lsls	r4, r4, #1
    4b64:	0040      	lsls	r0, r0, #1
    4b66:	2200      	movs	r2, #0
    4b68:	700a      	strb	r2, [r1, #0]
    4b6a:	1d1f      	adds	r7, r3, #4
    4b6c:	f805 2c01 	strb.w	r2, [r5, #-1]
    4b70:	1d5e      	adds	r6, r3, #5
    4b72:	7022      	strb	r2, [r4, #0]
    4b74:	1d9d      	adds	r5, r3, #6
    4b76:	f800 2c01 	strb.w	r2, [r0, #-1]
    4b7a:	1ddc      	adds	r4, r3, #7
    4b7c:	f103 0008 	add.w	r0, r3, #8
    4b80:	f103 0109 	add.w	r1, r3, #9
    4b84:	007f      	lsls	r7, r7, #1
    4b86:	0076      	lsls	r6, r6, #1
    4b88:	006d      	lsls	r5, r5, #1
    4b8a:	0064      	lsls	r4, r4, #1
    4b8c:	0040      	lsls	r0, r0, #1
    4b8e:	0049      	lsls	r1, r1, #1
    4b90:	703a      	strb	r2, [r7, #0]
    4b92:	f806 2c01 	strb.w	r2, [r6, #-1]
    4b96:	702a      	strb	r2, [r5, #0]
    4b98:	f103 060a 	add.w	r6, r3, #10
    4b9c:	f804 2c01 	strb.w	r2, [r4, #-1]
    4ba0:	f103 050b 	add.w	r5, r3, #11
    4ba4:	7002      	strb	r2, [r0, #0]
    4ba6:	f103 040c 	add.w	r4, r3, #12
    4baa:	f801 2c01 	strb.w	r2, [r1, #-1]
    4bae:	f103 000d 	add.w	r0, r3, #13
    4bb2:	f103 010e 	add.w	r1, r3, #14
    4bb6:	330f      	adds	r3, #15
    4bb8:	0076      	lsls	r6, r6, #1
    4bba:	006d      	lsls	r5, r5, #1
    4bbc:	0064      	lsls	r4, r4, #1
    4bbe:	0040      	lsls	r0, r0, #1
    4bc0:	0049      	lsls	r1, r1, #1
    4bc2:	005b      	lsls	r3, r3, #1
    4bc4:	7032      	strb	r2, [r6, #0]
    4bc6:	f805 2c01 	strb.w	r2, [r5, #-1]
    4bca:	7022      	strb	r2, [r4, #0]
    4bcc:	f800 2c01 	strb.w	r2, [r0, #-1]
    4bd0:	700a      	strb	r2, [r1, #0]
    4bd2:	f803 2c01 	strb.w	r2, [r3, #-1]
}
    4bd6:	2000      	movs	r0, #0
    4bd8:	bcf0      	pop	{r4, r5, r6, r7}
    4bda:	4770      	bx	lr
    4bdc:	40206700 	.word	0x40206700
    4be0:	40206701 	.word	0x40206701
    4be4:	40206704 	.word	0x40206704
    4be8:	40206705 	.word	0x40206705
    4bec:	40206708 	.word	0x40206708
    4bf0:	0000bb58 	.word	0x0000bb58
    4bf4:	100819c0 	.word	0x100819c0

00004bf8 <MHAL_MBX_ClearAll>:
    return E_MBX_SUCCESS;
}


MBX_Result MHAL_MBX_ClearAll (MBX_Msg* pMbxMsg, MBX_ROLE_ID eSrcRole)
{
    4bf8:	b4f0      	push	{r4, r5, r6, r7}
    4bfa:	4604      	mov	r4, r0
    U8 index = 0;
    for (index = 0; index < 16; index++)
        REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID], index) = 0x00;
    4bfc:	7800      	ldrb	r0, [r0, #0]
    4bfe:	4a3b      	ldr	r2, [pc, #236]	; (4cec <MHAL_MBX_ClearAll+0xf4>)
    4c00:	4d3b      	ldr	r5, [pc, #236]	; (4cf0 <MHAL_MBX_ClearAll+0xf8>)
    4c02:	4f3c      	ldr	r7, [pc, #240]	; (4cf4 <MHAL_MBX_ClearAll+0xfc>)
    4c04:	0049      	lsls	r1, r1, #1
    4c06:	4408      	add	r0, r1
    4c08:	2300      	movs	r3, #0
    4c0a:	f832 6010 	ldrh.w	r6, [r2, r0, lsl #1]
    4c0e:	442e      	add	r6, r5
    4c10:	00b6      	lsls	r6, r6, #2

    return E_MBX_SUCCESS;


}
    4c12:	4618      	mov	r0, r3
        REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID], index) = 0x00;
    4c14:	7033      	strb	r3, [r6, #0]
    4c16:	7826      	ldrb	r6, [r4, #0]
    4c18:	440e      	add	r6, r1
    4c1a:	f832 6016 	ldrh.w	r6, [r2, r6, lsl #1]
    4c1e:	442e      	add	r6, r5
    4c20:	00b6      	lsls	r6, r6, #2
    4c22:	7073      	strb	r3, [r6, #1]
    4c24:	7826      	ldrb	r6, [r4, #0]
    4c26:	440e      	add	r6, r1
    4c28:	f832 6016 	ldrh.w	r6, [r2, r6, lsl #1]
    4c2c:	4437      	add	r7, r6
    4c2e:	00bf      	lsls	r7, r7, #2
    4c30:	703b      	strb	r3, [r7, #0]
    4c32:	7826      	ldrb	r6, [r4, #0]
    4c34:	440e      	add	r6, r1
    4c36:	f832 6016 	ldrh.w	r6, [r2, r6, lsl #1]
    4c3a:	442e      	add	r6, r5
    4c3c:	00b6      	lsls	r6, r6, #2
    4c3e:	7173      	strb	r3, [r6, #5]
    4c40:	7826      	ldrb	r6, [r4, #0]
    4c42:	440e      	add	r6, r1
    4c44:	f832 6016 	ldrh.w	r6, [r2, r6, lsl #1]
    4c48:	442e      	add	r6, r5
    4c4a:	00b6      	lsls	r6, r6, #2
    4c4c:	7233      	strb	r3, [r6, #8]
    4c4e:	7826      	ldrb	r6, [r4, #0]
    4c50:	440e      	add	r6, r1
    4c52:	f832 6016 	ldrh.w	r6, [r2, r6, lsl #1]
    4c56:	442e      	add	r6, r5
    4c58:	00b6      	lsls	r6, r6, #2
    4c5a:	7273      	strb	r3, [r6, #9]
    4c5c:	7826      	ldrb	r6, [r4, #0]
    4c5e:	440e      	add	r6, r1
    4c60:	f832 6016 	ldrh.w	r6, [r2, r6, lsl #1]
    4c64:	442e      	add	r6, r5
    4c66:	00b6      	lsls	r6, r6, #2
    4c68:	7333      	strb	r3, [r6, #12]
    4c6a:	7826      	ldrb	r6, [r4, #0]
    4c6c:	440e      	add	r6, r1
    4c6e:	f832 6016 	ldrh.w	r6, [r2, r6, lsl #1]
    4c72:	442e      	add	r6, r5
    4c74:	00b6      	lsls	r6, r6, #2
    4c76:	7373      	strb	r3, [r6, #13]
    4c78:	7826      	ldrb	r6, [r4, #0]
    4c7a:	440e      	add	r6, r1
    4c7c:	f832 6016 	ldrh.w	r6, [r2, r6, lsl #1]
    4c80:	442e      	add	r6, r5
    4c82:	00b6      	lsls	r6, r6, #2
    4c84:	7433      	strb	r3, [r6, #16]
    4c86:	7826      	ldrb	r6, [r4, #0]
    4c88:	440e      	add	r6, r1
    4c8a:	f832 6016 	ldrh.w	r6, [r2, r6, lsl #1]
    4c8e:	442e      	add	r6, r5
    4c90:	00b6      	lsls	r6, r6, #2
    4c92:	7473      	strb	r3, [r6, #17]
    4c94:	7826      	ldrb	r6, [r4, #0]
    4c96:	440e      	add	r6, r1
    4c98:	f832 6016 	ldrh.w	r6, [r2, r6, lsl #1]
    4c9c:	442e      	add	r6, r5
    4c9e:	00b6      	lsls	r6, r6, #2
    4ca0:	7533      	strb	r3, [r6, #20]
    4ca2:	7826      	ldrb	r6, [r4, #0]
    4ca4:	440e      	add	r6, r1
    4ca6:	f832 6016 	ldrh.w	r6, [r2, r6, lsl #1]
    4caa:	442e      	add	r6, r5
    4cac:	00b6      	lsls	r6, r6, #2
    4cae:	7573      	strb	r3, [r6, #21]
    4cb0:	7826      	ldrb	r6, [r4, #0]
    4cb2:	440e      	add	r6, r1
    4cb4:	f832 6016 	ldrh.w	r6, [r2, r6, lsl #1]
    4cb8:	442e      	add	r6, r5
    4cba:	00b6      	lsls	r6, r6, #2
    4cbc:	7633      	strb	r3, [r6, #24]
    4cbe:	7826      	ldrb	r6, [r4, #0]
    4cc0:	440e      	add	r6, r1
    4cc2:	f832 6016 	ldrh.w	r6, [r2, r6, lsl #1]
    4cc6:	442e      	add	r6, r5
    4cc8:	00b6      	lsls	r6, r6, #2
    4cca:	7673      	strb	r3, [r6, #25]
    4ccc:	7826      	ldrb	r6, [r4, #0]
    4cce:	440e      	add	r6, r1
    4cd0:	f832 6016 	ldrh.w	r6, [r2, r6, lsl #1]
    4cd4:	442e      	add	r6, r5
    4cd6:	00b6      	lsls	r6, r6, #2
    4cd8:	7733      	strb	r3, [r6, #28]
    4cda:	7824      	ldrb	r4, [r4, #0]
    4cdc:	4421      	add	r1, r4
    4cde:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
    4ce2:	442a      	add	r2, r5
    4ce4:	0092      	lsls	r2, r2, #2
    4ce6:	7753      	strb	r3, [r2, #29]
}
    4ce8:	bcf0      	pop	{r4, r5, r6, r7}
    4cea:	4770      	bx	lr
    4cec:	0000bb58 	.word	0x0000bb58
    4cf0:	100819c0 	.word	0x100819c0
    4cf4:	100819c1 	.word	0x100819c1

00004cf8 <MHAL_MBX_Fire>:
MBX_Result MHAL_MBX_Fire (MBX_Msg* pMbxMsg, MBX_ROLE_ID eSrcRole)
{
    BOOL bIPState;

    /* check paramter. */
    if(0xFF == _u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID])
    4cf8:	7803      	ldrb	r3, [r0, #0]
    4cfa:	4a6f      	ldr	r2, [pc, #444]	; (4eb8 <MHAL_MBX_Fire+0x1c0>)
    4cfc:	0049      	lsls	r1, r1, #1
    4cfe:	440b      	add	r3, r1
    4d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4d04:	2bff      	cmp	r3, #255	; 0xff
    4d06:	f000 80cf 	beq.w	4ea8 <MHAL_MBX_Fire+0x1b0>
{
    4d0a:	b570      	push	{r4, r5, r6, lr}
    {
        return E_MBX_ERR_INVALID_PARAM;
    }

    /* check send bit in CONTROL register. */
    bIPState = _FIRE(_u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID]);
    4d0c:	4c6b      	ldr	r4, [pc, #428]	; (4ebc <MHAL_MBX_Fire+0x1c4>)
    4d0e:	4423      	add	r3, r4
    4d10:	009b      	lsls	r3, r3, #2
    4d12:	781d      	ldrb	r5, [r3, #0]

    if(bIPState > 0)
    4d14:	07ed      	lsls	r5, r5, #31
    4d16:	d510      	bpl.n	4d3a <MHAL_MBX_Fire+0x42>
    {
        bIPState = _BUSY(_u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID]);
    4d18:	4969      	ldr	r1, [pc, #420]	; (4ec0 <MHAL_MBX_Fire+0x1c8>)
    4d1a:	7f5a      	ldrb	r2, [r3, #29]
        if(bIPState > 0)
    4d1c:	680b      	ldr	r3, [r1, #0]
    4d1e:	0612      	lsls	r2, r2, #24
    4d20:	f003 0301 	and.w	r3, r3, #1
    4d24:	d404      	bmi.n	4d30 <MHAL_MBX_Fire+0x38>
            return  E_MBX_ERR_PEER_CPU_NOTREADY;
        }
        else
        {
            //mail not processed yet!
            MBXHAL_ERROR("[Fire Mail Fail] : co-processor is not alive!\n");
    4d26:	2b00      	cmp	r3, #0
    4d28:	f040 80c0 	bne.w	4eac <MHAL_MBX_Fire+0x1b4>
            return  E_MBX_ERR_PEER_CPU_NOT_ALIVE;
    4d2c:	2009      	movs	r0, #9
    }

    _FIRE_S(_u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID]);

    return E_MBX_SUCCESS;
}
    4d2e:	bd70      	pop	{r4, r5, r6, pc}
            MBXHAL_ERROR("[Fire Mail Fail] : co-processor is not ready!\n");
    4d30:	2b00      	cmp	r3, #0
    4d32:	f040 80b4 	bne.w	4e9e <MHAL_MBX_Fire+0x1a6>
            return  E_MBX_ERR_PEER_CPU_NOTREADY;
    4d36:	200a      	movs	r0, #10
}
    4d38:	bd70      	pop	{r4, r5, r6, pc}
    _S1_C(_u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID]);
    4d3a:	7f5e      	ldrb	r6, [r3, #29]
    REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID], REG8_MBX_MAIL_IDX) = pMbxMsg->u8Index;
    4d3c:	4d61      	ldr	r5, [pc, #388]	; (4ec4 <MHAL_MBX_Fire+0x1cc>)
    _S1_C(_u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID]);
    4d3e:	f006 060f 	and.w	r6, r6, #15
    4d42:	775e      	strb	r6, [r3, #29]
    _INSTANT_C(_u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID]);
    4d44:	7803      	ldrb	r3, [r0, #0]
    4d46:	440b      	add	r3, r1
    4d48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4d4c:	4423      	add	r3, r4
    4d4e:	009b      	lsls	r3, r3, #2
    4d50:	781e      	ldrb	r6, [r3, #0]
    4d52:	f006 06fb 	and.w	r6, r6, #251	; 0xfb
    4d56:	701e      	strb	r6, [r3, #0]
    REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID], REG8_MBX_MAIL_CLASS) = pMbxMsg->u8MsgClass;
    4d58:	7803      	ldrb	r3, [r0, #0]
    4d5a:	78c6      	ldrb	r6, [r0, #3]
    4d5c:	440b      	add	r3, r1
    4d5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4d62:	4423      	add	r3, r4
    4d64:	009b      	lsls	r3, r3, #2
    4d66:	705e      	strb	r6, [r3, #1]
    REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID], REG8_MBX_MAIL_IDX) = pMbxMsg->u8Index;
    4d68:	7803      	ldrb	r3, [r0, #0]
    4d6a:	7906      	ldrb	r6, [r0, #4]
    4d6c:	440b      	add	r3, r1
    4d6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4d72:	441d      	add	r5, r3
    4d74:	00ad      	lsls	r5, r5, #2
    4d76:	702e      	strb	r6, [r5, #0]
    REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID], REG8_MBX_PARAMETER_CNT) = pMbxMsg->u8ParameterCount;
    4d78:	7803      	ldrb	r3, [r0, #0]
    4d7a:	7945      	ldrb	r5, [r0, #5]
    4d7c:	440b      	add	r3, r1
    4d7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4d82:	4423      	add	r3, r4
    4d84:	009b      	lsls	r3, r3, #2
    4d86:	715d      	strb	r5, [r3, #5]
    for(s32Idx=0;  s32Idx<pMbxMsg->u8ParameterCount; s32Idx++)
    4d88:	7943      	ldrb	r3, [r0, #5]
    4d8a:	2b00      	cmp	r3, #0
    4d8c:	d06b      	beq.n	4e66 <MHAL_MBX_Fire+0x16e>
        REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID], s32Idx+REG8_MBX_PARAMETER_S) = pMbxMsg->u8Parameters[s32Idx];
    4d8e:	7803      	ldrb	r3, [r0, #0]
    4d90:	7985      	ldrb	r5, [r0, #6]
    4d92:	440b      	add	r3, r1
    4d94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4d98:	4423      	add	r3, r4
    4d9a:	009b      	lsls	r3, r3, #2
    4d9c:	721d      	strb	r5, [r3, #8]
    for(s32Idx=0;  s32Idx<pMbxMsg->u8ParameterCount; s32Idx++)
    4d9e:	7943      	ldrb	r3, [r0, #5]
    4da0:	2b01      	cmp	r3, #1
    4da2:	d960      	bls.n	4e66 <MHAL_MBX_Fire+0x16e>
        REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID], s32Idx+REG8_MBX_PARAMETER_S) = pMbxMsg->u8Parameters[s32Idx];
    4da4:	7803      	ldrb	r3, [r0, #0]
    4da6:	79c5      	ldrb	r5, [r0, #7]
    4da8:	440b      	add	r3, r1
    4daa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4dae:	4423      	add	r3, r4
    4db0:	009b      	lsls	r3, r3, #2
    4db2:	725d      	strb	r5, [r3, #9]
    for(s32Idx=0;  s32Idx<pMbxMsg->u8ParameterCount; s32Idx++)
    4db4:	7943      	ldrb	r3, [r0, #5]
    4db6:	2b02      	cmp	r3, #2
    4db8:	d955      	bls.n	4e66 <MHAL_MBX_Fire+0x16e>
        REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID], s32Idx+REG8_MBX_PARAMETER_S) = pMbxMsg->u8Parameters[s32Idx];
    4dba:	7803      	ldrb	r3, [r0, #0]
    4dbc:	7a05      	ldrb	r5, [r0, #8]
    4dbe:	440b      	add	r3, r1
    4dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4dc4:	4423      	add	r3, r4
    4dc6:	009b      	lsls	r3, r3, #2
    4dc8:	731d      	strb	r5, [r3, #12]
    for(s32Idx=0;  s32Idx<pMbxMsg->u8ParameterCount; s32Idx++)
    4dca:	7943      	ldrb	r3, [r0, #5]
    4dcc:	2b03      	cmp	r3, #3
    4dce:	d94a      	bls.n	4e66 <MHAL_MBX_Fire+0x16e>
        REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID], s32Idx+REG8_MBX_PARAMETER_S) = pMbxMsg->u8Parameters[s32Idx];
    4dd0:	7803      	ldrb	r3, [r0, #0]
    4dd2:	7a45      	ldrb	r5, [r0, #9]
    4dd4:	440b      	add	r3, r1
    4dd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4dda:	4423      	add	r3, r4
    4ddc:	009b      	lsls	r3, r3, #2
    4dde:	735d      	strb	r5, [r3, #13]
    for(s32Idx=0;  s32Idx<pMbxMsg->u8ParameterCount; s32Idx++)
    4de0:	7943      	ldrb	r3, [r0, #5]
    4de2:	2b04      	cmp	r3, #4
    4de4:	d93f      	bls.n	4e66 <MHAL_MBX_Fire+0x16e>
        REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID], s32Idx+REG8_MBX_PARAMETER_S) = pMbxMsg->u8Parameters[s32Idx];
    4de6:	7803      	ldrb	r3, [r0, #0]
    4de8:	7a85      	ldrb	r5, [r0, #10]
    4dea:	440b      	add	r3, r1
    4dec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4df0:	4423      	add	r3, r4
    4df2:	009b      	lsls	r3, r3, #2
    4df4:	741d      	strb	r5, [r3, #16]
    for(s32Idx=0;  s32Idx<pMbxMsg->u8ParameterCount; s32Idx++)
    4df6:	7943      	ldrb	r3, [r0, #5]
    4df8:	2b05      	cmp	r3, #5
    4dfa:	d934      	bls.n	4e66 <MHAL_MBX_Fire+0x16e>
        REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID], s32Idx+REG8_MBX_PARAMETER_S) = pMbxMsg->u8Parameters[s32Idx];
    4dfc:	7803      	ldrb	r3, [r0, #0]
    4dfe:	7ac5      	ldrb	r5, [r0, #11]
    4e00:	440b      	add	r3, r1
    4e02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4e06:	4423      	add	r3, r4
    4e08:	009b      	lsls	r3, r3, #2
    4e0a:	745d      	strb	r5, [r3, #17]
    for(s32Idx=0;  s32Idx<pMbxMsg->u8ParameterCount; s32Idx++)
    4e0c:	7943      	ldrb	r3, [r0, #5]
    4e0e:	2b06      	cmp	r3, #6
    4e10:	d929      	bls.n	4e66 <MHAL_MBX_Fire+0x16e>
        REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID], s32Idx+REG8_MBX_PARAMETER_S) = pMbxMsg->u8Parameters[s32Idx];
    4e12:	7803      	ldrb	r3, [r0, #0]
    4e14:	7b05      	ldrb	r5, [r0, #12]
    4e16:	440b      	add	r3, r1
    4e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4e1c:	441c      	add	r4, r3
    4e1e:	00a4      	lsls	r4, r4, #2
    4e20:	7525      	strb	r5, [r4, #20]
    for(s32Idx=0;  s32Idx<pMbxMsg->u8ParameterCount; s32Idx++)
    4e22:	7943      	ldrb	r3, [r0, #5]
    4e24:	2b07      	cmp	r3, #7
    4e26:	d91e      	bls.n	4e66 <MHAL_MBX_Fire+0x16e>
        REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID], s32Idx+REG8_MBX_PARAMETER_S) = pMbxMsg->u8Parameters[s32Idx];
    4e28:	7804      	ldrb	r4, [r0, #0]
    4e2a:	4d24      	ldr	r5, [pc, #144]	; (4ebc <MHAL_MBX_Fire+0x1c4>)
    4e2c:	7b46      	ldrb	r6, [r0, #13]
    4e2e:	440c      	add	r4, r1
    4e30:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    4e34:	442b      	add	r3, r5
    4e36:	009b      	lsls	r3, r3, #2
    4e38:	755e      	strb	r6, [r3, #21]
    for(s32Idx=0;  s32Idx<pMbxMsg->u8ParameterCount; s32Idx++)
    4e3a:	7943      	ldrb	r3, [r0, #5]
    4e3c:	2b08      	cmp	r3, #8
    4e3e:	d912      	bls.n	4e66 <MHAL_MBX_Fire+0x16e>
        REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID], s32Idx+REG8_MBX_PARAMETER_S) = pMbxMsg->u8Parameters[s32Idx];
    4e40:	7803      	ldrb	r3, [r0, #0]
    4e42:	7b84      	ldrb	r4, [r0, #14]
    4e44:	440b      	add	r3, r1
    4e46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4e4a:	442b      	add	r3, r5
    4e4c:	009b      	lsls	r3, r3, #2
    4e4e:	761c      	strb	r4, [r3, #24]
    for(s32Idx=0;  s32Idx<pMbxMsg->u8ParameterCount; s32Idx++)
    4e50:	7943      	ldrb	r3, [r0, #5]
    4e52:	2b09      	cmp	r3, #9
    4e54:	d907      	bls.n	4e66 <MHAL_MBX_Fire+0x16e>
        REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID], s32Idx+REG8_MBX_PARAMETER_S) = pMbxMsg->u8Parameters[s32Idx];
    4e56:	7803      	ldrb	r3, [r0, #0]
    4e58:	7bc4      	ldrb	r4, [r0, #15]
    4e5a:	440b      	add	r3, r1
    4e5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4e60:	442b      	add	r3, r5
    4e62:	009b      	lsls	r3, r3, #2
    4e64:	765c      	strb	r4, [r3, #25]
    if(pMbxMsg->eMsgType == E_MBX_MSG_TYPE_INSTANT)
    4e66:	7804      	ldrb	r4, [r0, #0]
    4e68:	4d14      	ldr	r5, [pc, #80]	; (4ebc <MHAL_MBX_Fire+0x1c4>)
    4e6a:	7846      	ldrb	r6, [r0, #1]
    4e6c:	440c      	add	r4, r1
    4e6e:	2e01      	cmp	r6, #1
    4e70:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    4e74:	442b      	add	r3, r5
    4e76:	ea4f 0383 	mov.w	r3, r3, lsl #2
    4e7a:	d005      	beq.n	4e88 <MHAL_MBX_Fire+0x190>
    _FIRE_S(_u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID]);
    4e7c:	781a      	ldrb	r2, [r3, #0]
    4e7e:	f042 0201 	orr.w	r2, r2, #1
    4e82:	701a      	strb	r2, [r3, #0]
    return E_MBX_SUCCESS;
    4e84:	2000      	movs	r0, #0
}
    4e86:	bd70      	pop	{r4, r5, r6, pc}
        _INSTANT_S(_u16MbxGroupIdMBXHAL[eSrcRole][pMbxMsg->eRoleID]);
    4e88:	781c      	ldrb	r4, [r3, #0]
    4e8a:	f044 0404 	orr.w	r4, r4, #4
    4e8e:	701c      	strb	r4, [r3, #0]
    4e90:	7803      	ldrb	r3, [r0, #0]
    4e92:	4419      	add	r1, r3
    4e94:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    4e98:	442b      	add	r3, r5
    4e9a:	009b      	lsls	r3, r3, #2
    4e9c:	e7ee      	b.n	4e7c <MHAL_MBX_Fire+0x184>
            MBXHAL_ERROR("[Fire Mail Fail] : co-processor is not ready!\n");
    4e9e:	480a      	ldr	r0, [pc, #40]	; (4ec8 <MHAL_MBX_Fire+0x1d0>)
    4ea0:	f7fe fbe0 	bl	3664 <UartSendTrace>
            return  E_MBX_ERR_PEER_CPU_NOTREADY;
    4ea4:	200a      	movs	r0, #10
}
    4ea6:	bd70      	pop	{r4, r5, r6, pc}
        return E_MBX_ERR_INVALID_PARAM;
    4ea8:	2007      	movs	r0, #7
}
    4eaa:	4770      	bx	lr
            MBXHAL_ERROR("[Fire Mail Fail] : co-processor is not alive!\n");
    4eac:	4807      	ldr	r0, [pc, #28]	; (4ecc <MHAL_MBX_Fire+0x1d4>)
    4eae:	f7fe fbd9 	bl	3664 <UartSendTrace>
            return  E_MBX_ERR_PEER_CPU_NOT_ALIVE;
    4eb2:	2009      	movs	r0, #9
}
    4eb4:	bd70      	pop	{r4, r5, r6, pc}
    4eb6:	bf00      	nop
    4eb8:	0000bb58 	.word	0x0000bb58
    4ebc:	100819c0 	.word	0x100819c0
    4ec0:	0000ca14 	.word	0x0000ca14
    4ec4:	100819c1 	.word	0x100819c1
    4ec8:	0000bae0 	.word	0x0000bae0
    4ecc:	0000bb1c 	.word	0x0000bb1c

00004ed0 <MHAL_MBX_GetFireStatus>:
/// <b>[MXLIB] <em> </em></b>
//-------------------------------------------------------------------------------------------------
MBX_Result MHAL_MBX_GetFireStatus(MBX_ROLE_ID eSrcRole, MBX_ROLE_ID eDstRole, MBXHAL_Fire_Status *pFireStatus)
{
    /* check paramter. */
    if((0xFF == _u16MbxGroupIdMBXHAL[eSrcRole][eDstRole])
    4ed0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    4ed4:	4b11      	ldr	r3, [pc, #68]	; (4f1c <MHAL_MBX_GetFireStatus+0x4c>)
    4ed6:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
    4eda:	29ff      	cmp	r1, #255	; 0xff
    4edc:	d012      	beq.n	4f04 <MHAL_MBX_GetFireStatus+0x34>
            || (NULL == pFireStatus))
    4ede:	b18a      	cbz	r2, 4f04 <MHAL_MBX_GetFireStatus+0x34>
    {
        return E_MBX_ERR_INVALID_PARAM;
    }

    //still on Firing:
    if(_FIRE(_u16MbxGroupIdMBXHAL[eSrcRole][eDstRole]))
    4ee0:	4b0f      	ldr	r3, [pc, #60]	; (4f20 <MHAL_MBX_GetFireStatus+0x50>)
    4ee2:	440b      	add	r3, r1
    4ee4:	009b      	lsls	r3, r3, #2
    4ee6:	7818      	ldrb	r0, [r3, #0]
    4ee8:	f010 0001 	ands.w	r0, r0, #1
    4eec:	d003      	beq.n	4ef6 <MHAL_MBX_GetFireStatus+0x26>
    {
        *pFireStatus = E_MBXHAL_FIRE_ONGOING;
    4eee:	2301      	movs	r3, #1
    4ef0:	7013      	strb	r3, [r2, #0]
    else
    {
        *pFireStatus = E_MBXHAL_FIRE_SUCCESS;
    }

    return E_MBX_SUCCESS;
    4ef2:	2000      	movs	r0, #0
    4ef4:	4770      	bx	lr
    else if(_OVERFLOW(_u16MbxGroupIdMBXHAL[eSrcRole][eDstRole]))
    4ef6:	7f59      	ldrb	r1, [r3, #29]
    4ef8:	f011 0120 	ands.w	r1, r1, #32
    4efc:	d004      	beq.n	4f08 <MHAL_MBX_GetFireStatus+0x38>
        *pFireStatus = E_MBXHAL_FIRE_OVERFLOW;
    4efe:	2302      	movs	r3, #2
    4f00:	7013      	strb	r3, [r2, #0]
    4f02:	4770      	bx	lr
        return E_MBX_ERR_INVALID_PARAM;
    4f04:	2007      	movs	r0, #7
}
    4f06:	4770      	bx	lr
    else if(_DISABLED(_u16MbxGroupIdMBXHAL[eSrcRole][eDstRole]))
    4f08:	7f5b      	ldrb	r3, [r3, #29]
    4f0a:	f013 0010 	ands.w	r0, r3, #16
        *pFireStatus = E_MBXHAL_FIRE_DISABLED;
    4f0e:	bf1d      	ittte	ne
    4f10:	2303      	movne	r3, #3
    return E_MBX_SUCCESS;
    4f12:	4608      	movne	r0, r1
        *pFireStatus = E_MBXHAL_FIRE_DISABLED;
    4f14:	7013      	strbne	r3, [r2, #0]
        *pFireStatus = E_MBXHAL_FIRE_SUCCESS;
    4f16:	7010      	strbeq	r0, [r2, #0]
    4f18:	4770      	bx	lr
    4f1a:	bf00      	nop
    4f1c:	0000bb58 	.word	0x0000bb58
    4f20:	100819c0 	.word	0x100819c0

00004f24 <MHAL_MBX_Recv>:
MBX_Result MHAL_MBX_Recv(MBX_Msg* pMbxMsg, MBX_ROLE_ID eDstRole)
{
    BOOL bIPState;

    /* check paramter. */
    if(0xFF == _u16MbxGroupIdMBXHAL[pMbxMsg->eRoleID][eDstRole])
    4f24:	7802      	ldrb	r2, [r0, #0]
{
    4f26:	b470      	push	{r4, r5, r6}
    if(0xFF == _u16MbxGroupIdMBXHAL[pMbxMsg->eRoleID][eDstRole])
    4f28:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    4f2c:	4d34      	ldr	r5, [pc, #208]	; (5000 <MHAL_MBX_Recv+0xdc>)
{
    4f2e:	4603      	mov	r3, r0
    if(0xFF == _u16MbxGroupIdMBXHAL[pMbxMsg->eRoleID][eDstRole])
    4f30:	f835 0012 	ldrh.w	r0, [r5, r2, lsl #1]
    4f34:	28ff      	cmp	r0, #255	; 0xff
    4f36:	d060      	beq.n	4ffa <MHAL_MBX_Recv+0xd6>
    {
        return E_MBX_ERR_INVALID_PARAM;
    }

    /* check send bit in CONTROL register. */
    bIPState = _FIRE(_u16MbxGroupIdMBXHAL[pMbxMsg->eRoleID][eDstRole]);
    4f38:	4e32      	ldr	r6, [pc, #200]	; (5004 <MHAL_MBX_Recv+0xe0>)
    4f3a:	4430      	add	r0, r6
    4f3c:	0080      	lsls	r0, r0, #2
    4f3e:	7802      	ldrb	r2, [r0, #0]
    if(bIPState <= 0) //the message already fetched!
    4f40:	07d2      	lsls	r2, r2, #31
    4f42:	d557      	bpl.n	4ff4 <MHAL_MBX_Recv+0xd0>
        return  E_MBX_ERR_MSG_ALREADY_FETCHED;

    /* set busy bit */
    _BUSY_S(_u16MbxGroupIdMBXHAL[pMbxMsg->eRoleID][eDstRole]);
    4f44:	7f44      	ldrb	r4, [r0, #29]
    4f46:	f044 0480 	orr.w	r4, r4, #128	; 0x80
    4f4a:	7744      	strb	r4, [r0, #29]

    bIPState = _INSTANT(_u16MbxGroupIdMBXHAL[pMbxMsg->eRoleID][eDstRole]) | _READBACK(_u16MbxGroupIdMBXHAL[pMbxMsg->eRoleID][eDstRole]);
    4f4c:	781a      	ldrb	r2, [r3, #0]
    4f4e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    /* clear busy bit */
    //_BUSY_C(_u16MbxGroupIdMBXHAL[pMbxMsg->eRoleID][eDstRole]);
    /* clear send bit */
    //_FIRE_C(_u16MbxGroupIdMBXHAL[pMbxMsg->eRoleID][eDstRole]);

    return E_MBX_SUCCESS;
    4f52:	2000      	movs	r0, #0
    bIPState = _INSTANT(_u16MbxGroupIdMBXHAL[pMbxMsg->eRoleID][eDstRole]) | _READBACK(_u16MbxGroupIdMBXHAL[pMbxMsg->eRoleID][eDstRole]);
    4f54:	f835 2011 	ldrh.w	r2, [r5, r1, lsl #1]
    4f58:	4432      	add	r2, r6
    4f5a:	0091      	lsls	r1, r2, #2
        pMbxMsg->u8Parameters[s32Idx] = REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[pMbxMsg->eRoleID][eDstRole], s32Idx+REG8_MBX_PARAMETER_S);
    4f5c:	0052      	lsls	r2, r2, #1
    bIPState = _INSTANT(_u16MbxGroupIdMBXHAL[pMbxMsg->eRoleID][eDstRole]) | _READBACK(_u16MbxGroupIdMBXHAL[pMbxMsg->eRoleID][eDstRole]);
    4f5e:	780d      	ldrb	r5, [r1, #0]
    4f60:	780c      	ldrb	r4, [r1, #0]
    4f62:	f005 0504 	and.w	r5, r5, #4
    4f66:	f004 0402 	and.w	r4, r4, #2
    if(bIPState)
    4f6a:	432c      	orrs	r4, r5
    4f6c:	bf14      	ite	ne
    4f6e:	2401      	movne	r4, #1
    4f70:	4604      	moveq	r4, r0
    4f72:	705c      	strb	r4, [r3, #1]
    pMbxMsg->u8Ctrl = REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[pMbxMsg->eRoleID][eDstRole], REG8_MBX_CTRL);
    4f74:	780c      	ldrb	r4, [r1, #0]
    4f76:	709c      	strb	r4, [r3, #2]
    pMbxMsg->u8MsgClass = REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[pMbxMsg->eRoleID][eDstRole], REG8_MBX_MAIL_CLASS);
    4f78:	784c      	ldrb	r4, [r1, #1]
    4f7a:	70dc      	strb	r4, [r3, #3]
    pMbxMsg->u8Index = REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[pMbxMsg->eRoleID][eDstRole], REG8_MBX_MAIL_IDX);
    4f7c:	790c      	ldrb	r4, [r1, #4]
    4f7e:	711c      	strb	r4, [r3, #4]
        pMbxMsg->u8Parameters[s32Idx] = REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[pMbxMsg->eRoleID][eDstRole], s32Idx+REG8_MBX_PARAMETER_S);
    4f80:	1d14      	adds	r4, r2, #4
    pMbxMsg->u8ParameterCount = REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[pMbxMsg->eRoleID][eDstRole], REG8_MBX_PARAMETER_CNT);
    4f82:	794d      	ldrb	r5, [r1, #5]
    4f84:	715d      	strb	r5, [r3, #5]
        pMbxMsg->u8Parameters[s32Idx] = REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[pMbxMsg->eRoleID][eDstRole], s32Idx+REG8_MBX_PARAMETER_S);
    4f86:	0064      	lsls	r4, r4, #1
    4f88:	1d55      	adds	r5, r2, #5
    4f8a:	7824      	ldrb	r4, [r4, #0]
    4f8c:	719c      	strb	r4, [r3, #6]
    4f8e:	006d      	lsls	r5, r5, #1
    4f90:	1d94      	adds	r4, r2, #6
    4f92:	f815 5c01 	ldrb.w	r5, [r5, #-1]
    4f96:	71dd      	strb	r5, [r3, #7]
    4f98:	0064      	lsls	r4, r4, #1
    4f9a:	1dd5      	adds	r5, r2, #7
    4f9c:	7824      	ldrb	r4, [r4, #0]
    4f9e:	721c      	strb	r4, [r3, #8]
    4fa0:	006d      	lsls	r5, r5, #1
    4fa2:	f102 0408 	add.w	r4, r2, #8
    4fa6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
    4faa:	725d      	strb	r5, [r3, #9]
    4fac:	0064      	lsls	r4, r4, #1
    4fae:	f102 0509 	add.w	r5, r2, #9
    4fb2:	7824      	ldrb	r4, [r4, #0]
    4fb4:	729c      	strb	r4, [r3, #10]
    4fb6:	006d      	lsls	r5, r5, #1
    4fb8:	f102 040a 	add.w	r4, r2, #10
    4fbc:	f815 5c01 	ldrb.w	r5, [r5, #-1]
    4fc0:	72dd      	strb	r5, [r3, #11]
    4fc2:	0064      	lsls	r4, r4, #1
    4fc4:	f102 050b 	add.w	r5, r2, #11
    4fc8:	7824      	ldrb	r4, [r4, #0]
    4fca:	731c      	strb	r4, [r3, #12]
    4fcc:	006d      	lsls	r5, r5, #1
    4fce:	f102 040c 	add.w	r4, r2, #12
    4fd2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
    4fd6:	735d      	strb	r5, [r3, #13]
    4fd8:	0064      	lsls	r4, r4, #1
    4fda:	320d      	adds	r2, #13
    4fdc:	0052      	lsls	r2, r2, #1
    4fde:	7824      	ldrb	r4, [r4, #0]
    4fe0:	739c      	strb	r4, [r3, #14]
    4fe2:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    4fe6:	73da      	strb	r2, [r3, #15]
    pMbxMsg->u8S0 = REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[pMbxMsg->eRoleID][eDstRole], REG8_MBX_STATE_0);
    4fe8:	7f0a      	ldrb	r2, [r1, #28]
    4fea:	741a      	strb	r2, [r3, #16]
    pMbxMsg->u8S1 = REG8_MBX_GROUP(_u16MbxGroupIdMBXHAL[pMbxMsg->eRoleID][eDstRole], REG8_MBX_STATE_1);
    4fec:	7f4a      	ldrb	r2, [r1, #29]
    4fee:	745a      	strb	r2, [r3, #17]
}
    4ff0:	bc70      	pop	{r4, r5, r6}
    4ff2:	4770      	bx	lr
        return  E_MBX_ERR_MSG_ALREADY_FETCHED;
    4ff4:	200c      	movs	r0, #12
}
    4ff6:	bc70      	pop	{r4, r5, r6}
    4ff8:	4770      	bx	lr
        return E_MBX_ERR_INVALID_PARAM;
    4ffa:	2007      	movs	r0, #7
}
    4ffc:	bc70      	pop	{r4, r5, r6}
    4ffe:	4770      	bx	lr
    5000:	0000bb58 	.word	0x0000bb58
    5004:	100819c0 	.word	0x100819c0

00005008 <MHAL_MBX_RecvEndExt>:
}

MBX_Result MHAL_MBX_RecvEndExt(MBX_ROLE_ID eSrcRole, MBX_ROLE_ID eDstRole, BOOL bSuccess)
{
    /* check paramter. */
    if(0xFF == _u16MbxGroupIdMBXHAL[eSrcRole][eDstRole])
    5008:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    500c:	4b0d      	ldr	r3, [pc, #52]	; (5044 <MHAL_MBX_RecvEndExt+0x3c>)
    500e:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
    5012:	29ff      	cmp	r1, #255	; 0xff
    5014:	d014      	beq.n	5040 <MHAL_MBX_RecvEndExt+0x38>
    {
        return E_MBX_ERR_INVALID_PARAM;
    }

    if (!bSuccess)
    5016:	b932      	cbnz	r2, 5026 <MHAL_MBX_RecvEndExt+0x1e>
      _STATE0_ERR_S(_u16MbxGroupIdMBXHAL[eSrcRole][eDstRole]);
    5018:	4b0b      	ldr	r3, [pc, #44]	; (5048 <MHAL_MBX_RecvEndExt+0x40>)
    501a:	440b      	add	r3, r1
    501c:	009b      	lsls	r3, r3, #2
    501e:	781a      	ldrb	r2, [r3, #0]
    5020:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    5024:	701a      	strb	r2, [r3, #0]

    /* clear busy bit */
    _BUSY_C(_u16MbxGroupIdMBXHAL[eSrcRole][eDstRole]);
    5026:	4b09      	ldr	r3, [pc, #36]	; (504c <MHAL_MBX_RecvEndExt+0x44>)
    5028:	440b      	add	r3, r1
    502a:	009b      	lsls	r3, r3, #2
    /* clear send bit */
    _FIRE_C(_u16MbxGroupIdMBXHAL[eSrcRole][eDstRole]);

    return E_MBX_SUCCESS;
    502c:	2000      	movs	r0, #0
    _BUSY_C(_u16MbxGroupIdMBXHAL[eSrcRole][eDstRole]);
    502e:	7f5a      	ldrb	r2, [r3, #29]
    5030:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    5034:	775a      	strb	r2, [r3, #29]
    _FIRE_C(_u16MbxGroupIdMBXHAL[eSrcRole][eDstRole]);
    5036:	781a      	ldrb	r2, [r3, #0]
    5038:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    503c:	701a      	strb	r2, [r3, #0]
    return E_MBX_SUCCESS;
    503e:	4770      	bx	lr
        return E_MBX_ERR_INVALID_PARAM;
    5040:	2007      	movs	r0, #7
}
    5042:	4770      	bx	lr
    5044:	0000bb58 	.word	0x0000bb58
    5048:	100819c7 	.word	0x100819c7
    504c:	100819c0 	.word	0x100819c0

00005050 <MHal_Timer_Reset>:
}
#endif

void MHal_Timer_Reset(void)
{
    REG(TIMER_CTRL_ADDR)=0;
    5050:	4b02      	ldr	r3, [pc, #8]	; (505c <MHal_Timer_Reset+0xc>)
    5052:	2200      	movs	r2, #0
    5054:	601a      	str	r2, [r3, #0]
    REG(TIMER_CTRL_ADDR)=0x1;
    5056:	2201      	movs	r2, #1
    5058:	601a      	str	r2, [r3, #0]
}
    505a:	4770      	bx	lr
    505c:	40006040 	.word	0x40006040

00005060 <MHal_Timer_GetTick>:

U32 MHal_Timer_GetTick(void)
{
    // 1 tick = 1/OSC1 sec
    U32 val=0;
    val = (REG(TIMER_CAPCNT_L_ADDR)& 0xFFFF);
    5060:	4b03      	ldr	r3, [pc, #12]	; (5070 <MHal_Timer_GetTick+0x10>)
    5062:	6818      	ldr	r0, [r3, #0]
    val +=  (REG(TIMER_CAPCNT_H_ADDR)<<16);
    5064:	3304      	adds	r3, #4
    5066:	681b      	ldr	r3, [r3, #0]
    5068:	041b      	lsls	r3, r3, #16
    return val;
}
    506a:	fa13 f080 	uxtah	r0, r3, r0
    506e:	4770      	bx	lr
    5070:	40006050 	.word	0x40006050

00005074 <MHal_Timer_GetMax>:

U32 MHal_Timer_GetMax(void)
{
    // 1 tick = 1/OSC1 sec
    U32 val=0;
    val = (REG(TIMER_MAX_L_ADDR)& 0xFFFF);
    5074:	4b03      	ldr	r3, [pc, #12]	; (5084 <MHal_Timer_GetMax+0x10>)
    5076:	6818      	ldr	r0, [r3, #0]
    val +=  (REG(TIMER_MAX_H_ADDR)<<16);
    5078:	3304      	adds	r3, #4
    507a:	681b      	ldr	r3, [r3, #0]
    507c:	041b      	lsls	r3, r3, #16
    return val;
}
    507e:	fa13 f080 	uxtah	r0, r3, r0
    5082:	4770      	bx	lr
    5084:	40006048 	.word	0x40006048

00005088 <MHal_Timer_Delay>:


void MHal_Timer_Delay(U32 count)
{
    5088:	b538      	push	{r3, r4, r5, lr}
    508a:	4605      	mov	r5, r0
    U32 st0=0;
    U32 tick_count=0;
    U32 st1=0;

    st0=MHal_Timer_GetTick();
    508c:	f7ff ffe8 	bl	5060 <MHal_Timer_GetTick>
    5090:	4601      	mov	r1, r0


    //uart_write_U32_hex(count);
    if(0==count)
    5092:	b16d      	cbz	r5, 50b0 <MHal_Timer_Delay+0x28>
    U32 tick_count=0;
    5094:	2200      	movs	r2, #0
    }

    while(1)
    {

    st1=MHal_Timer_GetTick();
    5096:	f7ff ffe3 	bl	5060 <MHal_Timer_GetTick>
    509a:	1a43      	subs	r3, r0, r1

    if(st1<st0)
    509c:	4281      	cmp	r1, r0
    st1=MHal_Timer_GetTick();
    509e:	4604      	mov	r4, r0
    if(st1<st0)
    50a0:	441a      	add	r2, r3
    50a2:	d902      	bls.n	50aa <MHal_Timer_Delay+0x22>
    {

    tick_count+=((MHal_Timer_GetMax()-st0) + st1);
    50a4:	f7ff ffe6 	bl	5074 <MHal_Timer_GetMax>
    50a8:	4402      	add	r2, r0
    {
    tick_count+=(st1-st0);
    }
    st0=st1;

    if(tick_count>=count)
    50aa:	42aa      	cmp	r2, r5
    st1=MHal_Timer_GetTick();
    50ac:	4621      	mov	r1, r4
    if(tick_count>=count)
    50ae:	d3f2      	bcc.n	5096 <MHal_Timer_Delay+0xe>
    {
    break;
    }

    }
}
    50b0:	bd38      	pop	{r3, r4, r5, pc}
	...

000050b4 <MHal_INTC_IRQStatus>:



U16 MHal_INTC_IRQStatus(U32 u32IntcNumber)
{
  if( u32IntcNumber < 64 )
    50b4:	283f      	cmp	r0, #63	; 0x3f
    50b6:	d81c      	bhi.n	50f2 <MHal_INTC_IRQStatus+0x3e>
  {
    if((u32IntcNumber/16) == 0)
    50b8:	280f      	cmp	r0, #15
    50ba:	f04f 0301 	mov.w	r3, #1
    50be:	d805      	bhi.n	50cc <MHal_INTC_IRQStatus+0x18>
      return (INREG16(INTC_IRQ_STATUS_15_0) & (1 << (u32IntcNumber%16)));
    50c0:	4a0d      	ldr	r2, [pc, #52]	; (50f8 <MHal_INTC_IRQStatus+0x44>)
    50c2:	8812      	ldrh	r2, [r2, #0]
    50c4:	fa03 f000 	lsl.w	r0, r3, r0
    50c8:	4010      	ands	r0, r2
    50ca:	4770      	bx	lr
	  else if((u32IntcNumber/16) == 1)
    50cc:	f000 020f 	and.w	r2, r0, #15
    50d0:	4093      	lsls	r3, r2
    50d2:	f1a0 0210 	sub.w	r2, r0, #16
    50d6:	2a0f      	cmp	r2, #15
    50d8:	b21b      	sxth	r3, r3
    50da:	d803      	bhi.n	50e4 <MHal_INTC_IRQStatus+0x30>
      return (INREG16(INTC_IRQ_STATUS_31_16) & (1 << (u32IntcNumber%16)));
    50dc:	4a07      	ldr	r2, [pc, #28]	; (50fc <MHal_INTC_IRQStatus+0x48>)
	  else if((u32IntcNumber/16) == 2)
      return (INREG16(INTC_IRQ_STATUS_47_32) & (1 << (u32IntcNumber%16)));
    50de:	8810      	ldrh	r0, [r2, #0]
    50e0:	4018      	ands	r0, r3
    50e2:	4770      	bx	lr
	  else if((u32IntcNumber/16) == 2)
    50e4:	3820      	subs	r0, #32
    50e6:	280f      	cmp	r0, #15
    50e8:	d801      	bhi.n	50ee <MHal_INTC_IRQStatus+0x3a>
      return (INREG16(INTC_IRQ_STATUS_47_32) & (1 << (u32IntcNumber%16)));
    50ea:	4a05      	ldr	r2, [pc, #20]	; (5100 <MHal_INTC_IRQStatus+0x4c>)
    50ec:	e7f7      	b.n	50de <MHal_INTC_IRQStatus+0x2a>
	  else
		  return (INREG16(INTC_IRQ_STATUS_63_48) & (1 << (u32IntcNumber%16)));
    50ee:	4a05      	ldr	r2, [pc, #20]	; (5104 <MHal_INTC_IRQStatus+0x50>)
    50f0:	e7f5      	b.n	50de <MHal_INTC_IRQStatus+0x2a>
  }
  return 0;
    50f2:	2000      	movs	r0, #0
}
    50f4:	4770      	bx	lr
    50f6:	bf00      	nop
    50f8:	402033f0 	.word	0x402033f0
    50fc:	402033f4 	.word	0x402033f4
    5100:	402033f8 	.word	0x402033f8
    5104:	402033fc 	.word	0x402033fc

00005108 <MHal_INTC_FIQStatus>:

U16 MHal_INTC_FIQStatus(U32 u32IntcNumber)
{
  if( u32IntcNumber < 64 )
    5108:	283f      	cmp	r0, #63	; 0x3f
    510a:	d81c      	bhi.n	5146 <MHal_INTC_FIQStatus+0x3e>
  {
    if((u32IntcNumber/16) == 0)
    510c:	280f      	cmp	r0, #15
    510e:	f04f 0301 	mov.w	r3, #1
    5112:	d805      	bhi.n	5120 <MHal_INTC_FIQStatus+0x18>
      return (INREG16(INTC_FIQ_STATUS_15_0) & (1 << (u32IntcNumber%16)));
    5114:	4a0d      	ldr	r2, [pc, #52]	; (514c <MHal_INTC_FIQStatus+0x44>)
    5116:	8812      	ldrh	r2, [r2, #0]
    5118:	fa03 f000 	lsl.w	r0, r3, r0
    511c:	4010      	ands	r0, r2
    511e:	4770      	bx	lr
	  else if((u32IntcNumber/16) == 1)
    5120:	f000 020f 	and.w	r2, r0, #15
    5124:	4093      	lsls	r3, r2
    5126:	f1a0 0210 	sub.w	r2, r0, #16
    512a:	2a0f      	cmp	r2, #15
    512c:	b21b      	sxth	r3, r3
    512e:	d803      	bhi.n	5138 <MHal_INTC_FIQStatus+0x30>
      return (INREG16(INTC_FIQ_STATUS_31_16) & (1 << (u32IntcNumber%16)));
    5130:	4a07      	ldr	r2, [pc, #28]	; (5150 <MHal_INTC_FIQStatus+0x48>)
	  else if((u32IntcNumber/16) == 2)
      return (INREG16(INTC_FIQ_STATUS_47_32) & (1 << (u32IntcNumber%16)));
    5132:	8810      	ldrh	r0, [r2, #0]
    5134:	4018      	ands	r0, r3
    5136:	4770      	bx	lr
	  else if((u32IntcNumber/16) == 2)
    5138:	3820      	subs	r0, #32
    513a:	280f      	cmp	r0, #15
    513c:	d801      	bhi.n	5142 <MHal_INTC_FIQStatus+0x3a>
      return (INREG16(INTC_FIQ_STATUS_47_32) & (1 << (u32IntcNumber%16)));
    513e:	4a05      	ldr	r2, [pc, #20]	; (5154 <MHal_INTC_FIQStatus+0x4c>)
    5140:	e7f7      	b.n	5132 <MHal_INTC_FIQStatus+0x2a>
	  else
		  return (INREG16(INTC_FIQ_STATUS_63_48) & (1 << (u32IntcNumber%16)));
    5142:	4a05      	ldr	r2, [pc, #20]	; (5158 <MHal_INTC_FIQStatus+0x50>)
    5144:	e7f5      	b.n	5132 <MHal_INTC_FIQStatus+0x2a>
  }
  return 0;
    5146:	2000      	movs	r0, #0
}
    5148:	4770      	bx	lr
    514a:	bf00      	nop
    514c:	402033b0 	.word	0x402033b0
    5150:	402033b4 	.word	0x402033b4
    5154:	402033b8 	.word	0x402033b8
    5158:	402033bc 	.word	0x402033bc

0000515c <MHal_INTC_FIQClear>:


void MHal_INTC_FIQClear(U32 u32IntcNumber)
{
  if( u32IntcNumber < 64 )
    515c:	283f      	cmp	r0, #63	; 0x3f
    515e:	d807      	bhi.n	5170 <MHal_INTC_FIQClear+0x14>
  {
    if((u32IntcNumber/16) == 0)
    5160:	280f      	cmp	r0, #15
    5162:	f04f 0301 	mov.w	r3, #1
    5166:	d804      	bhi.n	5172 <MHal_INTC_FIQClear+0x16>
      INREG16(INTC_FIQ_STATUS_15_0) = (1 << (u32IntcNumber%16));
    5168:	4083      	lsls	r3, r0
    516a:	4a0a      	ldr	r2, [pc, #40]	; (5194 <MHal_INTC_FIQClear+0x38>)
    516c:	b29b      	uxth	r3, r3
    else if((u32IntcNumber/16) == 1)
      INREG16(INTC_FIQ_STATUS_31_16) = (1 << (u32IntcNumber%16));
    else if((u32IntcNumber/16) == 2)
      INREG16(INTC_FIQ_STATUS_47_32) = (1 << (u32IntcNumber%16));
    else
      INREG16(INTC_FIQ_STATUS_63_48) = (1 << (u32IntcNumber%16));
    516e:	8013      	strh	r3, [r2, #0]
  }
}
    5170:	4770      	bx	lr
    else if((u32IntcNumber/16) == 1)
    5172:	f000 020f 	and.w	r2, r0, #15
    5176:	4093      	lsls	r3, r2
    5178:	f1a0 0210 	sub.w	r2, r0, #16
    517c:	2a0f      	cmp	r2, #15
    517e:	b29b      	uxth	r3, r3
    5180:	d801      	bhi.n	5186 <MHal_INTC_FIQClear+0x2a>
      INREG16(INTC_FIQ_STATUS_31_16) = (1 << (u32IntcNumber%16));
    5182:	4a05      	ldr	r2, [pc, #20]	; (5198 <MHal_INTC_FIQClear+0x3c>)
    5184:	e7f3      	b.n	516e <MHal_INTC_FIQClear+0x12>
    else if((u32IntcNumber/16) == 2)
    5186:	3820      	subs	r0, #32
    5188:	280f      	cmp	r0, #15
      INREG16(INTC_FIQ_STATUS_47_32) = (1 << (u32IntcNumber%16));
    518a:	bf94      	ite	ls
    518c:	4a03      	ldrls	r2, [pc, #12]	; (519c <MHal_INTC_FIQClear+0x40>)
      INREG16(INTC_FIQ_STATUS_63_48) = (1 << (u32IntcNumber%16));
    518e:	4a04      	ldrhi	r2, [pc, #16]	; (51a0 <MHal_INTC_FIQClear+0x44>)
    5190:	e7ed      	b.n	516e <MHal_INTC_FIQClear+0x12>
    5192:	bf00      	nop
    5194:	402033b0 	.word	0x402033b0
    5198:	402033b4 	.word	0x402033b4
    519c:	402033b8 	.word	0x402033b8
    51a0:	402033bc 	.word	0x402033bc

000051a4 <MHal_INTC_IRQMask>:


void MHal_INTC_IRQMask(U32 u32IntcNumber)
{
  if( u32IntcNumber < 64 )
    51a4:	283f      	cmp	r0, #63	; 0x3f
    51a6:	d809      	bhi.n	51bc <MHal_INTC_IRQMask+0x18>
  {
    if((u32IntcNumber/16) == 0)
    51a8:	280f      	cmp	r0, #15
    51aa:	f04f 0301 	mov.w	r3, #1
    51ae:	d806      	bhi.n	51be <MHal_INTC_IRQMask+0x1a>
      INREG16(INTC_IRQ_MASK_15_0)  |= (1 << (u32IntcNumber%16));
    51b0:	4a0b      	ldr	r2, [pc, #44]	; (51e0 <MHal_INTC_IRQMask+0x3c>)
    51b2:	8811      	ldrh	r1, [r2, #0]
    51b4:	4083      	lsls	r3, r0
	  else if((u32IntcNumber/16) == 1)
      INREG16(INTC_IRQ_MASK_31_16) |= (1 << (u32IntcNumber%16));
	  else if((u32IntcNumber/16) == 2)
      INREG16(INTC_IRQ_MASK_47_32) |= (1 << (u32IntcNumber%16));
	  else
		  INREG16(INTC_IRQ_MASK_63_48) |= (1 << (u32IntcNumber%16));
    51b6:	430b      	orrs	r3, r1
    51b8:	b29b      	uxth	r3, r3
    51ba:	8013      	strh	r3, [r2, #0]
  }
}
    51bc:	4770      	bx	lr
	  else if((u32IntcNumber/16) == 1)
    51be:	f000 020f 	and.w	r2, r0, #15
    51c2:	4093      	lsls	r3, r2
    51c4:	f1a0 0210 	sub.w	r2, r0, #16
    51c8:	2a0f      	cmp	r2, #15
    51ca:	b21b      	sxth	r3, r3
    51cc:	d802      	bhi.n	51d4 <MHal_INTC_IRQMask+0x30>
      INREG16(INTC_IRQ_MASK_31_16) |= (1 << (u32IntcNumber%16));
    51ce:	4a05      	ldr	r2, [pc, #20]	; (51e4 <MHal_INTC_IRQMask+0x40>)
		  INREG16(INTC_IRQ_MASK_63_48) |= (1 << (u32IntcNumber%16));
    51d0:	8811      	ldrh	r1, [r2, #0]
    51d2:	e7f0      	b.n	51b6 <MHal_INTC_IRQMask+0x12>
	  else if((u32IntcNumber/16) == 2)
    51d4:	3820      	subs	r0, #32
    51d6:	280f      	cmp	r0, #15
      INREG16(INTC_IRQ_MASK_47_32) |= (1 << (u32IntcNumber%16));
    51d8:	bf94      	ite	ls
    51da:	4a03      	ldrls	r2, [pc, #12]	; (51e8 <MHal_INTC_IRQMask+0x44>)
		  INREG16(INTC_IRQ_MASK_63_48) |= (1 << (u32IntcNumber%16));
    51dc:	4a03      	ldrhi	r2, [pc, #12]	; (51ec <MHal_INTC_IRQMask+0x48>)
    51de:	e7f7      	b.n	51d0 <MHal_INTC_IRQMask+0x2c>
    51e0:	402033d0 	.word	0x402033d0
    51e4:	402033d4 	.word	0x402033d4
    51e8:	402033d8 	.word	0x402033d8
    51ec:	402033dc 	.word	0x402033dc

000051f0 <MHal_INTC_IRQUnMask>:

void MHal_INTC_IRQUnMask(U32 u32IntcNumber)
{
  if( u32IntcNumber < 64 )
    51f0:	283f      	cmp	r0, #63	; 0x3f
    51f2:	d817      	bhi.n	5224 <MHal_INTC_IRQUnMask+0x34>
  {
    if((u32IntcNumber/16) == 0)
    51f4:	280f      	cmp	r0, #15
    51f6:	f04f 0301 	mov.w	r3, #1
    51fa:	d806      	bhi.n	520a <MHal_INTC_IRQUnMask+0x1a>
      INREG16(INTC_IRQ_MASK_15_0)  &= ~(1 << (u32IntcNumber%16));
    51fc:	490d      	ldr	r1, [pc, #52]	; (5234 <MHal_INTC_IRQUnMask+0x44>)
    51fe:	880a      	ldrh	r2, [r1, #0]
    5200:	4083      	lsls	r3, r0
    5202:	ea22 0303 	bic.w	r3, r2, r3
    5206:	800b      	strh	r3, [r1, #0]
    5208:	4770      	bx	lr
	  else if((u32IntcNumber/16) == 1)
    520a:	f000 020f 	and.w	r2, r0, #15
    520e:	4093      	lsls	r3, r2
    5210:	f1a0 0210 	sub.w	r2, r0, #16
    5214:	43db      	mvns	r3, r3
    5216:	2a0f      	cmp	r2, #15
    5218:	b21b      	sxth	r3, r3
    521a:	d804      	bhi.n	5226 <MHal_INTC_IRQUnMask+0x36>
      INREG16(INTC_IRQ_MASK_31_16) &= ~(1 << (u32IntcNumber%16));
    521c:	4a06      	ldr	r2, [pc, #24]	; (5238 <MHal_INTC_IRQUnMask+0x48>)
	  else if((u32IntcNumber/16) == 2)
      INREG16(INTC_IRQ_MASK_47_32) &= ~(1 << (u32IntcNumber%16));
	  else
		  INREG16(INTC_IRQ_MASK_63_48) &= ~(1 << (u32IntcNumber%16));
    521e:	8811      	ldrh	r1, [r2, #0]
    5220:	400b      	ands	r3, r1
    5222:	8013      	strh	r3, [r2, #0]
  }
}
    5224:	4770      	bx	lr
	  else if((u32IntcNumber/16) == 2)
    5226:	3820      	subs	r0, #32
    5228:	280f      	cmp	r0, #15
      INREG16(INTC_IRQ_MASK_47_32) &= ~(1 << (u32IntcNumber%16));
    522a:	bf94      	ite	ls
    522c:	4a03      	ldrls	r2, [pc, #12]	; (523c <MHal_INTC_IRQUnMask+0x4c>)
		  INREG16(INTC_IRQ_MASK_63_48) &= ~(1 << (u32IntcNumber%16));
    522e:	4a04      	ldrhi	r2, [pc, #16]	; (5240 <MHal_INTC_IRQUnMask+0x50>)
    5230:	e7f5      	b.n	521e <MHal_INTC_IRQUnMask+0x2e>
    5232:	bf00      	nop
    5234:	402033d0 	.word	0x402033d0
    5238:	402033d4 	.word	0x402033d4
    523c:	402033d8 	.word	0x402033d8
    5240:	402033dc 	.word	0x402033dc

00005244 <MHal_INTC_FIQMask>:


void MHal_INTC_FIQMask(U32 u32IntcNumber)
{
  if( u32IntcNumber < 64 )
    5244:	283f      	cmp	r0, #63	; 0x3f
    5246:	d809      	bhi.n	525c <MHal_INTC_FIQMask+0x18>
  {
    if((u32IntcNumber/16) == 0)
    5248:	280f      	cmp	r0, #15
    524a:	f04f 0301 	mov.w	r3, #1
    524e:	d806      	bhi.n	525e <MHal_INTC_FIQMask+0x1a>
      INREG16(INTC_FIQ_MASK_15_0)  |= (1 << (u32IntcNumber%16));
    5250:	4a0b      	ldr	r2, [pc, #44]	; (5280 <MHal_INTC_FIQMask+0x3c>)
    5252:	8811      	ldrh	r1, [r2, #0]
    5254:	4083      	lsls	r3, r0
	  else if((u32IntcNumber/16) == 1)
      INREG16(INTC_FIQ_MASK_31_16) |= (1 << (u32IntcNumber%16));
	  else if((u32IntcNumber/16) == 2)
      INREG16(INTC_FIQ_MASK_47_32) |= (1 << (u32IntcNumber%16));
	  else
		  INREG16(INTC_FIQ_MASK_63_48) |= (1 << (u32IntcNumber%16));
    5256:	430b      	orrs	r3, r1
    5258:	b29b      	uxth	r3, r3
    525a:	8013      	strh	r3, [r2, #0]
  }
}
    525c:	4770      	bx	lr
	  else if((u32IntcNumber/16) == 1)
    525e:	f000 020f 	and.w	r2, r0, #15
    5262:	4093      	lsls	r3, r2
    5264:	f1a0 0210 	sub.w	r2, r0, #16
    5268:	2a0f      	cmp	r2, #15
    526a:	b21b      	sxth	r3, r3
    526c:	d802      	bhi.n	5274 <MHal_INTC_FIQMask+0x30>
      INREG16(INTC_FIQ_MASK_31_16) |= (1 << (u32IntcNumber%16));
    526e:	4a05      	ldr	r2, [pc, #20]	; (5284 <MHal_INTC_FIQMask+0x40>)
		  INREG16(INTC_FIQ_MASK_63_48) |= (1 << (u32IntcNumber%16));
    5270:	8811      	ldrh	r1, [r2, #0]
    5272:	e7f0      	b.n	5256 <MHal_INTC_FIQMask+0x12>
	  else if((u32IntcNumber/16) == 2)
    5274:	3820      	subs	r0, #32
    5276:	280f      	cmp	r0, #15
      INREG16(INTC_FIQ_MASK_47_32) |= (1 << (u32IntcNumber%16));
    5278:	bf94      	ite	ls
    527a:	4a03      	ldrls	r2, [pc, #12]	; (5288 <MHal_INTC_FIQMask+0x44>)
		  INREG16(INTC_FIQ_MASK_63_48) |= (1 << (u32IntcNumber%16));
    527c:	4a03      	ldrhi	r2, [pc, #12]	; (528c <MHal_INTC_FIQMask+0x48>)
    527e:	e7f7      	b.n	5270 <MHal_INTC_FIQMask+0x2c>
    5280:	40203390 	.word	0x40203390
    5284:	40203394 	.word	0x40203394
    5288:	40203398 	.word	0x40203398
    528c:	4020339c 	.word	0x4020339c

00005290 <MHal_INTC_FIQUnMask>:

void MHal_INTC_FIQUnMask(U32 u32IntcNumber)
{
  if( u32IntcNumber < 64 )
    5290:	283f      	cmp	r0, #63	; 0x3f
    5292:	d817      	bhi.n	52c4 <MHal_INTC_FIQUnMask+0x34>
  {
    if((u32IntcNumber/16) == 0)
    5294:	280f      	cmp	r0, #15
    5296:	f04f 0301 	mov.w	r3, #1
    529a:	d806      	bhi.n	52aa <MHal_INTC_FIQUnMask+0x1a>
      INREG16(INTC_FIQ_MASK_15_0)  &= ~(1 << (u32IntcNumber%16));
    529c:	490d      	ldr	r1, [pc, #52]	; (52d4 <MHal_INTC_FIQUnMask+0x44>)
    529e:	880a      	ldrh	r2, [r1, #0]
    52a0:	4083      	lsls	r3, r0
    52a2:	ea22 0303 	bic.w	r3, r2, r3
    52a6:	800b      	strh	r3, [r1, #0]
    52a8:	4770      	bx	lr
	  else if((u32IntcNumber/16) == 1)
    52aa:	f000 020f 	and.w	r2, r0, #15
    52ae:	4093      	lsls	r3, r2
    52b0:	f1a0 0210 	sub.w	r2, r0, #16
    52b4:	43db      	mvns	r3, r3
    52b6:	2a0f      	cmp	r2, #15
    52b8:	b21b      	sxth	r3, r3
    52ba:	d804      	bhi.n	52c6 <MHal_INTC_FIQUnMask+0x36>
      INREG16(INTC_FIQ_MASK_31_16) &= ~(1 << (u32IntcNumber%16));
    52bc:	4a06      	ldr	r2, [pc, #24]	; (52d8 <MHal_INTC_FIQUnMask+0x48>)
	  else if((u32IntcNumber/16) == 2)
      INREG16(INTC_FIQ_MASK_47_32) &= ~(1 << (u32IntcNumber%16));
	  else
		  INREG16(INTC_FIQ_MASK_63_48) &= ~(1 << (u32IntcNumber%16));
    52be:	8811      	ldrh	r1, [r2, #0]
    52c0:	400b      	ands	r3, r1
    52c2:	8013      	strh	r3, [r2, #0]
  }
}
    52c4:	4770      	bx	lr
	  else if((u32IntcNumber/16) == 2)
    52c6:	3820      	subs	r0, #32
    52c8:	280f      	cmp	r0, #15
      INREG16(INTC_FIQ_MASK_47_32) &= ~(1 << (u32IntcNumber%16));
    52ca:	bf94      	ite	ls
    52cc:	4a03      	ldrls	r2, [pc, #12]	; (52dc <MHal_INTC_FIQUnMask+0x4c>)
		  INREG16(INTC_FIQ_MASK_63_48) &= ~(1 << (u32IntcNumber%16));
    52ce:	4a04      	ldrhi	r2, [pc, #16]	; (52e0 <MHal_INTC_FIQUnMask+0x50>)
    52d0:	e7f5      	b.n	52be <MHal_INTC_FIQUnMask+0x2e>
    52d2:	bf00      	nop
    52d4:	40203390 	.word	0x40203390
    52d8:	40203394 	.word	0x40203394
    52dc:	40203398 	.word	0x40203398
    52e0:	4020339c 	.word	0x4020339c

000052e4 <MHal_CPUINT_Fire>:
//=============================================================================

void MHal_CPUINT_Fire (CPUINT_ID_e eDstCPUID, CPUINT_ID_e eSrcCPUID)
{

    if (_u16CPUINTBitMap[eSrcCPUID][eDstCPUID] == 0xFF)
    52e4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    52e8:	4b07      	ldr	r3, [pc, #28]	; (5308 <MHal_CPUINT_Fire+0x24>)
    52ea:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    52ee:	2aff      	cmp	r2, #255	; 0xff
    52f0:	d009      	beq.n	5306 <MHal_CPUINT_Fire+0x22>
      return;

    SETREG16(GET_REG16_ADDR(CPUINT_BASE_ADDR, eSrcCPUID*2), _u16CPUINTBitMap[eSrcCPUID][eDstCPUID]);
    52f2:	4b06      	ldr	r3, [pc, #24]	; (530c <MHal_CPUINT_Fire+0x28>)
    52f4:	440b      	add	r3, r1
    52f6:	00db      	lsls	r3, r3, #3
    52f8:	8819      	ldrh	r1, [r3, #0]
    52fa:	4311      	orrs	r1, r2
    52fc:	8019      	strh	r1, [r3, #0]
    CLRREG16(GET_REG16_ADDR(CPUINT_BASE_ADDR, eSrcCPUID*2), _u16CPUINTBitMap[eSrcCPUID][eDstCPUID]);
    52fe:	8819      	ldrh	r1, [r3, #0]
    5300:	ea21 0202 	bic.w	r2, r1, r2
    5304:	801a      	strh	r2, [r3, #0]

}
    5306:	4770      	bx	lr
    5308:	0000bb60 	.word	0x0000bb60
    530c:	08040150 	.word	0x08040150

00005310 <MHal_CPUINT_Clear>:

void MHal_CPUINT_Clear (CPUINT_ID_e eDstCPUID, CPUINT_ID_e eSrcCPUID)
{
    if (_u16CPUINTBitMap[eSrcCPUID][eDstCPUID] == 0xFF)
    5310:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    5314:	4b06      	ldr	r3, [pc, #24]	; (5330 <MHal_CPUINT_Clear+0x20>)
    5316:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    531a:	28ff      	cmp	r0, #255	; 0xff
    531c:	d006      	beq.n	532c <MHal_CPUINT_Clear+0x1c>
      return;

    CLRREG16(GET_REG16_ADDR(CPUINT_BASE_ADDR, eSrcCPUID*2), _u16CPUINTBitMap[eSrcCPUID][eDstCPUID]);
    531e:	4b05      	ldr	r3, [pc, #20]	; (5334 <MHal_CPUINT_Clear+0x24>)
    5320:	440b      	add	r3, r1
    5322:	00db      	lsls	r3, r3, #3
    5324:	881a      	ldrh	r2, [r3, #0]
    5326:	ea22 0200 	bic.w	r2, r2, r0
    532a:	801a      	strh	r2, [r3, #0]
}
    532c:	4770      	bx	lr
    532e:	bf00      	nop
    5330:	0000bb60 	.word	0x0000bb60
    5334:	08040150 	.word	0x08040150

00005338 <MHal_BDMA_PollingDone>:

BOOL MHal_BDMA_PollingDone(BDMA_Ch channel)
{
    while(1)
    {
        if(INREG16(BDMA_REG_STATUS(channel)) & BDMA_CH_DONE)
    5338:	4a03      	ldr	r2, [pc, #12]	; (5348 <MHal_BDMA_PollingDone+0x10>)
    533a:	0180      	lsls	r0, r0, #6
    533c:	4402      	add	r2, r0
    533e:	8813      	ldrh	r3, [r2, #0]
    5340:	071b      	lsls	r3, r3, #28
    5342:	d5fc      	bpl.n	533e <MHal_BDMA_PollingDone+0x6>
        {
            return TRUE;
        }
    }
}
    5344:	2001      	movs	r0, #1
    5346:	4770      	bx	lr
    5348:	402a3404 	.word	0x402a3404

0000534c <MHal_BDMA_IMItoMIU>:
{
    return (INREG16(BDMA_REG_CMD1_L(channel)) | (INREG16(BDMA_REG_CMD1_H(channel)) <<16));
}

BOOL MHal_BDMA_IMItoMIU(BDMA_Ch channel, U32 u32Src, U32 u32Dst, U32 u32Len)
{
    534c:	b470      	push	{r4, r5, r6}

    //u32Src &= (~MIU_BASE_ADDR);
    //u32Dst &= (~MIU_BASE_ADDR);

    OUTREG16(BDMA_REG_STATUS(channel),BDMA_CH_CLEAR_STATUS);
    534e:	4c0f      	ldr	r4, [pc, #60]	; (538c <MHal_BDMA_IMItoMIU+0x40>)
    OUTREG16(BDMA_REG_DST_ADDR_H(channel), (U16)((u32Dst>>16) & 0xFFFF));

    OUTREG16(BDMA_REG_SIZE_L(channel),(U16)(u32Len & 0xFFFF));
    OUTREG16(BDMA_REG_SIZE_H(channel),(U16)((u32Len>>16) & 0xFFFF));

    OUTREG16(BDMA_REG_CTRL(channel),BDMA_CH_TRIGGER);
    5350:	4d0f      	ldr	r5, [pc, #60]	; (5390 <MHal_BDMA_IMItoMIU+0x44>)
    OUTREG16(BDMA_REG_STATUS(channel),BDMA_CH_CLEAR_STATUS);
    5352:	0186      	lsls	r6, r0, #6
    5354:	4434      	add	r4, r6
    OUTREG16(BDMA_REG_CTRL(channel),BDMA_CH_TRIGGER);
    5356:	4405      	add	r5, r0
    OUTREG16(BDMA_REG_MISC(channel), 0x8000);
    5358:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    OUTREG16(BDMA_REG_STATUS(channel),BDMA_CH_CLEAR_STATUS);
    535c:	201c      	movs	r0, #28
    535e:	8020      	strh	r0, [r4, #0]
    OUTREG16(BDMA_REG_CTRL(channel),BDMA_CH_TRIGGER);
    5360:	01ad      	lsls	r5, r5, #6
    OUTREG16(BDMA_REG_MISC(channel), 0x8000);
    5362:	8126      	strh	r6, [r4, #8]
    OUTREG16(BDMA_REG_DEV_SEL(channel),0x4041); //replace MIU channel0
    5364:	f244 0041 	movw	r0, #16449	; 0x4041
    OUTREG16(BDMA_REG_SRC_ADDR_L(channel),(U16)(u32Src & 0xFFFF));
    5368:	b28e      	uxth	r6, r1
    OUTREG16(BDMA_REG_SRC_ADDR_H(channel),(U16)((u32Src>>16) & 0xFFFF));
    536a:	0c09      	lsrs	r1, r1, #16
    OUTREG16(BDMA_REG_DEV_SEL(channel),0x4041); //replace MIU channel0
    536c:	80a0      	strh	r0, [r4, #4]
    OUTREG16(BDMA_REG_SRC_ADDR_L(channel),(U16)(u32Src & 0xFFFF));
    536e:	81a6      	strh	r6, [r4, #12]
    OUTREG16(BDMA_REG_DST_ADDR_L(channel), (U16)(u32Dst & 0xFFFF));
    5370:	b290      	uxth	r0, r2
    OUTREG16(BDMA_REG_SRC_ADDR_H(channel),(U16)((u32Src>>16) & 0xFFFF));
    5372:	8221      	strh	r1, [r4, #16]
    OUTREG16(BDMA_REG_SIZE_L(channel),(U16)(u32Len & 0xFFFF));
    5374:	b29e      	uxth	r6, r3
    OUTREG16(BDMA_REG_CTRL(channel),BDMA_CH_TRIGGER);
    5376:	2101      	movs	r1, #1
    OUTREG16(BDMA_REG_DST_ADDR_H(channel), (U16)((u32Dst>>16) & 0xFFFF));
    5378:	0c12      	lsrs	r2, r2, #16
    OUTREG16(BDMA_REG_SIZE_H(channel),(U16)((u32Len>>16) & 0xFFFF));
    537a:	0c1b      	lsrs	r3, r3, #16
    OUTREG16(BDMA_REG_DST_ADDR_L(channel), (U16)(u32Dst & 0xFFFF));
    537c:	82a0      	strh	r0, [r4, #20]
    OUTREG16(BDMA_REG_DST_ADDR_H(channel), (U16)((u32Dst>>16) & 0xFFFF));
    537e:	8322      	strh	r2, [r4, #24]

    return TRUE;
}
    5380:	4608      	mov	r0, r1
    OUTREG16(BDMA_REG_SIZE_L(channel),(U16)(u32Len & 0xFFFF));
    5382:	83a6      	strh	r6, [r4, #28]
    OUTREG16(BDMA_REG_SIZE_H(channel),(U16)((u32Len>>16) & 0xFFFF));
    5384:	8423      	strh	r3, [r4, #32]
    OUTREG16(BDMA_REG_CTRL(channel),BDMA_CH_TRIGGER);
    5386:	8029      	strh	r1, [r5, #0]
}
    5388:	bc70      	pop	{r4, r5, r6}
    538a:	4770      	bx	lr
    538c:	402a3404 	.word	0x402a3404
    5390:	0100a8d0 	.word	0x0100a8d0

00005394 <MHal_BDMA_MIUtoIMI>:

BOOL MHal_BDMA_MIUtoIMI(BDMA_Ch channel, U32 u32Src, U32 u32Dst, U32 u32Len)
{
    5394:	b470      	push	{r4, r5, r6}

    //u32Src &= (~MIU_BASE_ADDR);
    //u32Dst &= (~MIU_BASE_ADDR);

    OUTREG16(BDMA_REG_STATUS(channel),BDMA_CH_CLEAR_STATUS);
    5396:	4c0f      	ldr	r4, [pc, #60]	; (53d4 <MHal_BDMA_MIUtoIMI+0x40>)
    OUTREG16(BDMA_REG_DST_ADDR_H(channel), (U16)((u32Dst>>16) & 0xFFFF));

    OUTREG16(BDMA_REG_SIZE_L(channel),(U16)(u32Len & 0xFFFF));
    OUTREG16(BDMA_REG_SIZE_H(channel),(U16)((u32Len>>16) & 0xFFFF));

    OUTREG16(BDMA_REG_CTRL(channel),BDMA_CH_TRIGGER);
    5398:	4d0f      	ldr	r5, [pc, #60]	; (53d8 <MHal_BDMA_MIUtoIMI+0x44>)
    OUTREG16(BDMA_REG_STATUS(channel),BDMA_CH_CLEAR_STATUS);
    539a:	0186      	lsls	r6, r0, #6
    539c:	4434      	add	r4, r6
    OUTREG16(BDMA_REG_CTRL(channel),BDMA_CH_TRIGGER);
    539e:	4405      	add	r5, r0
    OUTREG16(BDMA_REG_MISC(channel), 0x8000);
    53a0:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    OUTREG16(BDMA_REG_STATUS(channel),BDMA_CH_CLEAR_STATUS);
    53a4:	201c      	movs	r0, #28
    53a6:	8020      	strh	r0, [r4, #0]
    OUTREG16(BDMA_REG_CTRL(channel),BDMA_CH_TRIGGER);
    53a8:	01ad      	lsls	r5, r5, #6
    OUTREG16(BDMA_REG_MISC(channel), 0x8000);
    53aa:	8126      	strh	r6, [r4, #8]
    OUTREG16(BDMA_REG_DEV_SEL(channel),0x4140); //replace MIU channel0
    53ac:	f244 1040 	movw	r0, #16704	; 0x4140
    OUTREG16(BDMA_REG_SRC_ADDR_L(channel),(U16)(u32Src & 0xFFFF));
    53b0:	b28e      	uxth	r6, r1
    OUTREG16(BDMA_REG_SRC_ADDR_H(channel),(U16)((u32Src>>16) & 0xFFFF));
    53b2:	0c09      	lsrs	r1, r1, #16
    OUTREG16(BDMA_REG_DEV_SEL(channel),0x4140); //replace MIU channel0
    53b4:	80a0      	strh	r0, [r4, #4]
    OUTREG16(BDMA_REG_SRC_ADDR_L(channel),(U16)(u32Src & 0xFFFF));
    53b6:	81a6      	strh	r6, [r4, #12]
    OUTREG16(BDMA_REG_DST_ADDR_L(channel), (U16)(u32Dst & 0xFFFF));
    53b8:	b290      	uxth	r0, r2
    OUTREG16(BDMA_REG_SRC_ADDR_H(channel),(U16)((u32Src>>16) & 0xFFFF));
    53ba:	8221      	strh	r1, [r4, #16]
    OUTREG16(BDMA_REG_SIZE_L(channel),(U16)(u32Len & 0xFFFF));
    53bc:	b29e      	uxth	r6, r3
    OUTREG16(BDMA_REG_CTRL(channel),BDMA_CH_TRIGGER);
    53be:	2101      	movs	r1, #1
    OUTREG16(BDMA_REG_DST_ADDR_H(channel), (U16)((u32Dst>>16) & 0xFFFF));
    53c0:	0c12      	lsrs	r2, r2, #16
    OUTREG16(BDMA_REG_SIZE_H(channel),(U16)((u32Len>>16) & 0xFFFF));
    53c2:	0c1b      	lsrs	r3, r3, #16
    OUTREG16(BDMA_REG_DST_ADDR_L(channel), (U16)(u32Dst & 0xFFFF));
    53c4:	82a0      	strh	r0, [r4, #20]
    OUTREG16(BDMA_REG_DST_ADDR_H(channel), (U16)((u32Dst>>16) & 0xFFFF));
    53c6:	8322      	strh	r2, [r4, #24]

    return TRUE;
}
    53c8:	4608      	mov	r0, r1
    OUTREG16(BDMA_REG_SIZE_L(channel),(U16)(u32Len & 0xFFFF));
    53ca:	83a6      	strh	r6, [r4, #28]
    OUTREG16(BDMA_REG_SIZE_H(channel),(U16)((u32Len>>16) & 0xFFFF));
    53cc:	8423      	strh	r3, [r4, #32]
    OUTREG16(BDMA_REG_CTRL(channel),BDMA_CH_TRIGGER);
    53ce:	8029      	strh	r1, [r5, #0]
}
    53d0:	bc70      	pop	{r4, r5, r6}
    53d2:	4770      	bx	lr
    53d4:	402a3404 	.word	0x402a3404
    53d8:	0100a8d0 	.word	0x0100a8d0

000053dc <MHal_BDMA_IMItoIMI>:


BOOL MHal_BDMA_IMItoIMI(BDMA_Ch channel, U32 u32Src, U32 u32Dst, U32 u32Len)
{
    53dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    //u32Src &= (~IMI_BASE_ADDR);
    //u32Dst &= (~IMI_BASE_ADDR);

    BDMA_MSG("MHal_BDMA_IMItoIMI = 0x%x -> 0x%x (0x%x)\n", u32Src, u32Dst, u32Len);
    53e0:	4c16      	ldr	r4, [pc, #88]	; (543c <MHal_BDMA_IMItoIMI+0x60>)
    53e2:	6824      	ldr	r4, [r4, #0]
{
    53e4:	4605      	mov	r5, r0
    BDMA_MSG("MHal_BDMA_IMItoIMI = 0x%x -> 0x%x (0x%x)\n", u32Src, u32Dst, u32Len);
    53e6:	02e0      	lsls	r0, r4, #11
{
    53e8:	4688      	mov	r8, r1
    53ea:	4617      	mov	r7, r2
    53ec:	461e      	mov	r6, r3
    BDMA_MSG("MHal_BDMA_IMItoIMI = 0x%x -> 0x%x (0x%x)\n", u32Src, u32Dst, u32Len);
    53ee:	d420      	bmi.n	5432 <MHal_BDMA_IMItoIMI+0x56>
    OUTREG16(BDMA_REG_DST_ADDR_H(channel), (U16)((u32Dst>>16) & 0xFFFF));

    OUTREG16(BDMA_REG_SIZE_L(channel),(U16)(u32Len & 0xFFFF));
    OUTREG16(BDMA_REG_SIZE_H(channel),(U16)((u32Len>>16) & 0xFFFF));

    OUTREG16(BDMA_REG_CTRL(channel),BDMA_CH_TRIGGER);
    53f0:	4b13      	ldr	r3, [pc, #76]	; (5440 <MHal_BDMA_IMItoIMI+0x64>)
    OUTREG16(BDMA_REG_STATUS(channel),BDMA_CH_CLEAR_STATUS);
    53f2:	4c14      	ldr	r4, [pc, #80]	; (5444 <MHal_BDMA_IMItoIMI+0x68>)
    53f4:	01aa      	lsls	r2, r5, #6
    53f6:	4414      	add	r4, r2
    OUTREG16(BDMA_REG_CTRL(channel),BDMA_CH_TRIGGER);
    53f8:	442b      	add	r3, r5
    53fa:	019d      	lsls	r5, r3, #6
    OUTREG16(BDMA_REG_STATUS(channel),BDMA_CH_CLEAR_STATUS);
    53fc:	221c      	movs	r2, #28
    OUTREG16(BDMA_REG_MISC(channel),0x8000);
    53fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    OUTREG16(BDMA_REG_STATUS(channel),BDMA_CH_CLEAR_STATUS);
    5402:	8022      	strh	r2, [r4, #0]
    OUTREG16(BDMA_REG_SRC_ADDR_H(channel),(U16)((u32Src>>16) & 0xFFFF));
    5404:	ea4f 4118 	mov.w	r1, r8, lsr #16
    OUTREG16(BDMA_REG_MISC(channel),0x8000);
    5408:	8123      	strh	r3, [r4, #8]
    OUTREG16(BDMA_REG_DEV_SEL(channel),0x4141);
    540a:	f244 1241 	movw	r2, #16705	; 0x4141
    OUTREG16(BDMA_REG_SRC_ADDR_L(channel),(U16)(u32Src & 0xFFFF));
    540e:	fa1f f388 	uxth.w	r3, r8
    OUTREG16(BDMA_REG_DEV_SEL(channel),0x4141);
    5412:	80a2      	strh	r2, [r4, #4]
    OUTREG16(BDMA_REG_DST_ADDR_L(channel), (U16)(u32Dst & 0xFFFF));
    5414:	b2b8      	uxth	r0, r7
    OUTREG16(BDMA_REG_SRC_ADDR_L(channel),(U16)(u32Src & 0xFFFF));
    5416:	81a3      	strh	r3, [r4, #12]
    OUTREG16(BDMA_REG_DST_ADDR_H(channel), (U16)((u32Dst>>16) & 0xFFFF));
    5418:	0c3a      	lsrs	r2, r7, #16
    OUTREG16(BDMA_REG_SRC_ADDR_H(channel),(U16)((u32Src>>16) & 0xFFFF));
    541a:	8221      	strh	r1, [r4, #16]
    OUTREG16(BDMA_REG_SIZE_L(channel),(U16)(u32Len & 0xFFFF));
    541c:	b2b7      	uxth	r7, r6
    OUTREG16(BDMA_REG_CTRL(channel),BDMA_CH_TRIGGER);
    541e:	2101      	movs	r1, #1
    OUTREG16(BDMA_REG_SIZE_H(channel),(U16)((u32Len>>16) & 0xFFFF));
    5420:	0c33      	lsrs	r3, r6, #16
    OUTREG16(BDMA_REG_DST_ADDR_L(channel), (U16)(u32Dst & 0xFFFF));
    5422:	82a0      	strh	r0, [r4, #20]
    OUTREG16(BDMA_REG_DST_ADDR_H(channel), (U16)((u32Dst>>16) & 0xFFFF));
    5424:	8322      	strh	r2, [r4, #24]

    return TRUE;
}
    5426:	4608      	mov	r0, r1
    OUTREG16(BDMA_REG_SIZE_L(channel),(U16)(u32Len & 0xFFFF));
    5428:	83a7      	strh	r7, [r4, #28]
    OUTREG16(BDMA_REG_SIZE_H(channel),(U16)((u32Len>>16) & 0xFFFF));
    542a:	8423      	strh	r3, [r4, #32]
    OUTREG16(BDMA_REG_CTRL(channel),BDMA_CH_TRIGGER);
    542c:	8029      	strh	r1, [r5, #0]
}
    542e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    BDMA_MSG("MHal_BDMA_IMItoIMI = 0x%x -> 0x%x (0x%x)\n", u32Src, u32Dst, u32Len);
    5432:	4805      	ldr	r0, [pc, #20]	; (5448 <MHal_BDMA_IMItoIMI+0x6c>)
    5434:	f7fe f916 	bl	3664 <UartSendTrace>
    5438:	e7da      	b.n	53f0 <MHal_BDMA_IMItoIMI+0x14>
    543a:	bf00      	nop
    543c:	0000ca14 	.word	0x0000ca14
    5440:	0100a8d0 	.word	0x0100a8d0
    5444:	402a3404 	.word	0x402a3404
    5448:	0000bb80 	.word	0x0000bb80

0000544c <MHal_BDMA_Init>:
    return TRUE;
}

void MHal_BDMA_Init(void)
{
	SETREG16(GET_REG8_ADDR(RIU_BASE_ADDR, 0x112ca4 ), 0x2); // bdma XTAIL Clock
    544c:	4a03      	ldr	r2, [pc, #12]	; (545c <MHal_BDMA_Init+0x10>)
    544e:	8813      	ldrh	r3, [r2, #0]
    5450:	f043 0302 	orr.w	r3, r3, #2
    5454:	8013      	strh	r3, [r2, #0]
	MOS_mDelay(1);
    5456:	2001      	movs	r0, #1
    5458:	f001 bdf4 	b.w	7044 <MOS_mDelay>
    545c:	40225948 	.word	0x40225948

00005460 <MHal_BDMA_Resume>:
}

void MHal_BDMA_Resume(void)
{
}
    5460:	4770      	bx	lr
    5462:	bf00      	nop

00005464 <Mhal_PM_Suspend>:
  _WriteReg(0x0325F4, 0x0198);
  _WriteReg(0x0325F4, 0x0198);
  _WriteReg(0x0325F4, 0x0398);
#endif
  return;
}
    5464:	4770      	bx	lr
	...

00005468 <Mhal_PM_Resume>:
  _WriteReg(0x0325F4, 0x0199);
  _WriteReg(0x0325F4, 0x0399);
#endif
  //0x0E_08[6] = 1'b0 (16 bit address mode)
  //0x0E_73[15] = 1'b1(16 bit address mode)
  CLRREG16(REG_WK_IRQ_MASK, (1<<6));
    5468:	4a06      	ldr	r2, [pc, #24]	; (5484 <Mhal_PM_Resume+0x1c>)
    546a:	8813      	ldrh	r3, [r2, #0]
    546c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    5470:	041b      	lsls	r3, r3, #16
    5472:	0c1b      	lsrs	r3, r3, #16
    5474:	8013      	strh	r3, [r2, #0]
  SETREG16(REG_WK_INT, (1<<15));
    5476:	f8b2 31ac 	ldrh.w	r3, [r2, #428]	; 0x1ac
    547a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    547e:	f8a2 31ac 	strh.w	r3, [r2, #428]	; 0x1ac
  return;
}
    5482:	4770      	bx	lr
    5484:	40001c20 	.word	0x40001c20

00005488 <MHal_CPU_Init>:
#include "mosWrapper.h"
#include "halCPU.h"

#define WRIU8(x, y, z) INSREG8(GET_REG8_ADDR(RIU_BASE_ADDR, x), y, z)

void MHal_CPU_Init(void) {}
    5488:	4770      	bx	lr
    548a:	bf00      	nop

0000548c <MHal_CPU_SetFreq>:
wriu -b 0x0325F8 0x10 0x00

DC ON
wriu -b 0x0325F8 0x10 0x10
*/
  switch(eFreq)
    548c:	2801      	cmp	r0, #1
    548e:	d008      	beq.n	54a2 <MHal_CPU_SetFreq+0x16>
    5490:	2802      	cmp	r0, #2
    5492:	d105      	bne.n	54a0 <MHal_CPU_SetFreq+0x14>
      //power off XINGGIGPLL
      break;
    case E_CPU_FREQ_HIGH:
      //power on XINGGIGPLL
      //MOS_uDelay(500);
       WRIU8(0x0325F8, 0x10, 0x10);
    5494:	4a06      	ldr	r2, [pc, #24]	; (54b0 <MHal_CPU_SetFreq+0x24>)
    5496:	7813      	ldrb	r3, [r2, #0]
    5498:	f043 0310 	orr.w	r3, r3, #16
    549c:	7013      	strb	r3, [r2, #0]
        break;
    default:
        break;
  }
}
    549e:	4770      	bx	lr
    54a0:	4770      	bx	lr
      WRIU8(0x0325F8, 0x10, 0x00);
    54a2:	4a03      	ldr	r2, [pc, #12]	; (54b0 <MHal_CPU_SetFreq+0x24>)
    54a4:	7813      	ldrb	r3, [r2, #0]
    54a6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    54aa:	7013      	strb	r3, [r2, #0]
      break;
    54ac:	4770      	bx	lr
    54ae:	bf00      	nop
    54b0:	40064bf0 	.word	0x40064bf0

000054b4 <ch6_scale48k>:
  *(outp+offset+4) = (int16_t)a[4];
  *(outp+offset+5) = (int16_t)a[5];
}
#endif
static void ch6_scale48k(int16_t* outp, int offset)
{
    54b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  }

  rd=(rd+6*3)%len;
*/

  for (i = 0; i < order_count; i++) {
    54b8:	4bdd      	ldr	r3, [pc, #884]	; (5830 <ch6_scale48k+0x37c>)
    a[i] = 0;
    54ba:	ed9f 4ade 	vldr	s8, [pc, #888]	; 5834 <ch6_scale48k+0x380>
  for (i = 0; i < order_count; i++) {
    54be:	f8d3 b000 	ldr.w	fp, [r3]
    54c2:	4add      	ldr	r2, [pc, #884]	; (5838 <ch6_scale48k+0x384>)
    54c4:	4bdd      	ldr	r3, [pc, #884]	; (583c <ch6_scale48k+0x388>)
    54c6:	f8d2 a000 	ldr.w	sl, [r2]
    54ca:	681f      	ldr	r7, [r3, #0]
{
    54cc:	ed2d 8b04 	vpush	{d8-d9}
  for (i = 0; i < order_count; i++) {
    54d0:	f1bb 0f00 	cmp.w	fp, #0
{
    54d4:	b087      	sub	sp, #28
    a[i] = 0;
    54d6:	ed8d 4a00 	vstr	s8, [sp]
    54da:	ed8d 4a01 	vstr	s8, [sp, #4]
    54de:	ed8d 4a02 	vstr	s8, [sp, #8]
    54e2:	ed8d 4a03 	vstr	s8, [sp, #12]
    54e6:	ed8d 4a04 	vstr	s8, [sp, #16]
    54ea:	ed8d 4a05 	vstr	s8, [sp, #20]
  for (i = 0; i < order_count; i++) {
    54ee:	f340 818f 	ble.w	5810 <ch6_scale48k+0x35c>
    54f2:	4bd3      	ldr	r3, [pc, #844]	; (5840 <ch6_scale48k+0x38c>)
    54f4:	f8df c350 	ldr.w	ip, [pc, #848]	; 5848 <ch6_scale48k+0x394>
    54f8:	ea4f 084a 	mov.w	r8, sl, lsl #1
    54fc:	eef0 1a44 	vmov.f32	s3, s8
    5500:	eeb0 1a44 	vmov.f32	s2, s8
    5504:	eef0 0a44 	vmov.f32	s1, s8
    5508:	eeb0 8a44 	vmov.f32	s16, s8
    550c:	eeb0 0a44 	vmov.f32	s0, s8
    5510:	eb03 098b 	add.w	r9, r3, fp, lsl #2
  float* tap = res_coeff;
    5514:	469e      	mov	lr, r3
    5516:	f508 68b1 	add.w	r8, r8, #1416	; 0x588
    551a:	4654      	mov	r4, sl
    j = (rd+i*6)%len;
    551c:	fb94 f5f7 	sdiv	r5, r4, r7
    5520:	fb07 4515 	mls	r5, r7, r5, r4
    k = (rd+ (res_order - 1- i)*6)%len;
    5524:	eba8 0304 	sub.w	r3, r8, r4
    5528:	fb93 f6f7 	sdiv	r6, r3, r7
    552c:	fb07 3616 	mls	r6, r7, r6, r3
    a[0] += *tap * ((float)*(buffer + (j  )) + (float)*(buffer + (k   )));
    a[1] += *tap * ((float)*(buffer + (j+1)) + (float)*(buffer + (k+1 )));
    5530:	eb0c 0345 	add.w	r3, ip, r5, lsl #1
    a[0] += *tap * ((float)*(buffer + (j  )) + (float)*(buffer + (k   )));
    5534:	f93c 5015 	ldrsh.w	r5, [ip, r5, lsl #1]
    5538:	ecfe 7a01 	vldmia	lr!, {s15}
    a[1] += *tap * ((float)*(buffer + (j+1)) + (float)*(buffer + (k+1 )));
    553c:	eb0c 0246 	add.w	r2, ip, r6, lsl #1
    a[0] += *tap * ((float)*(buffer + (j  )) + (float)*(buffer + (k   )));
    5540:	ee05 5a10 	vmov	s10, r5
    a[1] += *tap * ((float)*(buffer + (j+1)) + (float)*(buffer + (k+1 )));
    5544:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
    a[0] += *tap * ((float)*(buffer + (j  )) + (float)*(buffer + (k   )));
    5548:	f93c 6016 	ldrsh.w	r6, [ip, r6, lsl #1]
    a[1] += *tap * ((float)*(buffer + (j+1)) + (float)*(buffer + (k+1 )));
    554c:	ee04 5a90 	vmov	s9, r5
    a[2] += *tap * ((float)*(buffer + (j+2)) + (float)*(buffer + (k+2 )));
    5550:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
    5554:	ee02 5a10 	vmov	s4, r5
    5558:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
    555c:	ee05 5a90 	vmov	s11, r5
    a[3] += *tap * ((float)*(buffer + (j+3)) + (float)*(buffer + (k+3 )));
    5560:	f9b2 5006 	ldrsh.w	r5, [r2, #6]
    5564:	ee02 5a90 	vmov	s5, r5
    5568:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
    a[0] += *tap * ((float)*(buffer + (j  )) + (float)*(buffer + (k   )));
    556c:	ee08 6a90 	vmov	s17, r6
    a[3] += *tap * ((float)*(buffer + (j+3)) + (float)*(buffer + (k+3 )));
    5570:	ee06 5a10 	vmov	s12, r5
    a[1] += *tap * ((float)*(buffer + (j+1)) + (float)*(buffer + (k+1 )));
    5574:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
    a[4] += *tap * ((float)*(buffer + (j+4)) + (float)*(buffer + (k+4 )));
    5578:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
    a[5] += *tap * ((float)*(buffer + (j+5)) + (float)*(buffer + (k+5 )));
    557c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
    5580:	ee03 2a90 	vmov	s7, r2
    a[4] += *tap * ((float)*(buffer + (j+4)) + (float)*(buffer + (k+4 )));
    5584:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
    a[5] += *tap * ((float)*(buffer + (j+5)) + (float)*(buffer + (k+5 )));
    5588:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    a[1] += *tap * ((float)*(buffer + (j+1)) + (float)*(buffer + (k+1 )));
    558c:	ee09 6a10 	vmov	s18, r6
    a[4] += *tap * ((float)*(buffer + (j+4)) + (float)*(buffer + (k+4 )));
    5590:	ee03 5a10 	vmov	s6, r5
    5594:	ee06 2a90 	vmov	s13, r2
    a[5] += *tap * ((float)*(buffer + (j+5)) + (float)*(buffer + (k+5 )));
    5598:	ee07 3a10 	vmov	s14, r3
    a[1] += *tap * ((float)*(buffer + (j+1)) + (float)*(buffer + (k+1 )));
    559c:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
    55a0:	eef8 4ae4 	vcvt.f32.s32	s9, s9
    a[0] += *tap * ((float)*(buffer + (j  )) + (float)*(buffer + (k   )));
    55a4:	eef8 8ae8 	vcvt.f32.s32	s17, s17
    55a8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    a[2] += *tap * ((float)*(buffer + (j+2)) + (float)*(buffer + (k+2 )));
    55ac:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
    55b0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
    a[3] += *tap * ((float)*(buffer + (j+3)) + (float)*(buffer + (k+3 )));
    55b4:	eef8 2ae2 	vcvt.f32.s32	s5, s5
    55b8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    a[4] += *tap * ((float)*(buffer + (j+4)) + (float)*(buffer + (k+4 )));
    55bc:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
    55c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    a[5] += *tap * ((float)*(buffer + (j+5)) + (float)*(buffer + (k+5 )));
    55c4:	eef8 3ae3 	vcvt.f32.s32	s7, s7
    55c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    a[1] += *tap * ((float)*(buffer + (j+1)) + (float)*(buffer + (k+1 )));
    55cc:	ee74 4a89 	vadd.f32	s9, s9, s18
    a[0] += *tap * ((float)*(buffer + (j  )) + (float)*(buffer + (k   )));
    55d0:	ee35 5a28 	vadd.f32	s10, s10, s17
    a[2] += *tap * ((float)*(buffer + (j+2)) + (float)*(buffer + (k+2 )));
    55d4:	ee75 5a82 	vadd.f32	s11, s11, s4
    a[3] += *tap * ((float)*(buffer + (j+3)) + (float)*(buffer + (k+3 )));
    55d8:	ee36 6a22 	vadd.f32	s12, s12, s5
    a[4] += *tap * ((float)*(buffer + (j+4)) + (float)*(buffer + (k+4 )));
    55dc:	ee76 6a83 	vadd.f32	s13, s13, s6
    a[5] += *tap * ((float)*(buffer + (j+5)) + (float)*(buffer + (k+5 )));
    55e0:	ee37 7a23 	vadd.f32	s14, s14, s7
  for (i = 0; i < order_count; i++) {
    55e4:	45ce      	cmp	lr, r9
    55e6:	f104 0406 	add.w	r4, r4, #6
    a[1] += *tap * ((float)*(buffer + (j+1)) + (float)*(buffer + (k+1 )));
    55ea:	eea7 8aa4 	vfma.f32	s16, s15, s9
    a[0] += *tap * ((float)*(buffer + (j  )) + (float)*(buffer + (k   )));
    55ee:	eea7 0a85 	vfma.f32	s0, s15, s10
    a[2] += *tap * ((float)*(buffer + (j+2)) + (float)*(buffer + (k+2 )));
    55f2:	eee7 0aa5 	vfma.f32	s1, s15, s11
    a[3] += *tap * ((float)*(buffer + (j+3)) + (float)*(buffer + (k+3 )));
    55f6:	eea7 1a86 	vfma.f32	s2, s15, s12
    a[4] += *tap * ((float)*(buffer + (j+4)) + (float)*(buffer + (k+4 )));
    55fa:	eee7 1aa6 	vfma.f32	s3, s15, s13
    a[5] += *tap * ((float)*(buffer + (j+5)) + (float)*(buffer + (k+5 )));
    55fe:	eea7 4a87 	vfma.f32	s8, s15, s14
  for (i = 0; i < order_count; i++) {
    5602:	d18b      	bne.n	551c <ch6_scale48k+0x68>
    5604:	ed8d 0a00 	vstr	s0, [sp]
    5608:	ed8d 8a01 	vstr	s16, [sp, #4]
    560c:	edcd 0a02 	vstr	s1, [sp, #8]
    5610:	ed8d 1a03 	vstr	s2, [sp, #12]
    5614:	edcd 1a04 	vstr	s3, [sp, #16]
    5618:	ed8d 4a05 	vstr	s8, [sp, #20]
    tap++;
  }

  if (order_countN2)
    561c:	4b89      	ldr	r3, [pc, #548]	; (5844 <ch6_scale48k+0x390>)
    561e:	681b      	ldr	r3, [r3, #0]
    5620:	2b00      	cmp	r3, #0
    5622:	d048      	beq.n	56b6 <ch6_scale48k+0x202>
  {
    j = (rd+i*6)%len;
    5624:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    5628:	eb0a 0b4b 	add.w	fp, sl, fp, lsl #1
    a[0] += *tap * (float)*(buffer + (j  ));
    562c:	4a86      	ldr	r2, [pc, #536]	; (5848 <ch6_scale48k+0x394>)
    j = (rd+i*6)%len;
    562e:	fb9b f3f7 	sdiv	r3, fp, r7
    5632:	fb07 bb13 	mls	fp, r7, r3, fp
    a[1] += *tap * (float)*(buffer + (j+1));
    5636:	eb02 034b 	add.w	r3, r2, fp, lsl #1
    a[0] += *tap * (float)*(buffer + (j  ));
    563a:	f932 201b 	ldrsh.w	r2, [r2, fp, lsl #1]
    563e:	edd9 7a00 	vldr	s15, [r9]
    5642:	ee05 2a10 	vmov	s10, r2
    a[1] += *tap * (float)*(buffer + (j+1));
    5646:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    564a:	ee04 2a90 	vmov	s9, r2
    a[2] += *tap * (float)*(buffer + (j+2));
    564e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    5652:	ee05 2a90 	vmov	s11, r2
    a[3] += *tap * (float)*(buffer + (j+3));
    5656:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
    565a:	ee06 2a10 	vmov	s12, r2
    a[4] += *tap * (float)*(buffer + (j+4));
    565e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
    a[5] += *tap * (float)*(buffer + (j+5));
    5662:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    a[4] += *tap * (float)*(buffer + (j+4));
    5666:	ee06 2a90 	vmov	s13, r2
    a[5] += *tap * (float)*(buffer + (j+5));
    566a:	ee07 3a10 	vmov	s14, r3
    a[1] += *tap * (float)*(buffer + (j+1));
    566e:	eef8 4ae4 	vcvt.f32.s32	s9, s9
    a[0] += *tap * (float)*(buffer + (j  ));
    5672:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    a[2] += *tap * (float)*(buffer + (j+2));
    5676:	eef8 5ae5 	vcvt.f32.s32	s11, s11
    a[3] += *tap * (float)*(buffer + (j+3));
    567a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    a[4] += *tap * (float)*(buffer + (j+4));
    567e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    a[5] += *tap * (float)*(buffer + (j+5));
    5682:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    a[1] += *tap * (float)*(buffer + (j+1));
    5686:	eea7 8aa4 	vfma.f32	s16, s15, s9
    a[0] += *tap * (float)*(buffer + (j  ));
    568a:	eea7 0a85 	vfma.f32	s0, s15, s10
    a[2] += *tap * (float)*(buffer + (j+2));
    568e:	eee7 0aa5 	vfma.f32	s1, s15, s11
    a[3] += *tap * (float)*(buffer + (j+3));
    5692:	eea7 1a86 	vfma.f32	s2, s15, s12
    a[4] += *tap * (float)*(buffer + (j+4));
    5696:	eee7 1aa6 	vfma.f32	s3, s15, s13
    a[5] += *tap * (float)*(buffer + (j+5));
    569a:	eea7 4a87 	vfma.f32	s8, s15, s14
    a[1] += *tap * (float)*(buffer + (j+1));
    569e:	ed8d 8a01 	vstr	s16, [sp, #4]
    a[0] += *tap * (float)*(buffer + (j  ));
    56a2:	ed8d 0a00 	vstr	s0, [sp]
    a[2] += *tap * (float)*(buffer + (j+2));
    56a6:	edcd 0a02 	vstr	s1, [sp, #8]
    a[3] += *tap * (float)*(buffer + (j+3));
    56aa:	ed8d 1a03 	vstr	s2, [sp, #12]
    a[4] += *tap * (float)*(buffer + (j+4));
    56ae:	edcd 1a04 	vstr	s3, [sp, #16]
    a[5] += *tap * (float)*(buffer + (j+5));
    56b2:	ed8d 4a05 	vstr	s8, [sp, #20]
  rd=(rd+6*3)%len;

#ifdef __SATURATION__
  for (i = 0; i < 6; i++)
  {
    if(a[i]>MAX_S16_F)
    56b6:	ed9d 5a00 	vldr	s10, [sp]
    56ba:	eddf 7a64 	vldr	s15, [pc, #400]	; 584c <ch6_scale48k+0x398>
  rd=(rd+6*3)%len;
    56be:	f10a 0a12 	add.w	sl, sl, #18
    if(a[i]>MAX_S16_F)
    56c2:	eeb4 5ae7 	vcmpe.f32	s10, s15
  rd=(rd+6*3)%len;
    56c6:	fb9a f3f7 	sdiv	r3, sl, r7
    56ca:	fb07 a713 	mls	r7, r7, r3, sl
    56ce:	4b5a      	ldr	r3, [pc, #360]	; (5838 <ch6_scale48k+0x384>)
    if(a[i]>MAX_S16_F)
    56d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  rd=(rd+6*3)%len;
    56d4:	601f      	str	r7, [r3, #0]
    if(a[i]>MAX_S16_F)
    56d6:	f300 8098 	bgt.w	580a <ch6_scale48k+0x356>
      a[i]=MAX_S16_F;
    else if(a[i]<MIN_S16_F)
    56da:	eddf 7a5d 	vldr	s15, [pc, #372]	; 5850 <ch6_scale48k+0x39c>
    56de:	eeb4 5a67 	vcmp.f32	s10, s15
    56e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    56e6:	bf48      	it	mi
    56e8:	eeb0 5a67 	vmovmi.f32	s10, s15
    if(a[i]>MAX_S16_F)
    56ec:	eddd 5a01 	vldr	s11, [sp, #4]
    56f0:	eddf 7a56 	vldr	s15, [pc, #344]	; 584c <ch6_scale48k+0x398>
    56f4:	eef4 5ae7 	vcmpe.f32	s11, s15
    56f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    56fc:	dc6f      	bgt.n	57de <ch6_scale48k+0x32a>
    else if(a[i]<MIN_S16_F)
    56fe:	eddf 7a54 	vldr	s15, [pc, #336]	; 5850 <ch6_scale48k+0x39c>
    5702:	eef4 5a67 	vcmp.f32	s11, s15
    5706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    570a:	bf48      	it	mi
    570c:	eef0 5a67 	vmovmi.f32	s11, s15
    if(a[i]>MAX_S16_F)
    5710:	ed9d 6a02 	vldr	s12, [sp, #8]
    5714:	eddf 7a4d 	vldr	s15, [pc, #308]	; 584c <ch6_scale48k+0x398>
    5718:	eeb4 6ae7 	vcmpe.f32	s12, s15
    571c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5720:	dc70      	bgt.n	5804 <ch6_scale48k+0x350>
    else if(a[i]<MIN_S16_F)
    5722:	eddf 7a4b 	vldr	s15, [pc, #300]	; 5850 <ch6_scale48k+0x39c>
    5726:	eeb4 6a67 	vcmp.f32	s12, s15
    572a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    572e:	bf48      	it	mi
    5730:	eeb0 6a67 	vmovmi.f32	s12, s15
    if(a[i]>MAX_S16_F)
    5734:	eddd 6a03 	vldr	s13, [sp, #12]
    5738:	eddf 7a44 	vldr	s15, [pc, #272]	; 584c <ch6_scale48k+0x398>
    573c:	eef4 6ae7 	vcmpe.f32	s13, s15
    5740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5744:	dc5b      	bgt.n	57fe <ch6_scale48k+0x34a>
    else if(a[i]<MIN_S16_F)
    5746:	eddf 7a42 	vldr	s15, [pc, #264]	; 5850 <ch6_scale48k+0x39c>
    574a:	eef4 6a67 	vcmp.f32	s13, s15
    574e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5752:	bf48      	it	mi
    5754:	eef0 6a67 	vmovmi.f32	s13, s15
    if(a[i]>MAX_S16_F)
    5758:	ed9d 7a04 	vldr	s14, [sp, #16]
    575c:	eddf 7a3b 	vldr	s15, [pc, #236]	; 584c <ch6_scale48k+0x398>
    5760:	eeb4 7ae7 	vcmpe.f32	s14, s15
    5764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5768:	dc46      	bgt.n	57f8 <ch6_scale48k+0x344>
    else if(a[i]<MIN_S16_F)
    576a:	eddf 7a39 	vldr	s15, [pc, #228]	; 5850 <ch6_scale48k+0x39c>
    576e:	eeb4 7a67 	vcmp.f32	s14, s15
    5772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5776:	bf48      	it	mi
    5778:	eeb0 7a67 	vmovmi.f32	s14, s15
    if(a[i]>MAX_S16_F)
    577c:	eddd 7a05 	vldr	s15, [sp, #20]
    5780:	eddf 4a32 	vldr	s9, [pc, #200]	; 584c <ch6_scale48k+0x398>
    5784:	eef4 7ae4 	vcmpe.f32	s15, s9
    5788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    578c:	dd2a      	ble.n	57e4 <ch6_scale48k+0x330>
      a[i]=MAX_S16_F;
    578e:	eef0 7a64 	vmov.f32	s15, s9
      a[i]=MIN_S16_F;
  }
#endif

  *(outp+offset+0) = (int16_t)a[0];
    5792:	eebd 5ac5 	vcvt.s32.f32	s10, s10
  *(outp+offset+1) = (int16_t)a[1];
    5796:	eefd 5ae5 	vcvt.s32.f32	s11, s11
  *(outp+offset+0) = (int16_t)a[0];
    579a:	ee15 2a10 	vmov	r2, s10
  *(outp+offset+1) = (int16_t)a[1];
    579e:	eb00 0341 	add.w	r3, r0, r1, lsl #1
  *(outp+offset+0) = (int16_t)a[0];
    57a2:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
  *(outp+offset+2) = (int16_t)a[2];
    57a6:	eebd 6ac6 	vcvt.s32.f32	s12, s12
  *(outp+offset+1) = (int16_t)a[1];
    57aa:	ee15 2a90 	vmov	r2, s11
  *(outp+offset+3) = (int16_t)a[3];
    57ae:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  *(outp+offset+1) = (int16_t)a[1];
    57b2:	805a      	strh	r2, [r3, #2]
  *(outp+offset+2) = (int16_t)a[2];
    57b4:	ee16 2a10 	vmov	r2, s12
  *(outp+offset+4) = (int16_t)a[4];
    57b8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  *(outp+offset+2) = (int16_t)a[2];
    57bc:	809a      	strh	r2, [r3, #4]
  *(outp+offset+3) = (int16_t)a[3];
    57be:	ee16 2a90 	vmov	r2, s13
  *(outp+offset+5) = (int16_t)a[5];
    57c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  *(outp+offset+3) = (int16_t)a[3];
    57c6:	80da      	strh	r2, [r3, #6]
  *(outp+offset+4) = (int16_t)a[4];
    57c8:	ee17 2a10 	vmov	r2, s14
    57cc:	811a      	strh	r2, [r3, #8]
  *(outp+offset+5) = (int16_t)a[5];
    57ce:	ee17 2a90 	vmov	r2, s15
    57d2:	815a      	strh	r2, [r3, #10]
}
    57d4:	b007      	add	sp, #28
    57d6:	ecbd 8b04 	vpop	{d8-d9}
    57da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      a[i]=MAX_S16_F;
    57de:	eef0 5a67 	vmov.f32	s11, s15
    57e2:	e795      	b.n	5710 <ch6_scale48k+0x25c>
    else if(a[i]<MIN_S16_F)
    57e4:	eddf 4a1a 	vldr	s9, [pc, #104]	; 5850 <ch6_scale48k+0x39c>
    57e8:	eef4 7a64 	vcmp.f32	s15, s9
    57ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    57f0:	bf48      	it	mi
    57f2:	eef0 7a64 	vmovmi.f32	s15, s9
    57f6:	e7cc      	b.n	5792 <ch6_scale48k+0x2de>
      a[i]=MAX_S16_F;
    57f8:	eeb0 7a67 	vmov.f32	s14, s15
    57fc:	e7be      	b.n	577c <ch6_scale48k+0x2c8>
    57fe:	eef0 6a67 	vmov.f32	s13, s15
    5802:	e7a9      	b.n	5758 <ch6_scale48k+0x2a4>
    5804:	eeb0 6a67 	vmov.f32	s12, s15
    5808:	e794      	b.n	5734 <ch6_scale48k+0x280>
    580a:	eeb0 5a67 	vmov.f32	s10, s15
    580e:	e76d      	b.n	56ec <ch6_scale48k+0x238>
  float* tap = res_coeff;
    5810:	f8df 902c 	ldr.w	r9, [pc, #44]	; 5840 <ch6_scale48k+0x38c>
  for (i = 0; i < order_count; i++) {
    5814:	eef0 1a44 	vmov.f32	s3, s8
    5818:	eeb0 1a44 	vmov.f32	s2, s8
    581c:	eef0 0a44 	vmov.f32	s1, s8
    5820:	eeb0 8a44 	vmov.f32	s16, s8
    5824:	eeb0 0a44 	vmov.f32	s0, s8
    5828:	f04f 0b00 	mov.w	fp, #0
    582c:	e6f6      	b.n	561c <ch6_scale48k+0x168>
    582e:	bf00      	nop
    5830:	0002211c 	.word	0x0002211c
    5834:	00000000 	.word	0x00000000
    5838:	00022124 	.word	0x00022124
    583c:	00022114 	.word	0x00022114
    5840:	0000c650 	.word	0x0000c650
    5844:	00022120 	.word	0x00022120
    5848:	00021538 	.word	0x00021538
    584c:	46fffe00 	.word	0x46fffe00
    5850:	c7000000 	.word	0xc7000000

00005854 <ch4_scale48k>:


static void ch4_scale48k(int16_t* outp, int offset)
{
    5854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a[3] += *tap * (float)*(buffer + (j+3));
    tap++;
  }
*/

  for (i = 0; i < order_count; i++) {
    5858:	4b9f      	ldr	r3, [pc, #636]	; (5ad8 <ch4_scale48k+0x284>)
    a[i] = 0;
    585a:	ed9f 3aa0 	vldr	s6, [pc, #640]	; 5adc <ch4_scale48k+0x288>
  for (i = 0; i < order_count; i++) {
    585e:	f8d3 b000 	ldr.w	fp, [r3]
    5862:	4a9f      	ldr	r2, [pc, #636]	; (5ae0 <ch4_scale48k+0x28c>)
    5864:	4b9f      	ldr	r3, [pc, #636]	; (5ae4 <ch4_scale48k+0x290>)
    5866:	f8d2 a000 	ldr.w	sl, [r2]
    586a:	681d      	ldr	r5, [r3, #0]
{
    586c:	b087      	sub	sp, #28
  for (i = 0; i < order_count; i++) {
    586e:	f1bb 0f00 	cmp.w	fp, #0
    a[i] = 0;
    5872:	ed8d 3a02 	vstr	s6, [sp, #8]
    5876:	ed8d 3a03 	vstr	s6, [sp, #12]
    587a:	ed8d 3a04 	vstr	s6, [sp, #16]
    587e:	ed8d 3a05 	vstr	s6, [sp, #20]
  for (i = 0; i < order_count; i++) {
    5882:	f340 811e 	ble.w	5ac2 <ch4_scale48k+0x26e>
    5886:	ea4f 038b 	mov.w	r3, fp, lsl #2
    588a:	ea4f 084a 	mov.w	r8, sl, lsl #1
    588e:	4e96      	ldr	r6, [pc, #600]	; (5ae8 <ch4_scale48k+0x294>)
  float* tap = res_coeff;
    5890:	f8df e258 	ldr.w	lr, [pc, #600]	; 5aec <ch4_scale48k+0x298>
    5894:	9301      	str	r3, [sp, #4]
    5896:	eb0a 0903 	add.w	r9, sl, r3
  for (i = 0; i < order_count; i++) {
    589a:	eef0 2a43 	vmov.f32	s5, s6
    589e:	eef0 1a43 	vmov.f32	s3, s6
    58a2:	eeb0 2a43 	vmov.f32	s4, s6
    58a6:	f508 786c 	add.w	r8, r8, #944	; 0x3b0
    58aa:	4653      	mov	r3, sl
    j = (rd+i*4)%len;
    58ac:	fb93 f2f5 	sdiv	r2, r3, r5
    58b0:	fb05 3212 	mls	r2, r5, r2, r3
    k = (rd+ (res_order - 1- i)*4)%len;
    58b4:	eba8 0703 	sub.w	r7, r8, r3
    58b8:	fb97 f4f5 	sdiv	r4, r7, r5
    58bc:	fb05 7414 	mls	r4, r5, r4, r7
    a[0] += *tap * ((float)*(buffer + (j  )) + (float)*(buffer + (k   )));
    a[1] += *tap * ((float)*(buffer + (j+1)) + (float)*(buffer + (k+1 )));
    58c0:	eb06 0742 	add.w	r7, r6, r2, lsl #1
    a[0] += *tap * ((float)*(buffer + (j  )) + (float)*(buffer + (k   )));
    58c4:	f936 2012 	ldrsh.w	r2, [r6, r2, lsl #1]
    58c8:	ecfe 5a01 	vldmia	lr!, {s11}
    a[1] += *tap * ((float)*(buffer + (j+1)) + (float)*(buffer + (k+1 )));
    58cc:	eb06 0c44 	add.w	ip, r6, r4, lsl #1
    a[0] += *tap * ((float)*(buffer + (j  )) + (float)*(buffer + (k   )));
    58d0:	ee06 2a90 	vmov	s13, r2
    a[1] += *tap * ((float)*(buffer + (j+1)) + (float)*(buffer + (k+1 )));
    58d4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
    a[0] += *tap * ((float)*(buffer + (j  )) + (float)*(buffer + (k   )));
    58d8:	f936 4014 	ldrsh.w	r4, [r6, r4, lsl #1]
    a[1] += *tap * ((float)*(buffer + (j+1)) + (float)*(buffer + (k+1 )));
    58dc:	ee06 2a10 	vmov	s12, r2
    a[2] += *tap * ((float)*(buffer + (j+2)) + (float)*(buffer + (k+2 )));
    58e0:	f9bc 2004 	ldrsh.w	r2, [ip, #4]
    58e4:	ee04 2a90 	vmov	s9, r2
    a[3] += *tap * ((float)*(buffer + (j+3)) + (float)*(buffer + (k+3 )));
    58e8:	f9bc 2006 	ldrsh.w	r2, [ip, #6]
    58ec:	ee05 2a10 	vmov	s10, r2
    a[2] += *tap * ((float)*(buffer + (j+2)) + (float)*(buffer + (k+2 )));
    58f0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
    a[0] += *tap * ((float)*(buffer + (j  )) + (float)*(buffer + (k   )));
    58f4:	ee04 4a10 	vmov	s8, r4
    a[2] += *tap * ((float)*(buffer + (j+2)) + (float)*(buffer + (k+2 )));
    58f8:	ee07 2a10 	vmov	s14, r2
    a[1] += *tap * ((float)*(buffer + (j+1)) + (float)*(buffer + (k+1 )));
    58fc:	f9bc 4002 	ldrsh.w	r4, [ip, #2]
    a[3] += *tap * ((float)*(buffer + (j+3)) + (float)*(buffer + (k+3 )));
    5900:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    a[1] += *tap * ((float)*(buffer + (j+1)) + (float)*(buffer + (k+1 )));
    5904:	ee03 4a90 	vmov	s7, r4
    a[3] += *tap * ((float)*(buffer + (j+3)) + (float)*(buffer + (k+3 )));
    5908:	ee07 2a90 	vmov	s15, r2
    a[1] += *tap * ((float)*(buffer + (j+1)) + (float)*(buffer + (k+1 )));
    590c:	eef8 3ae3 	vcvt.f32.s32	s7, s7
    5910:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    a[0] += *tap * ((float)*(buffer + (j  )) + (float)*(buffer + (k   )));
    5914:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
    5918:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    a[2] += *tap * ((float)*(buffer + (j+2)) + (float)*(buffer + (k+2 )));
    591c:	eef8 4ae4 	vcvt.f32.s32	s9, s9
    5920:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    a[3] += *tap * ((float)*(buffer + (j+3)) + (float)*(buffer + (k+3 )));
    5924:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    5928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    a[1] += *tap * ((float)*(buffer + (j+1)) + (float)*(buffer + (k+1 )));
    592c:	ee36 6a23 	vadd.f32	s12, s12, s7
    a[0] += *tap * ((float)*(buffer + (j  )) + (float)*(buffer + (k   )));
    5930:	ee76 6a84 	vadd.f32	s13, s13, s8
    a[2] += *tap * ((float)*(buffer + (j+2)) + (float)*(buffer + (k+2 )));
    5934:	ee37 7a24 	vadd.f32	s14, s14, s9
    a[3] += *tap * ((float)*(buffer + (j+3)) + (float)*(buffer + (k+3 )));
    5938:	ee77 7a85 	vadd.f32	s15, s15, s10
    593c:	3304      	adds	r3, #4
  for (i = 0; i < order_count; i++) {
    593e:	454b      	cmp	r3, r9
    a[1] += *tap * ((float)*(buffer + (j+1)) + (float)*(buffer + (k+1 )));
    5940:	eee5 1a86 	vfma.f32	s3, s11, s12
    a[0] += *tap * ((float)*(buffer + (j  )) + (float)*(buffer + (k   )));
    5944:	eea5 2aa6 	vfma.f32	s4, s11, s13
    a[2] += *tap * ((float)*(buffer + (j+2)) + (float)*(buffer + (k+2 )));
    5948:	eee5 2a87 	vfma.f32	s5, s11, s14
    a[3] += *tap * ((float)*(buffer + (j+3)) + (float)*(buffer + (k+3 )));
    594c:	eea5 3aa7 	vfma.f32	s6, s11, s15
  for (i = 0; i < order_count; i++) {
    5950:	d1ac      	bne.n	58ac <ch4_scale48k+0x58>
    5952:	9b01      	ldr	r3, [sp, #4]
    5954:	ed8d 2a02 	vstr	s4, [sp, #8]
    5958:	461a      	mov	r2, r3
    595a:	4b64      	ldr	r3, [pc, #400]	; (5aec <ch4_scale48k+0x298>)
    595c:	edcd 1a03 	vstr	s3, [sp, #12]
    5960:	441a      	add	r2, r3
    5962:	edcd 2a04 	vstr	s5, [sp, #16]
    5966:	ed8d 3a05 	vstr	s6, [sp, #20]
    tap++;
  }

  if (order_countN2)
    596a:	4b61      	ldr	r3, [pc, #388]	; (5af0 <ch4_scale48k+0x29c>)
    596c:	681b      	ldr	r3, [r3, #0]
    596e:	b393      	cbz	r3, 59d6 <ch4_scale48k+0x182>
  {
    j = (rd+i*4)%len;
    5970:	eb0a 0b8b 	add.w	fp, sl, fp, lsl #2
    a[0] += *tap * (float)*(buffer + (j  ));
    5974:	4c5c      	ldr	r4, [pc, #368]	; (5ae8 <ch4_scale48k+0x294>)
    j = (rd+i*4)%len;
    5976:	fb9b f3f5 	sdiv	r3, fp, r5
    597a:	fb05 bb13 	mls	fp, r5, r3, fp
    a[1] += *tap * (float)*(buffer + (j+1));
    597e:	eb04 034b 	add.w	r3, r4, fp, lsl #1
    a[0] += *tap * (float)*(buffer + (j  ));
    5982:	f934 401b 	ldrsh.w	r4, [r4, fp, lsl #1]
    5986:	edd2 7a00 	vldr	s15, [r2]
    598a:	ee06 4a10 	vmov	s12, r4
    a[1] += *tap * (float)*(buffer + (j+1));
    598e:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
    5992:	ee05 4a90 	vmov	s11, r4
    a[2] += *tap * (float)*(buffer + (j+2));
    5996:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
    a[3] += *tap * (float)*(buffer + (j+3));
    599a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    a[2] += *tap * (float)*(buffer + (j+2));
    599e:	ee06 4a90 	vmov	s13, r4
    a[3] += *tap * (float)*(buffer + (j+3));
    59a2:	ee07 3a10 	vmov	s14, r3
    a[1] += *tap * (float)*(buffer + (j+1));
    59a6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
    a[0] += *tap * (float)*(buffer + (j  ));
    59aa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    a[2] += *tap * (float)*(buffer + (j+2));
    59ae:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    a[3] += *tap * (float)*(buffer + (j+3));
    59b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    a[1] += *tap * (float)*(buffer + (j+1));
    59b6:	eee7 1aa5 	vfma.f32	s3, s15, s11
    a[0] += *tap * (float)*(buffer + (j  ));
    59ba:	eea7 2a86 	vfma.f32	s4, s15, s12
    a[2] += *tap * (float)*(buffer + (j+2));
    59be:	eee7 2aa6 	vfma.f32	s5, s15, s13
    a[3] += *tap * (float)*(buffer + (j+3));
    59c2:	eea7 3a87 	vfma.f32	s6, s15, s14
    a[1] += *tap * (float)*(buffer + (j+1));
    59c6:	edcd 1a03 	vstr	s3, [sp, #12]
    a[0] += *tap * (float)*(buffer + (j  ));
    59ca:	ed8d 2a02 	vstr	s4, [sp, #8]
    a[2] += *tap * (float)*(buffer + (j+2));
    59ce:	edcd 2a04 	vstr	s5, [sp, #16]
    a[3] += *tap * (float)*(buffer + (j+3));
    59d2:	ed8d 3a05 	vstr	s6, [sp, #20]


#ifdef __SATURATION__
  for (i = 0; i < 4; i++)
  {
    if(a[i]>MAX_S16_F)
    59d6:	ed9d 6a02 	vldr	s12, [sp, #8]
    59da:	eddf 7a46 	vldr	s15, [pc, #280]	; 5af4 <ch4_scale48k+0x2a0>
  rd=(rd+4*3)%len;
    59de:	f10a 0a0c 	add.w	sl, sl, #12
    if(a[i]>MAX_S16_F)
    59e2:	eeb4 6ae7 	vcmpe.f32	s12, s15
  rd=(rd+4*3)%len;
    59e6:	fb9a f3f5 	sdiv	r3, sl, r5
    59ea:	fb05 a513 	mls	r5, r5, r3, sl
    59ee:	4b3c      	ldr	r3, [pc, #240]	; (5ae0 <ch4_scale48k+0x28c>)
    if(a[i]>MAX_S16_F)
    59f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  rd=(rd+4*3)%len;
    59f4:	601d      	str	r5, [r3, #0]
    if(a[i]>MAX_S16_F)
    59f6:	dc51      	bgt.n	5a9c <ch4_scale48k+0x248>
      a[i]=MAX_S16_F;
    else if(a[i]<MIN_S16_F)
    59f8:	eddf 7a3f 	vldr	s15, [pc, #252]	; 5af8 <ch4_scale48k+0x2a4>
    59fc:	eeb4 6a67 	vcmp.f32	s12, s15
    5a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a04:	bf48      	it	mi
    5a06:	eeb0 6a67 	vmovmi.f32	s12, s15
    if(a[i]>MAX_S16_F)
    5a0a:	eddd 6a03 	vldr	s13, [sp, #12]
    5a0e:	eddf 7a39 	vldr	s15, [pc, #228]	; 5af4 <ch4_scale48k+0x2a0>
    5a12:	eef4 6ae7 	vcmpe.f32	s13, s15
    5a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a1a:	dc4f      	bgt.n	5abc <ch4_scale48k+0x268>
    else if(a[i]<MIN_S16_F)
    5a1c:	eddf 7a36 	vldr	s15, [pc, #216]	; 5af8 <ch4_scale48k+0x2a4>
    5a20:	eef4 6a67 	vcmp.f32	s13, s15
    5a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a28:	bf48      	it	mi
    5a2a:	eef0 6a67 	vmovmi.f32	s13, s15
    if(a[i]>MAX_S16_F)
    5a2e:	ed9d 7a04 	vldr	s14, [sp, #16]
    5a32:	eddf 7a30 	vldr	s15, [pc, #192]	; 5af4 <ch4_scale48k+0x2a0>
    5a36:	eeb4 7ae7 	vcmpe.f32	s14, s15
    5a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a3e:	dc3a      	bgt.n	5ab6 <ch4_scale48k+0x262>
    else if(a[i]<MIN_S16_F)
    5a40:	eddf 7a2d 	vldr	s15, [pc, #180]	; 5af8 <ch4_scale48k+0x2a4>
    5a44:	eeb4 7a67 	vcmp.f32	s14, s15
    5a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a4c:	bf48      	it	mi
    5a4e:	eeb0 7a67 	vmovmi.f32	s14, s15
    if(a[i]>MAX_S16_F)
    5a52:	eddd 7a05 	vldr	s15, [sp, #20]
    5a56:	eddf 5a27 	vldr	s11, [pc, #156]	; 5af4 <ch4_scale48k+0x2a0>
    5a5a:	eef4 7ae5 	vcmpe.f32	s15, s11
    5a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a62:	dd1e      	ble.n	5aa2 <ch4_scale48k+0x24e>
      a[i]=MAX_S16_F;
    5a64:	eef0 7a65 	vmov.f32	s15, s11
      a[i]=MIN_S16_F;
  }
#endif

  *(outp+offset+0) = (int16_t)a[0];
    5a68:	eebd 6ac6 	vcvt.s32.f32	s12, s12
  *(outp+offset+1) = (int16_t)a[1];
    5a6c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  *(outp+offset+0) = (int16_t)a[0];
    5a70:	ee16 2a10 	vmov	r2, s12
  *(outp+offset+1) = (int16_t)a[1];
    5a74:	eb00 0341 	add.w	r3, r0, r1, lsl #1
  *(outp+offset+0) = (int16_t)a[0];
    5a78:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
  *(outp+offset+2) = (int16_t)a[2];
    5a7c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  *(outp+offset+1) = (int16_t)a[1];
    5a80:	ee16 2a90 	vmov	r2, s13
  *(outp+offset+3) = (int16_t)a[3];
    5a84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  *(outp+offset+1) = (int16_t)a[1];
    5a88:	805a      	strh	r2, [r3, #2]
  *(outp+offset+2) = (int16_t)a[2];
    5a8a:	ee17 2a10 	vmov	r2, s14
    5a8e:	809a      	strh	r2, [r3, #4]
  *(outp+offset+3) = (int16_t)a[3];
    5a90:	ee17 2a90 	vmov	r2, s15
    5a94:	80da      	strh	r2, [r3, #6]
}
    5a96:	b007      	add	sp, #28
    5a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      a[i]=MAX_S16_F;
    5a9c:	eeb0 6a67 	vmov.f32	s12, s15
    5aa0:	e7b3      	b.n	5a0a <ch4_scale48k+0x1b6>
    else if(a[i]<MIN_S16_F)
    5aa2:	eddf 5a15 	vldr	s11, [pc, #84]	; 5af8 <ch4_scale48k+0x2a4>
    5aa6:	eef4 7a65 	vcmp.f32	s15, s11
    5aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5aae:	bf48      	it	mi
    5ab0:	eef0 7a65 	vmovmi.f32	s15, s11
    5ab4:	e7d8      	b.n	5a68 <ch4_scale48k+0x214>
      a[i]=MAX_S16_F;
    5ab6:	eeb0 7a67 	vmov.f32	s14, s15
    5aba:	e7ca      	b.n	5a52 <ch4_scale48k+0x1fe>
    5abc:	eef0 6a67 	vmov.f32	s13, s15
    5ac0:	e7b5      	b.n	5a2e <ch4_scale48k+0x1da>
  float* tap = res_coeff;
    5ac2:	4a0a      	ldr	r2, [pc, #40]	; (5aec <ch4_scale48k+0x298>)
  for (i = 0; i < order_count; i++) {
    5ac4:	eef0 2a43 	vmov.f32	s5, s6
    5ac8:	eef0 1a43 	vmov.f32	s3, s6
    5acc:	eeb0 2a43 	vmov.f32	s4, s6
    5ad0:	f04f 0b00 	mov.w	fp, #0
    5ad4:	e749      	b.n	596a <ch4_scale48k+0x116>
    5ad6:	bf00      	nop
    5ad8:	0002211c 	.word	0x0002211c
    5adc:	00000000 	.word	0x00000000
    5ae0:	00022124 	.word	0x00022124
    5ae4:	00022114 	.word	0x00022114
    5ae8:	00021538 	.word	0x00021538
    5aec:	0000c650 	.word	0x0000c650
    5af0:	00022120 	.word	0x00022120
    5af4:	46fffe00 	.word	0x46fffe00
    5af8:	c7000000 	.word	0xc7000000

00005afc <ch2_scale48k>:


static void ch2_scale48k(int16_t* outp, int offset) {
    5afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  float* tap = res_coeff;
  for (i = 0; i < 2; i++)
    a[i] = 0;

  for (i = 0; i < res_order; i++) {
    a[0] += *tap * (float)*(buffer + (rd+i*2  )%len);
    5b00:	f8df 8118 	ldr.w	r8, [pc, #280]	; 5c1c <ch2_scale48k+0x120>
    5b04:	4b3e      	ldr	r3, [pc, #248]	; (5c00 <ch2_scale48k+0x104>)
    a[i] = 0;
    5b06:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 5c04 <ch2_scale48k+0x108>
    a[0] += *tap * (float)*(buffer + (rd+i*2  )%len);
    5b0a:	f8d8 e000 	ldr.w	lr, [r8]
    5b0e:	4e3e      	ldr	r6, [pc, #248]	; (5c08 <ch2_scale48k+0x10c>)
    5b10:	4f3e      	ldr	r7, [pc, #248]	; (5c0c <ch2_scale48k+0x110>)
    5b12:	681a      	ldr	r2, [r3, #0]
    a[i] = 0;
    5b14:	eef0 5a46 	vmov.f32	s11, s12
    5b18:	4673      	mov	r3, lr
    5b1a:	f506 7c6d 	add.w	ip, r6, #948	; 0x3b4
    a[1] += *tap * (float)*(buffer + (rd+i*2+1)%len);
    5b1e:	f103 0901 	add.w	r9, r3, #1
    a[0] += *tap * (float)*(buffer + (rd+i*2  )%len);
    5b22:	fb93 f5f2 	sdiv	r5, r3, r2
    a[1] += *tap * (float)*(buffer + (rd+i*2+1)%len);
    5b26:	fb99 f4f2 	sdiv	r4, r9, r2
    a[0] += *tap * (float)*(buffer + (rd+i*2  )%len);
    5b2a:	fb02 3515 	mls	r5, r2, r5, r3
    a[1] += *tap * (float)*(buffer + (rd+i*2+1)%len);
    5b2e:	fb02 9414 	mls	r4, r2, r4, r9
    a[0] += *tap * (float)*(buffer + (rd+i*2  )%len);
    5b32:	f937 5015 	ldrsh.w	r5, [r7, r5, lsl #1]
    a[1] += *tap * (float)*(buffer + (rd+i*2+1)%len);
    5b36:	f937 4014 	ldrsh.w	r4, [r7, r4, lsl #1]
    a[0] += *tap * (float)*(buffer + (rd+i*2  )%len);
    5b3a:	ecf6 6a01 	vldmia	r6!, {s13}
    5b3e:	ee07 5a90 	vmov	s15, r5
    a[1] += *tap * (float)*(buffer + (rd+i*2+1)%len);
    5b42:	ee07 4a10 	vmov	s14, r4
    a[0] += *tap * (float)*(buffer + (rd+i*2  )%len);
    5b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    a[1] += *tap * (float)*(buffer + (rd+i*2+1)%len);
    5b4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  for (i = 0; i < res_order; i++) {
    5b4e:	45b4      	cmp	ip, r6
    a[1] += *tap * (float)*(buffer + (rd+i*2+1)%len);
    5b50:	eea6 6a87 	vfma.f32	s12, s13, s14
    5b54:	f103 0302 	add.w	r3, r3, #2
    a[0] += *tap * (float)*(buffer + (rd+i*2  )%len);
    5b58:	eee6 5aa7 	vfma.f32	s11, s13, s15
  for (i = 0; i < res_order; i++) {
    5b5c:	d1df      	bne.n	5b1e <ch2_scale48k+0x22>
  rd=(rd+2*3)%len;

#ifdef __SATURATION__
  for (i = 0; i < 2; i++)
  {
    if(a[i]>MAX_S16_F)
    5b5e:	eddf 7a2c 	vldr	s15, [pc, #176]	; 5c10 <ch2_scale48k+0x114>
  rd=(rd+2*3)%len;
    5b62:	f10e 0e06 	add.w	lr, lr, #6
    if(a[i]>MAX_S16_F)
    5b66:	eef4 5ae7 	vcmpe.f32	s11, s15
  rd=(rd+2*3)%len;
    5b6a:	fb9e f3f2 	sdiv	r3, lr, r2
    if(a[i]>MAX_S16_F)
    5b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  rd=(rd+2*3)%len;
    5b72:	fb02 e213 	mls	r2, r2, r3, lr
    5b76:	f8c8 2000 	str.w	r2, [r8]
    if(a[i]>MAX_S16_F)
    5b7a:	dc17      	bgt.n	5bac <ch2_scale48k+0xb0>
      a[i]=MAX_S16_F;
    else if(a[i]<MIN_S16_F)
    5b7c:	eddf 7a25 	vldr	s15, [pc, #148]	; 5c14 <ch2_scale48k+0x118>
    5b80:	eef4 5ae7 	vcmpe.f32	s11, s15
    5b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5b88:	d534      	bpl.n	5bf4 <ch2_scale48k+0xf8>
    if(a[i]>MAX_S16_F)
    5b8a:	eddf 7a21 	vldr	s15, [pc, #132]	; 5c10 <ch2_scale48k+0x114>
    else if(a[i]<MIN_S16_F)
    5b8e:	4a22      	ldr	r2, [pc, #136]	; (5c18 <ch2_scale48k+0x11c>)
    if(a[i]>MAX_S16_F)
    5b90:	eeb4 6ae7 	vcmpe.f32	s12, s15
    5b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5b98:	dd11      	ble.n	5bbe <ch2_scale48k+0xc2>
      a[i]=MIN_S16_F;
  }
#endif

  *(outp+offset+0) = (int16_t)a[0];
    5b9a:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
  *(outp+offset+1) = (int16_t)a[1];
    5b9e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    if(a[i]>MAX_S16_F)
    5ba2:	f647 73ff 	movw	r3, #32767	; 0x7fff
  *(outp+offset+1) = (int16_t)a[1];
    5ba6:	8043      	strh	r3, [r0, #2]
}
    5ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(a[i]>MAX_S16_F)
    5bac:	f647 72ff 	movw	r2, #32767	; 0x7fff
    5bb0:	eddf 7a17 	vldr	s15, [pc, #92]	; 5c10 <ch2_scale48k+0x114>
    5bb4:	eeb4 6ae7 	vcmpe.f32	s12, s15
    5bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5bbc:	dced      	bgt.n	5b9a <ch2_scale48k+0x9e>
    else if(a[i]<MIN_S16_F)
    5bbe:	eddf 7a15 	vldr	s15, [pc, #84]	; 5c14 <ch2_scale48k+0x118>
    5bc2:	eeb4 6ae7 	vcmpe.f32	s12, s15
    5bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5bca:	d507      	bpl.n	5bdc <ch2_scale48k+0xe0>
  *(outp+offset+0) = (int16_t)a[0];
    5bcc:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
  *(outp+offset+1) = (int16_t)a[1];
    5bd0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    else if(a[i]<MIN_S16_F)
    5bd4:	4b10      	ldr	r3, [pc, #64]	; (5c18 <ch2_scale48k+0x11c>)
  *(outp+offset+1) = (int16_t)a[1];
    5bd6:	8043      	strh	r3, [r0, #2]
}
    5bd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5bdc:	eebd 6ac6 	vcvt.s32.f32	s12, s12
  *(outp+offset+0) = (int16_t)a[0];
    5be0:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
    5be4:	ee16 3a10 	vmov	r3, s12
  *(outp+offset+1) = (int16_t)a[1];
    5be8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    5bec:	b21b      	sxth	r3, r3
    5bee:	8043      	strh	r3, [r0, #2]
}
    5bf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5bf4:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    5bf8:	ee15 3a90 	vmov	r3, s11
    5bfc:	b21a      	sxth	r2, r3
    5bfe:	e7d7      	b.n	5bb0 <ch2_scale48k+0xb4>
    5c00:	00022114 	.word	0x00022114
    5c04:	00000000 	.word	0x00000000
    5c08:	0000c650 	.word	0x0000c650
    5c0c:	00021538 	.word	0x00021538
    5c10:	46fffe00 	.word	0x46fffe00
    5c14:	c7000000 	.word	0xc7000000
    5c18:	ffff8000 	.word	0xffff8000
    5c1c:	00022124 	.word	0x00022124

00005c20 <MApi_VOC_SrcProcess48k>:

BOOL MApi_VOC_SrcProcess48k(S16 *ps16Buffer, U32 *pu32Count)
{
  int i = 0;
  int offset =0;
  if(!ps16Buffer || !pu32Count)
    5c20:	2800      	cmp	r0, #0
    5c22:	d05e      	beq.n	5ce2 <MApi_VOC_SrcProcess48k+0xc2>
    5c24:	2900      	cmp	r1, #0
    5c26:	d05d      	beq.n	5ce4 <MApi_VOC_SrcProcess48k+0xc4>
{
    5c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return FALSE;

  if (nSrcInitFlag == 0)
    5c2c:	4b2e      	ldr	r3, [pc, #184]	; (5ce8 <MApi_VOC_SrcProcess48k+0xc8>)
{
    5c2e:	b083      	sub	sp, #12
  if (nSrcInitFlag == 0)
    5c30:	681c      	ldr	r4, [r3, #0]
    5c32:	9101      	str	r1, [sp, #4]
    5c34:	4606      	mov	r6, r0
    5c36:	2c00      	cmp	r4, #0
    5c38:	d049      	beq.n	5cce <MApi_VOC_SrcProcess48k+0xae>
  {
    SRC_ERROR("MApi_VOC_SrcProcess48k: init failed\n");
    return FALSE;
  }

  count = *pu32Count;
    5c3a:	680b      	ldr	r3, [r1, #0]
    5c3c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 5d04 <MApi_VOC_SrcProcess48k+0xe4>
  srcp = ps16Buffer;
    5c40:	4a2a      	ldr	r2, [pc, #168]	; (5cec <MApi_VOC_SrcProcess48k+0xcc>)
  count = *pu32Count;
    5c42:	f8c8 3000 	str.w	r3, [r8]

  while(i<count)
    5c46:	2b00      	cmp	r3, #0
  srcp = ps16Buffer;
    5c48:	6010      	str	r0, [r2, #0]
  while(i<count)
    5c4a:	dd36      	ble.n	5cba <MApi_VOC_SrcProcess48k+0x9a>
    5c4c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 5d08 <MApi_VOC_SrcProcess48k+0xe8>
    5c50:	4f27      	ldr	r7, [pc, #156]	; (5cf0 <MApi_VOC_SrcProcess48k+0xd0>)
    5c52:	f8d9 2000 	ldr.w	r2, [r9]
    5c56:	6838      	ldr	r0, [r7, #0]
    5c58:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 5d0c <MApi_VOC_SrcProcess48k+0xec>
    5c5c:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 5d10 <MApi_VOC_SrcProcess48k+0xf0>
  int offset =0;
    5c60:	2500      	movs	r5, #0
    5c62:	ea4f 0c42 	mov.w	ip, r2, lsl #1
  int i = 0;
    5c66:	462c      	mov	r4, r5
  while(i<count)
    5c68:	4631      	mov	r1, r6
    5c6a:	e001      	b.n	5c70 <MApi_VOC_SrcProcess48k+0x50>
    5c6c:	4b1f      	ldr	r3, [pc, #124]	; (5cec <MApi_VOC_SrcProcess48k+0xcc>)
    5c6e:	6819      	ldr	r1, [r3, #0]
  {
    memcpy(buffer+wr,(srcp+i),3*i_ch*sizeof(int16_t));//get 3 points every time, order+3 in buffer
    5c70:	4b20      	ldr	r3, [pc, #128]	; (5cf4 <MApi_VOC_SrcProcess48k+0xd4>)
    5c72:	4462      	add	r2, ip
    5c74:	0052      	lsls	r2, r2, #1
    5c76:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    5c7a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    5c7e:	f004 ff4e 	bl	ab1e <memcpy>
    chx_scale48k(ps16Buffer, offset);
    5c82:	4629      	mov	r1, r5
    5c84:	f8da 3000 	ldr.w	r3, [sl]
    5c88:	4630      	mov	r0, r6
    5c8a:	4798      	blx	r3
    offset+=i_ch;
    5c8c:	f8d9 2000 	ldr.w	r2, [r9]
    i+=i_ch*3;//48k->16k,
    wr=(wr+i_ch*3)%len;
    5c90:	683b      	ldr	r3, [r7, #0]
    5c92:	f8db 0000 	ldr.w	r0, [fp]
  while(i<count)
    5c96:	f8d8 1000 	ldr.w	r1, [r8]
    i+=i_ch*3;//48k->16k,
    5c9a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
    5c9e:	eb0c 0e02 	add.w	lr, ip, r2
    wr=(wr+i_ch*3)%len;
    5ca2:	4473      	add	r3, lr
    i+=i_ch*3;//48k->16k,
    5ca4:	4474      	add	r4, lr
  while(i<count)
    5ca6:	42a1      	cmp	r1, r4
    wr=(wr+i_ch*3)%len;
    5ca8:	fb93 fef0 	sdiv	lr, r3, r0
    5cac:	fb00 301e 	mls	r0, r0, lr, r3
    offset+=i_ch;
    5cb0:	4415      	add	r5, r2
    wr=(wr+i_ch*3)%len;
    5cb2:	6038      	str	r0, [r7, #0]
  while(i<count)
    5cb4:	dcda      	bgt.n	5c6c <MApi_VOC_SrcProcess48k+0x4c>
    5cb6:	9b01      	ldr	r3, [sp, #4]
    5cb8:	681b      	ldr	r3, [r3, #0]
  }

  *pu32Count = *pu32Count/3;
    5cba:	4a0f      	ldr	r2, [pc, #60]	; (5cf8 <MApi_VOC_SrcProcess48k+0xd8>)
    5cbc:	fba2 2303 	umull	r2, r3, r2, r3
    5cc0:	9a01      	ldr	r2, [sp, #4]
    5cc2:	085b      	lsrs	r3, r3, #1
    5cc4:	6013      	str	r3, [r2, #0]
  return TRUE;
    5cc6:	2001      	movs	r0, #1

}
    5cc8:	b003      	add	sp, #12
    5cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SRC_ERROR("MApi_VOC_SrcProcess48k: init failed\n");
    5cce:	4b0b      	ldr	r3, [pc, #44]	; (5cfc <MApi_VOC_SrcProcess48k+0xdc>)
    5cd0:	6818      	ldr	r0, [r3, #0]
    5cd2:	f010 0001 	ands.w	r0, r0, #1
    5cd6:	d0f7      	beq.n	5cc8 <MApi_VOC_SrcProcess48k+0xa8>
    5cd8:	4809      	ldr	r0, [pc, #36]	; (5d00 <MApi_VOC_SrcProcess48k+0xe0>)
    5cda:	f7fd fcc3 	bl	3664 <UartSendTrace>
    return FALSE;
    5cde:	4620      	mov	r0, r4
    5ce0:	e7f2      	b.n	5cc8 <MApi_VOC_SrcProcess48k+0xa8>
}
    5ce2:	4770      	bx	lr
    return FALSE;
    5ce4:	4608      	mov	r0, r1
    5ce6:	4770      	bx	lr
    5ce8:	00022118 	.word	0x00022118
    5cec:	00022128 	.word	0x00022128
    5cf0:	0002212c 	.word	0x0002212c
    5cf4:	00021538 	.word	0x00021538
    5cf8:	aaaaaaab 	.word	0xaaaaaaab
    5cfc:	0000ca14 	.word	0x0000ca14
    5d00:	0000bbb4 	.word	0x0000bbb4
    5d04:	0002210c 	.word	0x0002210c
    5d08:	00022110 	.word	0x00022110
    5d0c:	00022108 	.word	0x00022108
    5d10:	00022114 	.word	0x00022114

00005d14 <MApi_VOC_SrcInit48k>:

BOOL MApi_VOC_SrcInit48k(void)
{
    5d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  {
    SRC_ERROR("MApi_VOC_SrcInit48k: buffer size is not enough\r\n");
    return FALSE;
  }

  memset(buffer, 0, sizeof(buffer));
    5d16:	f44f 623d 	mov.w	r2, #3024	; 0xbd0
    5d1a:	2100      	movs	r1, #0
    5d1c:	481e      	ldr	r0, [pc, #120]	; (5d98 <MApi_VOC_SrcInit48k+0x84>)
  i_ch = MDrv_AUD_GetMicNo();
  wr = (res_order)*i_ch;
  rd = 0;
  len = i_ch*(MAX_FIR_TAB+1);
    5d1e:	4e1f      	ldr	r6, [pc, #124]	; (5d9c <MApi_VOC_SrcInit48k+0x88>)
  wr = (res_order)*i_ch;
    5d20:	4f1f      	ldr	r7, [pc, #124]	; (5da0 <MApi_VOC_SrcInit48k+0x8c>)
  rd = 0;
    5d22:	4d20      	ldr	r5, [pc, #128]	; (5da4 <MApi_VOC_SrcInit48k+0x90>)
  order_count = res_order/2;
    5d24:	4c20      	ldr	r4, [pc, #128]	; (5da8 <MApi_VOC_SrcInit48k+0x94>)
  memset(buffer, 0, sizeof(buffer));
    5d26:	f004 ff22 	bl	ab6e <memset>
  i_ch = MDrv_AUD_GetMicNo();
    5d2a:	f7fd fee5 	bl	3af8 <MDrv_AUD_GetMicNo>
  wr = (res_order)*i_ch;
    5d2e:	b203      	sxth	r3, r0
    5d30:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  i_ch = MDrv_AUD_GetMicNo();
    5d34:	491d      	ldr	r1, [pc, #116]	; (5dac <MApi_VOC_SrcInit48k+0x98>)
  wr = (res_order)*i_ch;
    5d36:	ebc3 1202 	rsb	r2, r3, r2, lsl #4
  len = i_ch*(MAX_FIR_TAB+1);
    5d3a:	ebc3 1383 	rsb	r3, r3, r3, lsl #6
    5d3e:	009b      	lsls	r3, r3, #2
  i_ch = MDrv_AUD_GetMicNo();
    5d40:	6008      	str	r0, [r1, #0]
  wr = (res_order)*i_ch;
    5d42:	ebc2 0282 	rsb	r2, r2, r2, lsl #2
  order_countN2 = res_order%2;
    5d46:	491a      	ldr	r1, [pc, #104]	; (5db0 <MApi_VOC_SrcInit48k+0x9c>)
  len = i_ch*(MAX_FIR_TAB+1);
    5d48:	6033      	str	r3, [r6, #0]
  rd = 0;
    5d4a:	2300      	movs	r3, #0
  wr = (res_order)*i_ch;
    5d4c:	603a      	str	r2, [r7, #0]
  rd = 0;
    5d4e:	602b      	str	r3, [r5, #0]
  order_count = res_order/2;
    5d50:	2276      	movs	r2, #118	; 0x76
  order_countN2 = res_order%2;
    5d52:	2301      	movs	r3, #1

  switch(i_ch)
    5d54:	2804      	cmp	r0, #4
  order_count = res_order/2;
    5d56:	6022      	str	r2, [r4, #0]
  order_countN2 = res_order%2;
    5d58:	600b      	str	r3, [r1, #0]
  switch(i_ch)
    5d5a:	d007      	beq.n	5d6c <MApi_VOC_SrcInit48k+0x58>
    5d5c:	2806      	cmp	r0, #6
    5d5e:	d00c      	beq.n	5d7a <MApi_VOC_SrcInit48k+0x66>
    5d60:	2802      	cmp	r0, #2
    5d62:	d011      	beq.n	5d88 <MApi_VOC_SrcInit48k+0x74>
#endif
      chx_scale48k = ch6_scale48k;
      break;
  }

  nSrcInitFlag = 1;
    5d64:	4b13      	ldr	r3, [pc, #76]	; (5db4 <MApi_VOC_SrcInit48k+0xa0>)
    5d66:	2001      	movs	r0, #1
    5d68:	6018      	str	r0, [r3, #0]

  return TRUE;
}
    5d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      chx_scale48k = ch4_scale48k;
    5d6c:	4b12      	ldr	r3, [pc, #72]	; (5db8 <MApi_VOC_SrcInit48k+0xa4>)
    5d6e:	4a13      	ldr	r2, [pc, #76]	; (5dbc <MApi_VOC_SrcInit48k+0xa8>)
    5d70:	601a      	str	r2, [r3, #0]
  nSrcInitFlag = 1;
    5d72:	4b10      	ldr	r3, [pc, #64]	; (5db4 <MApi_VOC_SrcInit48k+0xa0>)
    5d74:	2001      	movs	r0, #1
    5d76:	6018      	str	r0, [r3, #0]
}
    5d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      chx_scale48k = ch6_scale48k;
    5d7a:	4b0f      	ldr	r3, [pc, #60]	; (5db8 <MApi_VOC_SrcInit48k+0xa4>)
    5d7c:	4a10      	ldr	r2, [pc, #64]	; (5dc0 <MApi_VOC_SrcInit48k+0xac>)
    5d7e:	601a      	str	r2, [r3, #0]
  nSrcInitFlag = 1;
    5d80:	4b0c      	ldr	r3, [pc, #48]	; (5db4 <MApi_VOC_SrcInit48k+0xa0>)
    5d82:	2001      	movs	r0, #1
    5d84:	6018      	str	r0, [r3, #0]
}
    5d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      chx_scale48k = ch2_scale48k;
    5d88:	4b0b      	ldr	r3, [pc, #44]	; (5db8 <MApi_VOC_SrcInit48k+0xa4>)
    5d8a:	4a0e      	ldr	r2, [pc, #56]	; (5dc4 <MApi_VOC_SrcInit48k+0xb0>)
    5d8c:	601a      	str	r2, [r3, #0]
  nSrcInitFlag = 1;
    5d8e:	4b09      	ldr	r3, [pc, #36]	; (5db4 <MApi_VOC_SrcInit48k+0xa0>)
    5d90:	2001      	movs	r0, #1
    5d92:	6018      	str	r0, [r3, #0]
}
    5d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d96:	bf00      	nop
    5d98:	00021538 	.word	0x00021538
    5d9c:	00022114 	.word	0x00022114
    5da0:	0002212c 	.word	0x0002212c
    5da4:	00022124 	.word	0x00022124
    5da8:	0002211c 	.word	0x0002211c
    5dac:	00022110 	.word	0x00022110
    5db0:	00022120 	.word	0x00022120
    5db4:	00022118 	.word	0x00022118
    5db8:	00022108 	.word	0x00022108
    5dbc:	00005855 	.word	0x00005855
    5dc0:	000054b5 	.word	0x000054b5
    5dc4:	00005afd 	.word	0x00005afd

00005dc8 <MApi_VOC_VDInit>:

static U16 _u16MaxToNotify = 0;
static U16 _u16CountToNotify = 0;

void MApi_VOC_VDInit(void)
{
    5dc8:	b508      	push	{r3, lr}
  _tVdMutex = xSemaphoreCreateMutex();
    5dca:	2001      	movs	r0, #1
    5dcc:	f7fa fe3e 	bl	a4c <xQueueCreateMutex>
    5dd0:	4b06      	ldr	r3, [pc, #24]	; (5dec <MApi_VOC_VDInit+0x24>)
    5dd2:	6018      	str	r0, [r3, #0]
  configASSERT( _tVdMutex );
    5dd4:	b100      	cbz	r0, 5dd8 <MApi_VOC_VDInit+0x10>
}
    5dd6:	bd08      	pop	{r3, pc}
    5dd8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    5ddc:	f383 8811 	msr	BASEPRI, r3
    5de0:	f3bf 8f6f 	isb	sy
    5de4:	f3bf 8f4f 	dsb	sy
  configASSERT( _tVdMutex );
    5de8:	e7fe      	b.n	5de8 <MApi_VOC_VDInit+0x20>
    5dea:	bf00      	nop
    5dec:	00022130 	.word	0x00022130

00005df0 <MApi_VOC_VDConfig>:
    _u32PeriodCount = 0;

    _u16MaxToNotify = 0;
    _u16CountToNotify = 0;

    VOC_MSG("MApi_VOC_VDConfig: 0x%x(0x%x)\n", _u32ACPUBufferAddr, _u32ACPUBufferSize);
    5df0:	4b0c      	ldr	r3, [pc, #48]	; (5e24 <MApi_VOC_VDConfig+0x34>)
    5df2:	681a      	ldr	r2, [r3, #0]
    _u32ACPUBufferPtr = _u32ACPUBufferAddr;
    5df4:	4b0c      	ldr	r3, [pc, #48]	; (5e28 <MApi_VOC_VDConfig+0x38>)
{
    5df6:	b4f0      	push	{r4, r5, r6, r7}
    _u32PeriodCount = 0;
    5df8:	4c0c      	ldr	r4, [pc, #48]	; (5e2c <MApi_VOC_VDConfig+0x3c>)
    _u32ACPUBufferPtr = _u32ACPUBufferAddr;
    5dfa:	6018      	str	r0, [r3, #0]
    _u32PeriodCount = 0;
    5dfc:	2300      	movs	r3, #0
    5dfe:	6023      	str	r3, [r4, #0]
    _u16MaxToNotify = 0;
    5e00:	4d0b      	ldr	r5, [pc, #44]	; (5e30 <MApi_VOC_VDConfig+0x40>)
    _u16CountToNotify = 0;
    5e02:	4c0c      	ldr	r4, [pc, #48]	; (5e34 <MApi_VOC_VDConfig+0x44>)
    _u32ACPUBufferAddr = u32BufferAddr;
    5e04:	4f0c      	ldr	r7, [pc, #48]	; (5e38 <MApi_VOC_VDConfig+0x48>)
    _u32ACPUBufferSize = u32BufferSize;
    5e06:	4e0d      	ldr	r6, [pc, #52]	; (5e3c <MApi_VOC_VDConfig+0x4c>)
    _u16MaxToNotify = 0;
    5e08:	802b      	strh	r3, [r5, #0]
    _u16CountToNotify = 0;
    5e0a:	8023      	strh	r3, [r4, #0]
    VOC_MSG("MApi_VOC_VDConfig: 0x%x(0x%x)\n", _u32ACPUBufferAddr, _u32ACPUBufferSize);
    5e0c:	0793      	lsls	r3, r2, #30
    _u32ACPUBufferAddr = u32BufferAddr;
    5e0e:	6038      	str	r0, [r7, #0]
    _u32ACPUBufferSize = u32BufferSize;
    5e10:	6031      	str	r1, [r6, #0]
    VOC_MSG("MApi_VOC_VDConfig: 0x%x(0x%x)\n", _u32ACPUBufferAddr, _u32ACPUBufferSize);
    5e12:	d401      	bmi.n	5e18 <MApi_VOC_VDConfig+0x28>
  }
  //else
  //  VOC_ERROR("MApi_VOC_VDConfig failed: State not match\n");
}
    5e14:	bcf0      	pop	{r4, r5, r6, r7}
    5e16:	4770      	bx	lr
    VOC_MSG("MApi_VOC_VDConfig: 0x%x(0x%x)\n", _u32ACPUBufferAddr, _u32ACPUBufferSize);
    5e18:	460a      	mov	r2, r1
}
    5e1a:	bcf0      	pop	{r4, r5, r6, r7}
    VOC_MSG("MApi_VOC_VDConfig: 0x%x(0x%x)\n", _u32ACPUBufferAddr, _u32ACPUBufferSize);
    5e1c:	4601      	mov	r1, r0
    5e1e:	4808      	ldr	r0, [pc, #32]	; (5e40 <MApi_VOC_VDConfig+0x50>)
    5e20:	f7fd bc20 	b.w	3664 <UartSendTrace>
    5e24:	0000ca14 	.word	0x0000ca14
    5e28:	0002213c 	.word	0x0002213c
    5e2c:	00022144 	.word	0x00022144
    5e30:	00022136 	.word	0x00022136
    5e34:	00022134 	.word	0x00022134
    5e38:	00022138 	.word	0x00022138
    5e3c:	00022140 	.word	0x00022140
    5e40:	0000bbe4 	.word	0x0000bbe4

00005e44 <MApi_VOC_VDConfigExt>:
    _u32PeriodCount = 0;

    _u16MaxToNotify = u16MaxToNotify;
    _u16CountToNotify = 0;

    VOC_MSG("MApi_VOC_VDConfigExt: 0x%x(0x%x) - %d\n", _u32ACPUBufferAddr, _u32ACPUBufferSize, _u16MaxToNotify);
    5e44:	4b0e      	ldr	r3, [pc, #56]	; (5e80 <MApi_VOC_VDConfigExt+0x3c>)
    _u32ACPUBufferAddr = u32BufferAddr;
    5e46:	f8df c054 	ldr.w	ip, [pc, #84]	; 5e9c <MApi_VOC_VDConfigExt+0x58>
    VOC_MSG("MApi_VOC_VDConfigExt: 0x%x(0x%x) - %d\n", _u32ACPUBufferAddr, _u32ACPUBufferSize, _u16MaxToNotify);
    5e4a:	681b      	ldr	r3, [r3, #0]
    _u32ACPUBufferAddr = u32BufferAddr;
    5e4c:	f8cc 0000 	str.w	r0, [ip]
{
    5e50:	b4f0      	push	{r4, r5, r6, r7}
    _u32ACPUBufferPtr = _u32ACPUBufferAddr;
    5e52:	4d0c      	ldr	r5, [pc, #48]	; (5e84 <MApi_VOC_VDConfigExt+0x40>)
    _u16MaxToNotify = u16MaxToNotify;
    5e54:	4c0c      	ldr	r4, [pc, #48]	; (5e88 <MApi_VOC_VDConfigExt+0x44>)
    _u32ACPUBufferPtr = _u32ACPUBufferAddr;
    5e56:	6028      	str	r0, [r5, #0]
    _u32ACPUBufferSize = u32BufferSize;
    5e58:	4f0c      	ldr	r7, [pc, #48]	; (5e8c <MApi_VOC_VDConfigExt+0x48>)
    _u32PeriodCount = 0;
    5e5a:	4e0d      	ldr	r6, [pc, #52]	; (5e90 <MApi_VOC_VDConfigExt+0x4c>)
    _u16CountToNotify = 0;
    5e5c:	4d0d      	ldr	r5, [pc, #52]	; (5e94 <MApi_VOC_VDConfigExt+0x50>)
    _u16MaxToNotify = u16MaxToNotify;
    5e5e:	8022      	strh	r2, [r4, #0]
    VOC_MSG("MApi_VOC_VDConfigExt: 0x%x(0x%x) - %d\n", _u32ACPUBufferAddr, _u32ACPUBufferSize, _u16MaxToNotify);
    5e60:	079b      	lsls	r3, r3, #30
    _u32PeriodCount = 0;
    5e62:	f04f 0400 	mov.w	r4, #0
    _u32ACPUBufferSize = u32BufferSize;
    5e66:	6039      	str	r1, [r7, #0]
    _u32PeriodCount = 0;
    5e68:	6034      	str	r4, [r6, #0]
    _u16CountToNotify = 0;
    5e6a:	802c      	strh	r4, [r5, #0]
    VOC_MSG("MApi_VOC_VDConfigExt: 0x%x(0x%x) - %d\n", _u32ACPUBufferAddr, _u32ACPUBufferSize, _u16MaxToNotify);
    5e6c:	d401      	bmi.n	5e72 <MApi_VOC_VDConfigExt+0x2e>
}
    5e6e:	bcf0      	pop	{r4, r5, r6, r7}
    5e70:	4770      	bx	lr
    VOC_MSG("MApi_VOC_VDConfigExt: 0x%x(0x%x) - %d\n", _u32ACPUBufferAddr, _u32ACPUBufferSize, _u16MaxToNotify);
    5e72:	4613      	mov	r3, r2
}
    5e74:	bcf0      	pop	{r4, r5, r6, r7}
    VOC_MSG("MApi_VOC_VDConfigExt: 0x%x(0x%x) - %d\n", _u32ACPUBufferAddr, _u32ACPUBufferSize, _u16MaxToNotify);
    5e76:	460a      	mov	r2, r1
    5e78:	4601      	mov	r1, r0
    5e7a:	4807      	ldr	r0, [pc, #28]	; (5e98 <MApi_VOC_VDConfigExt+0x54>)
    5e7c:	f7fd bbf2 	b.w	3664 <UartSendTrace>
    5e80:	0000ca14 	.word	0x0000ca14
    5e84:	0002213c 	.word	0x0002213c
    5e88:	00022136 	.word	0x00022136
    5e8c:	00022140 	.word	0x00022140
    5e90:	00022144 	.word	0x00022144
    5e94:	00022134 	.word	0x00022134
    5e98:	0000bc0c 	.word	0x0000bc0c
    5e9c:	00022138 	.word	0x00022138

00005ea0 <MApi_VOC_VDReset>:

void MApi_VOC_VDReset(void)
{
    5ea0:	b538      	push	{r3, r4, r5, lr}
  if( xSemaphoreTake( _tVdMutex, portMAX_DELAY ) == pdPASS )
    5ea2:	4c11      	ldr	r4, [pc, #68]	; (5ee8 <MApi_VOC_VDReset+0x48>)
    5ea4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5ea8:	6820      	ldr	r0, [r4, #0]
    5eaa:	f7fa ff9b 	bl	de4 <xQueueSemaphoreTake>
    5eae:	2801      	cmp	r0, #1
    5eb0:	d009      	beq.n	5ec6 <MApi_VOC_VDReset+0x26>
    _u32PeriodCount = 0;
    _u16CountToNotify = 0;

    xSemaphoreGive(_tVdMutex);
  }
  VOC_MSG("MApi_VOC_VDReset\n");
    5eb2:	4b0e      	ldr	r3, [pc, #56]	; (5eec <MApi_VOC_VDReset+0x4c>)
    5eb4:	681b      	ldr	r3, [r3, #0]
    5eb6:	079b      	lsls	r3, r3, #30
    5eb8:	d400      	bmi.n	5ebc <MApi_VOC_VDReset+0x1c>
}
    5eba:	bd38      	pop	{r3, r4, r5, pc}
  VOC_MSG("MApi_VOC_VDReset\n");
    5ebc:	480c      	ldr	r0, [pc, #48]	; (5ef0 <MApi_VOC_VDReset+0x50>)
}
    5ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  VOC_MSG("MApi_VOC_VDReset\n");
    5ec2:	f7fd bbcf 	b.w	3664 <UartSendTrace>
    _u32ACPUBufferPtr = _u32ACPUBufferAddr;
    5ec6:	4a0b      	ldr	r2, [pc, #44]	; (5ef4 <MApi_VOC_VDReset+0x54>)
    5ec8:	4b0b      	ldr	r3, [pc, #44]	; (5ef8 <MApi_VOC_VDReset+0x58>)
    _u32PeriodCount = 0;
    5eca:	490c      	ldr	r1, [pc, #48]	; (5efc <MApi_VOC_VDReset+0x5c>)
    _u16CountToNotify = 0;
    5ecc:	4d0c      	ldr	r5, [pc, #48]	; (5f00 <MApi_VOC_VDReset+0x60>)
    _u32ACPUBufferPtr = _u32ACPUBufferAddr;
    5ece:	6812      	ldr	r2, [r2, #0]
    xSemaphoreGive(_tVdMutex);
    5ed0:	6820      	ldr	r0, [r4, #0]
    _u32ACPUBufferPtr = _u32ACPUBufferAddr;
    5ed2:	601a      	str	r2, [r3, #0]
    _u32PeriodCount = 0;
    5ed4:	2400      	movs	r4, #0
    5ed6:	600c      	str	r4, [r1, #0]
    xSemaphoreGive(_tVdMutex);
    5ed8:	4623      	mov	r3, r4
    5eda:	4622      	mov	r2, r4
    5edc:	4621      	mov	r1, r4
    _u16CountToNotify = 0;
    5ede:	802c      	strh	r4, [r5, #0]
    xSemaphoreGive(_tVdMutex);
    5ee0:	f7fa fcec 	bl	8bc <xQueueGenericSend>
    5ee4:	e7e5      	b.n	5eb2 <MApi_VOC_VDReset+0x12>
    5ee6:	bf00      	nop
    5ee8:	00022130 	.word	0x00022130
    5eec:	0000ca14 	.word	0x0000ca14
    5ef0:	0000bc84 	.word	0x0000bc84
    5ef4:	00022138 	.word	0x00022138
    5ef8:	0002213c 	.word	0x0002213c
    5efc:	00022144 	.word	0x00022144
    5f00:	00022134 	.word	0x00022134

00005f04 <MApi_VOC_VDPort>:

BOOL MApi_VOC_VDPort(S16 *ps16Buffer, U32 u32Count)
{
    5f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  U32 u32Buffer = (U32)ps16Buffer;
  U32 u32Size = u32Count*2;

  if( xSemaphoreTake( _tVdMutex, portMAX_DELAY ) == pdPASS )
    5f08:	4d31      	ldr	r5, [pc, #196]	; (5fd0 <MApi_VOC_VDPort+0xcc>)
{
    5f0a:	4606      	mov	r6, r0
    5f0c:	460c      	mov	r4, r1
  if( xSemaphoreTake( _tVdMutex, portMAX_DELAY ) == pdPASS )
    5f0e:	6828      	ldr	r0, [r5, #0]
    5f10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5f14:	f7fa ff66 	bl	de4 <xQueueSemaphoreTake>
    5f18:	2801      	cmp	r0, #1
    5f1a:	d002      	beq.n	5f22 <MApi_VOC_VDPort+0x1e>
    _u32PeriodCount++;
    _u16CountToNotify++;
    xSemaphoreGive(_tVdMutex);
  }

  return TRUE;
    5f1c:	2001      	movs	r0, #1
}
    5f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (u32Size > _u32ACPUBufferSize || !_u32ACPUBufferAddr)
    5f22:	4f2c      	ldr	r7, [pc, #176]	; (5fd4 <MApi_VOC_VDPort+0xd0>)
    5f24:	683b      	ldr	r3, [r7, #0]
  U32 u32Size = u32Count*2;
    5f26:	0064      	lsls	r4, r4, #1
    if (u32Size > _u32ACPUBufferSize || !_u32ACPUBufferAddr)
    5f28:	42a3      	cmp	r3, r4
    5f2a:	d31f      	bcc.n	5f6c <MApi_VOC_VDPort+0x68>
    5f2c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 5fe4 <MApi_VOC_VDPort+0xe0>
    5f30:	f8d8 2000 	ldr.w	r2, [r8]
    5f34:	b1d2      	cbz	r2, 5f6c <MApi_VOC_VDPort+0x68>
    if(_u32ACPUBufferPtr + u32Size >= _u32ACPUBufferAddr + _u32ACPUBufferSize)
    5f36:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 5fec <MApi_VOC_VDPort+0xe8>
    5f3a:	f8d9 1000 	ldr.w	r1, [r9]
    5f3e:	4413      	add	r3, r2
    5f40:	190a      	adds	r2, r1, r4
    5f42:	429a      	cmp	r2, r3
    5f44:	d226      	bcs.n	5f94 <MApi_VOC_VDPort+0x90>
    if (u32Size > 0)
    5f46:	2c00      	cmp	r4, #0
    5f48:	d136      	bne.n	5fb8 <MApi_VOC_VDPort+0xb4>
    _u32PeriodCount++;
    5f4a:	4923      	ldr	r1, [pc, #140]	; (5fd8 <MApi_VOC_VDPort+0xd4>)
    _u16CountToNotify++;
    5f4c:	4e23      	ldr	r6, [pc, #140]	; (5fdc <MApi_VOC_VDPort+0xd8>)
    _u32PeriodCount++;
    5f4e:	680a      	ldr	r2, [r1, #0]
    _u16CountToNotify++;
    5f50:	8834      	ldrh	r4, [r6, #0]
    xSemaphoreGive(_tVdMutex);
    5f52:	6828      	ldr	r0, [r5, #0]
    5f54:	2300      	movs	r3, #0
    _u32PeriodCount++;
    5f56:	3201      	adds	r2, #1
    5f58:	600a      	str	r2, [r1, #0]
    _u16CountToNotify++;
    5f5a:	3401      	adds	r4, #1
    xSemaphoreGive(_tVdMutex);
    5f5c:	461a      	mov	r2, r3
    5f5e:	4619      	mov	r1, r3
    _u16CountToNotify++;
    5f60:	8034      	strh	r4, [r6, #0]
    xSemaphoreGive(_tVdMutex);
    5f62:	f7fa fcab 	bl	8bc <xQueueGenericSend>
  return TRUE;
    5f66:	2001      	movs	r0, #1
}
    5f68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      VOC_ERROR("MApi_VOC_VDPort: copy DMA data size 0x%x to ACPU 0x%x(0x%x)\n", u32Size, _u32ACPUBufferAddr, _u32ACPUBufferSize);
    5f6c:	4a1c      	ldr	r2, [pc, #112]	; (5fe0 <MApi_VOC_VDPort+0xdc>)
    5f6e:	6812      	ldr	r2, [r2, #0]
    5f70:	07d2      	lsls	r2, r2, #31
    5f72:	d408      	bmi.n	5f86 <MApi_VOC_VDPort+0x82>
      xSemaphoreGive(_tVdMutex);
    5f74:	2300      	movs	r3, #0
    5f76:	6828      	ldr	r0, [r5, #0]
    5f78:	461a      	mov	r2, r3
    5f7a:	4619      	mov	r1, r3
    5f7c:	f7fa fc9e 	bl	8bc <xQueueGenericSend>
      return pdFAIL;
    5f80:	2000      	movs	r0, #0
}
    5f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      VOC_ERROR("MApi_VOC_VDPort: copy DMA data size 0x%x to ACPU 0x%x(0x%x)\n", u32Size, _u32ACPUBufferAddr, _u32ACPUBufferSize);
    5f86:	4a17      	ldr	r2, [pc, #92]	; (5fe4 <MApi_VOC_VDPort+0xe0>)
    5f88:	4817      	ldr	r0, [pc, #92]	; (5fe8 <MApi_VOC_VDPort+0xe4>)
    5f8a:	6812      	ldr	r2, [r2, #0]
    5f8c:	4621      	mov	r1, r4
    5f8e:	f7fd fb69 	bl	3664 <UartSendTrace>
    5f92:	e7ef      	b.n	5f74 <MApi_VOC_VDPort+0x70>
      MDrv_BDMA_Copy(u32Buffer, _u32ACPUBufferPtr, (_u32ACPUBufferAddr + _u32ACPUBufferSize - _u32ACPUBufferPtr), E_BDMA_CPtoHK);
    5f94:	1a5a      	subs	r2, r3, r1
    5f96:	4630      	mov	r0, r6
    5f98:	2300      	movs	r3, #0
    5f9a:	f7fd ff8f 	bl	3ebc <MDrv_BDMA_Copy>
      u32Size -= (_u32ACPUBufferAddr + _u32ACPUBufferSize - _u32ACPUBufferPtr);
    5f9e:	f8d8 1000 	ldr.w	r1, [r8]
    5fa2:	683b      	ldr	r3, [r7, #0]
    5fa4:	f8d9 2000 	ldr.w	r2, [r9]
      _u32ACPUBufferPtr = _u32ACPUBufferAddr;
    5fa8:	f8c9 1000 	str.w	r1, [r9]
      u32Size -= (_u32ACPUBufferAddr + _u32ACPUBufferSize - _u32ACPUBufferPtr);
    5fac:	440b      	add	r3, r1
    5fae:	1ad0      	subs	r0, r2, r3
      u32Buffer +=  (_u32ACPUBufferAddr + _u32ACPUBufferSize - _u32ACPUBufferPtr);
    5fb0:	1a9b      	subs	r3, r3, r2
      u32Size -= (_u32ACPUBufferAddr + _u32ACPUBufferSize - _u32ACPUBufferPtr);
    5fb2:	4404      	add	r4, r0
      u32Buffer +=  (_u32ACPUBufferAddr + _u32ACPUBufferSize - _u32ACPUBufferPtr);
    5fb4:	441e      	add	r6, r3
      _u32ACPUBufferPtr = _u32ACPUBufferAddr;
    5fb6:	e7c6      	b.n	5f46 <MApi_VOC_VDPort+0x42>
      MDrv_BDMA_Copy(u32Buffer, _u32ACPUBufferPtr, u32Size, E_BDMA_CPtoHK);
    5fb8:	2300      	movs	r3, #0
    5fba:	4622      	mov	r2, r4
    5fbc:	4630      	mov	r0, r6
    5fbe:	f7fd ff7d 	bl	3ebc <MDrv_BDMA_Copy>
      _u32ACPUBufferPtr += u32Size;
    5fc2:	f8d9 3000 	ldr.w	r3, [r9]
    5fc6:	441c      	add	r4, r3
    5fc8:	f8c9 4000 	str.w	r4, [r9]
    5fcc:	e7bd      	b.n	5f4a <MApi_VOC_VDPort+0x46>
    5fce:	bf00      	nop
    5fd0:	00022130 	.word	0x00022130
    5fd4:	00022140 	.word	0x00022140
    5fd8:	00022144 	.word	0x00022144
    5fdc:	00022134 	.word	0x00022134
    5fe0:	0000ca14 	.word	0x0000ca14
    5fe4:	00022138 	.word	0x00022138
    5fe8:	0000bc3c 	.word	0x0000bc3c
    5fec:	0002213c 	.word	0x0002213c

00005ff0 <MApi_VOC_VDNotify>:

void MApi_VOC_VDNotify(U32 u32Count)
{
    5ff0:	b570      	push	{r4, r5, r6, lr}
  MBX_Msg tMsg;

  if (_u16CountToNotify < _u16MaxToNotify)
    5ff2:	4b16      	ldr	r3, [pc, #88]	; (604c <MApi_VOC_VDNotify+0x5c>)
    5ff4:	4c16      	ldr	r4, [pc, #88]	; (6050 <MApi_VOC_VDNotify+0x60>)
    5ff6:	881b      	ldrh	r3, [r3, #0]
    5ff8:	8822      	ldrh	r2, [r4, #0]
    5ffa:	429a      	cmp	r2, r3
{
    5ffc:	b086      	sub	sp, #24
  if (_u16CountToNotify < _u16MaxToNotify)
    5ffe:	d323      	bcc.n	6048 <MApi_VOC_VDNotify+0x58>
  tMsg.u8Index = E_MBX_MSG_PERIOD_NOTIFY;

  //MBX_MSG_PUT_U32(tMsg, _u32PeriodCount);
  //MBX_MSG_PUT_2U32(tMsg, _u32PeriodCount, u32Count*2);

  MBX_MSG_PUT_2U32(tMsg, _u32PeriodCount, (u32Count*2));
    6000:	4a14      	ldr	r2, [pc, #80]	; (6054 <MApi_VOC_VDNotify+0x64>)
    6002:	6813      	ldr	r3, [r2, #0]
    6004:	8812      	ldrh	r2, [r2, #0]
    6006:	f8ad 200a 	strh.w	r2, [sp, #10]
    600a:	0040      	lsls	r0, r0, #1
    600c:	0c1d      	lsrs	r5, r3, #16
    600e:	0e1a      	lsrs	r2, r3, #24
    6010:	0c01      	lsrs	r1, r0, #16
    6012:	0e03      	lsrs	r3, r0, #24
    6014:	0a06      	lsrs	r6, r0, #8
    6016:	f88d 000e 	strb.w	r0, [sp, #14]
    601a:	f88d 500c 	strb.w	r5, [sp, #12]
    601e:	f88d 200d 	strb.w	r2, [sp, #13]
  tMsg.eRoleID = E_MBX_ROLE_HK;
    6022:	2500      	movs	r5, #0
  tMsg.u8Index = E_MBX_MSG_PERIOD_NOTIFY;
    6024:	f44f 6201 	mov.w	r2, #2064	; 0x810

  MDrv_MBX_SendMsg(&tMsg);
    6028:	a801      	add	r0, sp, #4
  MBX_MSG_PUT_2U32(tMsg, _u32PeriodCount, (u32Count*2));
    602a:	f88d 600f 	strb.w	r6, [sp, #15]
    602e:	f88d 1010 	strb.w	r1, [sp, #16]
    6032:	f88d 3011 	strb.w	r3, [sp, #17]
  tMsg.eRoleID = E_MBX_ROLE_HK;
    6036:	f8ad 5004 	strh.w	r5, [sp, #4]
  tMsg.u8MsgClass = E_MBX_CLASS_VOC;
    603a:	f88d 5007 	strb.w	r5, [sp, #7]
  tMsg.u8Index = E_MBX_MSG_PERIOD_NOTIFY;
    603e:	f8ad 2008 	strh.w	r2, [sp, #8]
  MDrv_MBX_SendMsg(&tMsg);
    6042:	f7fd ffd5 	bl	3ff0 <MDrv_MBX_SendMsg>
  //OUTREG16(0x40006600, 0x7878);
  //MDrv_MBX_SendMsgExt(&tMsg);

  _u16CountToNotify = 0;
    6046:	8025      	strh	r5, [r4, #0]
}
    6048:	b006      	add	sp, #24
    604a:	bd70      	pop	{r4, r5, r6, pc}
    604c:	00022136 	.word	0x00022136
    6050:	00022134 	.word	0x00022134
    6054:	00022144 	.word	0x00022144

00006058 <MApi_VOC_NotifyStatus>:
  //OUTREG16(0x40006600, 0x7878);
  //MDrv_MBX_SendMsgExt(&tMsg);
}

void MApi_VOC_NotifyStatus(U8 u8Status)
{
    6058:	b500      	push	{lr}
    605a:	b087      	sub	sp, #28
  MBX_Msg tMsg;

  tMsg.eRoleID = E_MBX_ROLE_HK;
    605c:	2300      	movs	r3, #0
  //tMsg.eRoleID = E_MBX_ROLE_CP;
  tMsg.eMsgType = E_MBX_MSG_TYPE_NORMAL;
  tMsg.u8MsgClass = E_MBX_CLASS_VOC;
  tMsg.u8Index = E_MBX_MSG_STATUS_NOTIFY;
  tMsg.u8ParameterCount = 1;
  tMsg.u8Parameters[0] = u8Status;
    605e:	f88d 000a 	strb.w	r0, [sp, #10]
  tMsg.u8Index = E_MBX_MSG_STATUS_NOTIFY;
    6062:	f44f 7289 	mov.w	r2, #274	; 0x112

  MDrv_MBX_SendMsg(&tMsg);
    6066:	a801      	add	r0, sp, #4
  tMsg.eRoleID = E_MBX_ROLE_HK;
    6068:	f8ad 3004 	strh.w	r3, [sp, #4]
  tMsg.u8MsgClass = E_MBX_CLASS_VOC;
    606c:	f88d 3007 	strb.w	r3, [sp, #7]
  tMsg.u8Index = E_MBX_MSG_STATUS_NOTIFY;
    6070:	f8ad 2008 	strh.w	r2, [sp, #8]
  MDrv_MBX_SendMsg(&tMsg);
    6074:	f7fd ffbc 	bl	3ff0 <MDrv_MBX_SendMsg>
}
    6078:	b007      	add	sp, #28
    607a:	f85d fb04 	ldr.w	pc, [sp], #4
    607e:	bf00      	nop

00006080 <MApi_VOC_VQPort>:
}

#endif

__attribute__((weak)) BOOL MApi_VOC_VQPort(S16 *ps16Buffer, U32 u32Count)
{
    6080:	b5f0      	push	{r4, r5, r6, r7, lr}
  static float raw_buffer[VQ_RKIMPL_PCM_BUF_COUNT];
  static float * in_ptr[8];
  int status;
  int i;

  if (initedFlag == 0) {
    6082:	4e1e      	ldr	r6, [pc, #120]	; (60fc <MApi_VOC_VQPort+0x7c>)
    6084:	6833      	ldr	r3, [r6, #0]
    6086:	b085      	sub	sp, #20
    6088:	4604      	mov	r4, r0
    608a:	460d      	mov	r5, r1
    608c:	b313      	cbz	r3, 60d4 <MApi_VOC_VQPort+0x54>
    608e:	4b1c      	ldr	r3, [pc, #112]	; (6100 <MApi_VOC_VQPort+0x80>)
    6090:	6818      	ldr	r0, [r3, #0]
	unsigned char channel_num = 1;
    int min_gap = 7;
    initedFlag = 1;
    handle = kws_create("123", channel_num, thresholdSetting, min_gap);
  }
   in_ptr[0] = raw_buffer;
    6092:	4b1c      	ldr	r3, [pc, #112]	; (6104 <MApi_VOC_VQPort+0x84>)
    6094:	491c      	ldr	r1, [pc, #112]	; (6108 <MApi_VOC_VQPort+0x88>)
    6096:	6019      	str	r1, [r3, #0]

  for (i = 0; i < u32Count; ++i) {
    6098:	b185      	cbz	r5, 60bc <MApi_VOC_VQPort+0x3c>
    609a:	eb04 0645 	add.w	r6, r4, r5, lsl #1
    609e:	3e02      	subs	r6, #2
    60a0:	1ea2      	subs	r2, r4, #2
    raw_buffer[i] = ps16Buffer[i]*VQ_RKIMPL_PCM_MULTI;
    60a2:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
    60a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    60aa:	009b      	lsls	r3, r3, #2
    60ac:	ee07 3a90 	vmov	s15, r3
    60b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (i = 0; i < u32Count; ++i) {
    60b4:	4296      	cmp	r6, r2
    raw_buffer[i] = ps16Buffer[i]*VQ_RKIMPL_PCM_MULTI;
    60b6:	ece1 7a01 	vstmia	r1!, {s15}
  for (i = 0; i < u32Count; ++i) {
    60ba:	d1f2      	bne.n	60a2 <MApi_VOC_VQPort+0x22>
  }

  status = kws_status(handle, (const float** )in_ptr, u32Count,NULL); 
    60bc:	462a      	mov	r2, r5
    60be:	2300      	movs	r3, #0
    60c0:	4910      	ldr	r1, [pc, #64]	; (6104 <MApi_VOC_VQPort+0x84>)
    60c2:	f03d fe7b 	bl	43dbc <kws_status>
  return MApi_VOC_VQPort_RKImpl(ps16Buffer, u32Count);
    60c6:	f1a0 0001 	sub.w	r0, r0, #1
    60ca:	fab0 f080 	clz	r0, r0
    60ce:	0940      	lsrs	r0, r0, #5
}
    60d0:	b005      	add	sp, #20
    60d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    float thresholdSetting[3] = { 0.92f, 1.0f, 1.0f };
    60d4:	4b0d      	ldr	r3, [pc, #52]	; (610c <MApi_VOC_VQPort+0x8c>)
    60d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    initedFlag = 1;
    60da:	f04f 0c01 	mov.w	ip, #1
    float thresholdSetting[3] = { 0.92f, 1.0f, 1.0f };
    60de:	af01      	add	r7, sp, #4
    60e0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    handle = kws_create("123", channel_num, thresholdSetting, min_gap);
    60e4:	2307      	movs	r3, #7
    60e6:	463a      	mov	r2, r7
    60e8:	4661      	mov	r1, ip
    60ea:	4809      	ldr	r0, [pc, #36]	; (6110 <MApi_VOC_VQPort+0x90>)
    initedFlag = 1;
    60ec:	f8c6 c000 	str.w	ip, [r6]
    handle = kws_create("123", channel_num, thresholdSetting, min_gap);
    60f0:	f03d fe62 	bl	43db8 <kws_create>
    60f4:	4b02      	ldr	r3, [pc, #8]	; (6100 <MApi_VOC_VQPort+0x80>)
    60f6:	6018      	str	r0, [r3, #0]
    60f8:	e7cb      	b.n	6092 <MApi_VOC_VQPort+0x12>
    60fa:	bf00      	nop
    60fc:	0002216c 	.word	0x0002216c
    6100:	00022148 	.word	0x00022148
    6104:	0002214c 	.word	0x0002214c
    6108:	00022170 	.word	0x00022170
    610c:	0000bc9c 	.word	0x0000bc9c
    6110:	0000bca8 	.word	0x0000bca8

00006114 <MApi_VOC_VPPort>:

  return TRUE;
}

__attribute__((weak)) BOOL MApi_VOC_VPPort(S16 *ps16Buffer, U32 *pu32Count)
{
    6114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6116:	460f      	mov	r7, r1
    6118:	4604      	mov	r4, r0
  U32 i;
  U8 u8MicNo = MDrv_AUD_GetMicNo();
    611a:	f7fd fced 	bl	3af8 <MDrv_AUD_GetMicNo>
  for(i = 0; i < *pu32Count / u8MicNo; i++) //sterero to mono
    611e:	683b      	ldr	r3, [r7, #0]
    6120:	fbb3 f6f0 	udiv	r6, r3, r0
    6124:	4298      	cmp	r0, r3
    6126:	d812      	bhi.n	614e <MApi_VOC_VPPort+0x3a>
  {
    ps16Buffer[i] = ps16Buffer[i * u8MicNo ] * _u8VPScale;
    6128:	4b0b      	ldr	r3, [pc, #44]	; (6158 <MApi_VOC_VPPort+0x44>)
    612a:	b205      	sxth	r5, r0
    612c:	7819      	ldrb	r1, [r3, #0]
    612e:	4620      	mov	r0, r4
    6130:	006d      	lsls	r5, r5, #1
    6132:	3c02      	subs	r4, #2
  for(i = 0; i < *pu32Count / u8MicNo; i++) //sterero to mono
    6134:	2200      	movs	r2, #0
    ps16Buffer[i] = ps16Buffer[i * u8MicNo ] * _u8VPScale;
    6136:	8803      	ldrh	r3, [r0, #0]
  for(i = 0; i < *pu32Count / u8MicNo; i++) //sterero to mono
    6138:	3201      	adds	r2, #1
    ps16Buffer[i] = ps16Buffer[i * u8MicNo ] * _u8VPScale;
    613a:	fb13 f301 	smulbb	r3, r3, r1
  for(i = 0; i < *pu32Count / u8MicNo; i++) //sterero to mono
    613e:	42b2      	cmp	r2, r6
    ps16Buffer[i] = ps16Buffer[i * u8MicNo ] * _u8VPScale;
    6140:	f824 3f02 	strh.w	r3, [r4, #2]!
    6144:	4428      	add	r0, r5
  for(i = 0; i < *pu32Count / u8MicNo; i++) //sterero to mono
    6146:	d3f6      	bcc.n	6136 <MApi_VOC_VPPort+0x22>
  }

  *pu32Count = *pu32Count / u8MicNo;
    6148:	603e      	str	r6, [r7, #0]

  return TRUE;
}
    614a:	2001      	movs	r0, #1
    614c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for(i = 0; i < *pu32Count / u8MicNo; i++) //sterero to mono
    614e:	2600      	movs	r6, #0
  *pu32Count = *pu32Count / u8MicNo;
    6150:	603e      	str	r6, [r7, #0]
}
    6152:	2001      	movs	r0, #1
    6154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6156:	bf00      	nop
    6158:	0000ca10 	.word	0x0000ca10

0000615c <Mapi_VOC_VPConfig>:
  return TRUE;
}

void Mapi_VOC_VPConfig(U8 u8Scale)
{
  _u8VPScale = u8Scale;
    615c:	4b01      	ldr	r3, [pc, #4]	; (6164 <Mapi_VOC_VPConfig+0x8>)
    615e:	7018      	strb	r0, [r3, #0]
  return;
}
    6160:	4770      	bx	lr
    6162:	bf00      	nop
    6164:	0000ca10 	.word	0x0000ca10

00006168 <MApi_VOC_MicMapConfig>:
  return TRUE;
}

BOOL MApi_VOC_MicMapConfig(U8 u8DestMicNo, U8 u8SrcMicNo)
{
  if (u8DestMicNo < 8 && u8SrcMicNo < 8)
    6168:	2807      	cmp	r0, #7
    616a:	d80a      	bhi.n	6182 <MApi_VOC_MicMapConfig+0x1a>
    616c:	2907      	cmp	r1, #7
    616e:	d808      	bhi.n	6182 <MApi_VOC_MicMapConfig+0x1a>
    _u8MicMap[u8DestMicNo] = u8SrcMicNo;
  else
    return FALSE;

  VP_MSG("MApi_VOC_MicMapConfig: map %d to %d\n", u8SrcMicNo, u8DestMicNo);
    6170:	4a08      	ldr	r2, [pc, #32]	; (6194 <MApi_VOC_MicMapConfig+0x2c>)
    6172:	6812      	ldr	r2, [r2, #0]
{
    6174:	b510      	push	{r4, lr}
    _u8MicMap[u8DestMicNo] = u8SrcMicNo;
    6176:	4c08      	ldr	r4, [pc, #32]	; (6198 <MApi_VOC_MicMapConfig+0x30>)
  VP_MSG("MApi_VOC_MicMapConfig: map %d to %d\n", u8SrcMicNo, u8DestMicNo);
    6178:	05d3      	lsls	r3, r2, #23
    _u8MicMap[u8DestMicNo] = u8SrcMicNo;
    617a:	5421      	strb	r1, [r4, r0]
  VP_MSG("MApi_VOC_MicMapConfig: map %d to %d\n", u8SrcMicNo, u8DestMicNo);
    617c:	d403      	bmi.n	6186 <MApi_VOC_MicMapConfig+0x1e>
  return TRUE;
    617e:	2001      	movs	r0, #1
}
    6180:	bd10      	pop	{r4, pc}
    return FALSE;
    6182:	2000      	movs	r0, #0
}
    6184:	4770      	bx	lr
    6186:	4602      	mov	r2, r0
  VP_MSG("MApi_VOC_MicMapConfig: map %d to %d\n", u8SrcMicNo, u8DestMicNo);
    6188:	4804      	ldr	r0, [pc, #16]	; (619c <MApi_VOC_MicMapConfig+0x34>)
    618a:	f7fd fa6b 	bl	3664 <UartSendTrace>
  return TRUE;
    618e:	2001      	movs	r0, #1
}
    6190:	bd10      	pop	{r4, pc}
    6192:	bf00      	nop
    6194:	0000ca14 	.word	0x0000ca14
    6198:	0000ca08 	.word	0x0000ca08
    619c:	0000bd30 	.word	0x0000bd30

000061a0 <MApi_VOC_MicMap>:

BOOL MApi_VOC_MicMap(S16 *ps16Buffer, U32 *pu32Count)
{
    61a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61a4:	460c      	mov	r4, r1
    61a6:	4606      	mov	r6, r0
  unsigned int c1, c2, c3;

  U8 u8MicNo = MDrv_AUD_GetMicNo();
    61a8:	f7fd fca6 	bl	3af8 <MDrv_AUD_GetMicNo>
//  U8 u8BitWidth = MDrv_AUD_GetBitWidth();

  c3 = 0;
  for( c2 = 0; c2 < *pu32Count/u8MicNo; c2++ )
    61ac:	6823      	ldr	r3, [r4, #0]
    61ae:	fbb3 fbf0 	udiv	fp, r3, r0
    61b2:	4283      	cmp	r3, r0
    61b4:	d35a      	bcc.n	626c <MApi_VOC_MicMap+0xcc>
  {
      for( c1 = 0; c1 < u8MicNo; c1++ )
      {
          _s16MicData[ c1 ] = ps16Buffer[ c3 + c1 ];
    61b6:	fa0f fa80 	sxth.w	sl, r0
  c3 = 0;
    61ba:	2400      	movs	r4, #0
    61bc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 6278 <MApi_VOC_MicMap+0xd8>
      }

      for( c1 = 0; c1 < u8MicNo; c1++ )
      {
          ps16Buffer[ c3 ] = _s16MicData[ _u8MicMap[c1] ];
    61c0:	4f2c      	ldr	r7, [pc, #176]	; (6274 <MApi_VOC_MicMap+0xd4>)
    61c2:	4605      	mov	r5, r0
          _s16MicData[ c1 ] = ps16Buffer[ c3 + c1 ];
    61c4:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
  for( c2 = 0; c2 < *pu32Count/u8MicNo; c2++ )
    61c8:	46a1      	mov	r9, r4
      for( c1 = 0; c1 < u8MicNo; c1++ )
    61ca:	2d00      	cmp	r5, #0
    61cc:	d04a      	beq.n	6264 <MApi_VOC_MicMap+0xc4>
    61ce:	4652      	mov	r2, sl
    61d0:	eb06 0144 	add.w	r1, r6, r4, lsl #1
    61d4:	4828      	ldr	r0, [pc, #160]	; (6278 <MApi_VOC_MicMap+0xd8>)
    61d6:	f004 fca2 	bl	ab1e <memcpy>
          ps16Buffer[ c3 ] = _s16MicData[ _u8MicMap[c1] ];
    61da:	783b      	ldrb	r3, [r7, #0]
      for( c1 = 0; c1 < u8MicNo; c1++ )
    61dc:	2d01      	cmp	r5, #1
          ps16Buffer[ c3 ] = _s16MicData[ _u8MicMap[c1] ];
    61de:	f938 3013 	ldrsh.w	r3, [r8, r3, lsl #1]
    61e2:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
          c3++;
    61e6:	f104 0301 	add.w	r3, r4, #1
      for( c1 = 0; c1 < u8MicNo; c1++ )
    61ea:	d03a      	beq.n	6262 <MApi_VOC_MicMap+0xc2>
          ps16Buffer[ c3 ] = _s16MicData[ _u8MicMap[c1] ];
    61ec:	787a      	ldrb	r2, [r7, #1]
      for( c1 = 0; c1 < u8MicNo; c1++ )
    61ee:	2d02      	cmp	r5, #2
          ps16Buffer[ c3 ] = _s16MicData[ _u8MicMap[c1] ];
    61f0:	f938 2012 	ldrsh.w	r2, [r8, r2, lsl #1]
    61f4:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
          c3++;
    61f8:	f104 0302 	add.w	r3, r4, #2
      for( c1 = 0; c1 < u8MicNo; c1++ )
    61fc:	d031      	beq.n	6262 <MApi_VOC_MicMap+0xc2>
          ps16Buffer[ c3 ] = _s16MicData[ _u8MicMap[c1] ];
    61fe:	78ba      	ldrb	r2, [r7, #2]
      for( c1 = 0; c1 < u8MicNo; c1++ )
    6200:	2d03      	cmp	r5, #3
          ps16Buffer[ c3 ] = _s16MicData[ _u8MicMap[c1] ];
    6202:	f938 2012 	ldrsh.w	r2, [r8, r2, lsl #1]
    6206:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
          c3++;
    620a:	f104 0303 	add.w	r3, r4, #3
      for( c1 = 0; c1 < u8MicNo; c1++ )
    620e:	d028      	beq.n	6262 <MApi_VOC_MicMap+0xc2>
          ps16Buffer[ c3 ] = _s16MicData[ _u8MicMap[c1] ];
    6210:	78fa      	ldrb	r2, [r7, #3]
      for( c1 = 0; c1 < u8MicNo; c1++ )
    6212:	2d04      	cmp	r5, #4
          ps16Buffer[ c3 ] = _s16MicData[ _u8MicMap[c1] ];
    6214:	f938 2012 	ldrsh.w	r2, [r8, r2, lsl #1]
    6218:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
          c3++;
    621c:	f104 0304 	add.w	r3, r4, #4
      for( c1 = 0; c1 < u8MicNo; c1++ )
    6220:	d01f      	beq.n	6262 <MApi_VOC_MicMap+0xc2>
          ps16Buffer[ c3 ] = _s16MicData[ _u8MicMap[c1] ];
    6222:	793a      	ldrb	r2, [r7, #4]
      for( c1 = 0; c1 < u8MicNo; c1++ )
    6224:	2d05      	cmp	r5, #5
          ps16Buffer[ c3 ] = _s16MicData[ _u8MicMap[c1] ];
    6226:	f938 2012 	ldrsh.w	r2, [r8, r2, lsl #1]
    622a:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
          c3++;
    622e:	f104 0305 	add.w	r3, r4, #5
      for( c1 = 0; c1 < u8MicNo; c1++ )
    6232:	d016      	beq.n	6262 <MApi_VOC_MicMap+0xc2>
          ps16Buffer[ c3 ] = _s16MicData[ _u8MicMap[c1] ];
    6234:	797a      	ldrb	r2, [r7, #5]
      for( c1 = 0; c1 < u8MicNo; c1++ )
    6236:	2d06      	cmp	r5, #6
          ps16Buffer[ c3 ] = _s16MicData[ _u8MicMap[c1] ];
    6238:	f938 2012 	ldrsh.w	r2, [r8, r2, lsl #1]
    623c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
          c3++;
    6240:	f104 0306 	add.w	r3, r4, #6
      for( c1 = 0; c1 < u8MicNo; c1++ )
    6244:	d00d      	beq.n	6262 <MApi_VOC_MicMap+0xc2>
          ps16Buffer[ c3 ] = _s16MicData[ _u8MicMap[c1] ];
    6246:	79ba      	ldrb	r2, [r7, #6]
      for( c1 = 0; c1 < u8MicNo; c1++ )
    6248:	2d07      	cmp	r5, #7
          ps16Buffer[ c3 ] = _s16MicData[ _u8MicMap[c1] ];
    624a:	f938 2012 	ldrsh.w	r2, [r8, r2, lsl #1]
    624e:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
    6252:	ea4f 0343 	mov.w	r3, r3, lsl #1
      for( c1 = 0; c1 < u8MicNo; c1++ )
    6256:	d004      	beq.n	6262 <MApi_VOC_MicMap+0xc2>
          ps16Buffer[ c3 ] = _s16MicData[ _u8MicMap[c1] ];
    6258:	79fa      	ldrb	r2, [r7, #7]
    625a:	4433      	add	r3, r6
    625c:	f938 2012 	ldrsh.w	r2, [r8, r2, lsl #1]
    6260:	805a      	strh	r2, [r3, #2]
          c3++;
    6262:	442c      	add	r4, r5
  for( c2 = 0; c2 < *pu32Count/u8MicNo; c2++ )
    6264:	f109 0901 	add.w	r9, r9, #1
    6268:	45d9      	cmp	r9, fp
    626a:	d3ae      	bcc.n	61ca <MApi_VOC_MicMap+0x2a>
      }
  }

  return TRUE;
}
    626c:	2001      	movs	r0, #1
    626e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6272:	bf00      	nop
    6274:	0000ca08 	.word	0x0000ca08
    6278:	00025d70 	.word	0x00025d70

0000627c <HPF_16>:
static U16 _u16ProcChn;
static U16 _u16Channel;
static U16 _u16Bitwidth;

S16 HPF_16(S8* ps8Buffer, U16 u16Size)
{
    627c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6280:	b0c3      	sub	sp, #268	; 0x10c
  U16 u16Chn=0;
  U16 u16Num=0;
  U16 u16Bytes=2;
  U16 u16Iter=0;

  if(u16Size == 0){
    6282:	2900      	cmp	r1, #0
    6284:	f000 8386 	beq.w	6994 <HPF_16+0x718>
    VP_ERROR("[ERROR] Size 0\n");
    return -1;
  }

  if(!ps8Buffer){
    6288:	2800      	cmp	r0, #0
    628a:	f000 8379 	beq.w	6980 <HPF_16+0x704>
    VP_ERROR("[ERROR] NULL Buffer\n");
    return -1;
  }

  if(_u16Channel>8 || _s16Coef>9 || _s16Coef<=-3 || _u16Stage>2){
    628e:	4b4b      	ldr	r3, [pc, #300]	; (63bc <HPF_16+0x140>)
    6290:	881a      	ldrh	r2, [r3, #0]
    6292:	2a08      	cmp	r2, #8
    6294:	f200 8360 	bhi.w	6958 <HPF_16+0x6dc>
    6298:	4b49      	ldr	r3, [pc, #292]	; (63c0 <HPF_16+0x144>)
    629a:	f9b3 6000 	ldrsh.w	r6, [r3]
    629e:	1cb3      	adds	r3, r6, #2
    62a0:	b29b      	uxth	r3, r3
    62a2:	2b0b      	cmp	r3, #11
    62a4:	f200 8358 	bhi.w	6958 <HPF_16+0x6dc>
    62a8:	4b46      	ldr	r3, [pc, #280]	; (63c4 <HPF_16+0x148>)
    62aa:	881b      	ldrh	r3, [r3, #0]
    62ac:	2b02      	cmp	r3, #2
    62ae:	f200 8353 	bhi.w	6958 <HPF_16+0x6dc>
    return -1;
  }

 // VOC_ERROR("[HPF_16] size %u, coef %u, chn %u\n",u16Size,u16Coef,u16Channel);

  u16Frame = u16Size/(_u16Channel*u16Bytes);
    62b2:	ea4f 0942 	mov.w	r9, r2, lsl #1
    62b6:	fbb1 f1f9 	udiv	r1, r1, r9
    62ba:	b28c      	uxth	r4, r1
    62bc:	4627      	mov	r7, r4

  while(u16Num<u16Frame){
    62be:	2900      	cmp	r1, #0
    62c0:	f000 82d6 	beq.w	6870 <HPF_16+0x5f4>
    for(u16Chn=0;u16Chn<_u16Channel;u16Chn++){

      if(u16Chn >= _u16ProcChn)
    62c4:	4940      	ldr	r1, [pc, #256]	; (63c8 <HPF_16+0x14c>)
    62c6:	8809      	ldrh	r1, [r1, #0]
    62c8:	9102      	str	r1, [sp, #8]
    62ca:	2a00      	cmp	r2, #0
    62cc:	f000 82d0 	beq.w	6870 <HPF_16+0x5f4>
    62d0:	4d3e      	ldr	r5, [pc, #248]	; (63cc <HPF_16+0x150>)
    62d2:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 63d0 <HPF_16+0x154>
    62d6:	682c      	ldr	r4, [r5, #0]
    62d8:	9407      	str	r4, [sp, #28]
    62da:	686c      	ldr	r4, [r5, #4]
    62dc:	940d      	str	r4, [sp, #52]	; 0x34
    62de:	68ac      	ldr	r4, [r5, #8]
    62e0:	9409      	str	r4, [sp, #36]	; 0x24
    62e2:	68ec      	ldr	r4, [r5, #12]
    62e4:	9414      	str	r4, [sp, #80]	; 0x50
    62e6:	692c      	ldr	r4, [r5, #16]
    62e8:	940b      	str	r4, [sp, #44]	; 0x2c
    62ea:	696c      	ldr	r4, [r5, #20]
    62ec:	941a      	str	r4, [sp, #104]	; 0x68
    62ee:	69ac      	ldr	r4, [r5, #24]
    62f0:	940c      	str	r4, [sp, #48]	; 0x30
    62f2:	69ec      	ldr	r4, [r5, #28]
    62f4:	941e      	str	r4, [sp, #120]	; 0x78
    62f6:	6a2c      	ldr	r4, [r5, #32]
    62f8:	940f      	str	r4, [sp, #60]	; 0x3c
    62fa:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    62fc:	9421      	str	r4, [sp, #132]	; 0x84
    62fe:	6aac      	ldr	r4, [r5, #40]	; 0x28
    6300:	9410      	str	r4, [sp, #64]	; 0x40
    6302:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    6304:	9426      	str	r4, [sp, #152]	; 0x98
    6306:	6b2c      	ldr	r4, [r5, #48]	; 0x30
    6308:	9417      	str	r4, [sp, #92]	; 0x5c
    630a:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    630c:	942e      	str	r4, [sp, #184]	; 0xb8
    630e:	6bac      	ldr	r4, [r5, #56]	; 0x38
    6310:	9411      	str	r4, [sp, #68]	; 0x44
    6312:	6bec      	ldr	r4, [r5, #60]	; 0x3c
    6314:	9431      	str	r4, [sp, #196]	; 0xc4
    6316:	e9dc e400 	ldrd	lr, r4, [ip]
    631a:	940e      	str	r4, [sp, #56]	; 0x38
    631c:	e9dc 8402 	ldrd	r8, r4, [ip, #8]
    6320:	9415      	str	r4, [sp, #84]	; 0x54
    6322:	f8dc 4010 	ldr.w	r4, [ip, #16]
    6326:	9404      	str	r4, [sp, #16]
    6328:	f8dc 4014 	ldr.w	r4, [ip, #20]
    632c:	941b      	str	r4, [sp, #108]	; 0x6c
    632e:	f8dc 4018 	ldr.w	r4, [ip, #24]
    6332:	9405      	str	r4, [sp, #20]
    6334:	f8dc 401c 	ldr.w	r4, [ip, #28]
    6338:	941f      	str	r4, [sp, #124]	; 0x7c
    633a:	f8dc 4020 	ldr.w	r4, [ip, #32]
    633e:	9406      	str	r4, [sp, #24]
    6340:	f8dc 4024 	ldr.w	r4, [ip, #36]	; 0x24
    6344:	9422      	str	r4, [sp, #136]	; 0x88
    6346:	f8dc 4028 	ldr.w	r4, [ip, #40]	; 0x28
    634a:	9408      	str	r4, [sp, #32]
    634c:	f8dc 402c 	ldr.w	r4, [ip, #44]	; 0x2c
    6350:	9427      	str	r4, [sp, #156]	; 0x9c
    6352:	f8dc 4030 	ldr.w	r4, [ip, #48]	; 0x30
    6356:	940a      	str	r4, [sp, #40]	; 0x28
    6358:	f8dc 4034 	ldr.w	r4, [ip, #52]	; 0x34
    635c:	942f      	str	r4, [sp, #188]	; 0xbc
    635e:	f8dc 4038 	ldr.w	r4, [ip, #56]	; 0x38
    6362:	9416      	str	r4, [sp, #88]	; 0x58
    6364:	f8dc 403c 	ldr.w	r4, [ip, #60]	; 0x3c
    6368:	9432      	str	r4, [sp, #200]	; 0xc8
    636a:	428a      	cmp	r2, r1
    636c:	f04f 0400 	mov.w	r4, #0
    6370:	9441      	str	r4, [sp, #260]	; 0x104
    6372:	bf28      	it	cs
    6374:	460a      	movcs	r2, r1
    6376:	e9cd 4435 	strd	r4, r4, [sp, #212]	; 0xd4
    637a:	3603      	adds	r6, #3
    637c:	e9cd 443e 	strd	r4, r4, [sp, #248]	; 0xf8
    6380:	e9cd 442c 	strd	r4, r4, [sp, #176]	; 0xb0
    6384:	e9cd 443c 	strd	r4, r4, [sp, #240]	; 0xf0
    6388:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
    638c:	e9cd 4439 	strd	r4, r4, [sp, #228]	; 0xe4
    6390:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
    6394:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
    6398:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
    639c:	e9cd 4433 	strd	r4, r4, [sp, #204]	; 0xcc
    63a0:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
    63a4:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
    63a8:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
    63ac:	9440      	str	r4, [sp, #256]	; 0x100
    63ae:	943b      	str	r4, [sp, #236]	; 0xec
    63b0:	9425      	str	r4, [sp, #148]	; 0x94
    63b2:	9420      	str	r4, [sp, #128]	; 0x80
    63b4:	4625      	mov	r5, r4
    63b6:	9430      	str	r4, [sp, #192]	; 0xc0
    63b8:	9703      	str	r7, [sp, #12]
    63ba:	e012      	b.n	63e2 <HPF_16+0x166>
    63bc:	00025f02 	.word	0x00025f02
    63c0:	0000ca04 	.word	0x0000ca04
    63c4:	0000ca06 	.word	0x0000ca06
    63c8:	00025f0a 	.word	0x00025f0a
    63cc:	00025d80 	.word	0x00025d80
    63d0:	00025dc0 	.word	0x00025dc0
        s16CurY = (S16)s32CurYY;

      *(S16*)(ps8Buffer+(u16Num*_u16Channel+u16Chn)*u16Bytes) = s16CurY;

    }
    u16Num++;
    63d4:	3501      	adds	r5, #1
  while(u16Num<u16Frame){
    63d6:	9c03      	ldr	r4, [sp, #12]
    63d8:	b2a9      	uxth	r1, r5
    63da:	428c      	cmp	r4, r1
    63dc:	4448      	add	r0, r9
    63de:	f240 81a9 	bls.w	6734 <HPF_16+0x4b8>
    63e2:	9902      	ldr	r1, [sp, #8]
    63e4:	2900      	cmp	r1, #0
    63e6:	d0f5      	beq.n	63d4 <HPF_16+0x158>
      s32CurYY = (S32)s16CurX<<14; //Q3.29
    63e8:	f9b0 1000 	ldrsh.w	r1, [r0]
    63ec:	038f      	lsls	r7, r1, #14
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    63ee:	2b00      	cmp	r3, #0
    63f0:	f000 824c 	beq.w	688c <HPF_16+0x610>
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    63f4:	9c07      	ldr	r4, [sp, #28]
    63f6:	eba7 0a04 	sub.w	sl, r7, r4
    63fa:	44f2      	add	sl, lr
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    63fc:	2b02      	cmp	r3, #2
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    63fe:	fa4e fe06 	asr.w	lr, lr, r6
    6402:	ebaa 0e0e 	sub.w	lr, sl, lr
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    6406:	f040 8255 	bne.w	68b4 <HPF_16+0x638>
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    640a:	990d      	ldr	r1, [sp, #52]	; 0x34
    640c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    640e:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    6412:	ebae 0a01 	sub.w	sl, lr, r1
    6416:	44a2      	add	sl, r4
    6418:	fa44 fb06 	asr.w	fp, r4, r6
    641c:	ebaa 010b 	sub.w	r1, sl, fp
    6420:	2401      	movs	r4, #1
    6422:	910e      	str	r1, [sp, #56]	; 0x38
    6424:	942b      	str	r4, [sp, #172]	; 0xac
        _s32PreYY[u16Chn][u16Iter] = s32CurYY;
    6426:	468a      	mov	sl, r1
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    6428:	942a      	str	r4, [sp, #168]	; 0xa8
      s32CurYY = s32CurYY>>14;
    642a:	ea4f 3aaa 	mov.w	sl, sl, asr #14
      if(s32CurYY>MAX_S16)
    642e:	f5ba 4f00 	cmp.w	sl, #32768	; 0x8000
    6432:	f2c0 8221 	blt.w	6878 <HPF_16+0x5fc>
    6436:	2401      	movs	r4, #1
    6438:	9413      	str	r4, [sp, #76]	; 0x4c
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    643a:	9707      	str	r7, [sp, #28]
      if(s32CurYY>MAX_S16)
    643c:	9412      	str	r4, [sp, #72]	; 0x48
        s16CurY = MAX_S16;
    643e:	f647 7aff 	movw	sl, #32767	; 0x7fff
    for(u16Chn=0;u16Chn<_u16Channel;u16Chn++){
    6442:	2a01      	cmp	r2, #1
      *(S16*)(ps8Buffer+(u16Num*_u16Channel+u16Chn)*u16Bytes) = s16CurY;
    6444:	f8a0 a000 	strh.w	sl, [r0]
    for(u16Chn=0;u16Chn<_u16Channel;u16Chn++){
    6448:	d9c4      	bls.n	63d4 <HPF_16+0x158>
      s32CurYY = (S32)s16CurX<<14; //Q3.29
    644a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
    644e:	038f      	lsls	r7, r1, #14
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    6450:	2b00      	cmp	r3, #0
    6452:	f000 8220 	beq.w	6896 <HPF_16+0x61a>
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    6456:	9c09      	ldr	r4, [sp, #36]	; 0x24
    6458:	eba7 0a04 	sub.w	sl, r7, r4
    645c:	44c2      	add	sl, r8
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    645e:	2b02      	cmp	r3, #2
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    6460:	fa48 f806 	asr.w	r8, r8, r6
    6464:	ebaa 0808 	sub.w	r8, sl, r8
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    6468:	f040 822b 	bne.w	68c2 <HPF_16+0x646>
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    646c:	9914      	ldr	r1, [sp, #80]	; 0x50
    646e:	9c15      	ldr	r4, [sp, #84]	; 0x54
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    6470:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    6474:	eba8 0a01 	sub.w	sl, r8, r1
    6478:	44a2      	add	sl, r4
    647a:	fa44 fb06 	asr.w	fp, r4, r6
    647e:	ebaa 010b 	sub.w	r1, sl, fp
    6482:	2401      	movs	r4, #1
    6484:	9115      	str	r1, [sp, #84]	; 0x54
    6486:	9434      	str	r4, [sp, #208]	; 0xd0
        _s32PreYY[u16Chn][u16Iter] = s32CurYY;
    6488:	468a      	mov	sl, r1
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    648a:	9433      	str	r4, [sp, #204]	; 0xcc
      s32CurYY = s32CurYY>>14;
    648c:	ea4f 3aaa 	mov.w	sl, sl, asr #14
      if(s32CurYY>MAX_S16)
    6490:	f5ba 4f00 	cmp.w	sl, #32768	; 0x8000
    6494:	f2c0 8204 	blt.w	68a0 <HPF_16+0x624>
    6498:	2401      	movs	r4, #1
    649a:	9419      	str	r4, [sp, #100]	; 0x64
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    649c:	9709      	str	r7, [sp, #36]	; 0x24
      if(s32CurYY>MAX_S16)
    649e:	9418      	str	r4, [sp, #96]	; 0x60
        s16CurY = MAX_S16;
    64a0:	f647 7aff 	movw	sl, #32767	; 0x7fff
    for(u16Chn=0;u16Chn<_u16Channel;u16Chn++){
    64a4:	2a02      	cmp	r2, #2
      *(S16*)(ps8Buffer+(u16Num*_u16Channel+u16Chn)*u16Bytes) = s16CurY;
    64a6:	f8a0 a002 	strh.w	sl, [r0, #2]
    for(u16Chn=0;u16Chn<_u16Channel;u16Chn++){
    64aa:	d093      	beq.n	63d4 <HPF_16+0x158>
      s32CurYY = (S32)s16CurX<<14; //Q3.29
    64ac:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
    64b0:	0389      	lsls	r1, r1, #14
    64b2:	9101      	str	r1, [sp, #4]
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    64b4:	2b00      	cmp	r3, #0
    64b6:	f000 81ff 	beq.w	68b8 <HPF_16+0x63c>
    64ba:	460c      	mov	r4, r1
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    64bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    64be:	eba4 0a01 	sub.w	sl, r4, r1
    64c2:	9c04      	ldr	r4, [sp, #16]
    64c4:	44a2      	add	sl, r4
    64c6:	fa44 fb06 	asr.w	fp, r4, r6
    64ca:	ebaa 040b 	sub.w	r4, sl, fp
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    64ce:	2b02      	cmp	r3, #2
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    64d0:	9404      	str	r4, [sp, #16]
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    64d2:	f040 8203 	bne.w	68dc <HPF_16+0x660>
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    64d6:	991a      	ldr	r1, [sp, #104]	; 0x68
    64d8:	eba4 0a01 	sub.w	sl, r4, r1
    64dc:	991b      	ldr	r1, [sp, #108]	; 0x6c
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    64de:	9c04      	ldr	r4, [sp, #16]
    64e0:	941a      	str	r4, [sp, #104]	; 0x68
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    64e2:	448a      	add	sl, r1
    64e4:	fa41 fb06 	asr.w	fp, r1, r6
    64e8:	ebaa 010b 	sub.w	r1, sl, fp
    64ec:	2701      	movs	r7, #1
    64ee:	911b      	str	r1, [sp, #108]	; 0x6c
    64f0:	9738      	str	r7, [sp, #224]	; 0xe0
        _s32PreYY[u16Chn][u16Iter] = s32CurYY;
    64f2:	468a      	mov	sl, r1
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    64f4:	9737      	str	r7, [sp, #220]	; 0xdc
      s32CurYY = s32CurYY>>14;
    64f6:	ea4f 3aaa 	mov.w	sl, sl, asr #14
      if(s32CurYY>MAX_S16)
    64fa:	2101      	movs	r1, #1
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    64fc:	9c01      	ldr	r4, [sp, #4]
      if(s32CurYY>MAX_S16)
    64fe:	911d      	str	r1, [sp, #116]	; 0x74
    6500:	f5ba 4f00 	cmp.w	sl, #32768	; 0x8000
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    6504:	940b      	str	r4, [sp, #44]	; 0x2c
      if(s32CurYY>MAX_S16)
    6506:	911c      	str	r1, [sp, #112]	; 0x70
    6508:	f2c0 81dd 	blt.w	68c6 <HPF_16+0x64a>
        s16CurY = MAX_S16;
    650c:	f647 7aff 	movw	sl, #32767	; 0x7fff
    for(u16Chn=0;u16Chn<_u16Channel;u16Chn++){
    6510:	2a03      	cmp	r2, #3
      *(S16*)(ps8Buffer+(u16Num*_u16Channel+u16Chn)*u16Bytes) = s16CurY;
    6512:	f8a0 a004 	strh.w	sl, [r0, #4]
    for(u16Chn=0;u16Chn<_u16Channel;u16Chn++){
    6516:	f43f af5d 	beq.w	63d4 <HPF_16+0x158>
      s32CurYY = (S32)s16CurX<<14; //Q3.29
    651a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
    651e:	038f      	lsls	r7, r1, #14
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    6520:	2b00      	cmp	r3, #0
    6522:	f000 81d6 	beq.w	68d2 <HPF_16+0x656>
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    6526:	990c      	ldr	r1, [sp, #48]	; 0x30
    6528:	eba7 0a01 	sub.w	sl, r7, r1
    652c:	9905      	ldr	r1, [sp, #20]
    652e:	448a      	add	sl, r1
    6530:	fa41 fb06 	asr.w	fp, r1, r6
    6534:	ebaa 040b 	sub.w	r4, sl, fp
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    6538:	2b02      	cmp	r3, #2
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    653a:	9405      	str	r4, [sp, #20]
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    653c:	f040 81e1 	bne.w	6902 <HPF_16+0x686>
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    6540:	4621      	mov	r1, r4
    6542:	9c1e      	ldr	r4, [sp, #120]	; 0x78
    6544:	eba1 0a04 	sub.w	sl, r1, r4
    6548:	991f      	ldr	r1, [sp, #124]	; 0x7c
    654a:	2401      	movs	r4, #1
    654c:	448a      	add	sl, r1
    654e:	fa41 fb06 	asr.w	fp, r1, r6
    6552:	ebaa 010b 	sub.w	r1, sl, fp
    6556:	943a      	str	r4, [sp, #232]	; 0xe8
    6558:	9439      	str	r4, [sp, #228]	; 0xe4
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    655a:	9c05      	ldr	r4, [sp, #20]
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    655c:	911f      	str	r1, [sp, #124]	; 0x7c
        _s32PreYY[u16Chn][u16Iter] = s32CurYY;
    655e:	468a      	mov	sl, r1
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    6560:	941e      	str	r4, [sp, #120]	; 0x78
      s32CurYY = s32CurYY>>14;
    6562:	ea4f 3aaa 	mov.w	sl, sl, asr #14
      if(s32CurYY>MAX_S16)
    6566:	2101      	movs	r1, #1
    6568:	f5ba 4f00 	cmp.w	sl, #32768	; 0x8000
    656c:	9124      	str	r1, [sp, #144]	; 0x90
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    656e:	970c      	str	r7, [sp, #48]	; 0x30
      if(s32CurYY>MAX_S16)
    6570:	9123      	str	r1, [sp, #140]	; 0x8c
    6572:	f2c0 81b5 	blt.w	68e0 <HPF_16+0x664>
        s16CurY = MAX_S16;
    6576:	f647 7aff 	movw	sl, #32767	; 0x7fff
    for(u16Chn=0;u16Chn<_u16Channel;u16Chn++){
    657a:	2a04      	cmp	r2, #4
      *(S16*)(ps8Buffer+(u16Num*_u16Channel+u16Chn)*u16Bytes) = s16CurY;
    657c:	f8a0 a006 	strh.w	sl, [r0, #6]
    for(u16Chn=0;u16Chn<_u16Channel;u16Chn++){
    6580:	f43f af28 	beq.w	63d4 <HPF_16+0x158>
      s32CurYY = (S32)s16CurX<<14; //Q3.29
    6584:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
    6588:	0389      	lsls	r1, r1, #14
    658a:	9101      	str	r1, [sp, #4]
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    658c:	2b00      	cmp	r3, #0
    658e:	f000 81b3 	beq.w	68f8 <HPF_16+0x67c>
    6592:	460c      	mov	r4, r1
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    6594:	990f      	ldr	r1, [sp, #60]	; 0x3c
    6596:	eba4 0a01 	sub.w	sl, r4, r1
    659a:	9906      	ldr	r1, [sp, #24]
    659c:	448a      	add	sl, r1
    659e:	fa41 fb06 	asr.w	fp, r1, r6
    65a2:	ebaa 040b 	sub.w	r4, sl, fp
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    65a6:	2b02      	cmp	r3, #2
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    65a8:	9406      	str	r4, [sp, #24]
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    65aa:	f040 81b1 	bne.w	6910 <HPF_16+0x694>
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    65ae:	9f21      	ldr	r7, [sp, #132]	; 0x84
    65b0:	9922      	ldr	r1, [sp, #136]	; 0x88
    65b2:	eba4 0a07 	sub.w	sl, r4, r7
    65b6:	448a      	add	sl, r1
    65b8:	2401      	movs	r4, #1
    65ba:	fa41 fb06 	asr.w	fp, r1, r6
    65be:	ebaa 010b 	sub.w	r1, sl, fp
    65c2:	943d      	str	r4, [sp, #244]	; 0xf4
    65c4:	943c      	str	r4, [sp, #240]	; 0xf0
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    65c6:	9c06      	ldr	r4, [sp, #24]
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    65c8:	9122      	str	r1, [sp, #136]	; 0x88
        _s32PreYY[u16Chn][u16Iter] = s32CurYY;
    65ca:	468a      	mov	sl, r1
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    65cc:	9421      	str	r4, [sp, #132]	; 0x84
      s32CurYY = s32CurYY>>14;
    65ce:	ea4f 3aaa 	mov.w	sl, sl, asr #14
      if(s32CurYY>MAX_S16)
    65d2:	2101      	movs	r1, #1
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    65d4:	9c01      	ldr	r4, [sp, #4]
      if(s32CurYY>MAX_S16)
    65d6:	9129      	str	r1, [sp, #164]	; 0xa4
    65d8:	f5ba 4f00 	cmp.w	sl, #32768	; 0x8000
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    65dc:	940f      	str	r4, [sp, #60]	; 0x3c
      if(s32CurYY>MAX_S16)
    65de:	9128      	str	r1, [sp, #160]	; 0xa0
    65e0:	f2c0 8184 	blt.w	68ec <HPF_16+0x670>
        s16CurY = MAX_S16;
    65e4:	f647 7aff 	movw	sl, #32767	; 0x7fff
    for(u16Chn=0;u16Chn<_u16Channel;u16Chn++){
    65e8:	2a05      	cmp	r2, #5
      *(S16*)(ps8Buffer+(u16Num*_u16Channel+u16Chn)*u16Bytes) = s16CurY;
    65ea:	f8a0 a008 	strh.w	sl, [r0, #8]
    for(u16Chn=0;u16Chn<_u16Channel;u16Chn++){
    65ee:	f43f aef1 	beq.w	63d4 <HPF_16+0x158>
      s32CurYY = (S32)s16CurX<<14; //Q3.29
    65f2:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
    65f6:	0389      	lsls	r1, r1, #14
    65f8:	9101      	str	r1, [sp, #4]
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    65fa:	2b00      	cmp	r3, #0
    65fc:	f000 8183 	beq.w	6906 <HPF_16+0x68a>
    6600:	460c      	mov	r4, r1
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    6602:	9910      	ldr	r1, [sp, #64]	; 0x40
    6604:	eba4 0a01 	sub.w	sl, r4, r1
    6608:	9908      	ldr	r1, [sp, #32]
    660a:	448a      	add	sl, r1
    660c:	fa41 fb06 	asr.w	fp, r1, r6
    6610:	ebaa 040b 	sub.w	r4, sl, fp
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    6614:	2b02      	cmp	r3, #2
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    6616:	9408      	str	r4, [sp, #32]
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    6618:	f040 818d 	bne.w	6936 <HPF_16+0x6ba>
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    661c:	9f26      	ldr	r7, [sp, #152]	; 0x98
    661e:	9927      	ldr	r1, [sp, #156]	; 0x9c
    6620:	eba4 0a07 	sub.w	sl, r4, r7
    6624:	448a      	add	sl, r1
    6626:	2401      	movs	r4, #1
    6628:	fa41 fb06 	asr.w	fp, r1, r6
    662c:	ebaa 010b 	sub.w	r1, sl, fp
    6630:	943f      	str	r4, [sp, #252]	; 0xfc
    6632:	943e      	str	r4, [sp, #248]	; 0xf8
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    6634:	9c08      	ldr	r4, [sp, #32]
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    6636:	9127      	str	r1, [sp, #156]	; 0x9c
        _s32PreYY[u16Chn][u16Iter] = s32CurYY;
    6638:	468a      	mov	sl, r1
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    663a:	9426      	str	r4, [sp, #152]	; 0x98
      s32CurYY = s32CurYY>>14;
    663c:	ea4f 3aaa 	mov.w	sl, sl, asr #14
      if(s32CurYY>MAX_S16)
    6640:	2101      	movs	r1, #1
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    6642:	9c01      	ldr	r4, [sp, #4]
      if(s32CurYY>MAX_S16)
    6644:	912d      	str	r1, [sp, #180]	; 0xb4
    6646:	f5ba 4f00 	cmp.w	sl, #32768	; 0x8000
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    664a:	9410      	str	r4, [sp, #64]	; 0x40
      if(s32CurYY>MAX_S16)
    664c:	912c      	str	r1, [sp, #176]	; 0xb0
    664e:	f2c0 8161 	blt.w	6914 <HPF_16+0x698>
        s16CurY = MAX_S16;
    6652:	f647 7aff 	movw	sl, #32767	; 0x7fff
    for(u16Chn=0;u16Chn<_u16Channel;u16Chn++){
    6656:	2a06      	cmp	r2, #6
      *(S16*)(ps8Buffer+(u16Num*_u16Channel+u16Chn)*u16Bytes) = s16CurY;
    6658:	f8a0 a00a 	strh.w	sl, [r0, #10]
    for(u16Chn=0;u16Chn<_u16Channel;u16Chn++){
    665c:	f43f aeba 	beq.w	63d4 <HPF_16+0x158>
      s32CurYY = (S32)s16CurX<<14; //Q3.29
    6660:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
    6664:	0389      	lsls	r1, r1, #14
    6666:	9101      	str	r1, [sp, #4]
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    6668:	2b00      	cmp	r3, #0
    666a:	f000 8159 	beq.w	6920 <HPF_16+0x6a4>
    666e:	460c      	mov	r4, r1
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    6670:	9917      	ldr	r1, [sp, #92]	; 0x5c
    6672:	eba4 0a01 	sub.w	sl, r4, r1
    6676:	990a      	ldr	r1, [sp, #40]	; 0x28
    6678:	448a      	add	sl, r1
    667a:	fa41 fb06 	asr.w	fp, r1, r6
    667e:	ebaa 040b 	sub.w	r4, sl, fp
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    6682:	2b02      	cmp	r3, #2
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    6684:	940a      	str	r4, [sp, #40]	; 0x28
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    6686:	f040 8163 	bne.w	6950 <HPF_16+0x6d4>
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    668a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
    668c:	992f      	ldr	r1, [sp, #188]	; 0xbc
    668e:	eba4 0a07 	sub.w	sl, r4, r7
    6692:	448a      	add	sl, r1
    6694:	2401      	movs	r4, #1
    6696:	fa41 fb06 	asr.w	fp, r1, r6
    669a:	ebaa 010b 	sub.w	r1, sl, fp
    669e:	9430      	str	r4, [sp, #192]	; 0xc0
    66a0:	9441      	str	r4, [sp, #260]	; 0x104
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    66a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    66a4:	912f      	str	r1, [sp, #188]	; 0xbc
        _s32PreYY[u16Chn][u16Iter] = s32CurYY;
    66a6:	468a      	mov	sl, r1
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    66a8:	942e      	str	r4, [sp, #184]	; 0xb8
      s32CurYY = s32CurYY>>14;
    66aa:	ea4f 3aaa 	mov.w	sl, sl, asr #14
      if(s32CurYY>MAX_S16)
    66ae:	2101      	movs	r1, #1
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    66b0:	9c01      	ldr	r4, [sp, #4]
      if(s32CurYY>MAX_S16)
    66b2:	9136      	str	r1, [sp, #216]	; 0xd8
    66b4:	f5ba 4f00 	cmp.w	sl, #32768	; 0x8000
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    66b8:	9417      	str	r4, [sp, #92]	; 0x5c
      if(s32CurYY>MAX_S16)
    66ba:	9135      	str	r1, [sp, #212]	; 0xd4
    66bc:	f2c0 8135 	blt.w	692a <HPF_16+0x6ae>
        s16CurY = MAX_S16;
    66c0:	f647 7aff 	movw	sl, #32767	; 0x7fff
    for(u16Chn=0;u16Chn<_u16Channel;u16Chn++){
    66c4:	2a07      	cmp	r2, #7
      *(S16*)(ps8Buffer+(u16Num*_u16Channel+u16Chn)*u16Bytes) = s16CurY;
    66c6:	f8a0 a00c 	strh.w	sl, [r0, #12]
    for(u16Chn=0;u16Chn<_u16Channel;u16Chn++){
    66ca:	f43f ae83 	beq.w	63d4 <HPF_16+0x158>
      s32CurYY = (S32)s16CurX<<14; //Q3.29
    66ce:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
    66d2:	038c      	lsls	r4, r1, #14
    66d4:	9401      	str	r4, [sp, #4]
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    66d6:	2b00      	cmp	r3, #0
    66d8:	f000 812f 	beq.w	693a <HPF_16+0x6be>
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    66dc:	9911      	ldr	r1, [sp, #68]	; 0x44
    66de:	eba4 0a01 	sub.w	sl, r4, r1
    66e2:	9916      	ldr	r1, [sp, #88]	; 0x58
    66e4:	448a      	add	sl, r1
    66e6:	fa41 fb06 	asr.w	fp, r1, r6
    66ea:	ebaa 040b 	sub.w	r4, sl, fp
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    66ee:	2b02      	cmp	r3, #2
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    66f0:	9416      	str	r4, [sp, #88]	; 0x58
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    66f2:	f040 812f 	bne.w	6954 <HPF_16+0x6d8>
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    66f6:	9f31      	ldr	r7, [sp, #196]	; 0xc4
    66f8:	9932      	ldr	r1, [sp, #200]	; 0xc8
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    66fa:	9431      	str	r4, [sp, #196]	; 0xc4
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    66fc:	eba4 0a07 	sub.w	sl, r4, r7
    6700:	448a      	add	sl, r1
    6702:	fa41 fb06 	asr.w	fp, r1, r6
    6706:	ebaa 010b 	sub.w	r1, sl, fp
    670a:	2701      	movs	r7, #1
    670c:	9132      	str	r1, [sp, #200]	; 0xc8
        _s32PreYY[u16Chn][u16Iter] = s32CurYY;
    670e:	9740      	str	r7, [sp, #256]	; 0x100
    6710:	468a      	mov	sl, r1
    6712:	973b      	str	r7, [sp, #236]	; 0xec
      s32CurYY = s32CurYY>>14;
    6714:	ea4f 3aaa 	mov.w	sl, sl, asr #14
      if(s32CurYY>MAX_S16)
    6718:	2101      	movs	r1, #1
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    671a:	9c01      	ldr	r4, [sp, #4]
    671c:	9125      	str	r1, [sp, #148]	; 0x94
      if(s32CurYY>MAX_S16)
    671e:	f5ba 4f00 	cmp.w	sl, #32768	; 0x8000
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    6722:	9411      	str	r4, [sp, #68]	; 0x44
    6724:	9120      	str	r1, [sp, #128]	; 0x80
      if(s32CurYY>MAX_S16)
    6726:	f2c0 810d 	blt.w	6944 <HPF_16+0x6c8>
        s16CurY = MAX_S16;
    672a:	f647 7aff 	movw	sl, #32767	; 0x7fff
      *(S16*)(ps8Buffer+(u16Num*_u16Channel+u16Chn)*u16Bytes) = s16CurY;
    672e:	f8a0 a00e 	strh.w	sl, [r0, #14]
    6732:	e64f      	b.n	63d4 <HPF_16+0x158>
    6734:	9b20      	ldr	r3, [sp, #128]	; 0x80
    6736:	9c30      	ldr	r4, [sp, #192]	; 0xc0
    6738:	b113      	cbz	r3, 6740 <HPF_16+0x4c4>
    673a:	4a8b      	ldr	r2, [pc, #556]	; (6968 <HPF_16+0x6ec>)
    673c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    673e:	6393      	str	r3, [r2, #56]	; 0x38
    6740:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6742:	b113      	cbz	r3, 674a <HPF_16+0x4ce>
    6744:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6746:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    674a:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    674c:	b113      	cbz	r3, 6754 <HPF_16+0x4d8>
    674e:	4a86      	ldr	r2, [pc, #536]	; (6968 <HPF_16+0x6ec>)
    6750:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    6752:	63d3      	str	r3, [r2, #60]	; 0x3c
    6754:	9b40      	ldr	r3, [sp, #256]	; 0x100
    6756:	b113      	cbz	r3, 675e <HPF_16+0x4e2>
    6758:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    675a:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
    675e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6760:	b113      	cbz	r3, 6768 <HPF_16+0x4ec>
    6762:	4a81      	ldr	r2, [pc, #516]	; (6968 <HPF_16+0x6ec>)
    6764:	9b07      	ldr	r3, [sp, #28]
    6766:	6013      	str	r3, [r2, #0]
    6768:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    676a:	b10b      	cbz	r3, 6770 <HPF_16+0x4f4>
    676c:	f8cc e000 	str.w	lr, [ip]
    6770:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    6772:	b113      	cbz	r3, 677a <HPF_16+0x4fe>
    6774:	4a7c      	ldr	r2, [pc, #496]	; (6968 <HPF_16+0x6ec>)
    6776:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6778:	6053      	str	r3, [r2, #4]
    677a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    677c:	b113      	cbz	r3, 6784 <HPF_16+0x508>
    677e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6780:	f8cc 3004 	str.w	r3, [ip, #4]
    6784:	9b18      	ldr	r3, [sp, #96]	; 0x60
    6786:	b113      	cbz	r3, 678e <HPF_16+0x512>
    6788:	4a77      	ldr	r2, [pc, #476]	; (6968 <HPF_16+0x6ec>)
    678a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    678c:	6093      	str	r3, [r2, #8]
    678e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    6790:	b10b      	cbz	r3, 6796 <HPF_16+0x51a>
    6792:	f8cc 8008 	str.w	r8, [ip, #8]
    6796:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    6798:	b113      	cbz	r3, 67a0 <HPF_16+0x524>
    679a:	4a73      	ldr	r2, [pc, #460]	; (6968 <HPF_16+0x6ec>)
    679c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    679e:	60d3      	str	r3, [r2, #12]
    67a0:	9b34      	ldr	r3, [sp, #208]	; 0xd0
    67a2:	b113      	cbz	r3, 67aa <HPF_16+0x52e>
    67a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    67a6:	f8cc 300c 	str.w	r3, [ip, #12]
    67aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    67ac:	b113      	cbz	r3, 67b4 <HPF_16+0x538>
    67ae:	4a6e      	ldr	r2, [pc, #440]	; (6968 <HPF_16+0x6ec>)
    67b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    67b2:	6113      	str	r3, [r2, #16]
    67b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    67b6:	b113      	cbz	r3, 67be <HPF_16+0x542>
    67b8:	9b04      	ldr	r3, [sp, #16]
    67ba:	f8cc 3010 	str.w	r3, [ip, #16]
    67be:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    67c0:	b113      	cbz	r3, 67c8 <HPF_16+0x54c>
    67c2:	4a69      	ldr	r2, [pc, #420]	; (6968 <HPF_16+0x6ec>)
    67c4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    67c6:	6153      	str	r3, [r2, #20]
    67c8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    67ca:	b113      	cbz	r3, 67d2 <HPF_16+0x556>
    67cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    67ce:	f8cc 3014 	str.w	r3, [ip, #20]
    67d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    67d4:	b113      	cbz	r3, 67dc <HPF_16+0x560>
    67d6:	4a64      	ldr	r2, [pc, #400]	; (6968 <HPF_16+0x6ec>)
    67d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    67da:	6193      	str	r3, [r2, #24]
    67dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
    67de:	b113      	cbz	r3, 67e6 <HPF_16+0x56a>
    67e0:	9b05      	ldr	r3, [sp, #20]
    67e2:	f8cc 3018 	str.w	r3, [ip, #24]
    67e6:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    67e8:	b113      	cbz	r3, 67f0 <HPF_16+0x574>
    67ea:	4a5f      	ldr	r2, [pc, #380]	; (6968 <HPF_16+0x6ec>)
    67ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    67ee:	61d3      	str	r3, [r2, #28]
    67f0:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    67f2:	b113      	cbz	r3, 67fa <HPF_16+0x57e>
    67f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    67f6:	f8cc 301c 	str.w	r3, [ip, #28]
    67fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    67fc:	b113      	cbz	r3, 6804 <HPF_16+0x588>
    67fe:	4a5a      	ldr	r2, [pc, #360]	; (6968 <HPF_16+0x6ec>)
    6800:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6802:	6213      	str	r3, [r2, #32]
    6804:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    6806:	b113      	cbz	r3, 680e <HPF_16+0x592>
    6808:	9b06      	ldr	r3, [sp, #24]
    680a:	f8cc 3020 	str.w	r3, [ip, #32]
    680e:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    6810:	b113      	cbz	r3, 6818 <HPF_16+0x59c>
    6812:	4a55      	ldr	r2, [pc, #340]	; (6968 <HPF_16+0x6ec>)
    6814:	9b21      	ldr	r3, [sp, #132]	; 0x84
    6816:	6253      	str	r3, [r2, #36]	; 0x24
    6818:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    681a:	b113      	cbz	r3, 6822 <HPF_16+0x5a6>
    681c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    681e:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
    6822:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    6824:	b113      	cbz	r3, 682c <HPF_16+0x5b0>
    6826:	4a50      	ldr	r2, [pc, #320]	; (6968 <HPF_16+0x6ec>)
    6828:	9b10      	ldr	r3, [sp, #64]	; 0x40
    682a:	6293      	str	r3, [r2, #40]	; 0x28
    682c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    682e:	b113      	cbz	r3, 6836 <HPF_16+0x5ba>
    6830:	9b08      	ldr	r3, [sp, #32]
    6832:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
    6836:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    6838:	b113      	cbz	r3, 6840 <HPF_16+0x5c4>
    683a:	4a4b      	ldr	r2, [pc, #300]	; (6968 <HPF_16+0x6ec>)
    683c:	9b26      	ldr	r3, [sp, #152]	; 0x98
    683e:	62d3      	str	r3, [r2, #44]	; 0x2c
    6840:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    6842:	b113      	cbz	r3, 684a <HPF_16+0x5ce>
    6844:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    6846:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    684a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    684c:	b113      	cbz	r3, 6854 <HPF_16+0x5d8>
    684e:	4a46      	ldr	r2, [pc, #280]	; (6968 <HPF_16+0x6ec>)
    6850:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    6852:	6313      	str	r3, [r2, #48]	; 0x30
    6854:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    6856:	b113      	cbz	r3, 685e <HPF_16+0x5e2>
    6858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    685a:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
    685e:	9b41      	ldr	r3, [sp, #260]	; 0x104
    6860:	b113      	cbz	r3, 6868 <HPF_16+0x5ec>
    6862:	4a41      	ldr	r2, [pc, #260]	; (6968 <HPF_16+0x6ec>)
    6864:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    6866:	6353      	str	r3, [r2, #52]	; 0x34
    6868:	b114      	cbz	r4, 6870 <HPF_16+0x5f4>
    686a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    686c:	f8cc 3034 	str.w	r3, [ip, #52]	; 0x34
  }

  return 0;
    6870:	2000      	movs	r0, #0
}
    6872:	b043      	add	sp, #268	; 0x10c
    6874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if(s32CurYY<MIN_S16)
    6878:	2101      	movs	r1, #1
    687a:	f51a 4f00 	cmn.w	sl, #32768	; 0x8000
    687e:	9113      	str	r1, [sp, #76]	; 0x4c
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    6880:	9707      	str	r7, [sp, #28]
      else if(s32CurYY<MIN_S16)
    6882:	9112      	str	r1, [sp, #72]	; 0x48
    6884:	da04      	bge.n	6890 <HPF_16+0x614>
        s16CurY = MIN_S16;
    6886:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 6970 <HPF_16+0x6f4>
    688a:	e5da      	b.n	6442 <HPF_16+0x1c6>
      s32CurYY = s32CurYY>>14;
    688c:	ea4f 3aa7 	mov.w	sl, r7, asr #14
        s16CurY = (S16)s32CurYY;
    6890:	fa0f fa8a 	sxth.w	sl, sl
    6894:	e5d5      	b.n	6442 <HPF_16+0x1c6>
      s32CurYY = s32CurYY>>14;
    6896:	ea4f 3aa7 	mov.w	sl, r7, asr #14
        s16CurY = (S16)s32CurYY;
    689a:	fa0f fa8a 	sxth.w	sl, sl
    689e:	e601      	b.n	64a4 <HPF_16+0x228>
      else if(s32CurYY<MIN_S16)
    68a0:	2101      	movs	r1, #1
    68a2:	f51a 4f00 	cmn.w	sl, #32768	; 0x8000
    68a6:	9119      	str	r1, [sp, #100]	; 0x64
        _s32PreXX[u16Chn][u16Iter] = s32CurXX;
    68a8:	9709      	str	r7, [sp, #36]	; 0x24
      else if(s32CurYY<MIN_S16)
    68aa:	9118      	str	r1, [sp, #96]	; 0x60
    68ac:	daf5      	bge.n	689a <HPF_16+0x61e>
        s16CurY = MIN_S16;
    68ae:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 6970 <HPF_16+0x6f4>
    68b2:	e5f7      	b.n	64a4 <HPF_16+0x228>
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    68b4:	46f2      	mov	sl, lr
    68b6:	e5b8      	b.n	642a <HPF_16+0x1ae>
      s32CurYY = s32CurYY>>14;
    68b8:	ea4f 3aa1 	mov.w	sl, r1, asr #14
        s16CurY = (S16)s32CurYY;
    68bc:	fa0f fa8a 	sxth.w	sl, sl
    68c0:	e626      	b.n	6510 <HPF_16+0x294>
        s32CurYY = s32CurXX - _s32PreXX[u16Chn][u16Iter] + _s32PreYY[u16Chn][u16Iter] - (_s32PreYY[u16Chn][u16Iter]>>(_s16Coef+3));
    68c2:	46c2      	mov	sl, r8
    68c4:	e5e2      	b.n	648c <HPF_16+0x210>
      else if(s32CurYY<MIN_S16)
    68c6:	f51a 4f00 	cmn.w	sl, #32768	; 0x8000
    68ca:	daf7      	bge.n	68bc <HPF_16+0x640>
        s16CurY = MIN_S16;
    68cc:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 6970 <HPF_16+0x6f4>
    68d0:	e61e      	b.n	6510 <HPF_16+0x294>
      s32CurYY = s32CurYY>>14;
    68d2:	ea4f 3aa7 	mov.w	sl, r7, asr #14
        s16CurY = (S16)s32CurYY;
    68d6:	fa0f fa8a 	sxth.w	sl, sl
    68da:	e64e      	b.n	657a <HPF_16+0x2fe>
    68dc:	46a2      	mov	sl, r4
    68de:	e60a      	b.n	64f6 <HPF_16+0x27a>
      else if(s32CurYY<MIN_S16)
    68e0:	f51a 4f00 	cmn.w	sl, #32768	; 0x8000
    68e4:	daf7      	bge.n	68d6 <HPF_16+0x65a>
        s16CurY = MIN_S16;
    68e6:	f8df a088 	ldr.w	sl, [pc, #136]	; 6970 <HPF_16+0x6f4>
    68ea:	e646      	b.n	657a <HPF_16+0x2fe>
      else if(s32CurYY<MIN_S16)
    68ec:	f51a 4f00 	cmn.w	sl, #32768	; 0x8000
    68f0:	da04      	bge.n	68fc <HPF_16+0x680>
        s16CurY = MIN_S16;
    68f2:	f8df a07c 	ldr.w	sl, [pc, #124]	; 6970 <HPF_16+0x6f4>
    68f6:	e677      	b.n	65e8 <HPF_16+0x36c>
      s32CurYY = s32CurYY>>14;
    68f8:	ea4f 3aa1 	mov.w	sl, r1, asr #14
        s16CurY = (S16)s32CurYY;
    68fc:	fa0f fa8a 	sxth.w	sl, sl
    6900:	e672      	b.n	65e8 <HPF_16+0x36c>
    6902:	46a2      	mov	sl, r4
    6904:	e62d      	b.n	6562 <HPF_16+0x2e6>
      s32CurYY = s32CurYY>>14;
    6906:	ea4f 3aa1 	mov.w	sl, r1, asr #14
        s16CurY = (S16)s32CurYY;
    690a:	fa0f fa8a 	sxth.w	sl, sl
    690e:	e6a2      	b.n	6656 <HPF_16+0x3da>
    6910:	46a2      	mov	sl, r4
    6912:	e65c      	b.n	65ce <HPF_16+0x352>
      else if(s32CurYY<MIN_S16)
    6914:	f51a 4f00 	cmn.w	sl, #32768	; 0x8000
    6918:	daf7      	bge.n	690a <HPF_16+0x68e>
        s16CurY = MIN_S16;
    691a:	f8df a054 	ldr.w	sl, [pc, #84]	; 6970 <HPF_16+0x6f4>
    691e:	e69a      	b.n	6656 <HPF_16+0x3da>
      s32CurYY = s32CurYY>>14;
    6920:	ea4f 3aa1 	mov.w	sl, r1, asr #14
        s16CurY = (S16)s32CurYY;
    6924:	fa0f fa8a 	sxth.w	sl, sl
    6928:	e6cc      	b.n	66c4 <HPF_16+0x448>
      else if(s32CurYY<MIN_S16)
    692a:	f51a 4f00 	cmn.w	sl, #32768	; 0x8000
    692e:	daf9      	bge.n	6924 <HPF_16+0x6a8>
        s16CurY = MIN_S16;
    6930:	f8df a03c 	ldr.w	sl, [pc, #60]	; 6970 <HPF_16+0x6f4>
    6934:	e6c6      	b.n	66c4 <HPF_16+0x448>
    6936:	46a2      	mov	sl, r4
    6938:	e680      	b.n	663c <HPF_16+0x3c0>
      s32CurYY = s32CurYY>>14;
    693a:	ea4f 3aa4 	mov.w	sl, r4, asr #14
        s16CurY = (S16)s32CurYY;
    693e:	fa0f fa8a 	sxth.w	sl, sl
    6942:	e6f4      	b.n	672e <HPF_16+0x4b2>
      else if(s32CurYY<MIN_S16)
    6944:	f51a 4f00 	cmn.w	sl, #32768	; 0x8000
    6948:	daf9      	bge.n	693e <HPF_16+0x6c2>
        s16CurY = MIN_S16;
    694a:	f8df a024 	ldr.w	sl, [pc, #36]	; 6970 <HPF_16+0x6f4>
    694e:	e6ee      	b.n	672e <HPF_16+0x4b2>
    6950:	46a2      	mov	sl, r4
    6952:	e6aa      	b.n	66aa <HPF_16+0x42e>
    6954:	46a2      	mov	sl, r4
    6956:	e6dd      	b.n	6714 <HPF_16+0x498>
    VP_ERROR("[ERROR] param not support\n");
    6958:	4b04      	ldr	r3, [pc, #16]	; (696c <HPF_16+0x6f0>)
    695a:	681b      	ldr	r3, [r3, #0]
    695c:	07db      	lsls	r3, r3, #31
    695e:	d409      	bmi.n	6974 <HPF_16+0x6f8>
    return -1;
    6960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6964:	e785      	b.n	6872 <HPF_16+0x5f6>
    6966:	bf00      	nop
    6968:	00025d80 	.word	0x00025d80
    696c:	0000ca14 	.word	0x0000ca14
    6970:	ffff8000 	.word	0xffff8000
    VP_ERROR("[ERROR] param not support\n");
    6974:	480c      	ldr	r0, [pc, #48]	; (69a8 <HPF_16+0x72c>)
    6976:	f7fc fe75 	bl	3664 <UartSendTrace>
    return -1;
    697a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    697e:	e778      	b.n	6872 <HPF_16+0x5f6>
    VP_ERROR("[ERROR] NULL Buffer\n");
    6980:	4b0a      	ldr	r3, [pc, #40]	; (69ac <HPF_16+0x730>)
    6982:	681b      	ldr	r3, [r3, #0]
    6984:	07da      	lsls	r2, r3, #31
    6986:	d5eb      	bpl.n	6960 <HPF_16+0x6e4>
    6988:	4809      	ldr	r0, [pc, #36]	; (69b0 <HPF_16+0x734>)
    698a:	f7fc fe6b 	bl	3664 <UartSendTrace>
    return -1;
    698e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6992:	e76e      	b.n	6872 <HPF_16+0x5f6>
    VP_ERROR("[ERROR] Size 0\n");
    6994:	4b05      	ldr	r3, [pc, #20]	; (69ac <HPF_16+0x730>)
    6996:	681b      	ldr	r3, [r3, #0]
    6998:	07d9      	lsls	r1, r3, #31
    699a:	d5e1      	bpl.n	6960 <HPF_16+0x6e4>
    699c:	4805      	ldr	r0, [pc, #20]	; (69b4 <HPF_16+0x738>)
    699e:	f7fc fe61 	bl	3664 <UartSendTrace>
    return -1;
    69a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    69a6:	e764      	b.n	6872 <HPF_16+0x5f6>
    69a8:	0000bce8 	.word	0x0000bce8
    69ac:	0000ca14 	.word	0x0000ca14
    69b0:	0000bcc8 	.word	0x0000bcc8
    69b4:	0000bcac 	.word	0x0000bcac

000069b8 <HPF_32>:


S16 HPF_32(S8* ps8Buffer, U16 u16Size)
{
    69b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    69bc:	b089      	sub	sp, #36	; 0x24
  U16 u16Frame;
  U16 u16Chn=0;
  U16 u16Bytes=4;
  U16 u16Iter=0;

  if(u16Size == 0){
    69be:	2900      	cmp	r1, #0
    69c0:	f000 80eb 	beq.w	6b9a <HPF_32+0x1e2>
    VP_ERROR("[ERROR] Size 0\n");
    return -1;
  }

  if(!ps8Buffer){
    69c4:	2800      	cmp	r0, #0
    69c6:	f000 80de 	beq.w	6b86 <HPF_32+0x1ce>
    VP_ERROR("[ERROR] NULL Buffer\n");
    return -1;
  }

  if(_u16Channel>8 || _s16Coef>9 || _s16Coef<=-3 || _u16Stage>2){
    69ca:	4b79      	ldr	r3, [pc, #484]	; (6bb0 <HPF_32+0x1f8>)
    69cc:	881b      	ldrh	r3, [r3, #0]
    69ce:	2b08      	cmp	r3, #8
    69d0:	f200 80cc 	bhi.w	6b6c <HPF_32+0x1b4>
    69d4:	4a77      	ldr	r2, [pc, #476]	; (6bb4 <HPF_32+0x1fc>)
    69d6:	f9b2 6000 	ldrsh.w	r6, [r2]
    69da:	1cb2      	adds	r2, r6, #2
    69dc:	b292      	uxth	r2, r2
    69de:	2a0b      	cmp	r2, #11
    69e0:	f200 80c4 	bhi.w	6b6c <HPF_32+0x1b4>
    69e4:	4a74      	ldr	r2, [pc, #464]	; (6bb8 <HPF_32+0x200>)
    69e6:	f8b2 c000 	ldrh.w	ip, [r2]
    69ea:	f1bc 0f02 	cmp.w	ip, #2
    69ee:	f200 80bd 	bhi.w	6b6c <HPF_32+0x1b4>
    VP_ERROR("[ERROR] param not support\n");
    return -1;
  }

  u16Frame = u16Size/(_u16Channel*u16Bytes);
    69f2:	009a      	lsls	r2, r3, #2
    69f4:	9206      	str	r2, [sp, #24]
    69f6:	fbb1 f1f2 	udiv	r1, r1, r2
    69fa:	b28a      	uxth	r2, r1
    69fc:	9205      	str	r2, [sp, #20]

  while(u16Num<u16Frame){
    69fe:	2900      	cmp	r1, #0
    6a00:	f000 80b0 	beq.w	6b64 <HPF_32+0x1ac>
    for(u16Chn=0;u16Chn<_u16Channel;u16Chn++){

      if(u16Chn >= _u16ProcChn)
    6a04:	4a6d      	ldr	r2, [pc, #436]	; (6bbc <HPF_32+0x204>)
    6a06:	8812      	ldrh	r2, [r2, #0]
    6a08:	9207      	str	r2, [sp, #28]
    6a0a:	2b00      	cmp	r3, #0
    6a0c:	f000 80aa 	beq.w	6b64 <HPF_32+0x1ac>
    6a10:	429a      	cmp	r2, r3
    6a12:	f106 0603 	add.w	r6, r6, #3
    6a16:	bf28      	it	cs
    6a18:	461a      	movcs	r2, r3

      s32CurX =*(S32*)(ps8Buffer+(u16Num*_u16Channel+u16Chn)*u16Bytes);
      s64CurYY = (S64)s32CurX<<6;
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
        s64CurXX = s64CurYY;
        s64CurYY = s64CurXX - _s64PreXX[u16Chn][u16Iter] + _s64PreYY[u16Chn][u16Iter] - (_s64PreYY[u16Chn][u16Iter]>>(3+_s16Coef));// (((s64PreYY<<12) - (s64PreYY<<(9-u16Coef)))>>12);
    6a1a:	f1c6 0320 	rsb	r3, r6, #32
    6a1e:	9301      	str	r3, [sp, #4]
      if(u16Chn >= _u16ProcChn)
    6a20:	2300      	movs	r3, #0
    6a22:	9003      	str	r0, [sp, #12]
    6a24:	4693      	mov	fp, r2
    6a26:	9304      	str	r3, [sp, #16]
    6a28:	e00b      	b.n	6a42 <HPF_32+0x8a>
      else
        s32CurY = (S32)s64CurYY;
      *(S32*)(ps8Buffer+(u16Num*_u16Channel+u16Chn)*u16Bytes) = s32CurY;

    }
    u16Num++;
    6a2a:	9a03      	ldr	r2, [sp, #12]
    6a2c:	9906      	ldr	r1, [sp, #24]
    6a2e:	9b04      	ldr	r3, [sp, #16]
    6a30:	440a      	add	r2, r1
    6a32:	3301      	adds	r3, #1
    6a34:	9203      	str	r2, [sp, #12]
  while(u16Num<u16Frame){
    6a36:	9a05      	ldr	r2, [sp, #20]
    6a38:	9304      	str	r3, [sp, #16]
    6a3a:	b29b      	uxth	r3, r3
    6a3c:	4293      	cmp	r3, r2
    6a3e:	f080 8091 	bcs.w	6b64 <HPF_32+0x1ac>
    6a42:	9b07      	ldr	r3, [sp, #28]
    6a44:	2b00      	cmp	r3, #0
    6a46:	d0f0      	beq.n	6a2a <HPF_32+0x72>
    6a48:	485d      	ldr	r0, [pc, #372]	; (6bc0 <HPF_32+0x208>)
    6a4a:	495e      	ldr	r1, [pc, #376]	; (6bc4 <HPF_32+0x20c>)
{
    6a4c:	9d03      	ldr	r5, [sp, #12]
    6a4e:	9600      	str	r6, [sp, #0]
    6a50:	2400      	movs	r4, #0
    6a52:	e06d      	b.n	6b30 <HPF_32+0x178>
        s64CurYY = s64CurXX - _s64PreXX[u16Chn][u16Iter] + _s64PreYY[u16Chn][u16Iter] - (_s64PreYY[u16Chn][u16Iter]>>(3+_s16Coef));// (((s64PreYY<<12) - (s64PreYY<<(9-u16Coef)))>>12);
    6a54:	e9d0 2700 	ldrd	r2, r7, [r0]
    6a58:	e9d1 3a00 	ldrd	r3, sl, [r1]
    6a5c:	9e00      	ldr	r6, [sp, #0]
    6a5e:	ebb8 0202 	subs.w	r2, r8, r2
    6a62:	eb6e 0907 	sbc.w	r9, lr, r7
    6a66:	18d2      	adds	r2, r2, r3
    6a68:	fa23 f306 	lsr.w	r3, r3, r6
    6a6c:	9e01      	ldr	r6, [sp, #4]
    6a6e:	fa0a f706 	lsl.w	r7, sl, r6
    6a72:	463e      	mov	r6, r7
    6a74:	9f00      	ldr	r7, [sp, #0]
    6a76:	eb49 090a 	adc.w	r9, r9, sl
    6a7a:	3f20      	subs	r7, #32
    6a7c:	ea43 0306 	orr.w	r3, r3, r6
    6a80:	bf58      	it	pl
    6a82:	fa4a f707 	asrpl.w	r7, sl, r7
    6a86:	9e00      	ldr	r6, [sp, #0]
    6a88:	bf58      	it	pl
    6a8a:	433b      	orrpl	r3, r7
    6a8c:	1ad3      	subs	r3, r2, r3
    6a8e:	fa4a fa06 	asr.w	sl, sl, r6
    6a92:	eb69 090a 	sbc.w	r9, r9, sl
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    6a96:	f1bc 0f02 	cmp.w	ip, #2
        _s64PreYY[u16Chn][u16Iter] = s64CurYY;
    6a9a:	e9c1 3900 	strd	r3, r9, [r1]
        _s64PreXX[u16Chn][u16Iter] = s64CurXX;
    6a9e:	e9c0 8e00 	strd	r8, lr, [r0]
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    6aa2:	d129      	bne.n	6af8 <HPF_32+0x140>
        s64CurYY = s64CurXX - _s64PreXX[u16Chn][u16Iter] + _s64PreYY[u16Chn][u16Iter] - (_s64PreYY[u16Chn][u16Iter]>>(3+_s16Coef));// (((s64PreYY<<12) - (s64PreYY<<(9-u16Coef)))>>12);
    6aa4:	e9d0 2702 	ldrd	r2, r7, [r0, #8]
    6aa8:	e9d1 e802 	ldrd	lr, r8, [r1, #8]
    6aac:	1a9a      	subs	r2, r3, r2
    6aae:	eb69 0707 	sbc.w	r7, r9, r7
    6ab2:	eb12 020e 	adds.w	r2, r2, lr
    6ab6:	9202      	str	r2, [sp, #8]
    6ab8:	fa2e fe06 	lsr.w	lr, lr, r6
    6abc:	4632      	mov	r2, r6
    6abe:	9e01      	ldr	r6, [sp, #4]
    6ac0:	eb47 0708 	adc.w	r7, r7, r8
    6ac4:	f1b2 0a20 	subs.w	sl, r2, #32
    6ac8:	9a00      	ldr	r2, [sp, #0]
    6aca:	fa08 f606 	lsl.w	r6, r8, r6
    6ace:	bf58      	it	pl
    6ad0:	fa48 fa0a 	asrpl.w	sl, r8, sl
    6ad4:	ea4e 0e06 	orr.w	lr, lr, r6
    6ad8:	fa48 f802 	asr.w	r8, r8, r2
    6adc:	9a02      	ldr	r2, [sp, #8]
    6ade:	bf58      	it	pl
    6ae0:	ea4e 0e0a 	orrpl.w	lr, lr, sl
    6ae4:	ebb2 020e 	subs.w	r2, r2, lr
    6ae8:	eb67 0708 	sbc.w	r7, r7, r8
        _s64PreYY[u16Chn][u16Iter] = s64CurYY;
    6aec:	e9c1 2702 	strd	r2, r7, [r1, #8]
        _s64PreXX[u16Chn][u16Iter] = s64CurXX;
    6af0:	e9c0 3902 	strd	r3, r9, [r0, #8]
        s64CurYY = s64CurXX - _s64PreXX[u16Chn][u16Iter] + _s64PreYY[u16Chn][u16Iter] - (_s64PreYY[u16Chn][u16Iter]>>(3+_s16Coef));// (((s64PreYY<<12) - (s64PreYY<<(9-u16Coef)))>>12);
    6af4:	4613      	mov	r3, r2
    6af6:	46b9      	mov	r9, r7
      s64CurYY = (s64CurYY>>14)<<8; //LSB should be zero
    6af8:	0b9f      	lsrs	r7, r3, #14
    6afa:	ea47 4789 	orr.w	r7, r7, r9, lsl #18
      if(s64CurYY>MAX_S32)
    6afe:	4e32      	ldr	r6, [pc, #200]	; (6bc8 <HPF_32+0x210>)
      s64CurYY = (s64CurYY>>14)<<8; //LSB should be zero
    6b00:	ea4f 3ea9 	mov.w	lr, r9, asr #14
    6b04:	023a      	lsls	r2, r7, #8
    6b06:	ea4f 230e 	mov.w	r3, lr, lsl #8
    6b0a:	ea43 6317 	orr.w	r3, r3, r7, lsr #24
      if(s64CurYY>MAX_S32)
    6b0e:	4296      	cmp	r6, r2
    6b10:	f04f 0700 	mov.w	r7, #0
    6b14:	eb77 0603 	sbcs.w	r6, r7, r3
    6b18:	da1c      	bge.n	6b54 <HPF_32+0x19c>
        s32CurY = MAX_S32;
    6b1a:	4a2b      	ldr	r2, [pc, #172]	; (6bc8 <HPF_32+0x210>)
      *(S32*)(ps8Buffer+(u16Num*_u16Channel+u16Chn)*u16Bytes) = s32CurY;
    6b1c:	f845 2c04 	str.w	r2, [r5, #-4]
    6b20:	3401      	adds	r4, #1
    for(u16Chn=0;u16Chn<_u16Channel;u16Chn++){
    6b22:	b2a3      	uxth	r3, r4
    6b24:	455b      	cmp	r3, fp
    6b26:	f100 0010 	add.w	r0, r0, #16
    6b2a:	f101 0110 	add.w	r1, r1, #16
    6b2e:	d20f      	bcs.n	6b50 <HPF_32+0x198>
      s32CurX =*(S32*)(ps8Buffer+(u16Num*_u16Channel+u16Chn)*u16Bytes);
    6b30:	f855 3b04 	ldr.w	r3, [r5], #4
      s64CurYY = (S64)s32CurX<<6;
    6b34:	ea4f 6ea3 	mov.w	lr, r3, asr #26
    6b38:	ea4f 1883 	mov.w	r8, r3, lsl #6
      for(u16Iter=0;u16Iter<_u16Stage;u16Iter++){
    6b3c:	f1bc 0f00 	cmp.w	ip, #0
    6b40:	d188      	bne.n	6a54 <HPF_32+0x9c>
      s64CurYY = (s64CurYY>>14)<<8; //LSB should be zero
    6b42:	ea4f 3898 	mov.w	r8, r8, lsr #14
    6b46:	ea48 488e 	orr.w	r8, r8, lr, lsl #18
    6b4a:	ea4f 2208 	mov.w	r2, r8, lsl #8
      if(s64CurYY>MAX_S32)
    6b4e:	e7e5      	b.n	6b1c <HPF_32+0x164>
    6b50:	9e00      	ldr	r6, [sp, #0]
    6b52:	e76a      	b.n	6a2a <HPF_32+0x72>
      else if(s64CurYY<MIN_S32)
    6b54:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    6b58:	f173 36ff 	sbcs.w	r6, r3, #4294967295	; 0xffffffff
        s32CurY = MIN_S32;
    6b5c:	bfb8      	it	lt
    6b5e:	f04f 4200 	movlt.w	r2, #2147483648	; 0x80000000
    6b62:	e7db      	b.n	6b1c <HPF_32+0x164>
  }
  return 0;
    6b64:	2000      	movs	r0, #0
}
    6b66:	b009      	add	sp, #36	; 0x24
    6b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    VP_ERROR("[ERROR] param not support\n");
    6b6c:	4b17      	ldr	r3, [pc, #92]	; (6bcc <HPF_32+0x214>)
    6b6e:	681b      	ldr	r3, [r3, #0]
    6b70:	07db      	lsls	r3, r3, #31
    6b72:	d402      	bmi.n	6b7a <HPF_32+0x1c2>
    return -1;
    6b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6b78:	e7f5      	b.n	6b66 <HPF_32+0x1ae>
    VP_ERROR("[ERROR] param not support\n");
    6b7a:	4815      	ldr	r0, [pc, #84]	; (6bd0 <HPF_32+0x218>)
    6b7c:	f7fc fd72 	bl	3664 <UartSendTrace>
    return -1;
    6b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6b84:	e7ef      	b.n	6b66 <HPF_32+0x1ae>
    VP_ERROR("[ERROR] NULL Buffer\n");
    6b86:	4b11      	ldr	r3, [pc, #68]	; (6bcc <HPF_32+0x214>)
    6b88:	681b      	ldr	r3, [r3, #0]
    6b8a:	07da      	lsls	r2, r3, #31
    6b8c:	d5f2      	bpl.n	6b74 <HPF_32+0x1bc>
    6b8e:	4811      	ldr	r0, [pc, #68]	; (6bd4 <HPF_32+0x21c>)
    6b90:	f7fc fd68 	bl	3664 <UartSendTrace>
    return -1;
    6b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6b98:	e7e5      	b.n	6b66 <HPF_32+0x1ae>
    VP_ERROR("[ERROR] Size 0\n");
    6b9a:	4b0c      	ldr	r3, [pc, #48]	; (6bcc <HPF_32+0x214>)
    6b9c:	681b      	ldr	r3, [r3, #0]
    6b9e:	07d9      	lsls	r1, r3, #31
    6ba0:	d5e8      	bpl.n	6b74 <HPF_32+0x1bc>
    6ba2:	480d      	ldr	r0, [pc, #52]	; (6bd8 <HPF_32+0x220>)
    6ba4:	f7fc fd5e 	bl	3664 <UartSendTrace>
    return -1;
    6ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6bac:	e7db      	b.n	6b66 <HPF_32+0x1ae>
    6bae:	bf00      	nop
    6bb0:	00025f02 	.word	0x00025f02
    6bb4:	0000ca04 	.word	0x0000ca04
    6bb8:	0000ca06 	.word	0x0000ca06
    6bbc:	00025f0a 	.word	0x00025f0a
    6bc0:	00025e00 	.word	0x00025e00
    6bc4:	00025e80 	.word	0x00025e80
    6bc8:	7fffff00 	.word	0x7fffff00
    6bcc:	0000ca14 	.word	0x0000ca14
    6bd0:	0000bce8 	.word	0x0000bce8
    6bd4:	0000bcc8 	.word	0x0000bcc8
    6bd8:	0000bcac 	.word	0x0000bcac

00006bdc <MApi_VOC_HpfReset>:


void MApi_VOC_HpfReset(void)
{
    6bdc:	b538      	push	{r3, r4, r5, lr}
  memset(_s32PreXX, 0, sizeof(_s32PreXX));
    6bde:	2540      	movs	r5, #64	; 0x40
    6be0:	462a      	mov	r2, r5
    6be2:	2100      	movs	r1, #0
    6be4:	480f      	ldr	r0, [pc, #60]	; (6c24 <MApi_VOC_HpfReset+0x48>)
  memset(_s32PreYY, 0, sizeof(_s32PreYY));
  memset(_s64PreXX, 0, sizeof(_s64PreXX));
  memset(_s64PreYY, 0, sizeof(_s64PreYY));

  _u16Channel = MDrv_AUD_GetMicNo();
    6be6:	4c10      	ldr	r4, [pc, #64]	; (6c28 <MApi_VOC_HpfReset+0x4c>)
  memset(_s32PreXX, 0, sizeof(_s32PreXX));
    6be8:	f003 ffc1 	bl	ab6e <memset>
  memset(_s32PreYY, 0, sizeof(_s32PreYY));
    6bec:	462a      	mov	r2, r5
    6bee:	2100      	movs	r1, #0
  memset(_s64PreXX, 0, sizeof(_s64PreXX));
    6bf0:	2580      	movs	r5, #128	; 0x80
  memset(_s32PreYY, 0, sizeof(_s32PreYY));
    6bf2:	480e      	ldr	r0, [pc, #56]	; (6c2c <MApi_VOC_HpfReset+0x50>)
    6bf4:	f003 ffbb 	bl	ab6e <memset>
  memset(_s64PreXX, 0, sizeof(_s64PreXX));
    6bf8:	462a      	mov	r2, r5
    6bfa:	2100      	movs	r1, #0
    6bfc:	480c      	ldr	r0, [pc, #48]	; (6c30 <MApi_VOC_HpfReset+0x54>)
    6bfe:	f003 ffb6 	bl	ab6e <memset>
  memset(_s64PreYY, 0, sizeof(_s64PreYY));
    6c02:	462a      	mov	r2, r5
    6c04:	2100      	movs	r1, #0
    6c06:	480b      	ldr	r0, [pc, #44]	; (6c34 <MApi_VOC_HpfReset+0x58>)
    6c08:	f003 ffb1 	bl	ab6e <memset>
  _u16Channel = MDrv_AUD_GetMicNo();
    6c0c:	f7fc ff74 	bl	3af8 <MDrv_AUD_GetMicNo>
    6c10:	8020      	strh	r0, [r4, #0]
  _u16Bitwidth = MDrv_AUD_GetBitWidth();
    6c12:	f7fc ffa1 	bl	3b58 <MDrv_AUD_GetBitWidth>
  _u16ProcChn = _u16Channel;
    6c16:	4a08      	ldr	r2, [pc, #32]	; (6c38 <MApi_VOC_HpfReset+0x5c>)
  _u16Bitwidth = MDrv_AUD_GetBitWidth();
    6c18:	4b08      	ldr	r3, [pc, #32]	; (6c3c <MApi_VOC_HpfReset+0x60>)
  _u16ProcChn = _u16Channel;
    6c1a:	8821      	ldrh	r1, [r4, #0]
    6c1c:	8011      	strh	r1, [r2, #0]
  _u16Bitwidth = MDrv_AUD_GetBitWidth();
    6c1e:	8018      	strh	r0, [r3, #0]

#if defined(CONFIG_AUD_AEC) && defined(CONFIG_AUD_REFEXT)
  if(MDrv_AUD_AECIsEnable())
    _u16ProcChn = _u16Channel - 2;
#endif
}
    6c20:	bd38      	pop	{r3, r4, r5, pc}
    6c22:	bf00      	nop
    6c24:	00025d80 	.word	0x00025d80
    6c28:	00025f02 	.word	0x00025f02
    6c2c:	00025dc0 	.word	0x00025dc0
    6c30:	00025e00 	.word	0x00025e00
    6c34:	00025e80 	.word	0x00025e80
    6c38:	00025f0a 	.word	0x00025f0a
    6c3c:	00025f00 	.word	0x00025f00

00006c40 <MApi_VOC_Hpf>:

BOOL MApi_VOC_Hpf(void* pvBuffer, U16 u16Size)
{
  S16 s16Ret;

  if(_u16Stage == 0)
    6c40:	4b0e      	ldr	r3, [pc, #56]	; (6c7c <MApi_VOC_Hpf+0x3c>)
{
    6c42:	b510      	push	{r4, lr}
  if(_u16Stage == 0)
    6c44:	881c      	ldrh	r4, [r3, #0]
    6c46:	b19c      	cbz	r4, 6c70 <MApi_VOC_Hpf+0x30>
    return TRUE;

  if(_u16Bitwidth == 16)
    6c48:	4c0d      	ldr	r4, [pc, #52]	; (6c80 <MApi_VOC_Hpf+0x40>)
    6c4a:	8824      	ldrh	r4, [r4, #0]
    6c4c:	2c10      	cmp	r4, #16
    6c4e:	d011      	beq.n	6c74 <MApi_VOC_Hpf+0x34>
  {
    s16Ret = HPF_16((S8*)pvBuffer,u16Size);
  }
  else if(_u16Bitwidth==24 || _u16Bitwidth==32)//only support 24bit precision 32 bit
    6c50:	2c18      	cmp	r4, #24
    6c52:	4603      	mov	r3, r0
    6c54:	460a      	mov	r2, r1
    6c56:	d003      	beq.n	6c60 <MApi_VOC_Hpf+0x20>
    6c58:	2c20      	cmp	r4, #32
    6c5a:	d001      	beq.n	6c60 <MApi_VOC_Hpf+0x20>
  {
    s16Ret = HPF_32((S8*)pvBuffer,u16Size);
  }
  else
  {
    return FALSE;
    6c5c:	2000      	movs	r0, #0

  if(s16Ret)
    return FALSE;
  else
    return TRUE;
}
    6c5e:	bd10      	pop	{r4, pc}
    s16Ret = HPF_32((S8*)pvBuffer,u16Size);
    6c60:	4611      	mov	r1, r2
    6c62:	4618      	mov	r0, r3
    6c64:	f7ff fea8 	bl	69b8 <HPF_32>
    return TRUE;
    6c68:	fab0 f080 	clz	r0, r0
    6c6c:	0940      	lsrs	r0, r0, #5
}
    6c6e:	bd10      	pop	{r4, pc}
    return TRUE;
    6c70:	2001      	movs	r0, #1
}
    6c72:	bd10      	pop	{r4, pc}
    s16Ret = HPF_16((S8*)pvBuffer,u16Size);
    6c74:	f7ff fb02 	bl	627c <HPF_16>
    6c78:	e7f6      	b.n	6c68 <MApi_VOC_Hpf+0x28>
    6c7a:	bf00      	nop
    6c7c:	0000ca06 	.word	0x0000ca06
    6c80:	00025f00 	.word	0x00025f00

00006c84 <MApi_VOC_HpfConfig>:

BOOL MApi_VOC_HpfConfig(S8 s8Coef)
{
    6c84:	b508      	push	{r3, lr}
  if(s8Coef<-2 || s8Coef>9)
    6c86:	1c83      	adds	r3, r0, #2
    6c88:	b2db      	uxtb	r3, r3
    6c8a:	2b0b      	cmp	r3, #11
    6c8c:	d804      	bhi.n	6c98 <MApi_VOC_HpfConfig+0x14>
  {
    VP_ERROR("[ERROR] wrong parameter\n");
    return FALSE;
  }

  _s16Coef = (S16)s8Coef;
    6c8e:	4b07      	ldr	r3, [pc, #28]	; (6cac <MApi_VOC_HpfConfig+0x28>)
    6c90:	4602      	mov	r2, r0
    6c92:	801a      	strh	r2, [r3, #0]
  return TRUE;
    6c94:	2001      	movs	r0, #1
}
    6c96:	bd08      	pop	{r3, pc}
    VP_ERROR("[ERROR] wrong parameter\n");
    6c98:	4b05      	ldr	r3, [pc, #20]	; (6cb0 <MApi_VOC_HpfConfig+0x2c>)
    6c9a:	6818      	ldr	r0, [r3, #0]
    6c9c:	f010 0001 	ands.w	r0, r0, #1
    6ca0:	d0f9      	beq.n	6c96 <MApi_VOC_HpfConfig+0x12>
    6ca2:	4804      	ldr	r0, [pc, #16]	; (6cb4 <MApi_VOC_HpfConfig+0x30>)
    6ca4:	f7fc fcde 	bl	3664 <UartSendTrace>
    return FALSE;
    6ca8:	2000      	movs	r0, #0
}
    6caa:	bd08      	pop	{r3, pc}
    6cac:	0000ca04 	.word	0x0000ca04
    6cb0:	0000ca14 	.word	0x0000ca14
    6cb4:	0000bd0c 	.word	0x0000bd0c

00006cb8 <MApi_VOC_HpfEnable>:

BOOL MApi_VOC_HpfEnable(U8 u8StageEn)
{
  if(u8StageEn>2)
    6cb8:	2802      	cmp	r0, #2
{
    6cba:	b508      	push	{r3, lr}
  if(u8StageEn>2)
    6cbc:	d804      	bhi.n	6cc8 <MApi_VOC_HpfEnable+0x10>
  {
    VP_ERROR("[ERROR] wrong parameter\n");
    return FALSE;
  }

  _u16Stage = u8StageEn;
    6cbe:	4a07      	ldr	r2, [pc, #28]	; (6cdc <MApi_VOC_HpfEnable+0x24>)
    6cc0:	4603      	mov	r3, r0
    6cc2:	8013      	strh	r3, [r2, #0]
  return TRUE;
    6cc4:	2001      	movs	r0, #1
}
    6cc6:	bd08      	pop	{r3, pc}
    VP_ERROR("[ERROR] wrong parameter\n");
    6cc8:	4b05      	ldr	r3, [pc, #20]	; (6ce0 <MApi_VOC_HpfEnable+0x28>)
    6cca:	6818      	ldr	r0, [r3, #0]
    6ccc:	f010 0001 	ands.w	r0, r0, #1
    6cd0:	d0f9      	beq.n	6cc6 <MApi_VOC_HpfEnable+0xe>
    6cd2:	4804      	ldr	r0, [pc, #16]	; (6ce4 <MApi_VOC_HpfEnable+0x2c>)
    6cd4:	f7fc fcc6 	bl	3664 <UartSendTrace>
    return FALSE;
    6cd8:	2000      	movs	r0, #0
}
    6cda:	bd08      	pop	{r3, pc}
    6cdc:	0000ca06 	.word	0x0000ca06
    6ce0:	0000ca14 	.word	0x0000ca14
    6ce4:	0000bd0c 	.word	0x0000bd0c

00006ce8 <MApi_VOC_SetMicSwGain>:
#endif

#ifndef CONFIG_AUD_HWGAIN
void MApi_VOC_SetMicSwGain(U8 nStep)
{
  if (nStep >= 8)
    6ce8:	2807      	cmp	r0, #7
    return;
  _u8AudMicSwGain = nStep;
    6cea:	bf9c      	itt	ls
    6cec:	4b01      	ldrls	r3, [pc, #4]	; (6cf4 <MApi_VOC_SetMicSwGain+0xc>)
    6cee:	7018      	strbls	r0, [r3, #0]
}
    6cf0:	4770      	bx	lr
    6cf2:	bf00      	nop
    6cf4:	00025f0c 	.word	0x00025f0c

00006cf8 <MApi_VOC_SwGainReset>:
#endif

void MApi_VOC_SwGainReset(void)
{
    6cf8:	b538      	push	{r3, r4, r5, lr}
  _u16GainBitwidth = MDrv_AUD_GetBitWidth();
    6cfa:	f7fc ff2d 	bl	3b58 <MDrv_AUD_GetBitWidth>
    6cfe:	4b08      	ldr	r3, [pc, #32]	; (6d20 <MApi_VOC_SwGainReset+0x28>)
  _u16GainMicChn = MDrv_AUD_GetMicNo();
    6d00:	4d08      	ldr	r5, [pc, #32]	; (6d24 <MApi_VOC_SwGainReset+0x2c>)
  _u16GainBitwidth = MDrv_AUD_GetBitWidth();
    6d02:	8018      	strh	r0, [r3, #0]
  _u16GainMicChn = MDrv_AUD_GetMicNo();
    6d04:	f7fc fef8 	bl	3af8 <MDrv_AUD_GetMicNo>
  _u16GainProcChn = _u16GainMicChn;
    6d08:	4c07      	ldr	r4, [pc, #28]	; (6d28 <MApi_VOC_SwGainReset+0x30>)
  _u16GainMicChn = MDrv_AUD_GetMicNo();
    6d0a:	b280      	uxth	r0, r0
    6d0c:	8028      	strh	r0, [r5, #0]
  _u16GainProcChn = _u16GainMicChn;
    6d0e:	8020      	strh	r0, [r4, #0]

#if defined(CONFIG_AUD_AEC)
  if(MDrv_AUD_AECIsEnable())
    6d10:	f7fd f8ce 	bl	3eb0 <MDrv_AUD_AECIsEnable>
    6d14:	b110      	cbz	r0, 6d1c <MApi_VOC_SwGainReset+0x24>
    _u16GainProcChn = _u16GainMicChn - 2;
    6d16:	882b      	ldrh	r3, [r5, #0]
    6d18:	3b02      	subs	r3, #2
    6d1a:	8023      	strh	r3, [r4, #0]
#endif
}
    6d1c:	bd38      	pop	{r3, r4, r5, pc}
    6d1e:	bf00      	nop
    6d20:	00025f04 	.word	0x00025f04
    6d24:	00025f06 	.word	0x00025f06
    6d28:	00025f08 	.word	0x00025f08

00006d2c <MApi_VOC_SetSwGain>:

//table only support 0~5dB
void MApi_VOC_SetSwGain(U8 nLevel)
{
  if (nLevel >= 6)
    6d2c:	2805      	cmp	r0, #5
    return;
  _u8AudSwGain = nLevel;
    6d2e:	bf9c      	itt	ls
    6d30:	4b01      	ldrls	r3, [pc, #4]	; (6d38 <MApi_VOC_SetSwGain+0xc>)
    6d32:	7018      	strbls	r0, [r3, #0]
}
    6d34:	4770      	bx	lr
    6d36:	bf00      	nop
    6d38:	00025f0d 	.word	0x00025f0d

00006d3c <MApi_VOC_SwGain>:

BOOL MApi_VOC_SwGain(void* pvBuffer, U16 u16Size)
{
    6d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  U16 u16Num;
  U16 u16Sample;
  S8* ps8Buffer = (S8*)pvBuffer;

  if(_u8AudMicSwGain==0 && _u8AudSwGain==0)
    6d40:	4d79      	ldr	r5, [pc, #484]	; (6f28 <MApi_VOC_SwGain+0x1ec>)
    6d42:	4c7a      	ldr	r4, [pc, #488]	; (6f2c <MApi_VOC_SwGain+0x1f0>)
    6d44:	f895 c000 	ldrb.w	ip, [r5]
    6d48:	7824      	ldrb	r4, [r4, #0]
    6d4a:	ea54 050c 	orrs.w	r5, r4, ip
{
    6d4e:	b083      	sub	sp, #12
  if(_u8AudMicSwGain==0 && _u8AudSwGain==0)
    6d50:	d057      	beq.n	6e02 <MApi_VOC_SwGain+0xc6>
    return TRUE;

  if(_u16GainBitwidth==16)
    6d52:	4d77      	ldr	r5, [pc, #476]	; (6f30 <MApi_VOC_SwGain+0x1f4>)
    6d54:	882d      	ldrh	r5, [r5, #0]
    6d56:	2d10      	cmp	r5, #16
    6d58:	d057      	beq.n	6e0a <MApi_VOC_SwGain+0xce>

      *(S16*)(ps8Buffer+(u16Num*2))=s16Cur;
    }

  }
  else if(_u16GainBitwidth==24 || _u16GainBitwidth==32)//only support 24bit precision 32 bit
    6d5a:	2d18      	cmp	r5, #24
    6d5c:	d001      	beq.n	6d62 <MApi_VOC_SwGain+0x26>
    6d5e:	2d20      	cmp	r5, #32
    6d60:	d17b      	bne.n	6e5a <MApi_VOC_SwGain+0x11e>
  {
    S32 s32Cur;
    S64 s64Tmp;
    u16Sample = u16Size>>2;
    for(u16Num=0;u16Num<u16Sample;u16Num++)
    6d62:	0889      	lsrs	r1, r1, #2
    6d64:	d04d      	beq.n	6e02 <MApi_VOC_SwGain+0xc6>
    6d66:	3901      	subs	r1, #1
    6d68:	f1bc 0f00 	cmp.w	ip, #0
    6d6c:	d079      	beq.n	6e62 <MApi_VOC_SwGain+0x126>
    6d6e:	fa1f fe81 	uxth.w	lr, r1
    6d72:	f1c4 0120 	rsb	r1, r4, #32
    6d76:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
    6d7a:	f1a4 0520 	sub.w	r5, r4, #32
    6d7e:	3804      	subs	r0, #4
    {
      s32Cur =*(S32*)(ps8Buffer+(u16Num*4));
      s64Tmp = (S64)s32Cur<<_u8AudMicSwGain;
       if(s64Tmp>MAX_S32)
    6d80:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 6f38 <MApi_VOC_SwGain+0x1fc>
    6d84:	9101      	str	r1, [sp, #4]
    6d86:	f04f 0b00 	mov.w	fp, #0
    6d8a:	e022      	b.n	6dd2 <MApi_VOC_SwGain+0x96>
        s32Cur = MAX_S32;
      else if(s64Tmp<MIN_S32)
    6d8c:	f1b8 4f00 	cmp.w	r8, #2147483648	; 0x80000000
    6d90:	f179 33ff 	sbcs.w	r3, r9, #4294967295	; 0xffffffff
    6d94:	f2c0 80bc 	blt.w	6f10 <MApi_VOC_SwGain+0x1d4>
        s32Cur = MIN_S32;
      else
      {
        if(_u8AudSwGain)
        {
          s64Tmp = (s64Tmp * _s16GainTable[_u8AudSwGain]) >> 14;
    6d98:	4b66      	ldr	r3, [pc, #408]	; (6f34 <MApi_VOC_SwGain+0x1f8>)
    6d9a:	f933 201c 	ldrsh.w	r2, [r3, ip, lsl #1]
    6d9e:	17d3      	asrs	r3, r2, #31
    6da0:	fb02 f109 	mul.w	r1, r2, r9
    6da4:	fb08 1103 	mla	r1, r8, r3, r1
    6da8:	fba2 2308 	umull	r2, r3, r2, r8
    6dac:	440b      	add	r3, r1
    6dae:	0b96      	lsrs	r6, r2, #14
    6db0:	ea46 4683 	orr.w	r6, r6, r3, lsl #18
    6db4:	139f      	asrs	r7, r3, #14
          if(s64Tmp>MAX_S32)
    6db6:	45b2      	cmp	sl, r6
    6db8:	eb7b 0307 	sbcs.w	r3, fp, r7
    6dbc:	db1d      	blt.n	6dfa <MApi_VOC_SwGain+0xbe>
            s32Cur = MAX_S32;
          else if(s64Tmp<MIN_S32)
            s32Cur = MIN_S32;
          else
            s32Cur = (S32)s64Tmp;
    6dbe:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
    6dc2:	f177 33ff 	sbcs.w	r3, r7, #4294967295	; 0xffffffff
    6dc6:	bfb8      	it	lt
    6dc8:	f04f 4600 	movlt.w	r6, #2147483648	; 0x80000000
    for(u16Num=0;u16Num<u16Sample;u16Num++)
    6dcc:	4586      	cmp	lr, r0
        {
          s32Cur = (S32)s64Tmp;
        }
      }

      *(S32*)(ps8Buffer+(u16Num*4))=s32Cur;
    6dce:	6006      	str	r6, [r0, #0]
    for(u16Num=0;u16Num<u16Sample;u16Num++)
    6dd0:	d017      	beq.n	6e02 <MApi_VOC_SwGain+0xc6>
      s64Tmp = (S64)s32Cur<<_u8AudMicSwGain;
    6dd2:	f850 6f04 	ldr.w	r6, [r0, #4]!
    6dd6:	17f3      	asrs	r3, r6, #31
    6dd8:	fa03 f904 	lsl.w	r9, r3, r4
    6ddc:	fa06 f305 	lsl.w	r3, r6, r5
    6de0:	ea49 0903 	orr.w	r9, r9, r3
    6de4:	9b01      	ldr	r3, [sp, #4]
    6de6:	fa06 f804 	lsl.w	r8, r6, r4
    6dea:	fa26 f303 	lsr.w	r3, r6, r3
    6dee:	ea49 0903 	orr.w	r9, r9, r3
       if(s64Tmp>MAX_S32)
    6df2:	45c2      	cmp	sl, r8
    6df4:	eb7b 0309 	sbcs.w	r3, fp, r9
    6df8:	dac8      	bge.n	6d8c <MApi_VOC_SwGain+0x50>
        s32Cur = MAX_S32;
    6dfa:	4e4f      	ldr	r6, [pc, #316]	; (6f38 <MApi_VOC_SwGain+0x1fc>)
      *(S32*)(ps8Buffer+(u16Num*4))=s32Cur;
    6dfc:	6006      	str	r6, [r0, #0]
    for(u16Num=0;u16Num<u16Sample;u16Num++)
    6dfe:	4586      	cmp	lr, r0
    6e00:	d1e7      	bne.n	6dd2 <MApi_VOC_SwGain+0x96>
    return TRUE;
    6e02:	2001      	movs	r0, #1
  {
    return FALSE;
  }

  return TRUE;
}
    6e04:	b003      	add	sp, #12
    6e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for(u16Num=0;u16Num<u16Sample;u16Num++)
    6e0a:	0849      	lsrs	r1, r1, #1
    6e0c:	d0f9      	beq.n	6e02 <MApi_VOC_SwGain+0xc6>
      if((u16Num%_u16GainMicChn) >= _u16GainProcChn)
    6e0e:	4a4b      	ldr	r2, [pc, #300]	; (6f3c <MApi_VOC_SwGain+0x200>)
    6e10:	4b4b      	ldr	r3, [pc, #300]	; (6f40 <MApi_VOC_SwGain+0x204>)
    6e12:	8815      	ldrh	r5, [r2, #0]
    6e14:	881e      	ldrh	r6, [r3, #0]
    6e16:	f1bc 0f00 	cmp.w	ip, #0
    6e1a:	d152      	bne.n	6ec2 <MApi_VOC_SwGain+0x186>
        s16Cur = MIN_S16;
    6e1c:	4f49      	ldr	r7, [pc, #292]	; (6f44 <MApi_VOC_SwGain+0x208>)
    6e1e:	4662      	mov	r2, ip
    6e20:	e009      	b.n	6e36 <MApi_VOC_SwGain+0xfa>
        s16Cur = MAX_S16;
    6e22:	f647 73ff 	movw	r3, #32767	; 0x7fff
      *(S16*)(ps8Buffer+(u16Num*2))=s16Cur;
    6e26:	f820 301c 	strh.w	r3, [r0, ip, lsl #1]
    6e2a:	f10c 0c01 	add.w	ip, ip, #1
    for(u16Num=0;u16Num<u16Sample;u16Num++)
    6e2e:	fa1f f28c 	uxth.w	r2, ip
    6e32:	4291      	cmp	r1, r2
    6e34:	d9e5      	bls.n	6e02 <MApi_VOC_SwGain+0xc6>
      if((u16Num%_u16GainMicChn) >= _u16GainProcChn)
    6e36:	fbb2 f3f5 	udiv	r3, r2, r5
    6e3a:	fb05 2313 	mls	r3, r5, r3, r2
    6e3e:	b29b      	uxth	r3, r3
    6e40:	429e      	cmp	r6, r3
    6e42:	d9f2      	bls.n	6e2a <MApi_VOC_SwGain+0xee>
      s32Tmp = (S32)s16Cur<<_u8AudMicSwGain;
    6e44:	f930 301c 	ldrsh.w	r3, [r0, ip, lsl #1]
    6e48:	40a3      	lsls	r3, r4
      if(s32Tmp>MAX_S16)
    6e4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    6e4e:	dae8      	bge.n	6e22 <MApi_VOC_SwGain+0xe6>
      else if(s32Tmp<MIN_S16)
    6e50:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
    6e54:	db61      	blt.n	6f1a <MApi_VOC_SwGain+0x1de>
          s16Cur = (S16)s32Tmp;
    6e56:	b21b      	sxth	r3, r3
    6e58:	e7e5      	b.n	6e26 <MApi_VOC_SwGain+0xea>
    return FALSE;
    6e5a:	2000      	movs	r0, #0
}
    6e5c:	b003      	add	sp, #12
    6e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e62:	fa1f fc81 	uxth.w	ip, r1
        s32Cur = MAX_S32;
    6e66:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 6f38 <MApi_VOC_SwGain+0x1fc>
       if(s64Tmp>MAX_S32)
    6e6a:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 6f38 <MApi_VOC_SwGain+0x1fc>
    6e6e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    6e72:	f1a0 0a04 	sub.w	sl, r0, #4
    6e76:	f1a4 0520 	sub.w	r5, r4, #32
    6e7a:	f1c4 0120 	rsb	r1, r4, #32
    6e7e:	f04f 0900 	mov.w	r9, #0
    6e82:	e00b      	b.n	6e9c <MApi_VOC_SwGain+0x160>
          s32Cur = (S32)s64Tmp;
    6e84:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    6e88:	f173 30ff 	sbcs.w	r0, r3, #4294967295	; 0xffffffff
    6e8c:	bfac      	ite	ge
    6e8e:	4610      	movge	r0, r2
    6e90:	f04f 4000 	movlt.w	r0, #2147483648	; 0x80000000
    for(u16Num=0;u16Num<u16Sample;u16Num++)
    6e94:	45e2      	cmp	sl, ip
      *(S32*)(ps8Buffer+(u16Num*4))=s32Cur;
    6e96:	f8ca 0000 	str.w	r0, [sl]
    for(u16Num=0;u16Num<u16Sample;u16Num++)
    6e9a:	d0b2      	beq.n	6e02 <MApi_VOC_SwGain+0xc6>
      s64Tmp = (S64)s32Cur<<_u8AudMicSwGain;
    6e9c:	f85a 0f04 	ldr.w	r0, [sl, #4]!
    6ea0:	17c7      	asrs	r7, r0, #31
    6ea2:	fa00 f605 	lsl.w	r6, r0, r5
    6ea6:	fa07 f304 	lsl.w	r3, r7, r4
    6eaa:	4333      	orrs	r3, r6
    6eac:	fa00 f204 	lsl.w	r2, r0, r4
    6eb0:	fa20 f601 	lsr.w	r6, r0, r1
    6eb4:	4333      	orrs	r3, r6
       if(s64Tmp>MAX_S32)
    6eb6:	4590      	cmp	r8, r2
    6eb8:	eb79 0003 	sbcs.w	r0, r9, r3
    6ebc:	dae2      	bge.n	6e84 <MApi_VOC_SwGain+0x148>
        s32Cur = MAX_S32;
    6ebe:	4670      	mov	r0, lr
    6ec0:	e7e8      	b.n	6e94 <MApi_VOC_SwGain+0x158>
          s32Tmp = (s32Tmp * _s16GainTable[_u8AudSwGain]) >> 14;
    6ec2:	2700      	movs	r7, #0
        s16Cur = MIN_S16;
    6ec4:	f8df e07c 	ldr.w	lr, [pc, #124]	; 6f44 <MApi_VOC_SwGain+0x208>
          s32Tmp = (s32Tmp * _s16GainTable[_u8AudSwGain]) >> 14;
    6ec8:	f8df 8068 	ldr.w	r8, [pc, #104]	; 6f34 <MApi_VOC_SwGain+0x1f8>
    6ecc:	463a      	mov	r2, r7
      if((u16Num%_u16GainMicChn) >= _u16GainProcChn)
    6ece:	fbb2 f3f5 	udiv	r3, r2, r5
    6ed2:	fb05 2313 	mls	r3, r5, r3, r2
    6ed6:	b29b      	uxth	r3, r3
    6ed8:	42b3      	cmp	r3, r6
    6eda:	d214      	bcs.n	6f06 <MApi_VOC_SwGain+0x1ca>
      s32Tmp = (S32)s16Cur<<_u8AudMicSwGain;
    6edc:	f930 3017 	ldrsh.w	r3, [r0, r7, lsl #1]
    6ee0:	40a3      	lsls	r3, r4
      if(s32Tmp>MAX_S16)
    6ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    6ee6:	da0a      	bge.n	6efe <MApi_VOC_SwGain+0x1c2>
      else if(s32Tmp<MIN_S16)
    6ee8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
    6eec:	db13      	blt.n	6f16 <MApi_VOC_SwGain+0x1da>
          s32Tmp = (s32Tmp * _s16GainTable[_u8AudSwGain]) >> 14;
    6eee:	f938 201c 	ldrsh.w	r2, [r8, ip, lsl #1]
    6ef2:	fb03 f302 	mul.w	r3, r3, r2
    6ef6:	139b      	asrs	r3, r3, #14
          if(s32Tmp>MAX_S16)
    6ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    6efc:	db0f      	blt.n	6f1e <MApi_VOC_SwGain+0x1e2>
        s16Cur = MAX_S16;
    6efe:	f647 73ff 	movw	r3, #32767	; 0x7fff
      *(S16*)(ps8Buffer+(u16Num*2))=s16Cur;
    6f02:	f820 3017 	strh.w	r3, [r0, r7, lsl #1]
    6f06:	3701      	adds	r7, #1
    for(u16Num=0;u16Num<u16Sample;u16Num++)
    6f08:	b2ba      	uxth	r2, r7
    6f0a:	428a      	cmp	r2, r1
    6f0c:	d3df      	bcc.n	6ece <MApi_VOC_SwGain+0x192>
    6f0e:	e778      	b.n	6e02 <MApi_VOC_SwGain+0xc6>
        s32Cur = MIN_S32;
    6f10:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    6f14:	e75a      	b.n	6dcc <MApi_VOC_SwGain+0x90>
        s16Cur = MIN_S16;
    6f16:	4673      	mov	r3, lr
    6f18:	e7f3      	b.n	6f02 <MApi_VOC_SwGain+0x1c6>
    6f1a:	463b      	mov	r3, r7
    6f1c:	e783      	b.n	6e26 <MApi_VOC_SwGain+0xea>
          else if(s32Tmp<MIN_S16)
    6f1e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
    6f22:	dbf8      	blt.n	6f16 <MApi_VOC_SwGain+0x1da>
            s16Cur = (S16)s32Tmp;
    6f24:	b21b      	sxth	r3, r3
    6f26:	e7ec      	b.n	6f02 <MApi_VOC_SwGain+0x1c6>
    6f28:	00025f0d 	.word	0x00025f0d
    6f2c:	00025f0c 	.word	0x00025f0c
    6f30:	00025f04 	.word	0x00025f04
    6f34:	0000bd5c 	.word	0x0000bd5c
    6f38:	7fffff00 	.word	0x7fffff00
    6f3c:	00025f06 	.word	0x00025f06
    6f40:	00025f08 	.word	0x00025f08
    6f44:	ffff8000 	.word	0xffff8000

00006f48 <MOS_IRQn_AttachIsr>:
extern unsigned long __Vectors[];


void MOS_IRQn_AttachIsr(IRQn_ISR_t tIntIsr, IRQn_Type eIntNum, U32 u32Priority)
{
  if (eIntNum == NONE_IRQn)
    6f48:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6f4c:	4299      	cmp	r1, r3
    6f4e:	d020      	beq.n	6f92 <MOS_IRQn_AttachIsr+0x4a>
    return;

  if (eIntNum <= MAX_IRQn)
    6f50:	29ef      	cmp	r1, #239	; 0xef
    6f52:	dc18      	bgt.n	6f86 <MOS_IRQn_AttachIsr+0x3e>
{
    6f54:	b430      	push	{r4, r5}
  {
    __Vectors[eIntNum + 16] = (unsigned long)tIntIsr;
    6f56:	f101 0310 	add.w	r3, r1, #16
    6f5a:	4604      	mov	r4, r0
    6f5c:	4813      	ldr	r0, [pc, #76]	; (6fac <MOS_IRQn_AttachIsr+0x64>)
    6f5e:	0152      	lsls	r2, r2, #5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    6f60:	2900      	cmp	r1, #0
    6f62:	b2d2      	uxtb	r2, r2
    6f64:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    6f68:	db18      	blt.n	6f9c <MOS_IRQn_AttachIsr+0x54>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6f6a:	4811      	ldr	r0, [pc, #68]	; (6fb0 <MOS_IRQn_AttachIsr+0x68>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6f6c:	094b      	lsrs	r3, r1, #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6f6e:	1844      	adds	r4, r0, r1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6f70:	f001 051f 	and.w	r5, r1, #31
    6f74:	3360      	adds	r3, #96	; 0x60
    6f76:	2101      	movs	r1, #1
    6f78:	40a9      	lsls	r1, r5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6f7a:	f884 2300 	strb.w	r2, [r4, #768]	; 0x300
  }
  else
  {
  	MDrv_INTC_FIQAttach(tIntIsr, eIntNum - MAX_IRQn - 1 - 64);
  }
}
    6f7e:	bc30      	pop	{r4, r5}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6f80:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    6f84:	4770      	bx	lr
  else if ((eIntNum - MAX_IRQn) <= 64)
    6f86:	f5b1 7f98 	cmp.w	r1, #304	; 0x130
    6f8a:	da03      	bge.n	6f94 <MOS_IRQn_AttachIsr+0x4c>
  	MDrv_INTC_IRQAttach(tIntIsr, eIntNum - MAX_IRQn - 1);
    6f8c:	39f0      	subs	r1, #240	; 0xf0
    6f8e:	f7fd b939 	b.w	4204 <MDrv_INTC_IRQAttach>
    6f92:	4770      	bx	lr
  	MDrv_INTC_FIQAttach(tIntIsr, eIntNum - MAX_IRQn - 1 - 64);
    6f94:	f5a1 7198 	sub.w	r1, r1, #304	; 0x130
    6f98:	f7fd b93a 	b.w	4210 <MDrv_INTC_FIQAttach>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6f9c:	4b05      	ldr	r3, [pc, #20]	; (6fb4 <MOS_IRQn_AttachIsr+0x6c>)
    6f9e:	f001 010f 	and.w	r1, r1, #15
    6fa2:	440b      	add	r3, r1
    6fa4:	761a      	strb	r2, [r3, #24]
}
    6fa6:	bc30      	pop	{r4, r5}
    6fa8:	4770      	bx	lr
    6faa:	bf00      	nop
    6fac:	00000000 	.word	0x00000000
    6fb0:	e000e100 	.word	0xe000e100
    6fb4:	e000ecfc 	.word	0xe000ecfc

00006fb8 <MOS_IRQn_Mask>:

void MOS_IRQn_Mask(IRQn_Type eIntNum)
{
  if (eIntNum == NONE_IRQn)
    6fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6fbc:	4298      	cmp	r0, r3
    6fbe:	d012      	beq.n	6fe6 <MOS_IRQn_Mask+0x2e>
    return;

  if (eIntNum <= MAX_IRQn)
    6fc0:	28ef      	cmp	r0, #239	; 0xef
    6fc2:	dc11      	bgt.n	6fe8 <MOS_IRQn_Mask+0x30>
  if ((int32_t)(IRQn) >= 0)
    6fc4:	2800      	cmp	r0, #0
    6fc6:	db0e      	blt.n	6fe6 <MOS_IRQn_Mask+0x2e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6fc8:	0943      	lsrs	r3, r0, #5
    6fca:	3320      	adds	r3, #32
    6fcc:	2201      	movs	r2, #1
    6fce:	490c      	ldr	r1, [pc, #48]	; (7000 <MOS_IRQn_Mask+0x48>)
    6fd0:	f000 001f 	and.w	r0, r0, #31
    6fd4:	fa02 f000 	lsl.w	r0, r2, r0
    6fd8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    6fdc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6fe0:	f3bf 8f6f 	isb	sy
    6fe4:	4770      	bx	lr
  }
  else
  {
  	MDrv_INTC_FIQSetMask(eIntNum - MAX_IRQn - 1 - 64, TRUE);
  }
}
    6fe6:	4770      	bx	lr
  else if ((eIntNum - MAX_IRQn) <= 64)
    6fe8:	f5b0 7f98 	cmp.w	r0, #304	; 0x130
    6fec:	da03      	bge.n	6ff6 <MOS_IRQn_Mask+0x3e>
  	MDrv_INTC_IRQSetMask(eIntNum - MAX_IRQn - 1, TRUE);
    6fee:	38f0      	subs	r0, #240	; 0xf0
    6ff0:	2101      	movs	r1, #1
    6ff2:	f7fd b913 	b.w	421c <MDrv_INTC_IRQSetMask>
  	MDrv_INTC_FIQSetMask(eIntNum - MAX_IRQn - 1 - 64, TRUE);
    6ff6:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
    6ffa:	2101      	movs	r1, #1
    6ffc:	f7fd b924 	b.w	4248 <MDrv_INTC_FIQSetMask>
    7000:	e000e100 	.word	0xe000e100

00007004 <MOS_IRQn_Unmask>:

void MOS_IRQn_Unmask(IRQn_Type eIntNum)
{
  if (eIntNum == NONE_IRQn)
    7004:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7008:	4298      	cmp	r0, r3
    700a:	d00c      	beq.n	7026 <MOS_IRQn_Unmask+0x22>
    return;

  if (eIntNum <= MAX_IRQn)
    700c:	28ef      	cmp	r0, #239	; 0xef
    700e:	dc0b      	bgt.n	7028 <MOS_IRQn_Unmask+0x24>
  if ((int32_t)(IRQn) >= 0)
    7010:	2800      	cmp	r0, #0
    7012:	db08      	blt.n	7026 <MOS_IRQn_Unmask+0x22>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7014:	f000 011f 	and.w	r1, r0, #31
    7018:	2301      	movs	r3, #1
    701a:	0940      	lsrs	r0, r0, #5
    701c:	4a08      	ldr	r2, [pc, #32]	; (7040 <MOS_IRQn_Unmask+0x3c>)
    701e:	408b      	lsls	r3, r1
    7020:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    7024:	4770      	bx	lr
  }
  else
  {
  	MDrv_INTC_FIQSetMask(eIntNum - MAX_IRQn - 1 - 64, FALSE);
  }
}
    7026:	4770      	bx	lr
  else if ((eIntNum - MAX_IRQn) <= 64)
    7028:	f5b0 7f98 	cmp.w	r0, #304	; 0x130
    702c:	da03      	bge.n	7036 <MOS_IRQn_Unmask+0x32>
  	MDrv_INTC_IRQSetMask(eIntNum - MAX_IRQn - 1, FALSE);
    702e:	38f0      	subs	r0, #240	; 0xf0
    7030:	2100      	movs	r1, #0
    7032:	f7fd b8f3 	b.w	421c <MDrv_INTC_IRQSetMask>
  	MDrv_INTC_FIQSetMask(eIntNum - MAX_IRQn - 1 - 64, FALSE);
    7036:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
    703a:	2100      	movs	r1, #0
    703c:	f7fd b904 	b.w	4248 <MDrv_INTC_FIQSetMask>
    7040:	e000e100 	.word	0xe000e100

00007044 <MOS_mDelay>:

void MOS_mDelay(U32 u32MiniSeconds)
{
  MHal_Timer_Delay(TIMER_DELAY_1ms*u32MiniSeconds);
    7044:	f642 63e0 	movw	r3, #12000	; 0x2ee0
    7048:	fb03 f000 	mul.w	r0, r3, r0
    704c:	f7fe b81c 	b.w	5088 <MHal_Timer_Delay>

00007050 <prvVdProcTask>:
    return FALSE;
  }
}

static void prvVdProcTask(void *pvParameters)
{
    7050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TickType_t xTicksToWait = portMAX_DELAY;
  EventBits_t uxBits;

  (void) pvParameters;

  VOC_MSG("VdProcTask Start\n");
    7054:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 7140 <prvVdProcTask+0xf0>
    7058:	f8d8 3000 	ldr.w	r3, [r8]
    705c:	0799      	lsls	r1, r3, #30
{
    705e:	b083      	sub	sp, #12
  VOC_MSG("VdProcTask Start\n");
    7060:	d460      	bmi.n	7124 <prvVdProcTask+0xd4>
    7062:	4e32      	ldr	r6, [pc, #200]	; (712c <prvVdProcTask+0xdc>)
    7064:	4f32      	ldr	r7, [pc, #200]	; (7130 <prvVdProcTask+0xe0>)
    7066:	6830      	ldr	r0, [r6, #0]
      xEventGroupClearBits(_tVdTaskEvent, ebBIT_VD_EVENT);
      VOC_MSG("VdTask: Reset\n");
      continue;
    }

    xReceivedBytes = xStreamBufferReceive(_tVocStreamBuffer,
    7068:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 7144 <prvVdProcTask+0xf4>
      //VOC_MSG("VdTask: buffer space availabe = %d\n", xStreamBufferSpacesAvailable(_tVocStreamBuffer));
    }
    else
    {

      VOC_ERROR("VdTask: xStreamBufferReceive failed\n");
    706c:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 7148 <prvVdProcTask+0xf8>
    uxBits = xEventGroupWaitBits(_tVdTaskEvent, ebBIT_VD_EVENT , pdFALSE, pdFALSE, portMAX_DELAY);
    7070:	2300      	movs	r3, #0
    7072:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    7076:	461a      	mov	r2, r3
    7078:	9500      	str	r5, [sp, #0]
    707a:	2107      	movs	r1, #7
    707c:	f7f9 f90c 	bl	298 <xEventGroupWaitBits>
    if(uxBits & ebBIT_VD_RESET)
    7080:	07c2      	lsls	r2, r0, #31
    uxBits = xEventGroupWaitBits(_tVdTaskEvent, ebBIT_VD_EVENT , pdFALSE, pdFALSE, portMAX_DELAY);
    7082:	4604      	mov	r4, r0
    if(uxBits & ebBIT_VD_RESET)
    7084:	d50c      	bpl.n	70a0 <prvVdProcTask+0x50>
      xStreamBufferReset(_tVocStreamBuffer);
    7086:	6838      	ldr	r0, [r7, #0]
    7088:	f7fb fec4 	bl	2e14 <xStreamBufferReset>
      xEventGroupClearBits(_tVdTaskEvent, ebBIT_VD_EVENT);
    708c:	2107      	movs	r1, #7
    708e:	6830      	ldr	r0, [r6, #0]
    7090:	f7f9 f98e 	bl	3b0 <xEventGroupClearBits>
      VOC_MSG("VdTask: Reset\n");
    7094:	f8d8 3000 	ldr.w	r3, [r8]
    7098:	079b      	lsls	r3, r3, #30
    709a:	d416      	bmi.n	70ca <prvVdProcTask+0x7a>
    709c:	6830      	ldr	r0, [r6, #0]
    709e:	e7e7      	b.n	7070 <prvVdProcTask+0x20>
    xReceivedBytes = xStreamBufferReceive(_tVocStreamBuffer,
    70a0:	f8d7 9000 	ldr.w	r9, [r7]
                                   VD_TASK_READ_PCM_FRAME_BYTES*MDrv_AUD_GetMicNo(), xTicksToWait);
    70a4:	f7fc fd28 	bl	3af8 <MDrv_AUD_GetMicNo>
    xReceivedBytes = xStreamBufferReceive(_tVocStreamBuffer,
    70a8:	462b      	mov	r3, r5
    70aa:	0242      	lsls	r2, r0, #9
    70ac:	4651      	mov	r1, sl
    70ae:	4648      	mov	r0, r9
    70b0:	f7fb ffb2 	bl	3018 <xStreamBufferReceive>
    if(xReceivedBytes > 0)
    70b4:	b170      	cbz	r0, 70d4 <prvVdProcTask+0x84>
      if(uxBits & ebBIT_VD_MOVE)
    70b6:	07a5      	lsls	r5, r4, #30
    70b8:	d415      	bmi.n	70e6 <prvVdProcTask+0x96>
      if (uxBits & ebBIT_VD_SKIP)
    70ba:	0762      	lsls	r2, r4, #29
    70bc:	6830      	ldr	r0, [r6, #0]
    70be:	d5d7      	bpl.n	7070 <prvVdProcTask+0x20>
        xEventGroupClearBits(_tVdTaskEvent, ebBIT_VD_SKIP);
    70c0:	2104      	movs	r1, #4
    70c2:	f7f9 f975 	bl	3b0 <xEventGroupClearBits>
    70c6:	6830      	ldr	r0, [r6, #0]
    70c8:	e7d2      	b.n	7070 <prvVdProcTask+0x20>
      VOC_MSG("VdTask: Reset\n");
    70ca:	481a      	ldr	r0, [pc, #104]	; (7134 <prvVdProcTask+0xe4>)
    70cc:	f7fc faca 	bl	3664 <UartSendTrace>
    70d0:	6830      	ldr	r0, [r6, #0]
    70d2:	e7cd      	b.n	7070 <prvVdProcTask+0x20>
      VOC_ERROR("VdTask: xStreamBufferReceive failed\n");
    70d4:	f8d8 3000 	ldr.w	r3, [r8]
    70d8:	07db      	lsls	r3, r3, #31
    70da:	d5df      	bpl.n	709c <prvVdProcTask+0x4c>
    70dc:	4658      	mov	r0, fp
    70de:	f7fc fac1 	bl	3664 <UartSendTrace>
    70e2:	6830      	ldr	r0, [r6, #0]
    70e4:	e7c4      	b.n	7070 <prvVdProcTask+0x20>
        bRet = MApi_VOC_VDPort(_ps16VdTaskPcmBuf, xReceivedBytes/2);
    70e6:	0845      	lsrs	r5, r0, #1
    70e8:	4629      	mov	r1, r5
    70ea:	4650      	mov	r0, sl
    70ec:	f7fe ff0a 	bl	5f04 <MApi_VOC_VDPort>
        if(bRet)
    70f0:	b160      	cbz	r0, 710c <prvVdProcTask+0xbc>
          if (xStreamBufferIsEmpty(_tVocStreamBuffer))
    70f2:	6838      	ldr	r0, [r7, #0]
    70f4:	f7fc f81c 	bl	3130 <xStreamBufferIsEmpty>
    70f8:	2800      	cmp	r0, #0
    70fa:	d0de      	beq.n	70ba <prvVdProcTask+0x6a>
            MApi_VOC_VDNotify(xReceivedBytes/2);
    70fc:	4628      	mov	r0, r5
    70fe:	f7fe ff77 	bl	5ff0 <MApi_VOC_VDNotify>
            xEventGroupClearBits(_tVdTaskEvent, ebBIT_VD_MOVE);
    7102:	2102      	movs	r1, #2
    7104:	6830      	ldr	r0, [r6, #0]
    7106:	f7f9 f953 	bl	3b0 <xEventGroupClearBits>
    710a:	e7d6      	b.n	70ba <prvVdProcTask+0x6a>
          xEventGroupClearBits(_tVdTaskEvent, ebBIT_VD_MOVE);
    710c:	2102      	movs	r1, #2
    710e:	6830      	ldr	r0, [r6, #0]
    7110:	f7f9 f94e 	bl	3b0 <xEventGroupClearBits>
          VOC_ERROR("VdTask: MApi_VOC_VDPort failed\n");
    7114:	f8d8 3000 	ldr.w	r3, [r8]
    7118:	07d9      	lsls	r1, r3, #31
    711a:	d5ce      	bpl.n	70ba <prvVdProcTask+0x6a>
    711c:	4806      	ldr	r0, [pc, #24]	; (7138 <prvVdProcTask+0xe8>)
    711e:	f7fc faa1 	bl	3664 <UartSendTrace>
    7122:	e7ca      	b.n	70ba <prvVdProcTask+0x6a>
  VOC_MSG("VdProcTask Start\n");
    7124:	4805      	ldr	r0, [pc, #20]	; (713c <prvVdProcTask+0xec>)
    7126:	f7fc fa9d 	bl	3664 <UartSendTrace>
    712a:	e79a      	b.n	7062 <prvVdProcTask+0x12>
    712c:	0003076c 	.word	0x0003076c
    7130:	00030974 	.word	0x00030974
    7134:	0000be44 	.word	0x0000be44
    7138:	0000be5c 	.word	0x0000be5c
    713c:	0000be2c 	.word	0x0000be2c
    7140:	0000ca14 	.word	0x0000ca14
    7144:	00025f10 	.word	0x00025f10
    7148:	0000be88 	.word	0x0000be88

0000714c <VocTaskVQConfig>:
    if (eMode < E_VQ_MODE_MAX)
    714c:	2805      	cmp	r0, #5
      _eVocVQMode = eMode;
    714e:	bf9c      	itt	ls
    7150:	4b05      	ldrls	r3, [pc, #20]	; (7168 <VocTaskVQConfig+0x1c>)
    7152:	7018      	strbls	r0, [r3, #0]
    VOC_MSG("MApi_VOC_VQConfig: Mode = %d\n", (U32)eMode);
    7154:	4b05      	ldr	r3, [pc, #20]	; (716c <VocTaskVQConfig+0x20>)
    7156:	681b      	ldr	r3, [r3, #0]
    7158:	079b      	lsls	r3, r3, #30
    715a:	d400      	bmi.n	715e <VocTaskVQConfig+0x12>
}
    715c:	4770      	bx	lr
    VOC_MSG("MApi_VOC_VQConfig: Mode = %d\n", (U32)eMode);
    715e:	4601      	mov	r1, r0
    7160:	4803      	ldr	r0, [pc, #12]	; (7170 <VocTaskVQConfig+0x24>)
    7162:	f7fc ba7f 	b.w	3664 <UartSendTrace>
    7166:	bf00      	nop
    7168:	00025f0e 	.word	0x00025f0e
    716c:	0000ca14 	.word	0x0000ca14
    7170:	0000bda8 	.word	0x0000bda8

00007174 <VocTaskVQPost>:
  if (_eVocVQMode == E_VQ_MODE_PM)
    7174:	4b1f      	ldr	r3, [pc, #124]	; (71f4 <VocTaskVQPost+0x80>)
    7176:	7819      	ldrb	r1, [r3, #0]
    7178:	2902      	cmp	r1, #2
{
    717a:	b510      	push	{r4, lr}
  if (_eVocVQMode == E_VQ_MODE_PM)
    717c:	d00f      	beq.n	719e <VocTaskVQPost+0x2a>
  else if (_eVocVQMode == E_VQ_MODE_LOOP)
    717e:	2901      	cmp	r1, #1
    7180:	d004      	beq.n	718c <VocTaskVQPost+0x18>
  else if (_eVocVQMode == E_VQ_MODE_DWW)
    7182:	2904      	cmp	r1, #4
    7184:	d013      	beq.n	71ae <VocTaskVQPost+0x3a>
  else if (_eVocVQMode == E_VQ_MODE_TEST)
    7186:	2905      	cmp	r1, #5
    7188:	d01a      	beq.n	71c0 <VocTaskVQPost+0x4c>
}
    718a:	bd10      	pop	{r4, pc}
    VOC_MSG("MApi_VOC_VQPost: Loop again\n");
    718c:	4b1a      	ldr	r3, [pc, #104]	; (71f8 <VocTaskVQPost+0x84>)
    718e:	681b      	ldr	r3, [r3, #0]
    7190:	0798      	lsls	r0, r3, #30
    7192:	d5fa      	bpl.n	718a <VocTaskVQPost+0x16>
    7194:	4819      	ldr	r0, [pc, #100]	; (71fc <VocTaskVQPost+0x88>)
}
    7196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    VOC_MSG("MApi_VOC_VQPost: Loop again\n");
    719a:	f7fc ba63 	b.w	3664 <UartSendTrace>
      xEventGroupClearBits(_tVocProcEvent, (1 << eFunc));
    719e:	4b18      	ldr	r3, [pc, #96]	; (7200 <VocTaskVQPost+0x8c>)
    71a0:	6818      	ldr	r0, [r3, #0]
    71a2:	f7f9 f905 	bl	3b0 <xEventGroupClearBits>
}
    71a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MDrv_PM_Resume();
    71aa:	f7fd b87f 	b.w	42ac <MDrv_PM_Resume>
    VOC_MSG("MApi_VOC_VQPost: DWW\n");
    71ae:	4b12      	ldr	r3, [pc, #72]	; (71f8 <VocTaskVQPost+0x84>)
    71b0:	681b      	ldr	r3, [r3, #0]
    71b2:	0799      	lsls	r1, r3, #30
    71b4:	d5e9      	bpl.n	718a <VocTaskVQPost+0x16>
    71b6:	4813      	ldr	r0, [pc, #76]	; (7204 <VocTaskVQPost+0x90>)
}
    71b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    VOC_MSG("MApi_VOC_VQPost: DWW\n");
    71bc:	f7fc ba52 	b.w	3664 <UartSendTrace>
        if (xEventGroupGetBits(_tVocProcEvent) & ebBIT_VS)
    71c0:	4c0f      	ldr	r4, [pc, #60]	; (7200 <VocTaskVQPost+0x8c>)
    71c2:	2100      	movs	r1, #0
    71c4:	6820      	ldr	r0, [r4, #0]
    71c6:	f7f9 f8f3 	bl	3b0 <xEventGroupClearBits>
    71ca:	06c2      	lsls	r2, r0, #27
    71cc:	d40c      	bmi.n	71e8 <VocTaskVQPost+0x74>
      xEventGroupSetBits(_tVocProcEvent, (1 << eFunc));
    71ce:	6820      	ldr	r0, [r4, #0]
    71d0:	2104      	movs	r1, #4
    71d2:	f7f9 f911 	bl	3f8 <xEventGroupSetBits>
    VOC_MSG("MApi_VOC_VQPost: TEST\n");
    71d6:	4b08      	ldr	r3, [pc, #32]	; (71f8 <VocTaskVQPost+0x84>)
    71d8:	681b      	ldr	r3, [r3, #0]
    71da:	079b      	lsls	r3, r3, #30
    71dc:	d5d5      	bpl.n	718a <VocTaskVQPost+0x16>
    71de:	480a      	ldr	r0, [pc, #40]	; (7208 <VocTaskVQPost+0x94>)
}
    71e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    VOC_MSG("MApi_VOC_VQPost: TEST\n");
    71e4:	f7fc ba3e 	b.w	3664 <UartSendTrace>
          xEventGroupClearBits(_tVocProcEvent, ebBIT_VS); //turn off seamless
    71e8:	2110      	movs	r1, #16
    71ea:	6820      	ldr	r0, [r4, #0]
    71ec:	f7f9 f8e0 	bl	3b0 <xEventGroupClearBits>
    71f0:	e7ed      	b.n	71ce <VocTaskVQPost+0x5a>
    71f2:	bf00      	nop
    71f4:	00025f0e 	.word	0x00025f0e
    71f8:	0000ca14 	.word	0x0000ca14
    71fc:	0000bdcc 	.word	0x0000bdcc
    7200:	00030970 	.word	0x00030970
    7204:	0000bdf0 	.word	0x0000bdf0
    7208:	0000be0c 	.word	0x0000be0c

0000720c <prvVocProcTask>:
{
    720c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  VOC_MSG("VocProcTask Start\n");
    7210:	f8df 9274 	ldr.w	r9, [pc, #628]	; 7488 <prvVocProcTask+0x27c>
    7214:	f8d9 3000 	ldr.w	r3, [r9]
    7218:	0799      	lsls	r1, r3, #30
{
    721a:	b085      	sub	sp, #20
  VOC_MSG("VocProcTask Start\n");
    721c:	f100 8111 	bmi.w	7442 <prvVocProcTask+0x236>
    7220:	4d8a      	ldr	r5, [pc, #552]	; (744c <prvVocProcTask+0x240>)
    7222:	4f8b      	ldr	r7, [pc, #556]	; (7450 <prvVocProcTask+0x244>)
    7224:	f8df 8264 	ldr.w	r8, [pc, #612]	; 748c <prvVocProcTask+0x280>
    7228:	f8df a264 	ldr.w	sl, [pc, #612]	; 7490 <prvVocProcTask+0x284>
    if(MDrv_AUD_ReadPCM(_ps16VocTaskPcmBuf, VOC_TASK_READ_PCM_FRAME*MDrv_AUD_GetMicNo(), &u32ReturnCount, pdTRUE) == pdPASS)
    722c:	4e89      	ldr	r6, [pc, #548]	; (7454 <prvVocProcTask+0x248>)
    uxBits = xEventGroupWaitBits(_tVocProcEvent, ebBIT_VOC , pdFALSE, pdFALSE, portMAX_DELAY);
    722e:	6828      	ldr	r0, [r5, #0]
    7230:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7234:	2300      	movs	r3, #0
    7236:	9200      	str	r2, [sp, #0]
    7238:	215f      	movs	r1, #95	; 0x5f
    723a:	461a      	mov	r2, r3
    723c:	f7f9 f82c 	bl	298 <xEventGroupWaitBits>
    if(uxBits & ebBIT_RESET)
    7240:	f010 0b01 	ands.w	fp, r0, #1
    uxBits = xEventGroupWaitBits(_tVocProcEvent, ebBIT_VOC , pdFALSE, pdFALSE, portMAX_DELAY);
    7244:	4604      	mov	r4, r0
    if(uxBits & ebBIT_RESET)
    7246:	d011      	beq.n	726c <prvVocProcTask+0x60>
      MDrv_AUD_Stop();
    7248:	f7fc fd10 	bl	3c6c <MDrv_AUD_Stop>
      xEventGroupSetBits(_tVdTaskEvent, ebBIT_VD_RESET);
    724c:	2101      	movs	r1, #1
    724e:	6838      	ldr	r0, [r7, #0]
    7250:	f7f9 f8d2 	bl	3f8 <xEventGroupSetBits>
      xEventGroupClearBits(_tVocProcEvent, ebBIT_VOC);
    7254:	215f      	movs	r1, #95	; 0x5f
    7256:	6828      	ldr	r0, [r5, #0]
    7258:	f7f9 f8aa 	bl	3b0 <xEventGroupClearBits>
      xSemaphoreGive(_tVocSyncSem);
    725c:	2300      	movs	r3, #0
    725e:	461a      	mov	r2, r3
    7260:	4619      	mov	r1, r3
    7262:	f8d8 0000 	ldr.w	r0, [r8]
    7266:	f7f9 fb29 	bl	8bc <xQueueGenericSend>
      continue;
    726a:	e7e0      	b.n	722e <prvVocProcTask+0x22>
      if(MDrv_AUD_IsXrun())
    726c:	f7fc fd32 	bl	3cd4 <MDrv_AUD_IsXrun>
    7270:	b110      	cbz	r0, 7278 <prvVocProcTask+0x6c>
        if (uxBits & ebBIT_VD)
    7272:	0762      	lsls	r2, r4, #29
    7274:	f100 8089 	bmi.w	738a <prvVocProcTask+0x17e>
      if (MDrv_AUD_Start())
    7278:	f7fc fcc0 	bl	3bfc <MDrv_AUD_Start>
    727c:	b9f8      	cbnz	r0, 72be <prvVocProcTask+0xb2>
    if(MDrv_AUD_ReadPCM(_ps16VocTaskPcmBuf, VOC_TASK_READ_PCM_FRAME*MDrv_AUD_GetMicNo(), &u32ReturnCount, pdTRUE) == pdPASS)
    727e:	f7fc fc3b 	bl	3af8 <MDrv_AUD_GetMicNo>
    7282:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    7286:	0201      	lsls	r1, r0, #8
    7288:	2301      	movs	r3, #1
    728a:	aa03      	add	r2, sp, #12
    728c:	4630      	mov	r0, r6
    728e:	f7fc fd2b 	bl	3ce8 <MDrv_AUD_ReadPCM>
    7292:	2801      	cmp	r0, #1
    7294:	d022      	beq.n	72dc <prvVocProcTask+0xd0>
      if (uxBits & (ebBIT_VQ | ebBIT_VS))
    7296:	f014 0f12 	tst.w	r4, #18
    729a:	d006      	beq.n	72aa <prvVocProcTask+0x9e>
        if (err_try_again++ >= 3)
    729c:	f8da 3000 	ldr.w	r3, [sl]
    72a0:	1c5a      	adds	r2, r3, #1
    72a2:	2b02      	cmp	r3, #2
    72a4:	f8ca 2000 	str.w	r2, [sl]
    72a8:	d873      	bhi.n	7392 <prvVocProcTask+0x186>
      if (uxBits & ebBIT_VD)
    72aa:	0762      	lsls	r2, r4, #29
    72ac:	d40e      	bmi.n	72cc <prvVocProcTask+0xc0>
      VOC_ERROR("prvVocProcTask: MDrv_AUD_ReadPCM failed\n");
    72ae:	f8d9 3000 	ldr.w	r3, [r9]
    72b2:	07db      	lsls	r3, r3, #31
    72b4:	d5bb      	bpl.n	722e <prvVocProcTask+0x22>
    72b6:	4868      	ldr	r0, [pc, #416]	; (7458 <prvVocProcTask+0x24c>)
    72b8:	f7fc f9d4 	bl	3664 <UartSendTrace>
    72bc:	e7b7      	b.n	722e <prvVocProcTask+0x22>
        MApi_VOC_SwGainReset();
    72be:	f7ff fd1b 	bl	6cf8 <MApi_VOC_SwGainReset>
        MApi_VOC_HpfReset();
    72c2:	f7ff fc8b 	bl	6bdc <MApi_VOC_HpfReset>
        MApi_VOC_SrcInit48k();
    72c6:	f7fe fd25 	bl	5d14 <MApi_VOC_SrcInit48k>
    72ca:	e7d8      	b.n	727e <prvVocProcTask+0x72>
        if(MDrv_AUD_IsXrun())
    72cc:	f7fc fd02 	bl	3cd4 <MDrv_AUD_IsXrun>
    72d0:	2800      	cmp	r0, #0
    72d2:	d0ec      	beq.n	72ae <prvVocProcTask+0xa2>
          MApi_VOC_NotifyStatus(E_STATUS_XRUN);
    72d4:	2000      	movs	r0, #0
    72d6:	f7fe febf 	bl	6058 <MApi_VOC_NotifyStatus>
    72da:	e7e8      	b.n	72ae <prvVocProcTask+0xa2>
      bRet = MApi_VOC_SrcProcess48k(_ps16VocTaskPcmBuf, &u32ReturnCount);
    72dc:	a903      	add	r1, sp, #12
    72de:	4630      	mov	r0, r6
    72e0:	f7fe fc9e 	bl	5c20 <MApi_VOC_SrcProcess48k>
      if(!bRet)
    72e4:	b920      	cbnz	r0, 72f0 <prvVocProcTask+0xe4>
        VOC_ERROR("MApi_VOC_SrcProcess48k: failed\n");
    72e6:	f8d9 3000 	ldr.w	r3, [r9]
    72ea:	07db      	lsls	r3, r3, #31
    72ec:	f100 809a 	bmi.w	7424 <prvVocProcTask+0x218>
      bRet=MApi_VOC_Hpf(_ps16VocTaskPcmBuf, u32ReturnCount*2);
    72f0:	9903      	ldr	r1, [sp, #12]
    72f2:	0049      	lsls	r1, r1, #1
    72f4:	b289      	uxth	r1, r1
    72f6:	4630      	mov	r0, r6
    72f8:	f7ff fca2 	bl	6c40 <MApi_VOC_Hpf>
      if(!bRet)
    72fc:	b920      	cbnz	r0, 7308 <prvVocProcTask+0xfc>
        VOC_ERROR("MApi_VOC_Hpf: HPF failed\n");
    72fe:	f8d9 3000 	ldr.w	r3, [r9]
    7302:	07d8      	lsls	r0, r3, #31
    7304:	f100 8092 	bmi.w	742c <prvVocProcTask+0x220>
      bRet=MApi_VOC_SwGain(_ps16VocTaskPcmBuf, u32ReturnCount*2);
    7308:	9903      	ldr	r1, [sp, #12]
    730a:	0049      	lsls	r1, r1, #1
    730c:	b289      	uxth	r1, r1
    730e:	4630      	mov	r0, r6
    7310:	f7ff fd14 	bl	6d3c <MApi_VOC_SwGain>
      if(!bRet)
    7314:	b918      	cbnz	r0, 731e <prvVocProcTask+0x112>
        VOC_ERROR("MApi_VOC_SwGain: failed\n");
    7316:	f8d9 3000 	ldr.w	r3, [r9]
    731a:	07d9      	lsls	r1, r3, #31
    731c:	d47a      	bmi.n	7414 <prvVocProcTask+0x208>
      bRet = MApi_VOC_MicMap(_ps16VocTaskPcmBuf, &u32ReturnCount);
    731e:	a903      	add	r1, sp, #12
    7320:	4630      	mov	r0, r6
    7322:	f7fe ff3d 	bl	61a0 <MApi_VOC_MicMap>
      if(!bRet)
    7326:	b918      	cbnz	r0, 7330 <prvVocProcTask+0x124>
        VOC_ERROR("MApi_VOC_MicMap: failed\n");
    7328:	f8d9 3000 	ldr.w	r3, [r9]
    732c:	07da      	lsls	r2, r3, #31
    732e:	d475      	bmi.n	741c <prvVocProcTask+0x210>
      if(uxBits & ebBIT_VP_TEST)
    7330:	0623      	lsls	r3, r4, #24
    7332:	d458      	bmi.n	73e6 <prvVocProcTask+0x1da>
      if(uxBits & ebBIT_VP)
    7334:	0721      	lsls	r1, r4, #28
    7336:	d444      	bmi.n	73c2 <prvVocProcTask+0x1b6>
                            (void *)_ps16VocTaskPcmBuf, u32ReturnCount*2, 0);
    7338:	9a03      	ldr	r2, [sp, #12]
      xBytesSent = xStreamBufferSend( _tVocStreamBuffer,
    733a:	4b48      	ldr	r3, [pc, #288]	; (745c <prvVocProcTask+0x250>)
    733c:	0052      	lsls	r2, r2, #1
    733e:	6818      	ldr	r0, [r3, #0]
    7340:	4631      	mov	r1, r6
    7342:	2300      	movs	r3, #0
    7344:	f7fb fdba 	bl	2ebc <xStreamBufferSend>
      if (xBytesSent != u32ReturnCount*2)
    7348:	9b03      	ldr	r3, [sp, #12]
    734a:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
    734e:	d028      	beq.n	73a2 <prvVocProcTask+0x196>
        xEventGroupClearBits(_tVocProcEvent, ebBIT_VD);
    7350:	2104      	movs	r1, #4
    7352:	6828      	ldr	r0, [r5, #0]
    7354:	f7f9 f82c 	bl	3b0 <xEventGroupClearBits>
      if(uxBits & ebBIT_VQ)
    7358:	07a0      	lsls	r0, r4, #30
    735a:	f57f af68 	bpl.w	722e <prvVocProcTask+0x22>
        bRet = MApi_VOC_VQPort(_ps16VocTaskPcmBuf, u32ReturnCount);
    735e:	9903      	ldr	r1, [sp, #12]
    7360:	4630      	mov	r0, r6
    7362:	f7fe fe8d 	bl	6080 <MApi_VOC_VQPort>
       if(bRet)
    7366:	2800      	cmp	r0, #0
    7368:	f43f af61 	beq.w	722e <prvVocProcTask+0x22>
          wakeUpNum++;
    736c:	4a3c      	ldr	r2, [pc, #240]	; (7460 <prvVocProcTask+0x254>)
          printf("wake up num ---%d \n",wakeUpNum);
    736e:	483d      	ldr	r0, [pc, #244]	; (7464 <prvVocProcTask+0x258>)
          wakeUpNum++;
    7370:	6813      	ldr	r3, [r2, #0]
    7372:	3301      	adds	r3, #1
          printf("wake up num ---%d \n",wakeUpNum);
    7374:	4619      	mov	r1, r3
          wakeUpNum++;
    7376:	6013      	str	r3, [r2, #0]
          printf("wake up num ---%d \n",wakeUpNum);
    7378:	f7fc f982 	bl	3680 <printf>
          VOC_MSG("MApi_VOC_VQPort: VQ process success t = %d\n", xTaskGetTickCount() * portTICK_PERIOD_MS);
    737c:	f8d9 3000 	ldr.w	r3, [r9]
    7380:	0799      	lsls	r1, r3, #30
    7382:	d457      	bmi.n	7434 <prvVocProcTask+0x228>
          VocTaskVQPost();
    7384:	f7ff fef6 	bl	7174 <VocTaskVQPost>
    7388:	e751      	b.n	722e <prvVocProcTask+0x22>
          MApi_VOC_NotifyStatus(E_STATUS_XRUN);
    738a:	4658      	mov	r0, fp
    738c:	f7fe fe64 	bl	6058 <MApi_VOC_NotifyStatus>
    7390:	e772      	b.n	7278 <prvVocProcTask+0x6c>
          xEventGroupClearBits(_tVocProcEvent, ebBIT_VOC);
    7392:	215f      	movs	r1, #95	; 0x5f
    7394:	6828      	ldr	r0, [r5, #0]
    7396:	f7f9 f80b 	bl	3b0 <xEventGroupClearBits>
          err_try_again = 0;
    739a:	2300      	movs	r3, #0
    739c:	f8ca 3000 	str.w	r3, [sl]
    73a0:	e783      	b.n	72aa <prvVocProcTask+0x9e>
        if (uxBits & ebBIT_VD)
    73a2:	0763      	lsls	r3, r4, #29
    73a4:	d431      	bmi.n	740a <prvVocProcTask+0x1fe>
        else if (uxBits & (ebBIT_VQ | ebBIT_VS))
    73a6:	f014 0f12 	tst.w	r4, #18
    73aa:	d0d5      	beq.n	7358 <prvVocProcTask+0x14c>
          if (xStreamBufferIsFull(_tVocStreamBuffer))
    73ac:	4b2b      	ldr	r3, [pc, #172]	; (745c <prvVocProcTask+0x250>)
    73ae:	6818      	ldr	r0, [r3, #0]
    73b0:	f7fb fed0 	bl	3154 <xStreamBufferIsFull>
    73b4:	2800      	cmp	r0, #0
    73b6:	d0cf      	beq.n	7358 <prvVocProcTask+0x14c>
            xEventGroupSetBits(_tVdTaskEvent, ebBIT_VD_SKIP);
    73b8:	2104      	movs	r1, #4
    73ba:	6838      	ldr	r0, [r7, #0]
    73bc:	f7f9 f81c 	bl	3f8 <xEventGroupSetBits>
    73c0:	e7ca      	b.n	7358 <prvVocProcTask+0x14c>
        bRet = MApi_VOC_VPPort(_ps16VocTaskPcmBuf, &u32ReturnCount);
    73c2:	a903      	add	r1, sp, #12
    73c4:	4630      	mov	r0, r6
    73c6:	f7fe fea5 	bl	6114 <MApi_VOC_VPPort>
        if(!bRet)
    73ca:	2800      	cmp	r0, #0
    73cc:	d1b4      	bne.n	7338 <prvVocProcTask+0x12c>
          xEventGroupClearBits(_tVocProcEvent, ebBIT_VP);
    73ce:	2108      	movs	r1, #8
    73d0:	6828      	ldr	r0, [r5, #0]
    73d2:	f7f8 ffed 	bl	3b0 <xEventGroupClearBits>
          VOC_ERROR("MApi_VOC_VPPort: VP process failed\n");
    73d6:	f8d9 3000 	ldr.w	r3, [r9]
    73da:	07da      	lsls	r2, r3, #31
    73dc:	d5ac      	bpl.n	7338 <prvVocProcTask+0x12c>
    73de:	4822      	ldr	r0, [pc, #136]	; (7468 <prvVocProcTask+0x25c>)
    73e0:	f7fc f940 	bl	3664 <UartSendTrace>
    73e4:	e7a8      	b.n	7338 <prvVocProcTask+0x12c>
        bRet = MApi_VOC_VPPort(_ps16VocTaskPcmBuf, &u32ReturnCount);
    73e6:	a903      	add	r1, sp, #12
    73e8:	4630      	mov	r0, r6
    73ea:	f7fe fe93 	bl	6114 <MApi_VOC_VPPort>
        if(!bRet)
    73ee:	2800      	cmp	r0, #0
    73f0:	d1a0      	bne.n	7334 <prvVocProcTask+0x128>
          xEventGroupClearBits(_tVocProcEvent, ebBIT_VP_TEST);
    73f2:	2180      	movs	r1, #128	; 0x80
    73f4:	6828      	ldr	r0, [r5, #0]
    73f6:	f7f8 ffdb 	bl	3b0 <xEventGroupClearBits>
          VOC_ERROR("MApi_VOC_VPPort: VP process test failed\n");
    73fa:	f8d9 3000 	ldr.w	r3, [r9]
    73fe:	07d8      	lsls	r0, r3, #31
    7400:	d598      	bpl.n	7334 <prvVocProcTask+0x128>
    7402:	481a      	ldr	r0, [pc, #104]	; (746c <prvVocProcTask+0x260>)
    7404:	f7fc f92e 	bl	3664 <UartSendTrace>
    7408:	e794      	b.n	7334 <prvVocProcTask+0x128>
          xEventGroupSetBits(_tVdTaskEvent, ebBIT_VD_MOVE);
    740a:	2102      	movs	r1, #2
    740c:	6838      	ldr	r0, [r7, #0]
    740e:	f7f8 fff3 	bl	3f8 <xEventGroupSetBits>
    7412:	e7a1      	b.n	7358 <prvVocProcTask+0x14c>
        VOC_ERROR("MApi_VOC_SwGain: failed\n");
    7414:	4816      	ldr	r0, [pc, #88]	; (7470 <prvVocProcTask+0x264>)
    7416:	f7fc f925 	bl	3664 <UartSendTrace>
    741a:	e780      	b.n	731e <prvVocProcTask+0x112>
        VOC_ERROR("MApi_VOC_MicMap: failed\n");
    741c:	4815      	ldr	r0, [pc, #84]	; (7474 <prvVocProcTask+0x268>)
    741e:	f7fc f921 	bl	3664 <UartSendTrace>
    7422:	e785      	b.n	7330 <prvVocProcTask+0x124>
        VOC_ERROR("MApi_VOC_SrcProcess48k: failed\n");
    7424:	4814      	ldr	r0, [pc, #80]	; (7478 <prvVocProcTask+0x26c>)
    7426:	f7fc f91d 	bl	3664 <UartSendTrace>
    742a:	e761      	b.n	72f0 <prvVocProcTask+0xe4>
        VOC_ERROR("MApi_VOC_Hpf: HPF failed\n");
    742c:	4813      	ldr	r0, [pc, #76]	; (747c <prvVocProcTask+0x270>)
    742e:	f7fc f919 	bl	3664 <UartSendTrace>
    7432:	e769      	b.n	7308 <prvVocProcTask+0xfc>
          VOC_MSG("MApi_VOC_VQPort: VQ process success t = %d\n", xTaskGetTickCount() * portTICK_PERIOD_MS);
    7434:	f7fa f81e 	bl	1474 <xTaskGetTickCount>
    7438:	4601      	mov	r1, r0
    743a:	4811      	ldr	r0, [pc, #68]	; (7480 <prvVocProcTask+0x274>)
    743c:	f7fc f912 	bl	3664 <UartSendTrace>
    7440:	e7a0      	b.n	7384 <prvVocProcTask+0x178>
  VOC_MSG("VocProcTask Start\n");
    7442:	4810      	ldr	r0, [pc, #64]	; (7484 <prvVocProcTask+0x278>)
    7444:	f7fc f90e 	bl	3664 <UartSendTrace>
    7448:	e6ea      	b.n	7220 <prvVocProcTask+0x14>
    744a:	bf00      	nop
    744c:	00030970 	.word	0x00030970
    7450:	0003076c 	.word	0x0003076c
    7454:	0002e314 	.word	0x0002e314
    7458:	0000c018 	.word	0x0000c018
    745c:	00030974 	.word	0x00030974
    7460:	000311fc 	.word	0x000311fc
    7464:	0000bfd0 	.word	0x0000bfd0
    7468:	0000bfa0 	.word	0x0000bfa0
    746c:	0000bf6c 	.word	0x0000bf6c
    7470:	0000bf24 	.word	0x0000bf24
    7474:	0000bf48 	.word	0x0000bf48
    7478:	0000bed4 	.word	0x0000bed4
    747c:	0000bf00 	.word	0x0000bf00
    7480:	0000bfe4 	.word	0x0000bfe4
    7484:	0000beb8 	.word	0x0000beb8
    7488:	0000ca14 	.word	0x0000ca14
    748c:	0003099c 	.word	0x0003099c
    7490:	000311f8 	.word	0x000311f8

00007494 <VocTaskReset>:
{
    7494:	b508      	push	{r3, lr}
  xEventGroupSetBits(_tVocProcEvent, ebBIT_RESET);
    7496:	4b06      	ldr	r3, [pc, #24]	; (74b0 <VocTaskReset+0x1c>)
    7498:	2101      	movs	r1, #1
    749a:	6818      	ldr	r0, [r3, #0]
    749c:	f7f8 ffac 	bl	3f8 <xEventGroupSetBits>
  xSemaphoreTake(_tVocSyncSem, portMAX_DELAY);
    74a0:	4b04      	ldr	r3, [pc, #16]	; (74b4 <VocTaskReset+0x20>)
    74a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    74a6:	6818      	ldr	r0, [r3, #0]
}
    74a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xSemaphoreTake(_tVocSyncSem, portMAX_DELAY);
    74ac:	f7f9 bc9a 	b.w	de4 <xQueueSemaphoreTake>
    74b0:	00030970 	.word	0x00030970
    74b4:	0003099c 	.word	0x0003099c

000074b8 <VocTaskEnableFunc>:
  if(eFunc != E_FUNC_NONE && eFunc < E_FUNC_NUM)
    74b8:	1e4a      	subs	r2, r1, #1
    74ba:	2a06      	cmp	r2, #6
{
    74bc:	b538      	push	{r3, r4, r5, lr}
  if(eFunc != E_FUNC_NONE && eFunc < E_FUNC_NUM)
    74be:	d817      	bhi.n	74f0 <VocTaskEnableFunc+0x38>
    if (bEnable)
    74c0:	460c      	mov	r4, r1
    74c2:	b158      	cbz	r0, 74dc <VocTaskEnableFunc+0x24>
      if(eFunc == E_FUNC_VQ)
    74c4:	2901      	cmp	r1, #1
    74c6:	d018      	beq.n	74fa <VocTaskEnableFunc+0x42>
      else if (eFunc == E_FUNC_VD)
    74c8:	4d1d      	ldr	r5, [pc, #116]	; (7540 <VocTaskEnableFunc+0x88>)
    74ca:	2902      	cmp	r1, #2
    74cc:	6828      	ldr	r0, [r5, #0]
    74ce:	d027      	beq.n	7520 <VocTaskEnableFunc+0x68>
      xEventGroupSetBits(_tVocProcEvent, (1 << eFunc));
    74d0:	2101      	movs	r1, #1
    74d2:	40a1      	lsls	r1, r4
}
    74d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      xEventGroupSetBits(_tVocProcEvent, (1 << eFunc));
    74d8:	f7f8 bf8e 	b.w	3f8 <xEventGroupSetBits>
      if(eFunc == E_FUNC_VD)
    74dc:	2902      	cmp	r1, #2
    74de:	d013      	beq.n	7508 <VocTaskEnableFunc+0x50>
      xEventGroupClearBits(_tVocProcEvent, (1 << eFunc));
    74e0:	4b17      	ldr	r3, [pc, #92]	; (7540 <VocTaskEnableFunc+0x88>)
    74e2:	2101      	movs	r1, #1
    74e4:	6818      	ldr	r0, [r3, #0]
    74e6:	40a1      	lsls	r1, r4
}
    74e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      xEventGroupClearBits(_tVocProcEvent, (1 << eFunc));
    74ec:	f7f8 bf60 	b.w	3b0 <xEventGroupClearBits>
    VOC_ERROR("VocTaskEnableFunc failed: parameter error\n");
    74f0:	4b14      	ldr	r3, [pc, #80]	; (7544 <VocTaskEnableFunc+0x8c>)
    74f2:	681b      	ldr	r3, [r3, #0]
    74f4:	07db      	lsls	r3, r3, #31
    74f6:	d40e      	bmi.n	7516 <VocTaskEnableFunc+0x5e>
}
    74f8:	bd38      	pop	{r3, r4, r5, pc}
        if (_eVocVQMode == E_VQ_MODE_PM)
    74fa:	4b13      	ldr	r3, [pc, #76]	; (7548 <VocTaskEnableFunc+0x90>)
    74fc:	781b      	ldrb	r3, [r3, #0]
    74fe:	2b02      	cmp	r3, #2
    7500:	d015      	beq.n	752e <VocTaskEnableFunc+0x76>
    7502:	4b0f      	ldr	r3, [pc, #60]	; (7540 <VocTaskEnableFunc+0x88>)
    7504:	6818      	ldr	r0, [r3, #0]
    7506:	e7e3      	b.n	74d0 <VocTaskEnableFunc+0x18>
        xEventGroupClearBits(_tVdTaskEvent, ebBIT_VD_MOVE);
    7508:	4b10      	ldr	r3, [pc, #64]	; (754c <VocTaskEnableFunc+0x94>)
    750a:	6818      	ldr	r0, [r3, #0]
    750c:	f7f8 ff50 	bl	3b0 <xEventGroupClearBits>
        MApi_VOC_VDReset();
    7510:	f7fe fcc6 	bl	5ea0 <MApi_VOC_VDReset>
    7514:	e7e4      	b.n	74e0 <VocTaskEnableFunc+0x28>
    VOC_ERROR("VocTaskEnableFunc failed: parameter error\n");
    7516:	480e      	ldr	r0, [pc, #56]	; (7550 <VocTaskEnableFunc+0x98>)
}
    7518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    VOC_ERROR("VocTaskEnableFunc failed: parameter error\n");
    751c:	f7fc b8a2 	b.w	3664 <UartSendTrace>
        if (xEventGroupGetBits(_tVocProcEvent) & ebBIT_VS)
    7520:	2100      	movs	r1, #0
    7522:	f7f8 ff45 	bl	3b0 <xEventGroupClearBits>
    7526:	06c2      	lsls	r2, r0, #27
    7528:	d404      	bmi.n	7534 <VocTaskEnableFunc+0x7c>
    752a:	6828      	ldr	r0, [r5, #0]
    752c:	e7d0      	b.n	74d0 <VocTaskEnableFunc+0x18>
          MDrv_PM_Suspend();
    752e:	f7fc fea1 	bl	4274 <MDrv_PM_Suspend>
    7532:	e7e6      	b.n	7502 <VocTaskEnableFunc+0x4a>
          xEventGroupClearBits(_tVocProcEvent, ebBIT_VS); //turn off seamless
    7534:	2110      	movs	r1, #16
    7536:	6828      	ldr	r0, [r5, #0]
    7538:	f7f8 ff3a 	bl	3b0 <xEventGroupClearBits>
    753c:	e7f5      	b.n	752a <VocTaskEnableFunc+0x72>
    753e:	bf00      	nop
    7540:	00030970 	.word	0x00030970
    7544:	0000ca14 	.word	0x0000ca14
    7548:	00025f0e 	.word	0x00025f0e
    754c:	0003076c 	.word	0x0003076c
    7550:	0000bd68 	.word	0x0000bd68

00007554 <VocTaskStart>:
    }
  } //for
}

void VocTaskStart(void)
{
    7554:	b500      	push	{lr}
    7556:	b085      	sub	sp, #20
  _tVocProcEvent = xEventGroupCreate();
    7558:	f7f8 fe90 	bl	27c <xEventGroupCreate>
    755c:	4b2f      	ldr	r3, [pc, #188]	; (761c <VocTaskStart+0xc8>)
    755e:	6018      	str	r0, [r3, #0]
  configASSERT( _tVocProcEvent );
    7560:	2800      	cmp	r0, #0
    7562:	d040      	beq.n	75e6 <VocTaskStart+0x92>

  _tVocSyncSem = xSemaphoreCreateBinary();
    7564:	2203      	movs	r2, #3
    7566:	2100      	movs	r1, #0
    7568:	2001      	movs	r0, #1
    756a:	f7f9 f959 	bl	820 <xQueueGenericCreate>
    756e:	4b2c      	ldr	r3, [pc, #176]	; (7620 <VocTaskStart+0xcc>)
    7570:	6018      	str	r0, [r3, #0]
  configASSERT( _tVocSyncSem );
    7572:	2800      	cmp	r0, #0
    7574:	d02e      	beq.n	75d4 <VocTaskStart+0x80>

  _tVocStreamBuffer = xStreamBufferCreateStatic(sizeof(_ps16VocStreamBuf)-1,
    7576:	4b2b      	ldr	r3, [pc, #172]	; (7624 <VocTaskStart+0xd0>)
    7578:	9300      	str	r3, [sp, #0]
    757a:	2200      	movs	r2, #0
    757c:	4b2a      	ldr	r3, [pc, #168]	; (7628 <VocTaskStart+0xd4>)
    757e:	4611      	mov	r1, r2
    7580:	f647 0001 	movw	r0, #30721	; 0x7801
    7584:	f7fb fbdc 	bl	2d40 <xStreamBufferGenericCreateStatic>
    7588:	4b28      	ldr	r3, [pc, #160]	; (762c <VocTaskStart+0xd8>)
    758a:	6018      	str	r0, [r3, #0]
                                                0,
                                               (U8 *)_ps16VocStreamBuf,
                                               &_tVocStreamBufferStruct );
  configASSERT( _tVocStreamBuffer );
    758c:	2800      	cmp	r0, #0
    758e:	d033      	beq.n	75f8 <VocTaskStart+0xa4>

  //VOC_MSG("VocTaskStart: buffer space availabe = %d\n", xStreamBufferSpacesAvailable(_tVocStreamBuffer));

  _tVdTaskEvent = xEventGroupCreate();
    7590:	f7f8 fe74 	bl	27c <xEventGroupCreate>
    7594:	4b26      	ldr	r3, [pc, #152]	; (7630 <VocTaskStart+0xdc>)
    7596:	6018      	str	r0, [r3, #0]
  configASSERT( _tVdTaskEvent );
    7598:	2800      	cmp	r0, #0
    759a:	d036      	beq.n	760a <VocTaskStart+0xb6>

  /* Create that task that handles the console itself. */
  xTaskCreateStatic(prvVocProcTask, "VOC", VOC_TASK_STACK_SIZE, NULL, VOC_TASK_PRIORITY, _tVocTaskStack, &_tVocTaskBuffer);
    759c:	4b25      	ldr	r3, [pc, #148]	; (7634 <VocTaskStart+0xe0>)
    759e:	4a26      	ldr	r2, [pc, #152]	; (7638 <VocTaskStart+0xe4>)
    75a0:	9302      	str	r3, [sp, #8]
    75a2:	2302      	movs	r3, #2
    75a4:	e9cd 3200 	strd	r3, r2, [sp]
    75a8:	4924      	ldr	r1, [pc, #144]	; (763c <VocTaskStart+0xe8>)
    75aa:	4825      	ldr	r0, [pc, #148]	; (7640 <VocTaskStart+0xec>)
    75ac:	2300      	movs	r3, #0
    75ae:	f44f 7200 	mov.w	r2, #512	; 0x200
    75b2:	f7f9 fdcf 	bl	1154 <xTaskCreateStatic>
  xTaskCreateStatic(prvVdProcTask, "VD", VD_TASK_STACK_SIZE, NULL, VD_TASK_PRIORITY, _tVdTaskStack, &_tVdTaskBuffer);
    75b6:	4b23      	ldr	r3, [pc, #140]	; (7644 <VocTaskStart+0xf0>)
    75b8:	4a23      	ldr	r2, [pc, #140]	; (7648 <VocTaskStart+0xf4>)
    75ba:	9302      	str	r3, [sp, #8]
    75bc:	2303      	movs	r3, #3
    75be:	e9cd 3200 	strd	r3, r2, [sp]
    75c2:	4922      	ldr	r1, [pc, #136]	; (764c <VocTaskStart+0xf8>)
    75c4:	4822      	ldr	r0, [pc, #136]	; (7650 <VocTaskStart+0xfc>)
    75c6:	2300      	movs	r3, #0
    75c8:	2280      	movs	r2, #128	; 0x80
    75ca:	f7f9 fdc3 	bl	1154 <xTaskCreateStatic>
}
    75ce:	b005      	add	sp, #20
    75d0:	f85d fb04 	ldr.w	pc, [sp], #4
    75d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    75d8:	f383 8811 	msr	BASEPRI, r3
    75dc:	f3bf 8f6f 	isb	sy
    75e0:	f3bf 8f4f 	dsb	sy
  configASSERT( _tVocSyncSem );
    75e4:	e7fe      	b.n	75e4 <VocTaskStart+0x90>
    75e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    75ea:	f383 8811 	msr	BASEPRI, r3
    75ee:	f3bf 8f6f 	isb	sy
    75f2:	f3bf 8f4f 	dsb	sy
  configASSERT( _tVocProcEvent );
    75f6:	e7fe      	b.n	75f6 <VocTaskStart+0xa2>
    75f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    75fc:	f383 8811 	msr	BASEPRI, r3
    7600:	f3bf 8f6f 	isb	sy
    7604:	f3bf 8f4f 	dsb	sy
  configASSERT( _tVocStreamBuffer );
    7608:	e7fe      	b.n	7608 <VocTaskStart+0xb4>
    760a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    760e:	f383 8811 	msr	BASEPRI, r3
    7612:	f3bf 8f6f 	isb	sy
    7616:	f3bf 8f4f 	dsb	sy
  configASSERT( _tVdTaskEvent );
    761a:	e7fe      	b.n	761a <VocTaskStart+0xc6>
    761c:	00030970 	.word	0x00030970
    7620:	0003099c 	.word	0x0003099c
    7624:	00030978 	.word	0x00030978
    7628:	00026b10 	.word	0x00026b10
    762c:	00030974 	.word	0x00030974
    7630:	0003076c 	.word	0x0003076c
    7634:	000309a0 	.word	0x000309a0
    7638:	000309f8 	.word	0x000309f8
    763c:	0000bda0 	.word	0x0000bda0
    7640:	0000720d 	.word	0x0000720d
    7644:	00030714 	.word	0x00030714
    7648:	00030770 	.word	0x00030770
    764c:	0000bda4 	.word	0x0000bda4
    7650:	00007051 	.word	0x00007051

00007654 <prvMbxProcTask>:
#if defined(CONFIG_VOC_TUNE)
static U8 _ps16MbxTaskMsgBuf[1024];
#endif

static void prvMbxProcTask(void *pvParameters)
{
    7654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  BOOL bRet;

  /* Remove compiler warning about unused parameter. */
  (void) pvParameters;

  MBX_MSG("MbxProcTask Start\r\n");
    7658:	4d8c      	ldr	r5, [pc, #560]	; (788c <prvMbxProcTask+0x238>)
    765a:	682b      	ldr	r3, [r5, #0]
    765c:	0758      	lsls	r0, r3, #29
{
    765e:	b087      	sub	sp, #28
  MBX_MSG("MbxProcTask Start\r\n");
    7660:	f100 810f 	bmi.w	7882 <prvMbxProcTask+0x22e>
     }
     MDrv_MBX_RecvMsgEndExt(&tMsg, bRet);
    }
    else
    {
      MBX_ERROR("MDrv_MBX_RecvMsg received failed\r\n");
    7664:	4f8a      	ldr	r7, [pc, #552]	; (7890 <prvMbxProcTask+0x23c>)
           MBX_ERROR("Command Idx failed\r\n");
    7666:	f8df 8234 	ldr.w	r8, [pc, #564]	; 789c <prvMbxProcTask+0x248>
      MBX_MSG("Class = %d, Idx = %d, ms = %d\r\n", tMsg.u8MsgClass, tMsg.u8Index, xTaskGetTickCount()*portTICK_PERIOD_MS);
    766a:	4e8a      	ldr	r6, [pc, #552]	; (7894 <prvMbxProcTask+0x240>)
    memset(&tMsg, 0, sizeof(tMsg));
    766c:	2300      	movs	r3, #0
    if(E_MBX_SUCCESS == MDrv_MBX_RecvMsg(&tMsg, TRUE))
    766e:	2101      	movs	r1, #1
    7670:	a801      	add	r0, sp, #4
    memset(&tMsg, 0, sizeof(tMsg));
    7672:	e9cd 3301 	strd	r3, r3, [sp, #4]
    7676:	e9cd 3303 	strd	r3, r3, [sp, #12]
    767a:	f8ad 3014 	strh.w	r3, [sp, #20]
    if(E_MBX_SUCCESS == MDrv_MBX_RecvMsg(&tMsg, TRUE))
    767e:	f7fc fd0f 	bl	40a0 <MDrv_MBX_RecvMsg>
      MBX_MSG("Class = %d, Idx = %d, ms = %d\r\n", tMsg.u8MsgClass, tMsg.u8Index, xTaskGetTickCount()*portTICK_PERIOD_MS);
    7682:	682b      	ldr	r3, [r5, #0]
    if(E_MBX_SUCCESS == MDrv_MBX_RecvMsg(&tMsg, TRUE))
    7684:	2800      	cmp	r0, #0
    7686:	f040 80db 	bne.w	7840 <prvMbxProcTask+0x1ec>
      MBX_MSG("Class = %d, Idx = %d, ms = %d\r\n", tMsg.u8MsgClass, tMsg.u8Index, xTaskGetTickCount()*portTICK_PERIOD_MS);
    768a:	0759      	lsls	r1, r3, #29
    768c:	f89d 4008 	ldrb.w	r4, [sp, #8]
    7690:	f100 80dd 	bmi.w	784e <prvMbxProcTask+0x1fa>
       switch(tMsg.u8Index)
    7694:	1e63      	subs	r3, r4, #1
    7696:	2b1c      	cmp	r3, #28
    7698:	f200 80bb 	bhi.w	7812 <prvMbxProcTask+0x1be>
    769c:	e8df f003 	tbb	[pc, r3]
    76a0:	af5f0f87 	.word	0xaf5f0f87
    76a4:	3d469b72 	.word	0x3d469b72
    76a8:	171d262f 	.word	0x171d262f
    76ac:	b9b9b9a5 	.word	0xb9b9b9a5
    76b0:	b97cb9b9 	.word	0xb97cb9b9
    76b4:	6992b9b9 	.word	0x6992b9b9
    76b8:	b956b9b9 	.word	0xb956b9b9
    76bc:	4a          	.byte	0x4a
    76bd:	00          	.byte	0x00
           if(tMsg.u8ParameterCount == 8)
    76be:	f89d 3009 	ldrb.w	r3, [sp, #9]
    76c2:	2b08      	cmp	r3, #8
    76c4:	f000 80d0 	beq.w	7868 <prvMbxProcTask+0x214>
           else if(tMsg.u8ParameterCount == 10)
    76c8:	2b0a      	cmp	r3, #10
    76ca:	f000 80ab 	beq.w	7824 <prvMbxProcTask+0x1d0>
    bRet = TRUE;
    76ce:	2401      	movs	r4, #1
     MDrv_MBX_RecvMsgEndExt(&tMsg, bRet);
    76d0:	4621      	mov	r1, r4
    76d2:	a801      	add	r0, sp, #4
    76d4:	f7fc fd24 	bl	4120 <MDrv_MBX_RecvMsgEndExt>
    76d8:	e7c8      	b.n	766c <prvMbxProcTask+0x18>
           if(tMsg.u8ParameterCount == 1)
    76da:	f89d 4009 	ldrb.w	r4, [sp, #9]
    76de:	2c01      	cmp	r4, #1
    76e0:	d1f5      	bne.n	76ce <prvMbxProcTask+0x7a>
             MDrv_AUD_I2SEnable((BOOL)tMsg.u8Parameters[0]);
    76e2:	f89d 000a 	ldrb.w	r0, [sp, #10]
    76e6:	f7fc fb9f 	bl	3e28 <MDrv_AUD_I2SEnable>
    76ea:	e7f1      	b.n	76d0 <prvMbxProcTask+0x7c>
           if(tMsg.u8ParameterCount == 1)
    76ec:	f89d 4009 	ldrb.w	r4, [sp, #9]
    76f0:	2c01      	cmp	r4, #1
    76f2:	d1ec      	bne.n	76ce <prvMbxProcTask+0x7a>
             MApi_VOC_SetMicSwGain(tMsg.u8Parameters[0]);
    76f4:	f89d 000a 	ldrb.w	r0, [sp, #10]
    76f8:	f7ff faf6 	bl	6ce8 <MApi_VOC_SetMicSwGain>
    76fc:	e7e8      	b.n	76d0 <prvMbxProcTask+0x7c>
           if(tMsg.u8ParameterCount == 3)
    76fe:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7702:	2b03      	cmp	r3, #3
    7704:	d1e3      	bne.n	76ce <prvMbxProcTask+0x7a>
             bRet = MDrv_AUD_SetMicNo((AUD_MIC_e)tMsg.u8Parameters[0]);
    7706:	f89d 000a 	ldrb.w	r0, [sp, #10]
    770a:	f7fc f8fb 	bl	3904 <MDrv_AUD_SetMicNo>
    770e:	4604      	mov	r4, r0
             MDrv_AUD_SetBitWidth((AUD_Width_e)tMsg.u8Parameters[2]);
    7710:	f89d 000c 	ldrb.w	r0, [sp, #12]
    7714:	f7fc f8bc 	bl	3890 <MDrv_AUD_SetBitWidth>
    7718:	e7da      	b.n	76d0 <prvMbxProcTask+0x7c>
           if(tMsg.u8ParameterCount == 1)
    771a:	f89d 4009 	ldrb.w	r4, [sp, #9]
    771e:	2c01      	cmp	r4, #1
    7720:	d1d5      	bne.n	76ce <prvMbxProcTask+0x7a>
             MDrv_AUD_SigGenEnable((BOOL)tMsg.u8Parameters[0]);
    7722:	f89d 000a 	ldrb.w	r0, [sp, #10]
    7726:	f7fc fa47 	bl	3bb8 <MDrv_AUD_SigGenEnable>
    772a:	e7d1      	b.n	76d0 <prvMbxProcTask+0x7c>
           VocTaskReset();
    772c:	f7ff feb2 	bl	7494 <VocTaskReset>
    bRet = TRUE;
    7730:	2401      	movs	r4, #1
           break;
    7732:	e7cd      	b.n	76d0 <prvMbxProcTask+0x7c>
           if(tMsg.u8ParameterCount == 2)
    7734:	f89d 3009 	ldrb.w	r3, [sp, #9]
    7738:	2b02      	cmp	r3, #2
    773a:	d1c8      	bne.n	76ce <prvMbxProcTask+0x7a>
             MApi_VOC_MicMapConfig(tMsg.u8Parameters[0], tMsg.u8Parameters[1]);
    773c:	f89d 100b 	ldrb.w	r1, [sp, #11]
    7740:	f89d 000a 	ldrb.w	r0, [sp, #10]
    7744:	f7fe fd10 	bl	6168 <MApi_VOC_MicMapConfig>
    bRet = TRUE;
    7748:	2401      	movs	r4, #1
    774a:	e7c1      	b.n	76d0 <prvMbxProcTask+0x7c>
           if(tMsg.u8ParameterCount == 1)
    774c:	f89d 4009 	ldrb.w	r4, [sp, #9]
    7750:	2c01      	cmp	r4, #1
    7752:	d1bc      	bne.n	76ce <prvMbxProcTask+0x7a>
             MApi_VOC_SetSwGain(tMsg.u8Parameters[0]);
    7754:	f89d 000a 	ldrb.w	r0, [sp, #10]
    7758:	f7ff fae8 	bl	6d2c <MApi_VOC_SetSwGain>
    775c:	e7b8      	b.n	76d0 <prvMbxProcTask+0x7c>
           if(tMsg.u8ParameterCount == 1)
    775e:	f89d 4009 	ldrb.w	r4, [sp, #9]
    7762:	2c01      	cmp	r4, #1
    7764:	d1b3      	bne.n	76ce <prvMbxProcTask+0x7a>
             VocTaskEnableFunc((BOOL)tMsg.u8Parameters[0], E_FUNC_VQ);
    7766:	4621      	mov	r1, r4
    7768:	f89d 000a 	ldrb.w	r0, [sp, #10]
    776c:	f7ff fea4 	bl	74b8 <VocTaskEnableFunc>
    7770:	e7ae      	b.n	76d0 <prvMbxProcTask+0x7c>
           if(tMsg.u8ParameterCount == 1)
    7772:	f89d 4009 	ldrb.w	r4, [sp, #9]
    7776:	2c01      	cmp	r4, #1
    7778:	d1a9      	bne.n	76ce <prvMbxProcTask+0x7a>
             MApi_VOC_HpfConfig((S8)tMsg.u8Parameters[0]);
    777a:	f99d 000a 	ldrsb.w	r0, [sp, #10]
    777e:	f7ff fa81 	bl	6c84 <MApi_VOC_HpfConfig>
    7782:	e7a5      	b.n	76d0 <prvMbxProcTask+0x7c>
           if(tMsg.u8ParameterCount == 1)
    7784:	f89d 4009 	ldrb.w	r4, [sp, #9]
    7788:	2c01      	cmp	r4, #1
    778a:	d1a0      	bne.n	76ce <prvMbxProcTask+0x7a>
             VocTaskEnableFunc(tMsg.u8Parameters[0], E_FUNC_VP);
    778c:	2103      	movs	r1, #3
    778e:	f89d 000a 	ldrb.w	r0, [sp, #10]
    7792:	f7ff fe91 	bl	74b8 <VocTaskEnableFunc>
    7796:	e79b      	b.n	76d0 <prvMbxProcTask+0x7c>
           if(tMsg.u8ParameterCount == 1)
    7798:	f89d 4009 	ldrb.w	r4, [sp, #9]
    779c:	2c01      	cmp	r4, #1
    779e:	d196      	bne.n	76ce <prvMbxProcTask+0x7a>
             if (tMsg.u8Parameters[0])
    77a0:	f89d 300a 	ldrb.w	r3, [sp, #10]
    77a4:	2b00      	cmp	r3, #0
    77a6:	d067      	beq.n	7878 <prvMbxProcTask+0x224>
               MDrv_PM_Suspend();
    77a8:	f7fc fd64 	bl	4274 <MDrv_PM_Suspend>
    77ac:	e790      	b.n	76d0 <prvMbxProcTask+0x7c>
           if(tMsg.u8ParameterCount == 1)
    77ae:	f89d 3009 	ldrb.w	r3, [sp, #9]
    77b2:	2b01      	cmp	r3, #1
    77b4:	d18c      	bne.n	76d0 <prvMbxProcTask+0x7c>
             VocTaskEnableFunc((BOOL)tMsg.u8Parameters[0], E_FUNC_VD);
    77b6:	2102      	movs	r1, #2
    77b8:	f89d 000a 	ldrb.w	r0, [sp, #10]
    bRet = TRUE;
    77bc:	461c      	mov	r4, r3
             VocTaskEnableFunc((BOOL)tMsg.u8Parameters[0], E_FUNC_VD);
    77be:	f7ff fe7b 	bl	74b8 <VocTaskEnableFunc>
    77c2:	e785      	b.n	76d0 <prvMbxProcTask+0x7c>
           if(tMsg.u8ParameterCount == 1)
    77c4:	f89d 4009 	ldrb.w	r4, [sp, #9]
    77c8:	2c01      	cmp	r4, #1
    77ca:	d180      	bne.n	76ce <prvMbxProcTask+0x7a>
             MApi_VOC_HpfEnable(tMsg.u8Parameters[0]);
    77cc:	f89d 000a 	ldrb.w	r0, [sp, #10]
    77d0:	f7ff fa72 	bl	6cb8 <MApi_VOC_HpfEnable>
    77d4:	e77c      	b.n	76d0 <prvMbxProcTask+0x7c>
           if(tMsg.u8ParameterCount == 1)
    77d6:	f89d 4009 	ldrb.w	r4, [sp, #9]
    77da:	2c01      	cmp	r4, #1
    77dc:	f47f af77 	bne.w	76ce <prvMbxProcTask+0x7a>
             Mapi_VOC_VPConfig((U8)tMsg.u8Parameters[0]);
    77e0:	f89d 000a 	ldrb.w	r0, [sp, #10]
    77e4:	f7fe fcba 	bl	615c <Mapi_VOC_VPConfig>
    77e8:	e772      	b.n	76d0 <prvMbxProcTask+0x7c>
           if(tMsg.u8ParameterCount == 1)
    77ea:	f89d 4009 	ldrb.w	r4, [sp, #9]
    77ee:	2c01      	cmp	r4, #1
    77f0:	f47f af6d 	bne.w	76ce <prvMbxProcTask+0x7a>
             MDrv_AUD_AECEnable((BOOL)tMsg.u8Parameters[0]);
    77f4:	f89d 000a 	ldrb.w	r0, [sp, #10]
    77f8:	f7fc fb38 	bl	3e6c <MDrv_AUD_AECEnable>
    77fc:	e768      	b.n	76d0 <prvMbxProcTask+0x7c>
           if(tMsg.u8ParameterCount == 1)
    77fe:	f89d 4009 	ldrb.w	r4, [sp, #9]
    7802:	2c01      	cmp	r4, #1
    7804:	f47f af63 	bne.w	76ce <prvMbxProcTask+0x7a>
             VocTaskVQConfig((VOC_VQMode_e)tMsg.u8Parameters[0]);
    7808:	f89d 000a 	ldrb.w	r0, [sp, #10]
    780c:	f7ff fc9e 	bl	714c <VocTaskVQConfig>
    7810:	e75e      	b.n	76d0 <prvMbxProcTask+0x7c>
           MBX_ERROR("Command Idx failed\r\n");
    7812:	682b      	ldr	r3, [r5, #0]
    7814:	07da      	lsls	r2, r3, #31
    7816:	f57f af5a 	bpl.w	76ce <prvMbxProcTask+0x7a>
    781a:	4640      	mov	r0, r8
    781c:	f7fb ff22 	bl	3664 <UartSendTrace>
    bRet = TRUE;
    7820:	2401      	movs	r4, #1
    7822:	e755      	b.n	76d0 <prvMbxProcTask+0x7c>
             MBX_MSG_GET_2U32plusU16(tMsg, u32Param1, u32Param2, u16Param3)
    7824:	f89d 2013 	ldrb.w	r2, [sp, #19]
    7828:	f89d 3012 	ldrb.w	r3, [sp, #18]
             MApi_VOC_VDConfigExt(u32Param1, u32Param2, u16Param3);
    782c:	f8dd 100e 	ldr.w	r1, [sp, #14]
    7830:	f8dd 000a 	ldr.w	r0, [sp, #10]
    7834:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    7838:	f7fe fb04 	bl	5e44 <MApi_VOC_VDConfigExt>
    bRet = TRUE;
    783c:	2401      	movs	r4, #1
    783e:	e747      	b.n	76d0 <prvMbxProcTask+0x7c>
      MBX_ERROR("MDrv_MBX_RecvMsg received failed\r\n");
    7840:	07db      	lsls	r3, r3, #31
    7842:	f57f af13 	bpl.w	766c <prvMbxProcTask+0x18>
    7846:	4638      	mov	r0, r7
    7848:	f7fb ff0c 	bl	3664 <UartSendTrace>
    784c:	e70e      	b.n	766c <prvMbxProcTask+0x18>
      MBX_MSG("Class = %d, Idx = %d, ms = %d\r\n", tMsg.u8MsgClass, tMsg.u8Index, xTaskGetTickCount()*portTICK_PERIOD_MS);
    784e:	f89d 9007 	ldrb.w	r9, [sp, #7]
    7852:	f7f9 fe0f 	bl	1474 <xTaskGetTickCount>
    7856:	4622      	mov	r2, r4
    7858:	4603      	mov	r3, r0
    785a:	4649      	mov	r1, r9
    785c:	4630      	mov	r0, r6
    785e:	f7fb ff01 	bl	3664 <UartSendTrace>
    7862:	f89d 4008 	ldrb.w	r4, [sp, #8]
    7866:	e715      	b.n	7694 <prvMbxProcTask+0x40>
             MApi_VOC_VDConfig(u32Param1, u32Param2);
    7868:	f8dd 100e 	ldr.w	r1, [sp, #14]
    786c:	f8dd 000a 	ldr.w	r0, [sp, #10]
    7870:	f7fe fabe 	bl	5df0 <MApi_VOC_VDConfig>
    bRet = TRUE;
    7874:	2401      	movs	r4, #1
    7876:	e72b      	b.n	76d0 <prvMbxProcTask+0x7c>
               MDrv_PM_Resume();
    7878:	f7fc fd18 	bl	42ac <MDrv_PM_Resume>
               VocTaskReset();
    787c:	f7ff fe0a 	bl	7494 <VocTaskReset>
    7880:	e726      	b.n	76d0 <prvMbxProcTask+0x7c>
  MBX_MSG("MbxProcTask Start\r\n");
    7882:	4805      	ldr	r0, [pc, #20]	; (7898 <prvMbxProcTask+0x244>)
    7884:	f7fb feee 	bl	3664 <UartSendTrace>
    7888:	e6ec      	b.n	7664 <prvMbxProcTask+0x10>
    788a:	bf00      	nop
    788c:	0000ca14 	.word	0x0000ca14
    7890:	0000c0b4 	.word	0x0000c0b4
    7894:	0000c06c 	.word	0x0000c06c
    7898:	0000c050 	.word	0x0000c050
    789c:	0000c094 	.word	0x0000c094

000078a0 <MbxTaskStart>:
}



void MbxTaskStart(void)
{
    78a0:	b500      	push	{lr}
    78a2:	b085      	sub	sp, #20
  /* Create that task that handles the console itself. */
  xTaskCreateStatic(prvMbxProcTask, "MBX", MBX_TASK_STACK_SIZE, NULL, MBX_TASK_PRIORITY, _xMbxTaskStack, &_xMbxTaskBuffer);
    78a4:	4b07      	ldr	r3, [pc, #28]	; (78c4 <MbxTaskStart+0x24>)
    78a6:	4a08      	ldr	r2, [pc, #32]	; (78c8 <MbxTaskStart+0x28>)
    78a8:	9302      	str	r3, [sp, #8]
    78aa:	2304      	movs	r3, #4
    78ac:	e9cd 3200 	strd	r3, r2, [sp]
    78b0:	4906      	ldr	r1, [pc, #24]	; (78cc <MbxTaskStart+0x2c>)
    78b2:	4807      	ldr	r0, [pc, #28]	; (78d0 <MbxTaskStart+0x30>)
    78b4:	2300      	movs	r3, #0
    78b6:	2280      	movs	r2, #128	; 0x80
    78b8:	f7f9 fc4c 	bl	1154 <xTaskCreateStatic>
}
    78bc:	b005      	add	sp, #20
    78be:	f85d fb04 	ldr.w	pc, [sp], #4
    78c2:	bf00      	nop
    78c4:	0003187c 	.word	0x0003187c
    78c8:	0003167c 	.word	0x0003167c
    78cc:	0000c04c 	.word	0x0000c04c
    78d0:	00007655 	.word	0x00007655

000078d4 <main>:
extern unsigned long __vq_end__;
extern unsigned long __vp_start__;
extern unsigned long __vp_end__;

int main( void )
{
    78d4:	b508      	push	{r3, lr}

static void prvSetupHardware( void )
{
extern unsigned long __Vectors[];

	mainVTOR = ( uint32_t ) __Vectors;
    78d6:	4b1c      	ldr	r3, [pc, #112]	; (7948 <main+0x74>)
    78d8:	4a1c      	ldr	r2, [pc, #112]	; (794c <main+0x78>)
    78da:	601a      	str	r2, [r3, #0]

#if !defined(CONFIG_SYS_UART_DISABLE) && !defined(CONFIG_SYS_UART_EXT)
  MHal_UART_Init();
    78dc:	f7fd f896 	bl	4a0c <uart_init>
  UartSendTrace("vp section start = 0x%x\n", (unsigned long)&__vp_start__);
    78e0:	4d1b      	ldr	r5, [pc, #108]	; (7950 <main+0x7c>)
  UartSendTrace("vq section start = 0x%x\n", (unsigned long)&__vq_start__);
    78e2:	4c1c      	ldr	r4, [pc, #112]	; (7954 <main+0x80>)
#endif

  MHal_Timer_Reset();
    78e4:	f7fd fbb4 	bl	5050 <MHal_Timer_Reset>

  MDrv_INTC_Init();
    78e8:	f7fc fc60 	bl	41ac <MDrv_INTC_Init>

  MHal_BDMA_Init();
    78ec:	f7fd fdae 	bl	544c <MHal_BDMA_Init>

  MDrv_CPU_SetFreq(E_CPU_FREQ_HIGH);
    78f0:	2002      	movs	r0, #2
    78f2:	f7fc fcf9 	bl	42e8 <MDrv_CPU_SetFreq>

  MDrv_AUD_Init();
    78f6:	f7fc f865 	bl	39c4 <MDrv_AUD_Init>

  MDrv_MBX_Init();
    78fa:	f7fc fb43 	bl	3f84 <MDrv_MBX_Init>

  MApi_VOC_VDInit();
    78fe:	f7fe fa63 	bl	5dc8 <MApi_VOC_VDInit>
  UartSendTrace("Version : %s %s\r\n",MVXV_CHANGELIST,MVXV_EXT);
    7902:	4a15      	ldr	r2, [pc, #84]	; (7958 <main+0x84>)
    7904:	4915      	ldr	r1, [pc, #84]	; (795c <main+0x88>)
    7906:	4816      	ldr	r0, [pc, #88]	; (7960 <main+0x8c>)
    7908:	f7fb feac 	bl	3664 <UartSendTrace>
  UartSendTrace("vp section start = 0x%x\n", (unsigned long)&__vp_start__);
    790c:	4629      	mov	r1, r5
    790e:	4815      	ldr	r0, [pc, #84]	; (7964 <main+0x90>)
    7910:	f7fb fea8 	bl	3664 <UartSendTrace>
  UartSendTrace("vp section size = 0x%x\n", (unsigned long)&__vp_end__-(unsigned long)&__vp_start__);
    7914:	4914      	ldr	r1, [pc, #80]	; (7968 <main+0x94>)
    7916:	4815      	ldr	r0, [pc, #84]	; (796c <main+0x98>)
    7918:	1b49      	subs	r1, r1, r5
    791a:	f7fb fea3 	bl	3664 <UartSendTrace>
  UartSendTrace("vq section start = 0x%x\n", (unsigned long)&__vq_start__);
    791e:	4621      	mov	r1, r4
    7920:	4813      	ldr	r0, [pc, #76]	; (7970 <main+0x9c>)
    7922:	f7fb fe9f 	bl	3664 <UartSendTrace>
  UartSendTrace("vq section size = 0x%x\n", (unsigned long)&__vq_end__-(unsigned long)&__vq_start__);
    7926:	4913      	ldr	r1, [pc, #76]	; (7974 <main+0xa0>)
    7928:	4813      	ldr	r0, [pc, #76]	; (7978 <main+0xa4>)
    792a:	1b09      	subs	r1, r1, r4
    792c:	f7fb fe9a 	bl	3664 <UartSendTrace>
  MbxTaskStart();
    7930:	f7ff ffb6 	bl	78a0 <MbxTaskStart>
  VocTaskStart();
    7934:	f7ff fe0e 	bl	7554 <VocTaskStart>
  vUARTCommandConsoleStart(256, ( tskIDLE_PRIORITY + 1 ));
    7938:	2101      	movs	r1, #1
    793a:	f44f 7080 	mov.w	r0, #256	; 0x100
    793e:	f7fb fd47 	bl	33d0 <vUARTCommandConsoleStart>
  vTaskStartScheduler();
    7942:	f7f9 fd03 	bl	134c <vTaskStartScheduler>
  for(;;);
    7946:	e7fe      	b.n	7946 <main+0x72>
    7948:	e000ed08 	.word	0xe000ed08
    794c:	00000000 	.word	0x00000000
    7950:	0003ae18 	.word	0x0003ae18
    7954:	0003ae18 	.word	0x0003ae18
    7958:	0000c0e4 	.word	0x0000c0e4
    795c:	0000c0ec 	.word	0x0000c0ec
    7960:	0000c0f8 	.word	0x0000c0f8
    7964:	0000c10c 	.word	0x0000c10c
    7968:	0003ae18 	.word	0x0003ae18
    796c:	0000c128 	.word	0x0000c128
    7970:	0000c140 	.word	0x0000c140
    7974:	0005c2b8 	.word	0x0005c2b8
    7978:	0000c15c 	.word	0x0000c15c

0000797c <vApplicationMallocFailedHook>:
    797c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    7980:	f383 8811 	msr	BASEPRI, r3
    7984:	f3bf 8f6f 	isb	sy
    7988:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
	/* Force an assert. */
	configASSERT( ( volatile void * ) NULL );
    798c:	e7fe      	b.n	798c <vApplicationMallocFailedHook+0x10>
    798e:	bf00      	nop

00007990 <vApplicationStackOverflowHook>:
    7990:	f04f 03a0 	mov.w	r3, #160	; 0xa0
    7994:	f383 8811 	msr	BASEPRI, r3
    7998:	f3bf 8f6f 	isb	sy
    799c:	f3bf 8f4f 	dsb	sy
{
	( void ) pcTaskName;
	( void ) pxTask;

	/* Force an assert. */
	configASSERT( ( volatile void * ) NULL );
    79a0:	e7fe      	b.n	79a0 <vApplicationStackOverflowHook+0x10>
    79a2:	bf00      	nop

000079a4 <vApplicationIdleHook>:
    UartSendTrace("%d milliseconds\n\r", ttot);
}
#endif

void vApplicationIdleHook( void )
{
    79a4:	b510      	push	{r4, lr}
#if( CONFIG_BENCH == 1 )
  benchmark();
#endif

  if (plateCheck < 2 && plateNum != 0x87878787)
    79a6:	4c0b      	ldr	r4, [pc, #44]	; (79d4 <vApplicationIdleHook+0x30>)
    79a8:	6823      	ldr	r3, [r4, #0]
    79aa:	2b01      	cmp	r3, #1
    79ac:	d900      	bls.n	79b0 <vApplicationIdleHook+0xc>
      plateNum = 0x87878787;
    else
      UartSendTrace("Warning: Bin end corruption\n");
    plateCheck++;
  }
}
    79ae:	bd10      	pop	{r4, pc}
  if (plateCheck < 2 && plateNum != 0x87878787)
    79b0:	4a09      	ldr	r2, [pc, #36]	; (79d8 <vApplicationIdleHook+0x34>)
    79b2:	6811      	ldr	r1, [r2, #0]
    79b4:	f1b1 3f87 	cmp.w	r1, #2273806215	; 0x87878787
    79b8:	d0f9      	beq.n	79ae <vApplicationIdleHook+0xa>
    if (plateCheck == 0)
    79ba:	b92b      	cbnz	r3, 79c8 <vApplicationIdleHook+0x24>
      plateNum = 0x87878787;
    79bc:	f04f 3187 	mov.w	r1, #2273806215	; 0x87878787
    79c0:	6011      	str	r1, [r2, #0]
    plateCheck++;
    79c2:	3301      	adds	r3, #1
    79c4:	6023      	str	r3, [r4, #0]
}
    79c6:	bd10      	pop	{r4, pc}
      UartSendTrace("Warning: Bin end corruption\n");
    79c8:	4804      	ldr	r0, [pc, #16]	; (79dc <vApplicationIdleHook+0x38>)
    79ca:	f7fb fe4b 	bl	3664 <UartSendTrace>
    79ce:	6823      	ldr	r3, [r4, #0]
    79d0:	e7f7      	b.n	79c2 <vApplicationIdleHook+0x1e>
    79d2:	bf00      	nop
    79d4:	00031200 	.word	0x00031200
    79d8:	0005c6b8 	.word	0x0005c6b8
    79dc:	0000c174 	.word	0x0000c174

000079e0 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

	/* Pass out a pointer to the StaticTask_t structure in which the Idle task's
	state will be stored. */
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
    79e0:	4b04      	ldr	r3, [pc, #16]	; (79f4 <vApplicationGetIdleTaskMemory+0x14>)
    79e2:	6003      	str	r3, [r0, #0]
{
    79e4:	b410      	push	{r4}
	*ppxIdleTaskStackBuffer = uxIdleTaskStack;

	/* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
	Note that, as the array is necessarily of type StackType_t,
	configMINIMAL_STACK_SIZE is specified in words, not bytes. */
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    79e6:	2378      	movs	r3, #120	; 0x78
	*ppxIdleTaskStackBuffer = uxIdleTaskStack;
    79e8:	4c03      	ldr	r4, [pc, #12]	; (79f8 <vApplicationGetIdleTaskMemory+0x18>)
    79ea:	600c      	str	r4, [r1, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    79ec:	6013      	str	r3, [r2, #0]
}
    79ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    79f2:	4770      	bx	lr
    79f4:	000315c4 	.word	0x000315c4
    79f8:	00031204 	.word	0x00031204

000079fc <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

	/* Pass out a pointer to the StaticTask_t structure in which the Timer
	task's state will be stored. */
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
    79fc:	4b04      	ldr	r3, [pc, #16]	; (7a10 <vApplicationGetTimerTaskMemory+0x14>)
    79fe:	6003      	str	r3, [r0, #0]
{
    7a00:	b410      	push	{r4}
	*ppxTimerTaskStackBuffer = uxTimerTaskStack;

	/* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
	Note that, as the array is necessarily of type StackType_t,
	configMINIMAL_STACK_SIZE is specified in words, not bytes. */
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
    7a02:	2378      	movs	r3, #120	; 0x78
	*ppxTimerTaskStackBuffer = uxTimerTaskStack;
    7a04:	4c03      	ldr	r4, [pc, #12]	; (7a14 <vApplicationGetTimerTaskMemory+0x18>)
    7a06:	600c      	str	r4, [r1, #0]
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
    7a08:	6013      	str	r3, [r2, #0]

}
    7a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
    7a0e:	4770      	bx	lr
    7a10:	0003161c 	.word	0x0003161c
    7a14:	000313e4 	.word	0x000313e4

00007a18 <cosf>:
    7a18:	b500      	push	{lr}
    7a1a:	4a1c      	ldr	r2, [pc, #112]	; (7a8c <cosf+0x74>)
    7a1c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
    7a20:	4293      	cmp	r3, r2
    7a22:	b083      	sub	sp, #12
    7a24:	dd18      	ble.n	7a58 <cosf+0x40>
    7a26:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
    7a2a:	db05      	blt.n	7a38 <cosf+0x20>
    7a2c:	4601      	mov	r1, r0
    7a2e:	f002 fd61 	bl	a4f4 <__aeabi_fsub>
    7a32:	b003      	add	sp, #12
    7a34:	f85d fb04 	ldr.w	pc, [sp], #4
    7a38:	4669      	mov	r1, sp
    7a3a:	f001 f917 	bl	8c6c <__ieee754_rem_pio2f>
    7a3e:	f000 0203 	and.w	r2, r0, #3
    7a42:	2a01      	cmp	r2, #1
    7a44:	d00e      	beq.n	7a64 <cosf+0x4c>
    7a46:	2a02      	cmp	r2, #2
    7a48:	d018      	beq.n	7a7c <cosf+0x64>
    7a4a:	b192      	cbz	r2, 7a72 <cosf+0x5a>
    7a4c:	2201      	movs	r2, #1
    7a4e:	9901      	ldr	r1, [sp, #4]
    7a50:	9800      	ldr	r0, [sp, #0]
    7a52:	f001 ff03 	bl	985c <__kernel_sinf>
    7a56:	e7ec      	b.n	7a32 <cosf+0x1a>
    7a58:	2100      	movs	r1, #0
    7a5a:	f001 fad1 	bl	9000 <__kernel_cosf>
    7a5e:	b003      	add	sp, #12
    7a60:	f85d fb04 	ldr.w	pc, [sp], #4
    7a64:	9901      	ldr	r1, [sp, #4]
    7a66:	9800      	ldr	r0, [sp, #0]
    7a68:	f001 fef8 	bl	985c <__kernel_sinf>
    7a6c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    7a70:	e7df      	b.n	7a32 <cosf+0x1a>
    7a72:	9901      	ldr	r1, [sp, #4]
    7a74:	9800      	ldr	r0, [sp, #0]
    7a76:	f001 fac3 	bl	9000 <__kernel_cosf>
    7a7a:	e7da      	b.n	7a32 <cosf+0x1a>
    7a7c:	9901      	ldr	r1, [sp, #4]
    7a7e:	9800      	ldr	r0, [sp, #0]
    7a80:	f001 fabe 	bl	9000 <__kernel_cosf>
    7a84:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    7a88:	e7d3      	b.n	7a32 <cosf+0x1a>
    7a8a:	bf00      	nop
    7a8c:	3f490fd8 	.word	0x3f490fd8

00007a90 <exp>:
    7a90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7a94:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 7b8c <exp+0xfc>
    7a98:	b08b      	sub	sp, #44	; 0x2c
    7a9a:	4604      	mov	r4, r0
    7a9c:	460d      	mov	r5, r1
    7a9e:	f000 fa7b 	bl	7f98 <__ieee754_exp>
    7aa2:	f998 3000 	ldrsb.w	r3, [r8]
    7aa6:	3301      	adds	r3, #1
    7aa8:	4606      	mov	r6, r0
    7aaa:	460f      	mov	r7, r1
    7aac:	d016      	beq.n	7adc <exp+0x4c>
    7aae:	4620      	mov	r0, r4
    7ab0:	4629      	mov	r1, r5
    7ab2:	f001 ff49 	bl	9948 <finite>
    7ab6:	b188      	cbz	r0, 7adc <exp+0x4c>
    7ab8:	a32d      	add	r3, pc, #180	; (adr r3, 7b70 <exp+0xe0>)
    7aba:	e9d3 2300 	ldrd	r2, r3, [r3]
    7abe:	4620      	mov	r0, r4
    7ac0:	4629      	mov	r1, r5
    7ac2:	f002 fc91 	bl	a3e8 <__aeabi_dcmpgt>
    7ac6:	4681      	mov	r9, r0
    7ac8:	2800      	cmp	r0, #0
    7aca:	d136      	bne.n	7b3a <exp+0xaa>
    7acc:	a32a      	add	r3, pc, #168	; (adr r3, 7b78 <exp+0xe8>)
    7ace:	e9d3 2300 	ldrd	r2, r3, [r3]
    7ad2:	4620      	mov	r0, r4
    7ad4:	4629      	mov	r1, r5
    7ad6:	f002 fc69 	bl	a3ac <__aeabi_dcmplt>
    7ada:	b920      	cbnz	r0, 7ae6 <exp+0x56>
    7adc:	4630      	mov	r0, r6
    7ade:	4639      	mov	r1, r7
    7ae0:	b00b      	add	sp, #44	; 0x2c
    7ae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7ae6:	f998 3000 	ldrsb.w	r3, [r8]
    7aea:	4a25      	ldr	r2, [pc, #148]	; (7b80 <exp+0xf0>)
    7aec:	f8cd 9020 	str.w	r9, [sp, #32]
    7af0:	2604      	movs	r6, #4
    7af2:	2000      	movs	r0, #0
    7af4:	2100      	movs	r1, #0
    7af6:	2b02      	cmp	r3, #2
    7af8:	e9cd 4504 	strd	r4, r5, [sp, #16]
    7afc:	e9cd 4502 	strd	r4, r5, [sp, #8]
    7b00:	e9cd 6200 	strd	r6, r2, [sp]
    7b04:	e9cd 0106 	strd	r0, r1, [sp, #24]
    7b08:	d012      	beq.n	7b30 <exp+0xa0>
    7b0a:	4668      	mov	r0, sp
    7b0c:	f001 ff22 	bl	9954 <matherr>
    7b10:	b170      	cbz	r0, 7b30 <exp+0xa0>
    7b12:	9b08      	ldr	r3, [sp, #32]
    7b14:	bb2b      	cbnz	r3, 7b62 <exp+0xd2>
    7b16:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    7b1a:	4630      	mov	r0, r6
    7b1c:	4639      	mov	r1, r7
    7b1e:	b00b      	add	sp, #44	; 0x2c
    7b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7b24:	4917      	ldr	r1, [pc, #92]	; (7b84 <exp+0xf4>)
    7b26:	2000      	movs	r0, #0
    7b28:	2b02      	cmp	r3, #2
    7b2a:	e9cd 0106 	strd	r0, r1, [sp, #24]
    7b2e:	d1ec      	bne.n	7b0a <exp+0x7a>
    7b30:	f002 ffec 	bl	ab0c <__errno>
    7b34:	2322      	movs	r3, #34	; 0x22
    7b36:	6003      	str	r3, [r0, #0]
    7b38:	e7eb      	b.n	7b12 <exp+0x82>
    7b3a:	4a11      	ldr	r2, [pc, #68]	; (7b80 <exp+0xf0>)
    7b3c:	f998 3000 	ldrsb.w	r3, [r8]
    7b40:	9201      	str	r2, [sp, #4]
    7b42:	2103      	movs	r1, #3
    7b44:	2200      	movs	r2, #0
    7b46:	e9cd 4504 	strd	r4, r5, [sp, #16]
    7b4a:	e9cd 4502 	strd	r4, r5, [sp, #8]
    7b4e:	9100      	str	r1, [sp, #0]
    7b50:	9208      	str	r2, [sp, #32]
    7b52:	2b00      	cmp	r3, #0
    7b54:	d1e6      	bne.n	7b24 <exp+0x94>
    7b56:	4b0c      	ldr	r3, [pc, #48]	; (7b88 <exp+0xf8>)
    7b58:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    7b5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    7b60:	e7d3      	b.n	7b0a <exp+0x7a>
    7b62:	f002 ffd3 	bl	ab0c <__errno>
    7b66:	9b08      	ldr	r3, [sp, #32]
    7b68:	6003      	str	r3, [r0, #0]
    7b6a:	e7d4      	b.n	7b16 <exp+0x86>
    7b6c:	f3af 8000 	nop.w
    7b70:	fefa39ef 	.word	0xfefa39ef
    7b74:	40862e42 	.word	0x40862e42
    7b78:	d52d3051 	.word	0xd52d3051
    7b7c:	c0874910 	.word	0xc0874910
    7b80:	0000c194 	.word	0x0000c194
    7b84:	7ff00000 	.word	0x7ff00000
    7b88:	47efffff 	.word	0x47efffff
    7b8c:	0000ca18 	.word	0x0000ca18

00007b90 <logf>:
    7b90:	b570      	push	{r4, r5, r6, lr}
    7b92:	b08a      	sub	sp, #40	; 0x28
    7b94:	4604      	mov	r4, r0
    7b96:	f000 fbb9 	bl	830c <__ieee754_logf>
    7b9a:	4b36      	ldr	r3, [pc, #216]	; (7c74 <logf+0xe4>)
    7b9c:	f993 5000 	ldrsb.w	r5, [r3]
    7ba0:	1c6b      	adds	r3, r5, #1
    7ba2:	4606      	mov	r6, r0
    7ba4:	d032      	beq.n	7c0c <logf+0x7c>
    7ba6:	4621      	mov	r1, r4
    7ba8:	4620      	mov	r0, r4
    7baa:	f002 ff73 	bl	aa94 <__aeabi_fcmpun>
    7bae:	2800      	cmp	r0, #0
    7bb0:	d12c      	bne.n	7c0c <logf+0x7c>
    7bb2:	2100      	movs	r1, #0
    7bb4:	4620      	mov	r0, r4
    7bb6:	f002 ff63 	bl	aa80 <__aeabi_fcmpgt>
    7bba:	bb38      	cbnz	r0, 7c0c <logf+0x7c>
    7bbc:	4b2e      	ldr	r3, [pc, #184]	; (7c78 <logf+0xe8>)
    7bbe:	9008      	str	r0, [sp, #32]
    7bc0:	4620      	mov	r0, r4
    7bc2:	9301      	str	r3, [sp, #4]
    7bc4:	f002 f928 	bl	9e18 <__aeabi_f2d>
    7bc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    7bcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
    7bd0:	4620      	mov	r0, r4
    7bd2:	b1f5      	cbz	r5, 7c12 <logf+0x82>
    7bd4:	4b29      	ldr	r3, [pc, #164]	; (7c7c <logf+0xec>)
    7bd6:	2200      	movs	r2, #0
    7bd8:	2100      	movs	r1, #0
    7bda:	e9cd 2306 	strd	r2, r3, [sp, #24]
    7bde:	f002 ff27 	bl	aa30 <__aeabi_fcmpeq>
    7be2:	2800      	cmp	r0, #0
    7be4:	d03c      	beq.n	7c60 <logf+0xd0>
    7be6:	2302      	movs	r3, #2
    7be8:	429d      	cmp	r5, r3
    7bea:	9300      	str	r3, [sp, #0]
    7bec:	d132      	bne.n	7c54 <logf+0xc4>
    7bee:	f002 ff8d 	bl	ab0c <__errno>
    7bf2:	2322      	movs	r3, #34	; 0x22
    7bf4:	6003      	str	r3, [r0, #0]
    7bf6:	9b08      	ldr	r3, [sp, #32]
    7bf8:	b313      	cbz	r3, 7c40 <logf+0xb0>
    7bfa:	f002 ff87 	bl	ab0c <__errno>
    7bfe:	9b08      	ldr	r3, [sp, #32]
    7c00:	6003      	str	r3, [r0, #0]
    7c02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    7c06:	f002 fc21 	bl	a44c <__aeabi_d2f>
    7c0a:	4606      	mov	r6, r0
    7c0c:	4630      	mov	r0, r6
    7c0e:	b00a      	add	sp, #40	; 0x28
    7c10:	bd70      	pop	{r4, r5, r6, pc}
    7c12:	4b1b      	ldr	r3, [pc, #108]	; (7c80 <logf+0xf0>)
    7c14:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    7c18:	2100      	movs	r1, #0
    7c1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    7c1e:	f002 ff07 	bl	aa30 <__aeabi_fcmpeq>
    7c22:	b9a8      	cbnz	r0, 7c50 <logf+0xc0>
    7c24:	2301      	movs	r3, #1
    7c26:	9300      	str	r3, [sp, #0]
    7c28:	4668      	mov	r0, sp
    7c2a:	f001 fe93 	bl	9954 <matherr>
    7c2e:	b1d8      	cbz	r0, 7c68 <logf+0xd8>
    7c30:	4814      	ldr	r0, [pc, #80]	; (7c84 <logf+0xf4>)
    7c32:	f001 fe91 	bl	9958 <nan>
    7c36:	e9cd 0106 	strd	r0, r1, [sp, #24]
    7c3a:	9b08      	ldr	r3, [sp, #32]
    7c3c:	2b00      	cmp	r3, #0
    7c3e:	d1dc      	bne.n	7bfa <logf+0x6a>
    7c40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    7c44:	f002 fc02 	bl	a44c <__aeabi_d2f>
    7c48:	4606      	mov	r6, r0
    7c4a:	4630      	mov	r0, r6
    7c4c:	b00a      	add	sp, #40	; 0x28
    7c4e:	bd70      	pop	{r4, r5, r6, pc}
    7c50:	2302      	movs	r3, #2
    7c52:	9300      	str	r3, [sp, #0]
    7c54:	4668      	mov	r0, sp
    7c56:	f001 fe7d 	bl	9954 <matherr>
    7c5a:	2800      	cmp	r0, #0
    7c5c:	d1ed      	bne.n	7c3a <logf+0xaa>
    7c5e:	e7c6      	b.n	7bee <logf+0x5e>
    7c60:	2301      	movs	r3, #1
    7c62:	2d02      	cmp	r5, #2
    7c64:	9300      	str	r3, [sp, #0]
    7c66:	d1df      	bne.n	7c28 <logf+0x98>
    7c68:	f002 ff50 	bl	ab0c <__errno>
    7c6c:	2321      	movs	r3, #33	; 0x21
    7c6e:	6003      	str	r3, [r0, #0]
    7c70:	e7de      	b.n	7c30 <logf+0xa0>
    7c72:	bf00      	nop
    7c74:	0000ca18 	.word	0x0000ca18
    7c78:	0000c198 	.word	0x0000c198
    7c7c:	fff00000 	.word	0xfff00000
    7c80:	c7efffff 	.word	0xc7efffff
    7c84:	0000ba68 	.word	0x0000ba68

00007c88 <powf>:
    7c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7c8c:	f8df b2c8 	ldr.w	fp, [pc, #712]	; 7f58 <powf+0x2d0>
    7c90:	b08d      	sub	sp, #52	; 0x34
    7c92:	4605      	mov	r5, r0
    7c94:	460c      	mov	r4, r1
    7c96:	f000 fc65 	bl	8564 <__ieee754_powf>
    7c9a:	f99b 6000 	ldrsb.w	r6, [fp]
    7c9e:	1c73      	adds	r3, r6, #1
    7ca0:	4682      	mov	sl, r0
    7ca2:	d031      	beq.n	7d08 <powf+0x80>
    7ca4:	4621      	mov	r1, r4
    7ca6:	4620      	mov	r0, r4
    7ca8:	f002 fef4 	bl	aa94 <__aeabi_fcmpun>
    7cac:	4680      	mov	r8, r0
    7cae:	bb58      	cbnz	r0, 7d08 <powf+0x80>
    7cb0:	4629      	mov	r1, r5
    7cb2:	4628      	mov	r0, r5
    7cb4:	f002 feee 	bl	aa94 <__aeabi_fcmpun>
    7cb8:	2100      	movs	r1, #0
    7cba:	4607      	mov	r7, r0
    7cbc:	2800      	cmp	r0, #0
    7cbe:	f040 808d 	bne.w	7ddc <powf+0x154>
    7cc2:	4628      	mov	r0, r5
    7cc4:	f002 feb4 	bl	aa30 <__aeabi_fcmpeq>
    7cc8:	b310      	cbz	r0, 7d10 <powf+0x88>
    7cca:	2100      	movs	r1, #0
    7ccc:	4620      	mov	r0, r4
    7cce:	f002 feaf 	bl	aa30 <__aeabi_fcmpeq>
    7cd2:	4680      	mov	r8, r0
    7cd4:	2800      	cmp	r0, #0
    7cd6:	d054      	beq.n	7d82 <powf+0xfa>
    7cd8:	4b99      	ldr	r3, [pc, #612]	; (7f40 <powf+0x2b8>)
    7cda:	970a      	str	r7, [sp, #40]	; 0x28
    7cdc:	2201      	movs	r2, #1
    7cde:	4628      	mov	r0, r5
    7ce0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    7ce4:	f002 f898 	bl	9e18 <__aeabi_f2d>
    7ce8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    7cec:	4620      	mov	r0, r4
    7cee:	f002 f893 	bl	9e18 <__aeabi_f2d>
    7cf2:	2200      	movs	r2, #0
    7cf4:	2300      	movs	r3, #0
    7cf6:	e9cd 0106 	strd	r0, r1, [sp, #24]
    7cfa:	e9cd 2308 	strd	r2, r3, [sp, #32]
    7cfe:	2e00      	cmp	r6, #0
    7d00:	f000 8088 	beq.w	7e14 <powf+0x18c>
    7d04:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
    7d08:	4650      	mov	r0, sl
    7d0a:	b00d      	add	sp, #52	; 0x34
    7d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7d10:	4650      	mov	r0, sl
    7d12:	f001 fe2b 	bl	996c <finitef>
    7d16:	4606      	mov	r6, r0
    7d18:	2800      	cmp	r0, #0
    7d1a:	f000 808f 	beq.w	7e3c <powf+0x1b4>
    7d1e:	2100      	movs	r1, #0
    7d20:	4650      	mov	r0, sl
    7d22:	f002 fe85 	bl	aa30 <__aeabi_fcmpeq>
    7d26:	2800      	cmp	r0, #0
    7d28:	d0ee      	beq.n	7d08 <powf+0x80>
    7d2a:	4628      	mov	r0, r5
    7d2c:	f001 fe1e 	bl	996c <finitef>
    7d30:	2800      	cmp	r0, #0
    7d32:	d0e9      	beq.n	7d08 <powf+0x80>
    7d34:	4620      	mov	r0, r4
    7d36:	f001 fe19 	bl	996c <finitef>
    7d3a:	2800      	cmp	r0, #0
    7d3c:	d0e4      	beq.n	7d08 <powf+0x80>
    7d3e:	2304      	movs	r3, #4
    7d40:	4a7f      	ldr	r2, [pc, #508]	; (7f40 <powf+0x2b8>)
    7d42:	9302      	str	r3, [sp, #8]
    7d44:	4628      	mov	r0, r5
    7d46:	2300      	movs	r3, #0
    7d48:	930a      	str	r3, [sp, #40]	; 0x28
    7d4a:	9203      	str	r2, [sp, #12]
    7d4c:	f002 f864 	bl	9e18 <__aeabi_f2d>
    7d50:	e9cd 0104 	strd	r0, r1, [sp, #16]
    7d54:	4620      	mov	r0, r4
    7d56:	f002 f85f 	bl	9e18 <__aeabi_f2d>
    7d5a:	f99b 3000 	ldrsb.w	r3, [fp]
    7d5e:	2400      	movs	r4, #0
    7d60:	2500      	movs	r5, #0
    7d62:	2b02      	cmp	r3, #2
    7d64:	e9cd 0106 	strd	r0, r1, [sp, #24]
    7d68:	e9cd 4508 	strd	r4, r5, [sp, #32]
    7d6c:	d004      	beq.n	7d78 <powf+0xf0>
    7d6e:	a802      	add	r0, sp, #8
    7d70:	f001 fdf0 	bl	9954 <matherr>
    7d74:	2800      	cmp	r0, #0
    7d76:	d152      	bne.n	7e1e <powf+0x196>
    7d78:	f002 fec8 	bl	ab0c <__errno>
    7d7c:	2322      	movs	r3, #34	; 0x22
    7d7e:	6003      	str	r3, [r0, #0]
    7d80:	e04d      	b.n	7e1e <powf+0x196>
    7d82:	4620      	mov	r0, r4
    7d84:	f001 fdf2 	bl	996c <finitef>
    7d88:	2800      	cmp	r0, #0
    7d8a:	d0bd      	beq.n	7d08 <powf+0x80>
    7d8c:	2100      	movs	r1, #0
    7d8e:	4620      	mov	r0, r4
    7d90:	f002 fe58 	bl	aa44 <__aeabi_fcmplt>
    7d94:	2800      	cmp	r0, #0
    7d96:	d0b7      	beq.n	7d08 <powf+0x80>
    7d98:	4b69      	ldr	r3, [pc, #420]	; (7f40 <powf+0x2b8>)
    7d9a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    7d9e:	2201      	movs	r2, #1
    7da0:	4628      	mov	r0, r5
    7da2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    7da6:	f002 f837 	bl	9e18 <__aeabi_f2d>
    7daa:	e9cd 0104 	strd	r0, r1, [sp, #16]
    7dae:	4620      	mov	r0, r4
    7db0:	f002 f832 	bl	9e18 <__aeabi_f2d>
    7db4:	f99b 3000 	ldrsb.w	r3, [fp]
    7db8:	e9cd 0106 	strd	r0, r1, [sp, #24]
    7dbc:	2b00      	cmp	r3, #0
    7dbe:	f040 8084 	bne.w	7eca <powf+0x242>
    7dc2:	2200      	movs	r2, #0
    7dc4:	2300      	movs	r3, #0
    7dc6:	e9cd 2308 	strd	r2, r3, [sp, #32]
    7dca:	a802      	add	r0, sp, #8
    7dcc:	f001 fdc2 	bl	9954 <matherr>
    7dd0:	2800      	cmp	r0, #0
    7dd2:	f000 8081 	beq.w	7ed8 <powf+0x250>
    7dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7dd8:	b33b      	cbz	r3, 7e2a <powf+0x1a2>
    7dda:	e022      	b.n	7e22 <powf+0x19a>
    7ddc:	4620      	mov	r0, r4
    7dde:	f002 fe27 	bl	aa30 <__aeabi_fcmpeq>
    7de2:	2800      	cmp	r0, #0
    7de4:	d090      	beq.n	7d08 <powf+0x80>
    7de6:	4b56      	ldr	r3, [pc, #344]	; (7f40 <powf+0x2b8>)
    7de8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    7dec:	2201      	movs	r2, #1
    7dee:	4628      	mov	r0, r5
    7df0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    7df4:	f002 f810 	bl	9e18 <__aeabi_f2d>
    7df8:	e9cd 0104 	strd	r0, r1, [sp, #16]
    7dfc:	4620      	mov	r0, r4
    7dfe:	f002 f80b 	bl	9e18 <__aeabi_f2d>
    7e02:	4b50      	ldr	r3, [pc, #320]	; (7f44 <powf+0x2bc>)
    7e04:	2200      	movs	r2, #0
    7e06:	2e02      	cmp	r6, #2
    7e08:	e9cd 0106 	strd	r0, r1, [sp, #24]
    7e0c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    7e10:	f43f af78 	beq.w	7d04 <powf+0x7c>
    7e14:	a802      	add	r0, sp, #8
    7e16:	f001 fd9d 	bl	9954 <matherr>
    7e1a:	2800      	cmp	r0, #0
    7e1c:	d061      	beq.n	7ee2 <powf+0x25a>
    7e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7e20:	b11b      	cbz	r3, 7e2a <powf+0x1a2>
    7e22:	f002 fe73 	bl	ab0c <__errno>
    7e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7e28:	6003      	str	r3, [r0, #0]
    7e2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    7e2e:	f002 fb0d 	bl	a44c <__aeabi_d2f>
    7e32:	4682      	mov	sl, r0
    7e34:	4650      	mov	r0, sl
    7e36:	b00d      	add	sp, #52	; 0x34
    7e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7e3c:	4628      	mov	r0, r5
    7e3e:	f001 fd95 	bl	996c <finitef>
    7e42:	2800      	cmp	r0, #0
    7e44:	f43f af6b 	beq.w	7d1e <powf+0x96>
    7e48:	4620      	mov	r0, r4
    7e4a:	f001 fd8f 	bl	996c <finitef>
    7e4e:	2800      	cmp	r0, #0
    7e50:	f43f af65 	beq.w	7d1e <powf+0x96>
    7e54:	4628      	mov	r0, r5
    7e56:	f001 ffdf 	bl	9e18 <__aeabi_f2d>
    7e5a:	4680      	mov	r8, r0
    7e5c:	4620      	mov	r0, r4
    7e5e:	4689      	mov	r9, r1
    7e60:	f001 ffda 	bl	9e18 <__aeabi_f2d>
    7e64:	e9cd 0100 	strd	r0, r1, [sp]
    7e68:	4651      	mov	r1, sl
    7e6a:	4650      	mov	r0, sl
    7e6c:	f002 fe12 	bl	aa94 <__aeabi_fcmpun>
    7e70:	f99b a000 	ldrsb.w	sl, [fp]
    7e74:	4602      	mov	r2, r0
    7e76:	2800      	cmp	r0, #0
    7e78:	d170      	bne.n	7f5c <powf+0x2d4>
    7e7a:	4b31      	ldr	r3, [pc, #196]	; (7f40 <powf+0x2b8>)
    7e7c:	9303      	str	r3, [sp, #12]
    7e7e:	4620      	mov	r0, r4
    7e80:	e9dd 3400 	ldrd	r3, r4, [sp]
    7e84:	2103      	movs	r1, #3
    7e86:	9102      	str	r1, [sp, #8]
    7e88:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    7e8c:	e9cd 3406 	strd	r3, r4, [sp, #24]
    7e90:	920a      	str	r2, [sp, #40]	; 0x28
    7e92:	e9cd 8904 	strd	r8, r9, [sp, #16]
    7e96:	f002 fc37 	bl	a708 <__aeabi_fmul>
    7e9a:	4604      	mov	r4, r0
    7e9c:	4628      	mov	r0, r5
    7e9e:	f1ba 0f00 	cmp.w	sl, #0
    7ea2:	d123      	bne.n	7eec <powf+0x264>
    7ea4:	4b28      	ldr	r3, [pc, #160]	; (7f48 <powf+0x2c0>)
    7ea6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    7eaa:	2100      	movs	r1, #0
    7eac:	e9cd 2308 	strd	r2, r3, [sp, #32]
    7eb0:	f002 fdc8 	bl	aa44 <__aeabi_fcmplt>
    7eb4:	bb30      	cbnz	r0, 7f04 <powf+0x27c>
    7eb6:	a802      	add	r0, sp, #8
    7eb8:	f001 fd4c 	bl	9954 <matherr>
    7ebc:	2800      	cmp	r0, #0
    7ebe:	d18a      	bne.n	7dd6 <powf+0x14e>
    7ec0:	f002 fe24 	bl	ab0c <__errno>
    7ec4:	2322      	movs	r3, #34	; 0x22
    7ec6:	6003      	str	r3, [r0, #0]
    7ec8:	e785      	b.n	7dd6 <powf+0x14e>
    7eca:	4920      	ldr	r1, [pc, #128]	; (7f4c <powf+0x2c4>)
    7ecc:	2000      	movs	r0, #0
    7ece:	2b02      	cmp	r3, #2
    7ed0:	e9cd 0108 	strd	r0, r1, [sp, #32]
    7ed4:	f47f af79 	bne.w	7dca <powf+0x142>
    7ed8:	f002 fe18 	bl	ab0c <__errno>
    7edc:	2321      	movs	r3, #33	; 0x21
    7ede:	6003      	str	r3, [r0, #0]
    7ee0:	e779      	b.n	7dd6 <powf+0x14e>
    7ee2:	f002 fe13 	bl	ab0c <__errno>
    7ee6:	2321      	movs	r3, #33	; 0x21
    7ee8:	6003      	str	r3, [r0, #0]
    7eea:	e798      	b.n	7e1e <powf+0x196>
    7eec:	4b18      	ldr	r3, [pc, #96]	; (7f50 <powf+0x2c8>)
    7eee:	2200      	movs	r2, #0
    7ef0:	2100      	movs	r1, #0
    7ef2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    7ef6:	f002 fda5 	bl	aa44 <__aeabi_fcmplt>
    7efa:	b990      	cbnz	r0, 7f22 <powf+0x29a>
    7efc:	f1ba 0f02 	cmp.w	sl, #2
    7f00:	d0de      	beq.n	7ec0 <powf+0x238>
    7f02:	e7d8      	b.n	7eb6 <powf+0x22e>
    7f04:	4620      	mov	r0, r4
    7f06:	f001 fd7b 	bl	9a00 <rintf>
    7f0a:	4621      	mov	r1, r4
    7f0c:	f002 fd90 	bl	aa30 <__aeabi_fcmpeq>
    7f10:	b990      	cbnz	r0, 7f38 <powf+0x2b0>
    7f12:	4b10      	ldr	r3, [pc, #64]	; (7f54 <powf+0x2cc>)
    7f14:	f99b a000 	ldrsb.w	sl, [fp]
    7f18:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    7f1c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    7f20:	e7ec      	b.n	7efc <powf+0x274>
    7f22:	4620      	mov	r0, r4
    7f24:	f001 fd6c 	bl	9a00 <rintf>
    7f28:	4621      	mov	r1, r4
    7f2a:	f002 fd81 	bl	aa30 <__aeabi_fcmpeq>
    7f2e:	b918      	cbnz	r0, 7f38 <powf+0x2b0>
    7f30:	4b06      	ldr	r3, [pc, #24]	; (7f4c <powf+0x2c4>)
    7f32:	2200      	movs	r2, #0
    7f34:	e9cd 2308 	strd	r2, r3, [sp, #32]
    7f38:	f99b a000 	ldrsb.w	sl, [fp]
    7f3c:	e7de      	b.n	7efc <powf+0x274>
    7f3e:	bf00      	nop
    7f40:	0000c1a0 	.word	0x0000c1a0
    7f44:	3ff00000 	.word	0x3ff00000
    7f48:	47efffff 	.word	0x47efffff
    7f4c:	fff00000 	.word	0xfff00000
    7f50:	7ff00000 	.word	0x7ff00000
    7f54:	c7efffff 	.word	0xc7efffff
    7f58:	0000ca18 	.word	0x0000ca18
    7f5c:	2201      	movs	r2, #1
    7f5e:	9202      	str	r2, [sp, #8]
    7f60:	e9dd 1200 	ldrd	r1, r2, [sp]
    7f64:	4b0b      	ldr	r3, [pc, #44]	; (7f94 <powf+0x30c>)
    7f66:	960a      	str	r6, [sp, #40]	; 0x28
    7f68:	e9cd 8904 	strd	r8, r9, [sp, #16]
    7f6c:	e9cd 1206 	strd	r1, r2, [sp, #24]
    7f70:	9303      	str	r3, [sp, #12]
    7f72:	f1ba 0f00 	cmp.w	sl, #0
    7f76:	f43f af24 	beq.w	7dc2 <powf+0x13a>
    7f7a:	2100      	movs	r1, #0
    7f7c:	4608      	mov	r0, r1
    7f7e:	f002 fc77 	bl	a870 <__aeabi_fdiv>
    7f82:	f001 ff49 	bl	9e18 <__aeabi_f2d>
    7f86:	f1ba 0f02 	cmp.w	sl, #2
    7f8a:	e9cd 0108 	strd	r0, r1, [sp, #32]
    7f8e:	d0a3      	beq.n	7ed8 <powf+0x250>
    7f90:	e71b      	b.n	7dca <powf+0x142>
    7f92:	bf00      	nop
    7f94:	0000c1a0 	.word	0x0000c1a0

00007f98 <__ieee754_exp>:
    7f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7f9c:	4fd2      	ldr	r7, [pc, #840]	; (82e8 <__ieee754_exp+0x350>)
    7f9e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
    7fa2:	42ba      	cmp	r2, r7
    7fa4:	b087      	sub	sp, #28
    7fa6:	460c      	mov	r4, r1
    7fa8:	ea4f 76d1 	mov.w	r6, r1, lsr #31
    7fac:	4605      	mov	r5, r0
    7fae:	d911      	bls.n	7fd4 <__ieee754_exp+0x3c>
    7fb0:	4fce      	ldr	r7, [pc, #824]	; (82ec <__ieee754_exp+0x354>)
    7fb2:	42ba      	cmp	r2, r7
    7fb4:	d929      	bls.n	800a <__ieee754_exp+0x72>
    7fb6:	f3c1 0313 	ubfx	r3, r1, #0, #20
    7fba:	4303      	orrs	r3, r0
    7fbc:	4602      	mov	r2, r0
    7fbe:	f040 8148 	bne.w	8252 <__ieee754_exp+0x2ba>
    7fc2:	2e00      	cmp	r6, #0
    7fc4:	f000 80e4 	beq.w	8190 <__ieee754_exp+0x1f8>
    7fc8:	2500      	movs	r5, #0
    7fca:	4629      	mov	r1, r5
    7fcc:	4628      	mov	r0, r5
    7fce:	b007      	add	sp, #28
    7fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7fd4:	4bc6      	ldr	r3, [pc, #792]	; (82f0 <__ieee754_exp+0x358>)
    7fd6:	429a      	cmp	r2, r3
    7fd8:	d854      	bhi.n	8084 <__ieee754_exp+0xec>
    7fda:	4bc6      	ldr	r3, [pc, #792]	; (82f4 <__ieee754_exp+0x35c>)
    7fdc:	429a      	cmp	r2, r3
    7fde:	f200 80db 	bhi.w	8198 <__ieee754_exp+0x200>
    7fe2:	a3ab      	add	r3, pc, #684	; (adr r3, 8290 <__ieee754_exp+0x2f8>)
    7fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
    7fe8:	f001 fdb8 	bl	9b5c <__adddf3>
    7fec:	2200      	movs	r2, #0
    7fee:	4bc2      	ldr	r3, [pc, #776]	; (82f8 <__ieee754_exp+0x360>)
    7ff0:	f002 f9fa 	bl	a3e8 <__aeabi_dcmpgt>
    7ff4:	2800      	cmp	r0, #0
    7ff6:	f000 80cf 	beq.w	8198 <__ieee754_exp+0x200>
    7ffa:	4628      	mov	r0, r5
    7ffc:	4621      	mov	r1, r4
    7ffe:	2200      	movs	r2, #0
    8000:	4bbd      	ldr	r3, [pc, #756]	; (82f8 <__ieee754_exp+0x360>)
    8002:	f001 fdab 	bl	9b5c <__adddf3>
    8006:	4605      	mov	r5, r0
    8008:	e0c2      	b.n	8190 <__ieee754_exp+0x1f8>
    800a:	a3a3      	add	r3, pc, #652	; (adr r3, 8298 <__ieee754_exp+0x300>)
    800c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8010:	f002 f9ea 	bl	a3e8 <__aeabi_dcmpgt>
    8014:	2800      	cmp	r0, #0
    8016:	f040 8124 	bne.w	8262 <__ieee754_exp+0x2ca>
    801a:	4628      	mov	r0, r5
    801c:	4621      	mov	r1, r4
    801e:	a3a0      	add	r3, pc, #640	; (adr r3, 82a0 <__ieee754_exp+0x308>)
    8020:	e9d3 2300 	ldrd	r2, r3, [r3]
    8024:	f002 f9c2 	bl	a3ac <__aeabi_dcmplt>
    8028:	2800      	cmp	r0, #0
    802a:	d1cd      	bne.n	7fc8 <__ieee754_exp+0x30>
    802c:	4bb3      	ldr	r3, [pc, #716]	; (82fc <__ieee754_exp+0x364>)
    802e:	4628      	mov	r0, r5
    8030:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    8034:	4621      	mov	r1, r4
    8036:	a39c      	add	r3, pc, #624	; (adr r3, 82a8 <__ieee754_exp+0x310>)
    8038:	e9d3 2300 	ldrd	r2, r3, [r3]
    803c:	f001 ff44 	bl	9ec8 <__aeabi_dmul>
    8040:	e9d6 2300 	ldrd	r2, r3, [r6]
    8044:	f001 fd8a 	bl	9b5c <__adddf3>
    8048:	f002 f9d8 	bl	a3fc <__aeabi_d2iz>
    804c:	4680      	mov	r8, r0
    804e:	f001 fed1 	bl	9df4 <__aeabi_i2d>
    8052:	a397      	add	r3, pc, #604	; (adr r3, 82b0 <__ieee754_exp+0x318>)
    8054:	e9d3 2300 	ldrd	r2, r3, [r3]
    8058:	4606      	mov	r6, r0
    805a:	460f      	mov	r7, r1
    805c:	f001 ff34 	bl	9ec8 <__aeabi_dmul>
    8060:	4602      	mov	r2, r0
    8062:	460b      	mov	r3, r1
    8064:	4628      	mov	r0, r5
    8066:	4621      	mov	r1, r4
    8068:	f001 fd76 	bl	9b58 <__aeabi_dsub>
    806c:	a392      	add	r3, pc, #584	; (adr r3, 82b8 <__ieee754_exp+0x320>)
    806e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8072:	e9cd 0100 	strd	r0, r1, [sp]
    8076:	4630      	mov	r0, r6
    8078:	4639      	mov	r1, r7
    807a:	f001 ff25 	bl	9ec8 <__aeabi_dmul>
    807e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    8082:	e015      	b.n	80b0 <__ieee754_exp+0x118>
    8084:	4b9e      	ldr	r3, [pc, #632]	; (8300 <__ieee754_exp+0x368>)
    8086:	429a      	cmp	r2, r3
    8088:	d8d0      	bhi.n	802c <__ieee754_exp+0x94>
    808a:	4b9e      	ldr	r3, [pc, #632]	; (8304 <__ieee754_exp+0x36c>)
    808c:	00f4      	lsls	r4, r6, #3
    808e:	4423      	add	r3, r4
    8090:	e9d3 2300 	ldrd	r2, r3, [r3]
    8094:	f001 fd60 	bl	9b58 <__aeabi_dsub>
    8098:	4b9b      	ldr	r3, [pc, #620]	; (8308 <__ieee754_exp+0x370>)
    809a:	4423      	add	r3, r4
    809c:	e9d3 3400 	ldrd	r3, r4, [r3]
    80a0:	e9cd 0100 	strd	r0, r1, [sp]
    80a4:	e9cd 3402 	strd	r3, r4, [sp, #8]
    80a8:	f1c6 0201 	rsb	r2, r6, #1
    80ac:	eba2 0806 	sub.w	r8, r2, r6
    80b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    80b4:	e9dd 0100 	ldrd	r0, r1, [sp]
    80b8:	f001 fd4e 	bl	9b58 <__aeabi_dsub>
    80bc:	4602      	mov	r2, r0
    80be:	460b      	mov	r3, r1
    80c0:	4605      	mov	r5, r0
    80c2:	460c      	mov	r4, r1
    80c4:	f001 ff00 	bl	9ec8 <__aeabi_dmul>
    80c8:	a37d      	add	r3, pc, #500	; (adr r3, 82c0 <__ieee754_exp+0x328>)
    80ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    80ce:	4606      	mov	r6, r0
    80d0:	460f      	mov	r7, r1
    80d2:	f001 fef9 	bl	9ec8 <__aeabi_dmul>
    80d6:	a37c      	add	r3, pc, #496	; (adr r3, 82c8 <__ieee754_exp+0x330>)
    80d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    80dc:	f001 fd3c 	bl	9b58 <__aeabi_dsub>
    80e0:	4632      	mov	r2, r6
    80e2:	463b      	mov	r3, r7
    80e4:	f001 fef0 	bl	9ec8 <__aeabi_dmul>
    80e8:	a379      	add	r3, pc, #484	; (adr r3, 82d0 <__ieee754_exp+0x338>)
    80ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    80ee:	f001 fd35 	bl	9b5c <__adddf3>
    80f2:	4632      	mov	r2, r6
    80f4:	463b      	mov	r3, r7
    80f6:	f001 fee7 	bl	9ec8 <__aeabi_dmul>
    80fa:	a377      	add	r3, pc, #476	; (adr r3, 82d8 <__ieee754_exp+0x340>)
    80fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    8100:	f001 fd2a 	bl	9b58 <__aeabi_dsub>
    8104:	4632      	mov	r2, r6
    8106:	463b      	mov	r3, r7
    8108:	f001 fede 	bl	9ec8 <__aeabi_dmul>
    810c:	a374      	add	r3, pc, #464	; (adr r3, 82e0 <__ieee754_exp+0x348>)
    810e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8112:	f001 fd23 	bl	9b5c <__adddf3>
    8116:	4632      	mov	r2, r6
    8118:	463b      	mov	r3, r7
    811a:	f001 fed5 	bl	9ec8 <__aeabi_dmul>
    811e:	4602      	mov	r2, r0
    8120:	460b      	mov	r3, r1
    8122:	4628      	mov	r0, r5
    8124:	4621      	mov	r1, r4
    8126:	f001 fd17 	bl	9b58 <__aeabi_dsub>
    812a:	4682      	mov	sl, r0
    812c:	468b      	mov	fp, r1
    812e:	4628      	mov	r0, r5
    8130:	4621      	mov	r1, r4
    8132:	4652      	mov	r2, sl
    8134:	465b      	mov	r3, fp
    8136:	f001 fec7 	bl	9ec8 <__aeabi_dmul>
    813a:	4656      	mov	r6, sl
    813c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    8140:	465f      	mov	r7, fp
    8142:	f1b8 0f00 	cmp.w	r8, #0
    8146:	d060      	beq.n	820a <__ieee754_exp+0x272>
    8148:	4652      	mov	r2, sl
    814a:	465b      	mov	r3, fp
    814c:	2000      	movs	r0, #0
    814e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    8152:	f001 fd01 	bl	9b58 <__aeabi_dsub>
    8156:	4602      	mov	r2, r0
    8158:	460b      	mov	r3, r1
    815a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    815e:	f001 ffdd 	bl	a11c <__aeabi_ddiv>
    8162:	4602      	mov	r2, r0
    8164:	460b      	mov	r3, r1
    8166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    816a:	f001 fcf5 	bl	9b58 <__aeabi_dsub>
    816e:	e9dd 2300 	ldrd	r2, r3, [sp]
    8172:	f001 fcf1 	bl	9b58 <__aeabi_dsub>
    8176:	460b      	mov	r3, r1
    8178:	4602      	mov	r2, r0
    817a:	495f      	ldr	r1, [pc, #380]	; (82f8 <__ieee754_exp+0x360>)
    817c:	2000      	movs	r0, #0
    817e:	f001 fceb 	bl	9b58 <__aeabi_dsub>
    8182:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
    8186:	4598      	cmp	r8, r3
    8188:	db74      	blt.n	8274 <__ieee754_exp+0x2dc>
    818a:	eb01 5108 	add.w	r1, r1, r8, lsl #20
    818e:	4605      	mov	r5, r0
    8190:	4628      	mov	r0, r5
    8192:	b007      	add	sp, #28
    8194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8198:	462a      	mov	r2, r5
    819a:	4623      	mov	r3, r4
    819c:	4628      	mov	r0, r5
    819e:	4621      	mov	r1, r4
    81a0:	f001 fe92 	bl	9ec8 <__aeabi_dmul>
    81a4:	a346      	add	r3, pc, #280	; (adr r3, 82c0 <__ieee754_exp+0x328>)
    81a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    81aa:	4606      	mov	r6, r0
    81ac:	460f      	mov	r7, r1
    81ae:	f001 fe8b 	bl	9ec8 <__aeabi_dmul>
    81b2:	a345      	add	r3, pc, #276	; (adr r3, 82c8 <__ieee754_exp+0x330>)
    81b4:	e9d3 2300 	ldrd	r2, r3, [r3]
    81b8:	f001 fcce 	bl	9b58 <__aeabi_dsub>
    81bc:	4632      	mov	r2, r6
    81be:	463b      	mov	r3, r7
    81c0:	f001 fe82 	bl	9ec8 <__aeabi_dmul>
    81c4:	a342      	add	r3, pc, #264	; (adr r3, 82d0 <__ieee754_exp+0x338>)
    81c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    81ca:	f001 fcc7 	bl	9b5c <__adddf3>
    81ce:	4632      	mov	r2, r6
    81d0:	463b      	mov	r3, r7
    81d2:	f001 fe79 	bl	9ec8 <__aeabi_dmul>
    81d6:	a340      	add	r3, pc, #256	; (adr r3, 82d8 <__ieee754_exp+0x340>)
    81d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    81dc:	f001 fcbc 	bl	9b58 <__aeabi_dsub>
    81e0:	4632      	mov	r2, r6
    81e2:	463b      	mov	r3, r7
    81e4:	f001 fe70 	bl	9ec8 <__aeabi_dmul>
    81e8:	a33d      	add	r3, pc, #244	; (adr r3, 82e0 <__ieee754_exp+0x348>)
    81ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    81ee:	f001 fcb5 	bl	9b5c <__adddf3>
    81f2:	4632      	mov	r2, r6
    81f4:	463b      	mov	r3, r7
    81f6:	f001 fe67 	bl	9ec8 <__aeabi_dmul>
    81fa:	4602      	mov	r2, r0
    81fc:	460b      	mov	r3, r1
    81fe:	4628      	mov	r0, r5
    8200:	4621      	mov	r1, r4
    8202:	f001 fca9 	bl	9b58 <__aeabi_dsub>
    8206:	4606      	mov	r6, r0
    8208:	460f      	mov	r7, r1
    820a:	4632      	mov	r2, r6
    820c:	463b      	mov	r3, r7
    820e:	4628      	mov	r0, r5
    8210:	4621      	mov	r1, r4
    8212:	f001 fe59 	bl	9ec8 <__aeabi_dmul>
    8216:	2200      	movs	r2, #0
    8218:	4680      	mov	r8, r0
    821a:	4689      	mov	r9, r1
    821c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8220:	4630      	mov	r0, r6
    8222:	4639      	mov	r1, r7
    8224:	f001 fc98 	bl	9b58 <__aeabi_dsub>
    8228:	4602      	mov	r2, r0
    822a:	460b      	mov	r3, r1
    822c:	4640      	mov	r0, r8
    822e:	4649      	mov	r1, r9
    8230:	f001 ff74 	bl	a11c <__aeabi_ddiv>
    8234:	462a      	mov	r2, r5
    8236:	4623      	mov	r3, r4
    8238:	f001 fc8e 	bl	9b58 <__aeabi_dsub>
    823c:	4602      	mov	r2, r0
    823e:	460b      	mov	r3, r1
    8240:	2000      	movs	r0, #0
    8242:	492d      	ldr	r1, [pc, #180]	; (82f8 <__ieee754_exp+0x360>)
    8244:	f001 fc88 	bl	9b58 <__aeabi_dsub>
    8248:	4605      	mov	r5, r0
    824a:	4628      	mov	r0, r5
    824c:	b007      	add	sp, #28
    824e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8252:	460b      	mov	r3, r1
    8254:	f001 fc82 	bl	9b5c <__adddf3>
    8258:	4605      	mov	r5, r0
    825a:	4628      	mov	r0, r5
    825c:	b007      	add	sp, #28
    825e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8262:	a30b      	add	r3, pc, #44	; (adr r3, 8290 <__ieee754_exp+0x2f8>)
    8264:	e9d3 2300 	ldrd	r2, r3, [r3]
    8268:	4610      	mov	r0, r2
    826a:	4619      	mov	r1, r3
    826c:	f001 fe2c 	bl	9ec8 <__aeabi_dmul>
    8270:	4605      	mov	r5, r0
    8272:	e78d      	b.n	8190 <__ieee754_exp+0x1f8>
    8274:	f508 737a 	add.w	r3, r8, #1000	; 0x3e8
    8278:	eb01 5103 	add.w	r1, r1, r3, lsl #20
    827c:	2200      	movs	r2, #0
    827e:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
    8282:	f001 fe21 	bl	9ec8 <__aeabi_dmul>
    8286:	4605      	mov	r5, r0
    8288:	4628      	mov	r0, r5
    828a:	b007      	add	sp, #28
    828c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8290:	8800759c 	.word	0x8800759c
    8294:	7e37e43c 	.word	0x7e37e43c
    8298:	fefa39ef 	.word	0xfefa39ef
    829c:	40862e42 	.word	0x40862e42
    82a0:	d52d3051 	.word	0xd52d3051
    82a4:	c0874910 	.word	0xc0874910
    82a8:	652b82fe 	.word	0x652b82fe
    82ac:	3ff71547 	.word	0x3ff71547
    82b0:	fee00000 	.word	0xfee00000
    82b4:	3fe62e42 	.word	0x3fe62e42
    82b8:	35793c76 	.word	0x35793c76
    82bc:	3dea39ef 	.word	0x3dea39ef
    82c0:	72bea4d0 	.word	0x72bea4d0
    82c4:	3e663769 	.word	0x3e663769
    82c8:	c5d26bf1 	.word	0xc5d26bf1
    82cc:	3ebbbd41 	.word	0x3ebbbd41
    82d0:	af25de2c 	.word	0xaf25de2c
    82d4:	3f11566a 	.word	0x3f11566a
    82d8:	16bebd93 	.word	0x16bebd93
    82dc:	3f66c16c 	.word	0x3f66c16c
    82e0:	5555553e 	.word	0x5555553e
    82e4:	3fc55555 	.word	0x3fc55555
    82e8:	40862e41 	.word	0x40862e41
    82ec:	7fefffff 	.word	0x7fefffff
    82f0:	3fd62e42 	.word	0x3fd62e42
    82f4:	3e2fffff 	.word	0x3e2fffff
    82f8:	3ff00000 	.word	0x3ff00000
    82fc:	0000c1a8 	.word	0x0000c1a8
    8300:	3ff0a2b1 	.word	0x3ff0a2b1
    8304:	0000c1b8 	.word	0x0000c1b8
    8308:	0000c1c8 	.word	0x0000c1c8

0000830c <__ieee754_logf>:
    830c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8310:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
    8314:	d02b      	beq.n	836e <__ieee754_logf+0x62>
    8316:	2800      	cmp	r0, #0
    8318:	4601      	mov	r1, r0
    831a:	4604      	mov	r4, r0
    831c:	db40      	blt.n	83a0 <__ieee754_logf+0x94>
    831e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
    8322:	da39      	bge.n	8398 <__ieee754_logf+0x8c>
    8324:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8328:	db41      	blt.n	83ae <__ieee754_logf+0xa2>
    832a:	2600      	movs	r6, #0
    832c:	4a80      	ldr	r2, [pc, #512]	; (8530 <__ieee754_logf+0x224>)
    832e:	f3c4 0516 	ubfx	r5, r4, #0, #23
    8332:	442a      	add	r2, r5
    8334:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
    8338:	15e4      	asrs	r4, r4, #23
    833a:	f082 507e 	eor.w	r0, r2, #1065353216	; 0x3f800000
    833e:	3c7f      	subs	r4, #127	; 0x7f
    8340:	4434      	add	r4, r6
    8342:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    8346:	4328      	orrs	r0, r5
    8348:	eb04 54d2 	add.w	r4, r4, r2, lsr #23
    834c:	f002 f8d2 	bl	a4f4 <__aeabi_fsub>
    8350:	4b78      	ldr	r3, [pc, #480]	; (8534 <__ieee754_logf+0x228>)
    8352:	f105 020f 	add.w	r2, r5, #15
    8356:	4013      	ands	r3, r2
    8358:	4606      	mov	r6, r0
    835a:	bb83      	cbnz	r3, 83be <__ieee754_logf+0xb2>
    835c:	2100      	movs	r1, #0
    835e:	f002 fb67 	bl	aa30 <__aeabi_fcmpeq>
    8362:	2800      	cmp	r0, #0
    8364:	f000 80a3 	beq.w	84ae <__ieee754_logf+0x1a2>
    8368:	b944      	cbnz	r4, 837c <__ieee754_logf+0x70>
    836a:	2000      	movs	r0, #0
    836c:	e004      	b.n	8378 <__ieee754_logf+0x6c>
    836e:	2100      	movs	r1, #0
    8370:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
    8374:	f002 fa7c 	bl	a870 <__aeabi_fdiv>
    8378:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    837c:	4620      	mov	r0, r4
    837e:	f002 f96f 	bl	a660 <__aeabi_i2f>
    8382:	496d      	ldr	r1, [pc, #436]	; (8538 <__ieee754_logf+0x22c>)
    8384:	4605      	mov	r5, r0
    8386:	f002 f9bf 	bl	a708 <__aeabi_fmul>
    838a:	496c      	ldr	r1, [pc, #432]	; (853c <__ieee754_logf+0x230>)
    838c:	4604      	mov	r4, r0
    838e:	4628      	mov	r0, r5
    8390:	f002 f9ba 	bl	a708 <__aeabi_fmul>
    8394:	4601      	mov	r1, r0
    8396:	4620      	mov	r0, r4
    8398:	f002 f8ae 	bl	a4f8 <__addsf3>
    839c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83a0:	f002 f8a8 	bl	a4f4 <__aeabi_fsub>
    83a4:	2100      	movs	r1, #0
    83a6:	f002 fa63 	bl	a870 <__aeabi_fdiv>
    83aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    83ae:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
    83b2:	f002 f9a9 	bl	a708 <__aeabi_fmul>
    83b6:	f06f 0618 	mvn.w	r6, #24
    83ba:	4604      	mov	r4, r0
    83bc:	e7b6      	b.n	832c <__ieee754_logf+0x20>
    83be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    83c2:	f002 f899 	bl	a4f8 <__addsf3>
    83c6:	4601      	mov	r1, r0
    83c8:	4630      	mov	r0, r6
    83ca:	f002 fa51 	bl	a870 <__aeabi_fdiv>
    83ce:	4680      	mov	r8, r0
    83d0:	4620      	mov	r0, r4
    83d2:	f002 f945 	bl	a660 <__aeabi_i2f>
    83d6:	4641      	mov	r1, r8
    83d8:	4681      	mov	r9, r0
    83da:	4640      	mov	r0, r8
    83dc:	f002 f994 	bl	a708 <__aeabi_fmul>
    83e0:	4601      	mov	r1, r0
    83e2:	4683      	mov	fp, r0
    83e4:	f002 f990 	bl	a708 <__aeabi_fmul>
    83e8:	4955      	ldr	r1, [pc, #340]	; (8540 <__ieee754_logf+0x234>)
    83ea:	f8df a174 	ldr.w	sl, [pc, #372]	; 8560 <__ieee754_logf+0x254>
    83ee:	4607      	mov	r7, r0
    83f0:	f002 f98a 	bl	a708 <__aeabi_fmul>
    83f4:	4953      	ldr	r1, [pc, #332]	; (8544 <__ieee754_logf+0x238>)
    83f6:	f002 f87f 	bl	a4f8 <__addsf3>
    83fa:	4639      	mov	r1, r7
    83fc:	f002 f984 	bl	a708 <__aeabi_fmul>
    8400:	4951      	ldr	r1, [pc, #324]	; (8548 <__ieee754_logf+0x23c>)
    8402:	f002 f879 	bl	a4f8 <__addsf3>
    8406:	4639      	mov	r1, r7
    8408:	f002 f97e 	bl	a708 <__aeabi_fmul>
    840c:	494f      	ldr	r1, [pc, #316]	; (854c <__ieee754_logf+0x240>)
    840e:	f002 f873 	bl	a4f8 <__addsf3>
    8412:	4659      	mov	r1, fp
    8414:	f002 f978 	bl	a708 <__aeabi_fmul>
    8418:	494d      	ldr	r1, [pc, #308]	; (8550 <__ieee754_logf+0x244>)
    841a:	4683      	mov	fp, r0
    841c:	4638      	mov	r0, r7
    841e:	f002 f973 	bl	a708 <__aeabi_fmul>
    8422:	494c      	ldr	r1, [pc, #304]	; (8554 <__ieee754_logf+0x248>)
    8424:	f002 f868 	bl	a4f8 <__addsf3>
    8428:	4639      	mov	r1, r7
    842a:	f002 f96d 	bl	a708 <__aeabi_fmul>
    842e:	494a      	ldr	r1, [pc, #296]	; (8558 <__ieee754_logf+0x24c>)
    8430:	f002 f862 	bl	a4f8 <__addsf3>
    8434:	4639      	mov	r1, r7
    8436:	f002 f967 	bl	a708 <__aeabi_fmul>
    843a:	4601      	mov	r1, r0
    843c:	4658      	mov	r0, fp
    843e:	f002 f85b 	bl	a4f8 <__addsf3>
    8442:	f5c5 1357 	rsb	r3, r5, #3522560	; 0x35c000
    8446:	44aa      	add	sl, r5
    8448:	f503 7322 	add.w	r3, r3, #648	; 0x288
    844c:	ea43 030a 	orr.w	r3, r3, sl
    8450:	2b00      	cmp	r3, #0
    8452:	4607      	mov	r7, r0
    8454:	dd4c      	ble.n	84f0 <__ieee754_logf+0x1e4>
    8456:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    845a:	4630      	mov	r0, r6
    845c:	f002 f954 	bl	a708 <__aeabi_fmul>
    8460:	4631      	mov	r1, r6
    8462:	f002 f951 	bl	a708 <__aeabi_fmul>
    8466:	4601      	mov	r1, r0
    8468:	4605      	mov	r5, r0
    846a:	4638      	mov	r0, r7
    846c:	f002 f844 	bl	a4f8 <__addsf3>
    8470:	4641      	mov	r1, r8
    8472:	f002 f949 	bl	a708 <__aeabi_fmul>
    8476:	4607      	mov	r7, r0
    8478:	2c00      	cmp	r4, #0
    847a:	d047      	beq.n	850c <__ieee754_logf+0x200>
    847c:	492e      	ldr	r1, [pc, #184]	; (8538 <__ieee754_logf+0x22c>)
    847e:	4648      	mov	r0, r9
    8480:	f002 f942 	bl	a708 <__aeabi_fmul>
    8484:	492d      	ldr	r1, [pc, #180]	; (853c <__ieee754_logf+0x230>)
    8486:	4604      	mov	r4, r0
    8488:	4648      	mov	r0, r9
    848a:	f002 f93d 	bl	a708 <__aeabi_fmul>
    848e:	4639      	mov	r1, r7
    8490:	f002 f832 	bl	a4f8 <__addsf3>
    8494:	4601      	mov	r1, r0
    8496:	4628      	mov	r0, r5
    8498:	f002 f82c 	bl	a4f4 <__aeabi_fsub>
    849c:	4631      	mov	r1, r6
    849e:	f002 f829 	bl	a4f4 <__aeabi_fsub>
    84a2:	4601      	mov	r1, r0
    84a4:	4620      	mov	r0, r4
    84a6:	f002 f825 	bl	a4f4 <__aeabi_fsub>
    84aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    84ae:	492b      	ldr	r1, [pc, #172]	; (855c <__ieee754_logf+0x250>)
    84b0:	4630      	mov	r0, r6
    84b2:	f002 f929 	bl	a708 <__aeabi_fmul>
    84b6:	4601      	mov	r1, r0
    84b8:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
    84bc:	f002 f81a 	bl	a4f4 <__aeabi_fsub>
    84c0:	4631      	mov	r1, r6
    84c2:	4605      	mov	r5, r0
    84c4:	4630      	mov	r0, r6
    84c6:	f002 f91f 	bl	a708 <__aeabi_fmul>
    84ca:	4601      	mov	r1, r0
    84cc:	4628      	mov	r0, r5
    84ce:	f002 f91b 	bl	a708 <__aeabi_fmul>
    84d2:	4605      	mov	r5, r0
    84d4:	b1ac      	cbz	r4, 8502 <__ieee754_logf+0x1f6>
    84d6:	4620      	mov	r0, r4
    84d8:	f002 f8c2 	bl	a660 <__aeabi_i2f>
    84dc:	4916      	ldr	r1, [pc, #88]	; (8538 <__ieee754_logf+0x22c>)
    84de:	4607      	mov	r7, r0
    84e0:	f002 f912 	bl	a708 <__aeabi_fmul>
    84e4:	4915      	ldr	r1, [pc, #84]	; (853c <__ieee754_logf+0x230>)
    84e6:	4604      	mov	r4, r0
    84e8:	4638      	mov	r0, r7
    84ea:	f002 f90d 	bl	a708 <__aeabi_fmul>
    84ee:	e7d1      	b.n	8494 <__ieee754_logf+0x188>
    84f0:	4601      	mov	r1, r0
    84f2:	4630      	mov	r0, r6
    84f4:	f001 fffe 	bl	a4f4 <__aeabi_fsub>
    84f8:	4641      	mov	r1, r8
    84fa:	f002 f905 	bl	a708 <__aeabi_fmul>
    84fe:	4605      	mov	r5, r0
    8500:	b96c      	cbnz	r4, 851e <__ieee754_logf+0x212>
    8502:	4629      	mov	r1, r5
    8504:	4630      	mov	r0, r6
    8506:	f001 fff5 	bl	a4f4 <__aeabi_fsub>
    850a:	e735      	b.n	8378 <__ieee754_logf+0x6c>
    850c:	4601      	mov	r1, r0
    850e:	4628      	mov	r0, r5
    8510:	f001 fff0 	bl	a4f4 <__aeabi_fsub>
    8514:	4601      	mov	r1, r0
    8516:	4630      	mov	r0, r6
    8518:	f001 ffec 	bl	a4f4 <__aeabi_fsub>
    851c:	e72c      	b.n	8378 <__ieee754_logf+0x6c>
    851e:	4906      	ldr	r1, [pc, #24]	; (8538 <__ieee754_logf+0x22c>)
    8520:	4648      	mov	r0, r9
    8522:	f002 f8f1 	bl	a708 <__aeabi_fmul>
    8526:	4905      	ldr	r1, [pc, #20]	; (853c <__ieee754_logf+0x230>)
    8528:	4604      	mov	r4, r0
    852a:	4648      	mov	r0, r9
    852c:	e7dd      	b.n	84ea <__ieee754_logf+0x1de>
    852e:	bf00      	nop
    8530:	004afb20 	.word	0x004afb20
    8534:	007ffff0 	.word	0x007ffff0
    8538:	3f317180 	.word	0x3f317180
    853c:	3717f7d1 	.word	0x3717f7d1
    8540:	3e178897 	.word	0x3e178897
    8544:	3e3a3325 	.word	0x3e3a3325
    8548:	3e924925 	.word	0x3e924925
    854c:	3f2aaaab 	.word	0x3f2aaaab
    8550:	3e1cd04f 	.word	0x3e1cd04f
    8554:	3e638e29 	.word	0x3e638e29
    8558:	3ecccccd 	.word	0x3ecccccd
    855c:	3eaaaaab 	.word	0x3eaaaaab
    8560:	ffcf5c30 	.word	0xffcf5c30

00008564 <__ieee754_powf>:
    8564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8568:	f031 4b00 	bics.w	fp, r1, #2147483648	; 0x80000000
    856c:	b087      	sub	sp, #28
    856e:	d011      	beq.n	8594 <__ieee754_powf+0x30>
    8570:	f020 4900 	bic.w	r9, r0, #2147483648	; 0x80000000
    8574:	f1b9 4fff 	cmp.w	r9, #2139095040	; 0x7f800000
    8578:	4682      	mov	sl, r0
    857a:	dd05      	ble.n	8588 <__ieee754_powf+0x24>
    857c:	48c0      	ldr	r0, [pc, #768]	; (8880 <__ieee754_powf+0x31c>)
    857e:	b007      	add	sp, #28
    8580:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8584:	f001 ba38 	b.w	99f8 <nanf>
    8588:	f1bb 4fff 	cmp.w	fp, #2139095040	; 0x7f800000
    858c:	dd07      	ble.n	859e <__ieee754_powf+0x3a>
    858e:	f1b9 5f7e 	cmp.w	r9, #1065353216	; 0x3f800000
    8592:	d1f3      	bne.n	857c <__ieee754_powf+0x18>
    8594:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    8598:	b007      	add	sp, #28
    859a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    859e:	2800      	cmp	r0, #0
    85a0:	460c      	mov	r4, r1
    85a2:	f2c0 812e 	blt.w	8802 <__ieee754_powf+0x29e>
    85a6:	2500      	movs	r5, #0
    85a8:	f1bb 4fff 	cmp.w	fp, #2139095040	; 0x7f800000
    85ac:	f000 813c 	beq.w	8828 <__ieee754_powf+0x2c4>
    85b0:	f1bb 5f7e 	cmp.w	fp, #1065353216	; 0x3f800000
    85b4:	4680      	mov	r8, r0
    85b6:	460e      	mov	r6, r1
    85b8:	f000 8182 	beq.w	88c0 <__ieee754_powf+0x35c>
    85bc:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    85c0:	f000 8191 	beq.w	88e6 <__ieee754_powf+0x382>
    85c4:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
    85c8:	f040 8139 	bne.w	883e <__ieee754_powf+0x2da>
    85cc:	f1ba 0f00 	cmp.w	sl, #0
    85d0:	f280 818d 	bge.w	88ee <__ieee754_powf+0x38a>
    85d4:	f001 f9c6 	bl	9964 <fabsf>
    85d8:	f1b9 4fff 	cmp.w	r9, #2139095040	; 0x7f800000
    85dc:	f000 8143 	beq.w	8866 <__ieee754_powf+0x302>
    85e0:	f1b9 0f00 	cmp.w	r9, #0
    85e4:	f000 813b 	beq.w	885e <__ieee754_powf+0x2fa>
    85e8:	f1b9 5f7e 	cmp.w	r9, #1065353216	; 0x3f800000
    85ec:	f000 8130 	beq.w	8850 <__ieee754_powf+0x2ec>
    85f0:	ea4f 77da 	mov.w	r7, sl, lsr #31
    85f4:	3f01      	subs	r7, #1
    85f6:	ea55 0307 	orrs.w	r3, r5, r7
    85fa:	f000 817d 	beq.w	88f8 <__ieee754_powf+0x394>
    85fe:	f1bb 4f9a 	cmp.w	fp, #1291845632	; 0x4d000000
    8602:	f340 8181 	ble.w	8908 <__ieee754_powf+0x3a4>
    8606:	4b9f      	ldr	r3, [pc, #636]	; (8884 <__ieee754_powf+0x320>)
    8608:	4599      	cmp	r9, r3
    860a:	f340 82ea 	ble.w	8be2 <__ieee754_powf+0x67e>
    860e:	4b9e      	ldr	r3, [pc, #632]	; (8888 <__ieee754_powf+0x324>)
    8610:	4599      	cmp	r9, r3
    8612:	f300 815e 	bgt.w	88d2 <__ieee754_powf+0x36e>
    8616:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    861a:	f001 ff6b 	bl	a4f4 <__aeabi_fsub>
    861e:	499b      	ldr	r1, [pc, #620]	; (888c <__ieee754_powf+0x328>)
    8620:	4680      	mov	r8, r0
    8622:	f002 f871 	bl	a708 <__aeabi_fmul>
    8626:	499a      	ldr	r1, [pc, #616]	; (8890 <__ieee754_powf+0x32c>)
    8628:	4681      	mov	r9, r0
    862a:	4640      	mov	r0, r8
    862c:	f002 f86c 	bl	a708 <__aeabi_fmul>
    8630:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
    8634:	4682      	mov	sl, r0
    8636:	4640      	mov	r0, r8
    8638:	f002 f866 	bl	a708 <__aeabi_fmul>
    863c:	4601      	mov	r1, r0
    863e:	4895      	ldr	r0, [pc, #596]	; (8894 <__ieee754_powf+0x330>)
    8640:	f001 ff58 	bl	a4f4 <__aeabi_fsub>
    8644:	4641      	mov	r1, r8
    8646:	f002 f85f 	bl	a708 <__aeabi_fmul>
    864a:	4601      	mov	r1, r0
    864c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
    8650:	f001 ff50 	bl	a4f4 <__aeabi_fsub>
    8654:	4641      	mov	r1, r8
    8656:	4683      	mov	fp, r0
    8658:	4640      	mov	r0, r8
    865a:	f002 f855 	bl	a708 <__aeabi_fmul>
    865e:	4601      	mov	r1, r0
    8660:	4658      	mov	r0, fp
    8662:	f002 f851 	bl	a708 <__aeabi_fmul>
    8666:	498c      	ldr	r1, [pc, #560]	; (8898 <__ieee754_powf+0x334>)
    8668:	f002 f84e 	bl	a708 <__aeabi_fmul>
    866c:	4601      	mov	r1, r0
    866e:	4650      	mov	r0, sl
    8670:	f001 ff40 	bl	a4f4 <__aeabi_fsub>
    8674:	4601      	mov	r1, r0
    8676:	4680      	mov	r8, r0
    8678:	4648      	mov	r0, r9
    867a:	f001 ff3d 	bl	a4f8 <__addsf3>
    867e:	f420 6b7f 	bic.w	fp, r0, #4080	; 0xff0
    8682:	f02b 0b0f 	bic.w	fp, fp, #15
    8686:	4649      	mov	r1, r9
    8688:	4658      	mov	r0, fp
    868a:	f001 ff33 	bl	a4f4 <__aeabi_fsub>
    868e:	4601      	mov	r1, r0
    8690:	4640      	mov	r0, r8
    8692:	f001 ff2f 	bl	a4f4 <__aeabi_fsub>
    8696:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
    869a:	f024 040f 	bic.w	r4, r4, #15
    869e:	3d01      	subs	r5, #1
    86a0:	ea55 0307 	orrs.w	r3, r5, r7
    86a4:	4680      	mov	r8, r0
    86a6:	4621      	mov	r1, r4
    86a8:	4630      	mov	r0, r6
    86aa:	bf0c      	ite	eq
    86ac:	4f7b      	ldreq	r7, [pc, #492]	; (889c <__ieee754_powf+0x338>)
    86ae:	f04f 577e 	movne.w	r7, #1065353216	; 0x3f800000
    86b2:	f001 ff1f 	bl	a4f4 <__aeabi_fsub>
    86b6:	4659      	mov	r1, fp
    86b8:	f002 f826 	bl	a708 <__aeabi_fmul>
    86bc:	4631      	mov	r1, r6
    86be:	4605      	mov	r5, r0
    86c0:	4640      	mov	r0, r8
    86c2:	f002 f821 	bl	a708 <__aeabi_fmul>
    86c6:	4601      	mov	r1, r0
    86c8:	4628      	mov	r0, r5
    86ca:	f001 ff15 	bl	a4f8 <__addsf3>
    86ce:	4621      	mov	r1, r4
    86d0:	4606      	mov	r6, r0
    86d2:	4658      	mov	r0, fp
    86d4:	f002 f818 	bl	a708 <__aeabi_fmul>
    86d8:	4680      	mov	r8, r0
    86da:	4601      	mov	r1, r0
    86dc:	4630      	mov	r0, r6
    86de:	f001 ff0b 	bl	a4f8 <__addsf3>
    86e2:	2800      	cmp	r0, #0
    86e4:	4681      	mov	r9, r0
    86e6:	4604      	mov	r4, r0
    86e8:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
    86ec:	46c2      	mov	sl, r8
    86ee:	f340 8223 	ble.w	8b38 <__ieee754_powf+0x5d4>
    86f2:	f1b5 4f86 	cmp.w	r5, #1124073472	; 0x43000000
    86f6:	f300 826c 	bgt.w	8bd2 <__ieee754_powf+0x66e>
    86fa:	f000 825b 	beq.w	8bb4 <__ieee754_powf+0x650>
    86fe:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
    8702:	f300 8227 	bgt.w	8b54 <__ieee754_powf+0x5f0>
    8706:	2500      	movs	r5, #0
    8708:	46a9      	mov	r9, r5
    870a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
    870e:	f024 040f 	bic.w	r4, r4, #15
    8712:	4620      	mov	r0, r4
    8714:	4962      	ldr	r1, [pc, #392]	; (88a0 <__ieee754_powf+0x33c>)
    8716:	f001 fff7 	bl	a708 <__aeabi_fmul>
    871a:	4651      	mov	r1, sl
    871c:	4680      	mov	r8, r0
    871e:	4620      	mov	r0, r4
    8720:	f001 fee8 	bl	a4f4 <__aeabi_fsub>
    8724:	4601      	mov	r1, r0
    8726:	4630      	mov	r0, r6
    8728:	f001 fee4 	bl	a4f4 <__aeabi_fsub>
    872c:	495d      	ldr	r1, [pc, #372]	; (88a4 <__ieee754_powf+0x340>)
    872e:	f001 ffeb 	bl	a708 <__aeabi_fmul>
    8732:	495d      	ldr	r1, [pc, #372]	; (88a8 <__ieee754_powf+0x344>)
    8734:	4606      	mov	r6, r0
    8736:	4620      	mov	r0, r4
    8738:	f001 ffe6 	bl	a708 <__aeabi_fmul>
    873c:	4601      	mov	r1, r0
    873e:	4630      	mov	r0, r6
    8740:	f001 feda 	bl	a4f8 <__addsf3>
    8744:	4606      	mov	r6, r0
    8746:	4601      	mov	r1, r0
    8748:	4640      	mov	r0, r8
    874a:	f001 fed5 	bl	a4f8 <__addsf3>
    874e:	4641      	mov	r1, r8
    8750:	4604      	mov	r4, r0
    8752:	f001 fecf 	bl	a4f4 <__aeabi_fsub>
    8756:	4601      	mov	r1, r0
    8758:	4630      	mov	r0, r6
    875a:	f001 fecb 	bl	a4f4 <__aeabi_fsub>
    875e:	4621      	mov	r1, r4
    8760:	4680      	mov	r8, r0
    8762:	4620      	mov	r0, r4
    8764:	f001 ffd0 	bl	a708 <__aeabi_fmul>
    8768:	4950      	ldr	r1, [pc, #320]	; (88ac <__ieee754_powf+0x348>)
    876a:	4606      	mov	r6, r0
    876c:	f001 ffcc 	bl	a708 <__aeabi_fmul>
    8770:	494f      	ldr	r1, [pc, #316]	; (88b0 <__ieee754_powf+0x34c>)
    8772:	f001 febf 	bl	a4f4 <__aeabi_fsub>
    8776:	4631      	mov	r1, r6
    8778:	f001 ffc6 	bl	a708 <__aeabi_fmul>
    877c:	494d      	ldr	r1, [pc, #308]	; (88b4 <__ieee754_powf+0x350>)
    877e:	f001 febb 	bl	a4f8 <__addsf3>
    8782:	4631      	mov	r1, r6
    8784:	f001 ffc0 	bl	a708 <__aeabi_fmul>
    8788:	494b      	ldr	r1, [pc, #300]	; (88b8 <__ieee754_powf+0x354>)
    878a:	f001 feb3 	bl	a4f4 <__aeabi_fsub>
    878e:	4631      	mov	r1, r6
    8790:	f001 ffba 	bl	a708 <__aeabi_fmul>
    8794:	4949      	ldr	r1, [pc, #292]	; (88bc <__ieee754_powf+0x358>)
    8796:	f001 feaf 	bl	a4f8 <__addsf3>
    879a:	4631      	mov	r1, r6
    879c:	f001 ffb4 	bl	a708 <__aeabi_fmul>
    87a0:	4601      	mov	r1, r0
    87a2:	4620      	mov	r0, r4
    87a4:	f001 fea6 	bl	a4f4 <__aeabi_fsub>
    87a8:	4606      	mov	r6, r0
    87aa:	4601      	mov	r1, r0
    87ac:	4620      	mov	r0, r4
    87ae:	f001 ffab 	bl	a708 <__aeabi_fmul>
    87b2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    87b6:	4682      	mov	sl, r0
    87b8:	4630      	mov	r0, r6
    87ba:	f001 fe9b 	bl	a4f4 <__aeabi_fsub>
    87be:	4601      	mov	r1, r0
    87c0:	4650      	mov	r0, sl
    87c2:	f002 f855 	bl	a870 <__aeabi_fdiv>
    87c6:	4641      	mov	r1, r8
    87c8:	4606      	mov	r6, r0
    87ca:	4620      	mov	r0, r4
    87cc:	f001 ff9c 	bl	a708 <__aeabi_fmul>
    87d0:	4641      	mov	r1, r8
    87d2:	f001 fe91 	bl	a4f8 <__addsf3>
    87d6:	4601      	mov	r1, r0
    87d8:	4630      	mov	r0, r6
    87da:	f001 fe8b 	bl	a4f4 <__aeabi_fsub>
    87de:	4621      	mov	r1, r4
    87e0:	f001 fe88 	bl	a4f4 <__aeabi_fsub>
    87e4:	4601      	mov	r1, r0
    87e6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    87ea:	f001 fe83 	bl	a4f4 <__aeabi_fsub>
    87ee:	1943      	adds	r3, r0, r5
    87f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    87f4:	f2c0 8230 	blt.w	8c58 <__ieee754_powf+0x6f4>
    87f8:	4618      	mov	r0, r3
    87fa:	4639      	mov	r1, r7
    87fc:	f001 ff84 	bl	a708 <__aeabi_fmul>
    8800:	e6ca      	b.n	8598 <__ieee754_powf+0x34>
    8802:	f1bb 4f97 	cmp.w	fp, #1266679808	; 0x4b800000
    8806:	da18      	bge.n	883a <__ieee754_powf+0x2d6>
    8808:	f1bb 5f7e 	cmp.w	fp, #1065353216	; 0x3f800000
    880c:	db0a      	blt.n	8824 <__ieee754_powf+0x2c0>
    880e:	ea4f 53eb 	mov.w	r3, fp, asr #23
    8812:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
    8816:	fa4b f203 	asr.w	r2, fp, r3
    881a:	fa02 f303 	lsl.w	r3, r2, r3
    881e:	455b      	cmp	r3, fp
    8820:	f000 8185 	beq.w	8b2e <__ieee754_powf+0x5ca>
    8824:	2500      	movs	r5, #0
    8826:	e6c3      	b.n	85b0 <__ieee754_powf+0x4c>
    8828:	f1b9 5f7e 	cmp.w	r9, #1065353216	; 0x3f800000
    882c:	f43f aeb2 	beq.w	8594 <__ieee754_powf+0x30>
    8830:	dd54      	ble.n	88dc <__ieee754_powf+0x378>
    8832:	2c00      	cmp	r4, #0
    8834:	db50      	blt.n	88d8 <__ieee754_powf+0x374>
    8836:	4608      	mov	r0, r1
    8838:	e6ae      	b.n	8598 <__ieee754_powf+0x34>
    883a:	2502      	movs	r5, #2
    883c:	e6b4      	b.n	85a8 <__ieee754_powf+0x44>
    883e:	f001 f891 	bl	9964 <fabsf>
    8842:	f1b9 4fff 	cmp.w	r9, #2139095040	; 0x7f800000
    8846:	d003      	beq.n	8850 <__ieee754_powf+0x2ec>
    8848:	f1b9 0f00 	cmp.w	r9, #0
    884c:	f47f aecc 	bne.w	85e8 <__ieee754_powf+0x84>
    8850:	2c00      	cmp	r4, #0
    8852:	da04      	bge.n	885e <__ieee754_powf+0x2fa>
    8854:	4601      	mov	r1, r0
    8856:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    885a:	f002 f809 	bl	a870 <__aeabi_fdiv>
    885e:	f1ba 0f00 	cmp.w	sl, #0
    8862:	f6bf ae99 	bge.w	8598 <__ieee754_powf+0x34>
    8866:	f1a9 597e 	sub.w	r9, r9, #1065353216	; 0x3f800000
    886a:	ea59 0305 	orrs.w	r3, r9, r5
    886e:	f040 8157 	bne.w	8b20 <__ieee754_powf+0x5bc>
    8872:	4601      	mov	r1, r0
    8874:	f001 fe3e 	bl	a4f4 <__aeabi_fsub>
    8878:	4601      	mov	r1, r0
    887a:	f001 fff9 	bl	a870 <__aeabi_fdiv>
    887e:	e68b      	b.n	8598 <__ieee754_powf+0x34>
    8880:	0000ba68 	.word	0x0000ba68
    8884:	3f7ffff7 	.word	0x3f7ffff7
    8888:	3f800007 	.word	0x3f800007
    888c:	3fb8aa00 	.word	0x3fb8aa00
    8890:	36eca570 	.word	0x36eca570
    8894:	3eaaaaab 	.word	0x3eaaaaab
    8898:	3fb8aa3b 	.word	0x3fb8aa3b
    889c:	bf800000 	.word	0xbf800000
    88a0:	3f317200 	.word	0x3f317200
    88a4:	3f317218 	.word	0x3f317218
    88a8:	35bfbe8c 	.word	0x35bfbe8c
    88ac:	3331bb4c 	.word	0x3331bb4c
    88b0:	35ddea0e 	.word	0x35ddea0e
    88b4:	388ab355 	.word	0x388ab355
    88b8:	3b360b61 	.word	0x3b360b61
    88bc:	3e2aaaab 	.word	0x3e2aaaab
    88c0:	2c00      	cmp	r4, #0
    88c2:	f6bf ae69 	bge.w	8598 <__ieee754_powf+0x34>
    88c6:	4601      	mov	r1, r0
    88c8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    88cc:	f001 ffd0 	bl	a870 <__aeabi_fdiv>
    88d0:	e662      	b.n	8598 <__ieee754_powf+0x34>
    88d2:	2c00      	cmp	r4, #0
    88d4:	f300 8188 	bgt.w	8be8 <__ieee754_powf+0x684>
    88d8:	2000      	movs	r0, #0
    88da:	e65d      	b.n	8598 <__ieee754_powf+0x34>
    88dc:	2c00      	cmp	r4, #0
    88de:	dafb      	bge.n	88d8 <__ieee754_powf+0x374>
    88e0:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
    88e4:	e658      	b.n	8598 <__ieee754_powf+0x34>
    88e6:	4601      	mov	r1, r0
    88e8:	f001 ff0e 	bl	a708 <__aeabi_fmul>
    88ec:	e654      	b.n	8598 <__ieee754_powf+0x34>
    88ee:	b007      	add	sp, #28
    88f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    88f4:	f000 bb2e 	b.w	8f54 <__ieee754_sqrtf>
    88f8:	4641      	mov	r1, r8
    88fa:	4640      	mov	r0, r8
    88fc:	f001 fdfa 	bl	a4f4 <__aeabi_fsub>
    8900:	4601      	mov	r1, r0
    8902:	f001 ffb5 	bl	a870 <__aeabi_fdiv>
    8906:	e647      	b.n	8598 <__ieee754_powf+0x34>
    8908:	f01a 4fff 	tst.w	sl, #2139095040	; 0x7f800000
    890c:	f040 8150 	bne.w	8bb0 <__ieee754_powf+0x64c>
    8910:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
    8914:	f001 fef8 	bl	a708 <__aeabi_fmul>
    8918:	f06f 0217 	mvn.w	r2, #23
    891c:	4681      	mov	r9, r0
    891e:	ea4f 53e9 	mov.w	r3, r9, asr #23
    8922:	49b4      	ldr	r1, [pc, #720]	; (8bf4 <__ieee754_powf+0x690>)
    8924:	f3c9 0916 	ubfx	r9, r9, #0, #23
    8928:	3b7f      	subs	r3, #127	; 0x7f
    892a:	189a      	adds	r2, r3, r2
    892c:	4589      	cmp	r9, r1
    892e:	9202      	str	r2, [sp, #8]
    8930:	f049 587e 	orr.w	r8, r9, #1065353216	; 0x3f800000
    8934:	f340 8134 	ble.w	8ba0 <__ieee754_powf+0x63c>
    8938:	4baf      	ldr	r3, [pc, #700]	; (8bf8 <__ieee754_powf+0x694>)
    893a:	4599      	cmp	r9, r3
    893c:	f340 817a 	ble.w	8c34 <__ieee754_powf+0x6d0>
    8940:	2300      	movs	r3, #0
    8942:	9301      	str	r3, [sp, #4]
    8944:	3201      	adds	r2, #1
    8946:	9305      	str	r3, [sp, #20]
    8948:	2300      	movs	r3, #0
    894a:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
    894e:	9202      	str	r2, [sp, #8]
    8950:	f5a8 0800 	sub.w	r8, r8, #8388608	; 0x800000
    8954:	9300      	str	r3, [sp, #0]
    8956:	4651      	mov	r1, sl
    8958:	4640      	mov	r0, r8
    895a:	f001 fdcb 	bl	a4f4 <__aeabi_fsub>
    895e:	4651      	mov	r1, sl
    8960:	4683      	mov	fp, r0
    8962:	4640      	mov	r0, r8
    8964:	f001 fdc8 	bl	a4f8 <__addsf3>
    8968:	4601      	mov	r1, r0
    896a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    896e:	f001 ff7f 	bl	a870 <__aeabi_fdiv>
    8972:	4601      	mov	r1, r0
    8974:	9004      	str	r0, [sp, #16]
    8976:	4658      	mov	r0, fp
    8978:	f001 fec6 	bl	a708 <__aeabi_fmul>
    897c:	ea4f 0268 	mov.w	r2, r8, asr #1
    8980:	9b00      	ldr	r3, [sp, #0]
    8982:	9000      	str	r0, [sp, #0]
    8984:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    8988:	46c1      	mov	r9, r8
    898a:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
    898e:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
    8992:	441a      	add	r2, r3
    8994:	f028 080f 	bic.w	r8, r8, #15
    8998:	4611      	mov	r1, r2
    899a:	4640      	mov	r0, r8
    899c:	9203      	str	r2, [sp, #12]
    899e:	f001 feb3 	bl	a708 <__aeabi_fmul>
    89a2:	4601      	mov	r1, r0
    89a4:	4658      	mov	r0, fp
    89a6:	f001 fda5 	bl	a4f4 <__aeabi_fsub>
    89aa:	9a03      	ldr	r2, [sp, #12]
    89ac:	4683      	mov	fp, r0
    89ae:	4651      	mov	r1, sl
    89b0:	4610      	mov	r0, r2
    89b2:	f001 fd9f 	bl	a4f4 <__aeabi_fsub>
    89b6:	4601      	mov	r1, r0
    89b8:	4648      	mov	r0, r9
    89ba:	f001 fd9b 	bl	a4f4 <__aeabi_fsub>
    89be:	4641      	mov	r1, r8
    89c0:	f001 fea2 	bl	a708 <__aeabi_fmul>
    89c4:	4601      	mov	r1, r0
    89c6:	4658      	mov	r0, fp
    89c8:	f001 fd94 	bl	a4f4 <__aeabi_fsub>
    89cc:	9b04      	ldr	r3, [sp, #16]
    89ce:	4619      	mov	r1, r3
    89d0:	f001 fe9a 	bl	a708 <__aeabi_fmul>
    89d4:	4683      	mov	fp, r0
    89d6:	9800      	ldr	r0, [sp, #0]
    89d8:	4601      	mov	r1, r0
    89da:	f001 fe95 	bl	a708 <__aeabi_fmul>
    89de:	4987      	ldr	r1, [pc, #540]	; (8bfc <__ieee754_powf+0x698>)
    89e0:	4681      	mov	r9, r0
    89e2:	f001 fe91 	bl	a708 <__aeabi_fmul>
    89e6:	4986      	ldr	r1, [pc, #536]	; (8c00 <__ieee754_powf+0x69c>)
    89e8:	f001 fd86 	bl	a4f8 <__addsf3>
    89ec:	4649      	mov	r1, r9
    89ee:	f001 fe8b 	bl	a708 <__aeabi_fmul>
    89f2:	4984      	ldr	r1, [pc, #528]	; (8c04 <__ieee754_powf+0x6a0>)
    89f4:	f001 fd80 	bl	a4f8 <__addsf3>
    89f8:	4649      	mov	r1, r9
    89fa:	f001 fe85 	bl	a708 <__aeabi_fmul>
    89fe:	4982      	ldr	r1, [pc, #520]	; (8c08 <__ieee754_powf+0x6a4>)
    8a00:	f001 fd7a 	bl	a4f8 <__addsf3>
    8a04:	4649      	mov	r1, r9
    8a06:	f001 fe7f 	bl	a708 <__aeabi_fmul>
    8a0a:	4980      	ldr	r1, [pc, #512]	; (8c0c <__ieee754_powf+0x6a8>)
    8a0c:	f001 fd74 	bl	a4f8 <__addsf3>
    8a10:	4649      	mov	r1, r9
    8a12:	f001 fe79 	bl	a708 <__aeabi_fmul>
    8a16:	497e      	ldr	r1, [pc, #504]	; (8c10 <__ieee754_powf+0x6ac>)
    8a18:	f001 fd6e 	bl	a4f8 <__addsf3>
    8a1c:	4649      	mov	r1, r9
    8a1e:	4682      	mov	sl, r0
    8a20:	4648      	mov	r0, r9
    8a22:	f001 fe71 	bl	a708 <__aeabi_fmul>
    8a26:	4601      	mov	r1, r0
    8a28:	4650      	mov	r0, sl
    8a2a:	f001 fe6d 	bl	a708 <__aeabi_fmul>
    8a2e:	4641      	mov	r1, r8
    8a30:	4681      	mov	r9, r0
    8a32:	9800      	ldr	r0, [sp, #0]
    8a34:	f001 fd60 	bl	a4f8 <__addsf3>
    8a38:	4659      	mov	r1, fp
    8a3a:	f001 fe65 	bl	a708 <__aeabi_fmul>
    8a3e:	4649      	mov	r1, r9
    8a40:	f001 fd5a 	bl	a4f8 <__addsf3>
    8a44:	4641      	mov	r1, r8
    8a46:	4682      	mov	sl, r0
    8a48:	4640      	mov	r0, r8
    8a4a:	f001 fe5d 	bl	a708 <__aeabi_fmul>
    8a4e:	4971      	ldr	r1, [pc, #452]	; (8c14 <__ieee754_powf+0x6b0>)
    8a50:	9003      	str	r0, [sp, #12]
    8a52:	f001 fd51 	bl	a4f8 <__addsf3>
    8a56:	4651      	mov	r1, sl
    8a58:	f001 fd4e 	bl	a4f8 <__addsf3>
    8a5c:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
    8a60:	f029 090f 	bic.w	r9, r9, #15
    8a64:	4649      	mov	r1, r9
    8a66:	4640      	mov	r0, r8
    8a68:	f001 fe4e 	bl	a708 <__aeabi_fmul>
    8a6c:	4969      	ldr	r1, [pc, #420]	; (8c14 <__ieee754_powf+0x6b0>)
    8a6e:	4680      	mov	r8, r0
    8a70:	4648      	mov	r0, r9
    8a72:	f001 fd3f 	bl	a4f4 <__aeabi_fsub>
    8a76:	9b03      	ldr	r3, [sp, #12]
    8a78:	4619      	mov	r1, r3
    8a7a:	f001 fd3b 	bl	a4f4 <__aeabi_fsub>
    8a7e:	4601      	mov	r1, r0
    8a80:	4650      	mov	r0, sl
    8a82:	f001 fd37 	bl	a4f4 <__aeabi_fsub>
    8a86:	9900      	ldr	r1, [sp, #0]
    8a88:	f001 fe3e 	bl	a708 <__aeabi_fmul>
    8a8c:	4649      	mov	r1, r9
    8a8e:	4682      	mov	sl, r0
    8a90:	4658      	mov	r0, fp
    8a92:	f001 fe39 	bl	a708 <__aeabi_fmul>
    8a96:	4601      	mov	r1, r0
    8a98:	4650      	mov	r0, sl
    8a9a:	f001 fd2d 	bl	a4f8 <__addsf3>
    8a9e:	4683      	mov	fp, r0
    8aa0:	4601      	mov	r1, r0
    8aa2:	4640      	mov	r0, r8
    8aa4:	f001 fd28 	bl	a4f8 <__addsf3>
    8aa8:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
    8aac:	f02a 0a0f 	bic.w	sl, sl, #15
    8ab0:	4650      	mov	r0, sl
    8ab2:	4959      	ldr	r1, [pc, #356]	; (8c18 <__ieee754_powf+0x6b4>)
    8ab4:	f001 fe28 	bl	a708 <__aeabi_fmul>
    8ab8:	4641      	mov	r1, r8
    8aba:	4681      	mov	r9, r0
    8abc:	4650      	mov	r0, sl
    8abe:	f001 fd19 	bl	a4f4 <__aeabi_fsub>
    8ac2:	4601      	mov	r1, r0
    8ac4:	4658      	mov	r0, fp
    8ac6:	f001 fd15 	bl	a4f4 <__aeabi_fsub>
    8aca:	4954      	ldr	r1, [pc, #336]	; (8c1c <__ieee754_powf+0x6b8>)
    8acc:	f001 fe1c 	bl	a708 <__aeabi_fmul>
    8ad0:	4953      	ldr	r1, [pc, #332]	; (8c20 <__ieee754_powf+0x6bc>)
    8ad2:	4680      	mov	r8, r0
    8ad4:	4650      	mov	r0, sl
    8ad6:	f001 fe17 	bl	a708 <__aeabi_fmul>
    8ada:	4601      	mov	r1, r0
    8adc:	4640      	mov	r0, r8
    8ade:	f001 fd0b 	bl	a4f8 <__addsf3>
    8ae2:	9905      	ldr	r1, [sp, #20]
    8ae4:	f001 fd08 	bl	a4f8 <__addsf3>
    8ae8:	4680      	mov	r8, r0
    8aea:	9802      	ldr	r0, [sp, #8]
    8aec:	f001 fdb8 	bl	a660 <__aeabi_i2f>
    8af0:	4641      	mov	r1, r8
    8af2:	4682      	mov	sl, r0
    8af4:	4648      	mov	r0, r9
    8af6:	f001 fcff 	bl	a4f8 <__addsf3>
    8afa:	9901      	ldr	r1, [sp, #4]
    8afc:	f001 fcfc 	bl	a4f8 <__addsf3>
    8b00:	4651      	mov	r1, sl
    8b02:	f001 fcf9 	bl	a4f8 <__addsf3>
    8b06:	f420 6b7f 	bic.w	fp, r0, #4080	; 0xff0
    8b0a:	f02b 0b0f 	bic.w	fp, fp, #15
    8b0e:	4651      	mov	r1, sl
    8b10:	4658      	mov	r0, fp
    8b12:	f001 fcef 	bl	a4f4 <__aeabi_fsub>
    8b16:	9901      	ldr	r1, [sp, #4]
    8b18:	f001 fcec 	bl	a4f4 <__aeabi_fsub>
    8b1c:	4649      	mov	r1, r9
    8b1e:	e5b4      	b.n	868a <__ieee754_powf+0x126>
    8b20:	2d01      	cmp	r5, #1
    8b22:	f47f ad39 	bne.w	8598 <__ieee754_powf+0x34>
    8b26:	f100 4100 	add.w	r1, r0, #2147483648	; 0x80000000
    8b2a:	4608      	mov	r0, r1
    8b2c:	e534      	b.n	8598 <__ieee754_powf+0x34>
    8b2e:	f002 0201 	and.w	r2, r2, #1
    8b32:	f1c2 0502 	rsb	r5, r2, #2
    8b36:	e53b      	b.n	85b0 <__ieee754_powf+0x4c>
    8b38:	4b3a      	ldr	r3, [pc, #232]	; (8c24 <__ieee754_powf+0x6c0>)
    8b3a:	429d      	cmp	r5, r3
    8b3c:	f300 8084 	bgt.w	8c48 <__ieee754_powf+0x6e4>
    8b40:	f47f addd 	bne.w	86fe <__ieee754_powf+0x19a>
    8b44:	4641      	mov	r1, r8
    8b46:	f001 fcd5 	bl	a4f4 <__aeabi_fsub>
    8b4a:	4631      	mov	r1, r6
    8b4c:	f001 ff8e 	bl	aa6c <__aeabi_fcmpge>
    8b50:	2800      	cmp	r0, #0
    8b52:	d179      	bne.n	8c48 <__ieee754_powf+0x6e4>
    8b54:	15ed      	asrs	r5, r5, #23
    8b56:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    8b5a:	3d7e      	subs	r5, #126	; 0x7e
    8b5c:	fa43 f505 	asr.w	r5, r3, r5
    8b60:	192b      	adds	r3, r5, r4
    8b62:	f3c3 52c7 	ubfx	r2, r3, #23, #8
    8b66:	4930      	ldr	r1, [pc, #192]	; (8c28 <__ieee754_powf+0x6c4>)
    8b68:	f3c3 0916 	ubfx	r9, r3, #0, #23
    8b6c:	3a7f      	subs	r2, #127	; 0x7f
    8b6e:	4111      	asrs	r1, r2
    8b70:	f449 0900 	orr.w	r9, r9, #8388608	; 0x800000
    8b74:	f1c2 0217 	rsb	r2, r2, #23
    8b78:	fa49 f902 	asr.w	r9, r9, r2
    8b7c:	2c00      	cmp	r4, #0
    8b7e:	ea23 0101 	bic.w	r1, r3, r1
    8b82:	4640      	mov	r0, r8
    8b84:	bfb8      	it	lt
    8b86:	f1c9 0900 	rsblt	r9, r9, #0
    8b8a:	f001 fcb3 	bl	a4f4 <__aeabi_fsub>
    8b8e:	4601      	mov	r1, r0
    8b90:	4682      	mov	sl, r0
    8b92:	4630      	mov	r0, r6
    8b94:	f001 fcb0 	bl	a4f8 <__addsf3>
    8b98:	ea4f 55c9 	mov.w	r5, r9, lsl #23
    8b9c:	4604      	mov	r4, r0
    8b9e:	e5b4      	b.n	870a <__ieee754_powf+0x1a6>
    8ba0:	2300      	movs	r3, #0
    8ba2:	9301      	str	r3, [sp, #4]
    8ba4:	9305      	str	r3, [sp, #20]
    8ba6:	2300      	movs	r3, #0
    8ba8:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
    8bac:	9300      	str	r3, [sp, #0]
    8bae:	e6d2      	b.n	8956 <__ieee754_powf+0x3f2>
    8bb0:	2200      	movs	r2, #0
    8bb2:	e6b4      	b.n	891e <__ieee754_powf+0x3ba>
    8bb4:	491d      	ldr	r1, [pc, #116]	; (8c2c <__ieee754_powf+0x6c8>)
    8bb6:	4630      	mov	r0, r6
    8bb8:	f001 fc9e 	bl	a4f8 <__addsf3>
    8bbc:	4641      	mov	r1, r8
    8bbe:	4682      	mov	sl, r0
    8bc0:	4648      	mov	r0, r9
    8bc2:	f001 fc97 	bl	a4f4 <__aeabi_fsub>
    8bc6:	4601      	mov	r1, r0
    8bc8:	4650      	mov	r0, sl
    8bca:	f001 ff59 	bl	aa80 <__aeabi_fcmpgt>
    8bce:	2800      	cmp	r0, #0
    8bd0:	d0c0      	beq.n	8b54 <__ieee754_powf+0x5f0>
    8bd2:	4638      	mov	r0, r7
    8bd4:	4916      	ldr	r1, [pc, #88]	; (8c30 <__ieee754_powf+0x6cc>)
    8bd6:	f001 fd97 	bl	a708 <__aeabi_fmul>
    8bda:	4915      	ldr	r1, [pc, #84]	; (8c30 <__ieee754_powf+0x6cc>)
    8bdc:	f001 fd94 	bl	a708 <__aeabi_fmul>
    8be0:	e4da      	b.n	8598 <__ieee754_powf+0x34>
    8be2:	2c00      	cmp	r4, #0
    8be4:	f6bf ae78 	bge.w	88d8 <__ieee754_powf+0x374>
    8be8:	4911      	ldr	r1, [pc, #68]	; (8c30 <__ieee754_powf+0x6cc>)
    8bea:	4608      	mov	r0, r1
    8bec:	f001 fd8c 	bl	a708 <__aeabi_fmul>
    8bf0:	e4d2      	b.n	8598 <__ieee754_powf+0x34>
    8bf2:	bf00      	nop
    8bf4:	001cc471 	.word	0x001cc471
    8bf8:	005db3d6 	.word	0x005db3d6
    8bfc:	3e53f142 	.word	0x3e53f142
    8c00:	3e6c3255 	.word	0x3e6c3255
    8c04:	3e8ba305 	.word	0x3e8ba305
    8c08:	3eaaaaab 	.word	0x3eaaaaab
    8c0c:	3edb6db7 	.word	0x3edb6db7
    8c10:	3f19999a 	.word	0x3f19999a
    8c14:	40400000 	.word	0x40400000
    8c18:	3f763800 	.word	0x3f763800
    8c1c:	3f76384f 	.word	0x3f76384f
    8c20:	369dc3a0 	.word	0x369dc3a0
    8c24:	43160000 	.word	0x43160000
    8c28:	007fffff 	.word	0x007fffff
    8c2c:	3338aa3c 	.word	0x3338aa3c
    8c30:	7149f2ca 	.word	0x7149f2ca
    8c34:	4b0a      	ldr	r3, [pc, #40]	; (8c60 <__ieee754_powf+0x6fc>)
    8c36:	9301      	str	r3, [sp, #4]
    8c38:	4b0a      	ldr	r3, [pc, #40]	; (8c64 <__ieee754_powf+0x700>)
    8c3a:	9305      	str	r3, [sp, #20]
    8c3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    8c40:	f04f 5a7f 	mov.w	sl, #1069547520	; 0x3fc00000
    8c44:	9300      	str	r3, [sp, #0]
    8c46:	e686      	b.n	8956 <__ieee754_powf+0x3f2>
    8c48:	4638      	mov	r0, r7
    8c4a:	4907      	ldr	r1, [pc, #28]	; (8c68 <__ieee754_powf+0x704>)
    8c4c:	f001 fd5c 	bl	a708 <__aeabi_fmul>
    8c50:	4905      	ldr	r1, [pc, #20]	; (8c68 <__ieee754_powf+0x704>)
    8c52:	f001 fd59 	bl	a708 <__aeabi_fmul>
    8c56:	e49f      	b.n	8598 <__ieee754_powf+0x34>
    8c58:	4649      	mov	r1, r9
    8c5a:	f000 ff25 	bl	9aa8 <scalbnf>
    8c5e:	e5cc      	b.n	87fa <__ieee754_powf+0x296>
    8c60:	3f15c000 	.word	0x3f15c000
    8c64:	35d1cfdc 	.word	0x35d1cfdc
    8c68:	0da24260 	.word	0x0da24260

00008c6c <__ieee754_rem_pio2f>:
    8c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c70:	4aab      	ldr	r2, [pc, #684]	; (8f20 <__ieee754_rem_pio2f+0x2b4>)
    8c72:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
    8c76:	4294      	cmp	r4, r2
    8c78:	b089      	sub	sp, #36	; 0x24
    8c7a:	dd6e      	ble.n	8d5a <__ieee754_rem_pio2f+0xee>
    8c7c:	4aa9      	ldr	r2, [pc, #676]	; (8f24 <__ieee754_rem_pio2f+0x2b8>)
    8c7e:	4294      	cmp	r4, r2
    8c80:	4606      	mov	r6, r0
    8c82:	460d      	mov	r5, r1
    8c84:	dc1c      	bgt.n	8cc0 <__ieee754_rem_pio2f+0x54>
    8c86:	2800      	cmp	r0, #0
    8c88:	f024 040f 	bic.w	r4, r4, #15
    8c8c:	49a6      	ldr	r1, [pc, #664]	; (8f28 <__ieee754_rem_pio2f+0x2bc>)
    8c8e:	f340 811e 	ble.w	8ece <__ieee754_rem_pio2f+0x262>
    8c92:	f001 fc2f 	bl	a4f4 <__aeabi_fsub>
    8c96:	4ba5      	ldr	r3, [pc, #660]	; (8f2c <__ieee754_rem_pio2f+0x2c0>)
    8c98:	429c      	cmp	r4, r3
    8c9a:	4606      	mov	r6, r0
    8c9c:	d06c      	beq.n	8d78 <__ieee754_rem_pio2f+0x10c>
    8c9e:	49a4      	ldr	r1, [pc, #656]	; (8f30 <__ieee754_rem_pio2f+0x2c4>)
    8ca0:	f001 fc28 	bl	a4f4 <__aeabi_fsub>
    8ca4:	4601      	mov	r1, r0
    8ca6:	6028      	str	r0, [r5, #0]
    8ca8:	4630      	mov	r0, r6
    8caa:	f001 fc23 	bl	a4f4 <__aeabi_fsub>
    8cae:	49a0      	ldr	r1, [pc, #640]	; (8f30 <__ieee754_rem_pio2f+0x2c4>)
    8cb0:	f001 fc20 	bl	a4f4 <__aeabi_fsub>
    8cb4:	2701      	movs	r7, #1
    8cb6:	6068      	str	r0, [r5, #4]
    8cb8:	4638      	mov	r0, r7
    8cba:	b009      	add	sp, #36	; 0x24
    8cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8cc0:	4a9c      	ldr	r2, [pc, #624]	; (8f34 <__ieee754_rem_pio2f+0x2c8>)
    8cc2:	4294      	cmp	r4, r2
    8cc4:	dd6d      	ble.n	8da2 <__ieee754_rem_pio2f+0x136>
    8cc6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
    8cca:	da4e      	bge.n	8d6a <__ieee754_rem_pio2f+0xfe>
    8ccc:	15e7      	asrs	r7, r4, #23
    8cce:	3f86      	subs	r7, #134	; 0x86
    8cd0:	eba4 54c7 	sub.w	r4, r4, r7, lsl #23
    8cd4:	4620      	mov	r0, r4
    8cd6:	f001 fef3 	bl	aac0 <__aeabi_f2iz>
    8cda:	f001 fcc1 	bl	a660 <__aeabi_i2f>
    8cde:	4603      	mov	r3, r0
    8ce0:	4601      	mov	r1, r0
    8ce2:	4620      	mov	r0, r4
    8ce4:	9305      	str	r3, [sp, #20]
    8ce6:	f001 fc05 	bl	a4f4 <__aeabi_fsub>
    8cea:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
    8cee:	f001 fd0b 	bl	a708 <__aeabi_fmul>
    8cf2:	4680      	mov	r8, r0
    8cf4:	f001 fee4 	bl	aac0 <__aeabi_f2iz>
    8cf8:	f001 fcb2 	bl	a660 <__aeabi_i2f>
    8cfc:	4601      	mov	r1, r0
    8cfe:	4604      	mov	r4, r0
    8d00:	4640      	mov	r0, r8
    8d02:	9406      	str	r4, [sp, #24]
    8d04:	f001 fbf6 	bl	a4f4 <__aeabi_fsub>
    8d08:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
    8d0c:	f001 fcfc 	bl	a708 <__aeabi_fmul>
    8d10:	2100      	movs	r1, #0
    8d12:	9007      	str	r0, [sp, #28]
    8d14:	f001 fe8c 	bl	aa30 <__aeabi_fcmpeq>
    8d18:	2800      	cmp	r0, #0
    8d1a:	f000 80b6 	beq.w	8e8a <__ieee754_rem_pio2f+0x21e>
    8d1e:	4620      	mov	r0, r4
    8d20:	2100      	movs	r1, #0
    8d22:	f001 fe85 	bl	aa30 <__aeabi_fcmpeq>
    8d26:	2800      	cmp	r0, #0
    8d28:	bf14      	ite	ne
    8d2a:	2301      	movne	r3, #1
    8d2c:	2302      	moveq	r3, #2
    8d2e:	4a82      	ldr	r2, [pc, #520]	; (8f38 <__ieee754_rem_pio2f+0x2cc>)
    8d30:	9201      	str	r2, [sp, #4]
    8d32:	2102      	movs	r1, #2
    8d34:	463a      	mov	r2, r7
    8d36:	9100      	str	r1, [sp, #0]
    8d38:	a805      	add	r0, sp, #20
    8d3a:	4629      	mov	r1, r5
    8d3c:	f000 fa24 	bl	9188 <__kernel_rem_pio2f>
    8d40:	2e00      	cmp	r6, #0
    8d42:	4607      	mov	r7, r0
    8d44:	dab8      	bge.n	8cb8 <__ieee754_rem_pio2f+0x4c>
    8d46:	e9d5 2300 	ldrd	r2, r3, [r5]
    8d4a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
    8d4e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    8d52:	4247      	negs	r7, r0
    8d54:	602a      	str	r2, [r5, #0]
    8d56:	606b      	str	r3, [r5, #4]
    8d58:	e7ae      	b.n	8cb8 <__ieee754_rem_pio2f+0x4c>
    8d5a:	2700      	movs	r7, #0
    8d5c:	2200      	movs	r2, #0
    8d5e:	6008      	str	r0, [r1, #0]
    8d60:	4638      	mov	r0, r7
    8d62:	604a      	str	r2, [r1, #4]
    8d64:	b009      	add	sp, #36	; 0x24
    8d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8d6a:	4601      	mov	r1, r0
    8d6c:	f001 fbc2 	bl	a4f4 <__aeabi_fsub>
    8d70:	2700      	movs	r7, #0
    8d72:	6068      	str	r0, [r5, #4]
    8d74:	6028      	str	r0, [r5, #0]
    8d76:	e79f      	b.n	8cb8 <__ieee754_rem_pio2f+0x4c>
    8d78:	4970      	ldr	r1, [pc, #448]	; (8f3c <__ieee754_rem_pio2f+0x2d0>)
    8d7a:	f001 fbbb 	bl	a4f4 <__aeabi_fsub>
    8d7e:	4970      	ldr	r1, [pc, #448]	; (8f40 <__ieee754_rem_pio2f+0x2d4>)
    8d80:	4604      	mov	r4, r0
    8d82:	f001 fbb7 	bl	a4f4 <__aeabi_fsub>
    8d86:	4601      	mov	r1, r0
    8d88:	6028      	str	r0, [r5, #0]
    8d8a:	4620      	mov	r0, r4
    8d8c:	f001 fbb2 	bl	a4f4 <__aeabi_fsub>
    8d90:	496b      	ldr	r1, [pc, #428]	; (8f40 <__ieee754_rem_pio2f+0x2d4>)
    8d92:	f001 fbaf 	bl	a4f4 <__aeabi_fsub>
    8d96:	2701      	movs	r7, #1
    8d98:	6068      	str	r0, [r5, #4]
    8d9a:	4638      	mov	r0, r7
    8d9c:	b009      	add	sp, #36	; 0x24
    8d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8da2:	f000 fddf 	bl	9964 <fabsf>
    8da6:	4967      	ldr	r1, [pc, #412]	; (8f44 <__ieee754_rem_pio2f+0x2d8>)
    8da8:	4680      	mov	r8, r0
    8daa:	f001 fcad 	bl	a708 <__aeabi_fmul>
    8dae:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    8db2:	f001 fba1 	bl	a4f8 <__addsf3>
    8db6:	f001 fe83 	bl	aac0 <__aeabi_f2iz>
    8dba:	4607      	mov	r7, r0
    8dbc:	f001 fc50 	bl	a660 <__aeabi_i2f>
    8dc0:	4959      	ldr	r1, [pc, #356]	; (8f28 <__ieee754_rem_pio2f+0x2bc>)
    8dc2:	4683      	mov	fp, r0
    8dc4:	f001 fca0 	bl	a708 <__aeabi_fmul>
    8dc8:	4601      	mov	r1, r0
    8dca:	4640      	mov	r0, r8
    8dcc:	f001 fb92 	bl	a4f4 <__aeabi_fsub>
    8dd0:	4957      	ldr	r1, [pc, #348]	; (8f30 <__ieee754_rem_pio2f+0x2c4>)
    8dd2:	4681      	mov	r9, r0
    8dd4:	4658      	mov	r0, fp
    8dd6:	f001 fc97 	bl	a708 <__aeabi_fmul>
    8dda:	2f1f      	cmp	r7, #31
    8ddc:	4682      	mov	sl, r0
    8dde:	4601      	mov	r1, r0
    8de0:	4648      	mov	r0, r9
    8de2:	dc20      	bgt.n	8e26 <__ieee754_rem_pio2f+0x1ba>
    8de4:	f001 fb86 	bl	a4f4 <__aeabi_fsub>
    8de8:	4a57      	ldr	r2, [pc, #348]	; (8f48 <__ieee754_rem_pio2f+0x2dc>)
    8dea:	1e79      	subs	r1, r7, #1
    8dec:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
    8df0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    8df4:	4293      	cmp	r3, r2
    8df6:	4680      	mov	r8, r0
    8df8:	d018      	beq.n	8e2c <__ieee754_rem_pio2f+0x1c0>
    8dfa:	f8c5 8000 	str.w	r8, [r5]
    8dfe:	4641      	mov	r1, r8
    8e00:	4648      	mov	r0, r9
    8e02:	f001 fb77 	bl	a4f4 <__aeabi_fsub>
    8e06:	4651      	mov	r1, sl
    8e08:	f001 fb74 	bl	a4f4 <__aeabi_fsub>
    8e0c:	2e00      	cmp	r6, #0
    8e0e:	6068      	str	r0, [r5, #4]
    8e10:	f6bf af52 	bge.w	8cb8 <__ieee754_rem_pio2f+0x4c>
    8e14:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
    8e18:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    8e1c:	f8c5 8000 	str.w	r8, [r5]
    8e20:	6068      	str	r0, [r5, #4]
    8e22:	427f      	negs	r7, r7
    8e24:	e748      	b.n	8cb8 <__ieee754_rem_pio2f+0x4c>
    8e26:	f001 fb65 	bl	a4f4 <__aeabi_fsub>
    8e2a:	4680      	mov	r8, r0
    8e2c:	15e2      	asrs	r2, r4, #23
    8e2e:	f3c8 53c7 	ubfx	r3, r8, #23, #8
    8e32:	1ad3      	subs	r3, r2, r3
    8e34:	2b08      	cmp	r3, #8
    8e36:	dde0      	ble.n	8dfa <__ieee754_rem_pio2f+0x18e>
    8e38:	4940      	ldr	r1, [pc, #256]	; (8f3c <__ieee754_rem_pio2f+0x2d0>)
    8e3a:	9203      	str	r2, [sp, #12]
    8e3c:	4658      	mov	r0, fp
    8e3e:	f001 fc63 	bl	a708 <__aeabi_fmul>
    8e42:	4680      	mov	r8, r0
    8e44:	4601      	mov	r1, r0
    8e46:	4648      	mov	r0, r9
    8e48:	f001 fb54 	bl	a4f4 <__aeabi_fsub>
    8e4c:	4601      	mov	r1, r0
    8e4e:	4604      	mov	r4, r0
    8e50:	4648      	mov	r0, r9
    8e52:	f001 fb4f 	bl	a4f4 <__aeabi_fsub>
    8e56:	4641      	mov	r1, r8
    8e58:	f001 fb4c 	bl	a4f4 <__aeabi_fsub>
    8e5c:	4938      	ldr	r1, [pc, #224]	; (8f40 <__ieee754_rem_pio2f+0x2d4>)
    8e5e:	4680      	mov	r8, r0
    8e60:	4658      	mov	r0, fp
    8e62:	f001 fc51 	bl	a708 <__aeabi_fmul>
    8e66:	4641      	mov	r1, r8
    8e68:	f001 fb44 	bl	a4f4 <__aeabi_fsub>
    8e6c:	4601      	mov	r1, r0
    8e6e:	4682      	mov	sl, r0
    8e70:	4620      	mov	r0, r4
    8e72:	f001 fb3f 	bl	a4f4 <__aeabi_fsub>
    8e76:	9a03      	ldr	r2, [sp, #12]
    8e78:	f3c0 53c7 	ubfx	r3, r0, #23, #8
    8e7c:	1ad2      	subs	r2, r2, r3
    8e7e:	2a19      	cmp	r2, #25
    8e80:	4680      	mov	r8, r0
    8e82:	dc04      	bgt.n	8e8e <__ieee754_rem_pio2f+0x222>
    8e84:	6028      	str	r0, [r5, #0]
    8e86:	46a1      	mov	r9, r4
    8e88:	e7b9      	b.n	8dfe <__ieee754_rem_pio2f+0x192>
    8e8a:	2303      	movs	r3, #3
    8e8c:	e74f      	b.n	8d2e <__ieee754_rem_pio2f+0xc2>
    8e8e:	492f      	ldr	r1, [pc, #188]	; (8f4c <__ieee754_rem_pio2f+0x2e0>)
    8e90:	4658      	mov	r0, fp
    8e92:	f001 fc39 	bl	a708 <__aeabi_fmul>
    8e96:	4680      	mov	r8, r0
    8e98:	4601      	mov	r1, r0
    8e9a:	4620      	mov	r0, r4
    8e9c:	f001 fb2a 	bl	a4f4 <__aeabi_fsub>
    8ea0:	4601      	mov	r1, r0
    8ea2:	4681      	mov	r9, r0
    8ea4:	4620      	mov	r0, r4
    8ea6:	f001 fb25 	bl	a4f4 <__aeabi_fsub>
    8eaa:	4641      	mov	r1, r8
    8eac:	f001 fb22 	bl	a4f4 <__aeabi_fsub>
    8eb0:	4927      	ldr	r1, [pc, #156]	; (8f50 <__ieee754_rem_pio2f+0x2e4>)
    8eb2:	4604      	mov	r4, r0
    8eb4:	4658      	mov	r0, fp
    8eb6:	f001 fc27 	bl	a708 <__aeabi_fmul>
    8eba:	4621      	mov	r1, r4
    8ebc:	f001 fb1a 	bl	a4f4 <__aeabi_fsub>
    8ec0:	4601      	mov	r1, r0
    8ec2:	4682      	mov	sl, r0
    8ec4:	4648      	mov	r0, r9
    8ec6:	f001 fb15 	bl	a4f4 <__aeabi_fsub>
    8eca:	4680      	mov	r8, r0
    8ecc:	e795      	b.n	8dfa <__ieee754_rem_pio2f+0x18e>
    8ece:	f001 fb13 	bl	a4f8 <__addsf3>
    8ed2:	4b16      	ldr	r3, [pc, #88]	; (8f2c <__ieee754_rem_pio2f+0x2c0>)
    8ed4:	429c      	cmp	r4, r3
    8ed6:	4606      	mov	r6, r0
    8ed8:	d00e      	beq.n	8ef8 <__ieee754_rem_pio2f+0x28c>
    8eda:	4915      	ldr	r1, [pc, #84]	; (8f30 <__ieee754_rem_pio2f+0x2c4>)
    8edc:	f001 fb0c 	bl	a4f8 <__addsf3>
    8ee0:	4601      	mov	r1, r0
    8ee2:	6028      	str	r0, [r5, #0]
    8ee4:	4630      	mov	r0, r6
    8ee6:	f001 fb05 	bl	a4f4 <__aeabi_fsub>
    8eea:	4911      	ldr	r1, [pc, #68]	; (8f30 <__ieee754_rem_pio2f+0x2c4>)
    8eec:	f001 fb04 	bl	a4f8 <__addsf3>
    8ef0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    8ef4:	6068      	str	r0, [r5, #4]
    8ef6:	e6df      	b.n	8cb8 <__ieee754_rem_pio2f+0x4c>
    8ef8:	4910      	ldr	r1, [pc, #64]	; (8f3c <__ieee754_rem_pio2f+0x2d0>)
    8efa:	f001 fafd 	bl	a4f8 <__addsf3>
    8efe:	4910      	ldr	r1, [pc, #64]	; (8f40 <__ieee754_rem_pio2f+0x2d4>)
    8f00:	4604      	mov	r4, r0
    8f02:	f001 faf9 	bl	a4f8 <__addsf3>
    8f06:	4601      	mov	r1, r0
    8f08:	6028      	str	r0, [r5, #0]
    8f0a:	4620      	mov	r0, r4
    8f0c:	f001 faf2 	bl	a4f4 <__aeabi_fsub>
    8f10:	490b      	ldr	r1, [pc, #44]	; (8f40 <__ieee754_rem_pio2f+0x2d4>)
    8f12:	f001 faf1 	bl	a4f8 <__addsf3>
    8f16:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    8f1a:	6068      	str	r0, [r5, #4]
    8f1c:	e6cc      	b.n	8cb8 <__ieee754_rem_pio2f+0x4c>
    8f1e:	bf00      	nop
    8f20:	3f490fd8 	.word	0x3f490fd8
    8f24:	4016cbe3 	.word	0x4016cbe3
    8f28:	3fc90f80 	.word	0x3fc90f80
    8f2c:	3fc90fd0 	.word	0x3fc90fd0
    8f30:	37354443 	.word	0x37354443
    8f34:	43490f80 	.word	0x43490f80
    8f38:	0000c258 	.word	0x0000c258
    8f3c:	37354400 	.word	0x37354400
    8f40:	2e85a308 	.word	0x2e85a308
    8f44:	3f22f984 	.word	0x3f22f984
    8f48:	0000c1d8 	.word	0x0000c1d8
    8f4c:	2e85a300 	.word	0x2e85a300
    8f50:	248d3132 	.word	0x248d3132

00008f54 <__ieee754_sqrtf>:
    8f54:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
    8f58:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    8f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8f5e:	4604      	mov	r4, r0
    8f60:	d230      	bcs.n	8fc4 <__ieee754_sqrtf+0x70>
    8f62:	b372      	cbz	r2, 8fc2 <__ieee754_sqrtf+0x6e>
    8f64:	2800      	cmp	r0, #0
    8f66:	4603      	mov	r3, r0
    8f68:	db3f      	blt.n	8fea <__ieee754_sqrtf+0x96>
    8f6a:	f014 4fff 	tst.w	r4, #2139095040	; 0x7f800000
    8f6e:	ea4f 50e0 	mov.w	r0, r0, asr #23
    8f72:	d02e      	beq.n	8fd2 <__ieee754_sqrtf+0x7e>
    8f74:	f3c3 0316 	ubfx	r3, r3, #0, #23
    8f78:	387f      	subs	r0, #127	; 0x7f
    8f7a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
    8f7e:	07c1      	lsls	r1, r0, #31
    8f80:	f04f 0600 	mov.w	r6, #0
    8f84:	ea4f 0342 	mov.w	r3, r2, lsl #1
    8f88:	ea4f 0760 	mov.w	r7, r0, asr #1
    8f8c:	bf48      	it	mi
    8f8e:	0093      	lslmi	r3, r2, #2
    8f90:	4631      	mov	r1, r6
    8f92:	2419      	movs	r4, #25
    8f94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8f98:	188d      	adds	r5, r1, r2
    8f9a:	429d      	cmp	r5, r3
    8f9c:	dc02      	bgt.n	8fa4 <__ieee754_sqrtf+0x50>
    8f9e:	1b5b      	subs	r3, r3, r5
    8fa0:	18a9      	adds	r1, r5, r2
    8fa2:	4416      	add	r6, r2
    8fa4:	3c01      	subs	r4, #1
    8fa6:	ea4f 0343 	mov.w	r3, r3, lsl #1
    8faa:	ea4f 0252 	mov.w	r2, r2, lsr #1
    8fae:	d1f3      	bne.n	8f98 <__ieee754_sqrtf+0x44>
    8fb0:	b113      	cbz	r3, 8fb8 <__ieee754_sqrtf+0x64>
    8fb2:	3601      	adds	r6, #1
    8fb4:	f026 0601 	bic.w	r6, r6, #1
    8fb8:	1070      	asrs	r0, r6, #1
    8fba:	f100 507c 	add.w	r0, r0, #1056964608	; 0x3f000000
    8fbe:	eb00 50c7 	add.w	r0, r0, r7, lsl #23
    8fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8fc4:	4601      	mov	r1, r0
    8fc6:	f001 fb9f 	bl	a708 <__aeabi_fmul>
    8fca:	4621      	mov	r1, r4
    8fcc:	f001 fa94 	bl	a4f8 <__addsf3>
    8fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8fd2:	f414 0200 	ands.w	r2, r4, #8388608	; 0x800000
    8fd6:	d001      	beq.n	8fdc <__ieee754_sqrtf+0x88>
    8fd8:	e00e      	b.n	8ff8 <__ieee754_sqrtf+0xa4>
    8fda:	460a      	mov	r2, r1
    8fdc:	005b      	lsls	r3, r3, #1
    8fde:	021c      	lsls	r4, r3, #8
    8fe0:	f102 0101 	add.w	r1, r2, #1
    8fe4:	d5f9      	bpl.n	8fda <__ieee754_sqrtf+0x86>
    8fe6:	1a80      	subs	r0, r0, r2
    8fe8:	e7c4      	b.n	8f74 <__ieee754_sqrtf+0x20>
    8fea:	4601      	mov	r1, r0
    8fec:	f001 fa82 	bl	a4f4 <__aeabi_fsub>
    8ff0:	4601      	mov	r1, r0
    8ff2:	f001 fc3d 	bl	a870 <__aeabi_fdiv>
    8ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8ff8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8ffc:	e7f3      	b.n	8fe6 <__ieee754_sqrtf+0x92>
    8ffe:	bf00      	nop

00009000 <__kernel_cosf>:
    9000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9004:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
    9008:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
    900c:	4606      	mov	r6, r0
    900e:	460f      	mov	r7, r1
    9010:	da49      	bge.n	90a6 <__kernel_cosf+0xa6>
    9012:	f001 fd55 	bl	aac0 <__aeabi_f2iz>
    9016:	2800      	cmp	r0, #0
    9018:	f000 809d 	beq.w	9156 <__kernel_cosf+0x156>
    901c:	4631      	mov	r1, r6
    901e:	4630      	mov	r0, r6
    9020:	f001 fb72 	bl	a708 <__aeabi_fmul>
    9024:	494e      	ldr	r1, [pc, #312]	; (9160 <__kernel_cosf+0x160>)
    9026:	4604      	mov	r4, r0
    9028:	f001 fb6e 	bl	a708 <__aeabi_fmul>
    902c:	494d      	ldr	r1, [pc, #308]	; (9164 <__kernel_cosf+0x164>)
    902e:	f001 fa63 	bl	a4f8 <__addsf3>
    9032:	4621      	mov	r1, r4
    9034:	f001 fb68 	bl	a708 <__aeabi_fmul>
    9038:	494b      	ldr	r1, [pc, #300]	; (9168 <__kernel_cosf+0x168>)
    903a:	f001 fa5b 	bl	a4f4 <__aeabi_fsub>
    903e:	4621      	mov	r1, r4
    9040:	f001 fb62 	bl	a708 <__aeabi_fmul>
    9044:	4949      	ldr	r1, [pc, #292]	; (916c <__kernel_cosf+0x16c>)
    9046:	f001 fa57 	bl	a4f8 <__addsf3>
    904a:	4621      	mov	r1, r4
    904c:	f001 fb5c 	bl	a708 <__aeabi_fmul>
    9050:	4947      	ldr	r1, [pc, #284]	; (9170 <__kernel_cosf+0x170>)
    9052:	f001 fa4f 	bl	a4f4 <__aeabi_fsub>
    9056:	4621      	mov	r1, r4
    9058:	f001 fb56 	bl	a708 <__aeabi_fmul>
    905c:	4945      	ldr	r1, [pc, #276]	; (9174 <__kernel_cosf+0x174>)
    905e:	f001 fa4b 	bl	a4f8 <__addsf3>
    9062:	4621      	mov	r1, r4
    9064:	f001 fb50 	bl	a708 <__aeabi_fmul>
    9068:	4680      	mov	r8, r0
    906a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    906e:	4620      	mov	r0, r4
    9070:	f001 fb4a 	bl	a708 <__aeabi_fmul>
    9074:	4641      	mov	r1, r8
    9076:	4605      	mov	r5, r0
    9078:	4620      	mov	r0, r4
    907a:	f001 fb45 	bl	a708 <__aeabi_fmul>
    907e:	4639      	mov	r1, r7
    9080:	4604      	mov	r4, r0
    9082:	4630      	mov	r0, r6
    9084:	f001 fb40 	bl	a708 <__aeabi_fmul>
    9088:	4601      	mov	r1, r0
    908a:	4620      	mov	r0, r4
    908c:	f001 fa32 	bl	a4f4 <__aeabi_fsub>
    9090:	4601      	mov	r1, r0
    9092:	4628      	mov	r0, r5
    9094:	f001 fa2e 	bl	a4f4 <__aeabi_fsub>
    9098:	4601      	mov	r1, r0
    909a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    909e:	f001 fa29 	bl	a4f4 <__aeabi_fsub>
    90a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    90a6:	4601      	mov	r1, r0
    90a8:	f001 fb2e 	bl	a708 <__aeabi_fmul>
    90ac:	492c      	ldr	r1, [pc, #176]	; (9160 <__kernel_cosf+0x160>)
    90ae:	4604      	mov	r4, r0
    90b0:	f001 fb2a 	bl	a708 <__aeabi_fmul>
    90b4:	492b      	ldr	r1, [pc, #172]	; (9164 <__kernel_cosf+0x164>)
    90b6:	f001 fa1f 	bl	a4f8 <__addsf3>
    90ba:	4621      	mov	r1, r4
    90bc:	f001 fb24 	bl	a708 <__aeabi_fmul>
    90c0:	4929      	ldr	r1, [pc, #164]	; (9168 <__kernel_cosf+0x168>)
    90c2:	f001 fa17 	bl	a4f4 <__aeabi_fsub>
    90c6:	4621      	mov	r1, r4
    90c8:	f001 fb1e 	bl	a708 <__aeabi_fmul>
    90cc:	4927      	ldr	r1, [pc, #156]	; (916c <__kernel_cosf+0x16c>)
    90ce:	f001 fa13 	bl	a4f8 <__addsf3>
    90d2:	4621      	mov	r1, r4
    90d4:	f001 fb18 	bl	a708 <__aeabi_fmul>
    90d8:	4925      	ldr	r1, [pc, #148]	; (9170 <__kernel_cosf+0x170>)
    90da:	f001 fa0b 	bl	a4f4 <__aeabi_fsub>
    90de:	4621      	mov	r1, r4
    90e0:	f001 fb12 	bl	a708 <__aeabi_fmul>
    90e4:	4923      	ldr	r1, [pc, #140]	; (9174 <__kernel_cosf+0x174>)
    90e6:	f001 fa07 	bl	a4f8 <__addsf3>
    90ea:	4621      	mov	r1, r4
    90ec:	f001 fb0c 	bl	a708 <__aeabi_fmul>
    90f0:	4b21      	ldr	r3, [pc, #132]	; (9178 <__kernel_cosf+0x178>)
    90f2:	429d      	cmp	r5, r3
    90f4:	4680      	mov	r8, r0
    90f6:	ddb8      	ble.n	906a <__kernel_cosf+0x6a>
    90f8:	4b20      	ldr	r3, [pc, #128]	; (917c <__kernel_cosf+0x17c>)
    90fa:	429d      	cmp	r5, r3
    90fc:	dc27      	bgt.n	914e <__kernel_cosf+0x14e>
    90fe:	f105 457f 	add.w	r5, r5, #4278190080	; 0xff000000
    9102:	4629      	mov	r1, r5
    9104:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    9108:	f001 f9f4 	bl	a4f4 <__aeabi_fsub>
    910c:	4681      	mov	r9, r0
    910e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    9112:	4620      	mov	r0, r4
    9114:	f001 faf8 	bl	a708 <__aeabi_fmul>
    9118:	4629      	mov	r1, r5
    911a:	f001 f9eb 	bl	a4f4 <__aeabi_fsub>
    911e:	4641      	mov	r1, r8
    9120:	4605      	mov	r5, r0
    9122:	4620      	mov	r0, r4
    9124:	f001 faf0 	bl	a708 <__aeabi_fmul>
    9128:	4639      	mov	r1, r7
    912a:	4604      	mov	r4, r0
    912c:	4630      	mov	r0, r6
    912e:	f001 faeb 	bl	a708 <__aeabi_fmul>
    9132:	4601      	mov	r1, r0
    9134:	4620      	mov	r0, r4
    9136:	f001 f9dd 	bl	a4f4 <__aeabi_fsub>
    913a:	4601      	mov	r1, r0
    913c:	4628      	mov	r0, r5
    913e:	f001 f9d9 	bl	a4f4 <__aeabi_fsub>
    9142:	4601      	mov	r1, r0
    9144:	4648      	mov	r0, r9
    9146:	f001 f9d5 	bl	a4f4 <__aeabi_fsub>
    914a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    914e:	f8df 9034 	ldr.w	r9, [pc, #52]	; 9184 <__kernel_cosf+0x184>
    9152:	4d0b      	ldr	r5, [pc, #44]	; (9180 <__kernel_cosf+0x180>)
    9154:	e7db      	b.n	910e <__kernel_cosf+0x10e>
    9156:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    915a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    915e:	bf00      	nop
    9160:	ad47d74e 	.word	0xad47d74e
    9164:	310f74f6 	.word	0x310f74f6
    9168:	3493f27c 	.word	0x3493f27c
    916c:	37d00d01 	.word	0x37d00d01
    9170:	3ab60b61 	.word	0x3ab60b61
    9174:	3d2aaaab 	.word	0x3d2aaaab
    9178:	3e999999 	.word	0x3e999999
    917c:	3f480000 	.word	0x3f480000
    9180:	3e900000 	.word	0x3e900000
    9184:	3f380000 	.word	0x3f380000

00009188 <__kernel_rem_pio2f>:
    9188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    918c:	b0dd      	sub	sp, #372	; 0x174
    918e:	4ca3      	ldr	r4, [pc, #652]	; (941c <__kernel_rem_pio2f+0x294>)
    9190:	9d66      	ldr	r5, [sp, #408]	; 0x198
    9192:	9109      	str	r1, [sp, #36]	; 0x24
    9194:	1e59      	subs	r1, r3, #1
    9196:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
    919a:	9101      	str	r1, [sp, #4]
    919c:	1d11      	adds	r1, r2, #4
    919e:	9403      	str	r4, [sp, #12]
    91a0:	9306      	str	r3, [sp, #24]
    91a2:	920b      	str	r2, [sp, #44]	; 0x2c
    91a4:	4605      	mov	r5, r0
    91a6:	f2c0 8298 	blt.w	96da <__kernel_rem_pio2f+0x552>
    91aa:	1ed3      	subs	r3, r2, #3
    91ac:	bf44      	itt	mi
    91ae:	4613      	movmi	r3, r2
    91b0:	3304      	addmi	r3, #4
    91b2:	10db      	asrs	r3, r3, #3
    91b4:	9305      	str	r3, [sp, #20]
    91b6:	3301      	adds	r3, #1
    91b8:	00db      	lsls	r3, r3, #3
    91ba:	930a      	str	r3, [sp, #40]	; 0x28
    91bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    91c0:	1a9b      	subs	r3, r3, r2
    91c2:	9304      	str	r3, [sp, #16]
    91c4:	9a05      	ldr	r2, [sp, #20]
    91c6:	9b01      	ldr	r3, [sp, #4]
    91c8:	1ad6      	subs	r6, r2, r3
    91ca:	9a03      	ldr	r2, [sp, #12]
    91cc:	eb12 0803 	adds.w	r8, r2, r3
    91d0:	d418      	bmi.n	9204 <__kernel_rem_pio2f+0x7c>
    91d2:	f108 0801 	add.w	r8, r8, #1
    91d6:	2400      	movs	r4, #0
    91d8:	44b0      	add	r8, r6
    91da:	af20      	add	r7, sp, #128	; 0x80
    91dc:	f8dd 919c 	ldr.w	r9, [sp, #412]	; 0x19c
    91e0:	e008      	b.n	91f4 <__kernel_rem_pio2f+0x6c>
    91e2:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
    91e6:	f001 fa3b 	bl	a660 <__aeabi_i2f>
    91ea:	3601      	adds	r6, #1
    91ec:	4546      	cmp	r6, r8
    91ee:	f847 0b04 	str.w	r0, [r7], #4
    91f2:	d007      	beq.n	9204 <__kernel_rem_pio2f+0x7c>
    91f4:	2e00      	cmp	r6, #0
    91f6:	daf4      	bge.n	91e2 <__kernel_rem_pio2f+0x5a>
    91f8:	3601      	adds	r6, #1
    91fa:	4620      	mov	r0, r4
    91fc:	4546      	cmp	r6, r8
    91fe:	f847 0b04 	str.w	r0, [r7], #4
    9202:	d1f7      	bne.n	91f4 <__kernel_rem_pio2f+0x6c>
    9204:	9b03      	ldr	r3, [sp, #12]
    9206:	2b00      	cmp	r3, #0
    9208:	f2c0 8306 	blt.w	9818 <__kernel_rem_pio2f+0x690>
    920c:	9b06      	ldr	r3, [sp, #24]
    920e:	9903      	ldr	r1, [sp, #12]
    9210:	009b      	lsls	r3, r3, #2
    9212:	1f2a      	subs	r2, r5, #4
    9214:	18d5      	adds	r5, r2, r3
    9216:	9202      	str	r2, [sp, #8]
    9218:	aa20      	add	r2, sp, #128	; 0x80
    921a:	0089      	lsls	r1, r1, #2
    921c:	9300      	str	r3, [sp, #0]
    921e:	18d7      	adds	r7, r2, r3
    9220:	ab49      	add	r3, sp, #292	; 0x124
    9222:	9107      	str	r1, [sp, #28]
    9224:	eb03 0801 	add.w	r8, r3, r1
    9228:	ae48      	add	r6, sp, #288	; 0x120
    922a:	f04f 0900 	mov.w	r9, #0
    922e:	9b01      	ldr	r3, [sp, #4]
    9230:	2b00      	cmp	r3, #0
    9232:	bfb8      	it	lt
    9234:	46cb      	movlt	fp, r9
    9236:	db0f      	blt.n	9258 <__kernel_rem_pio2f+0xd0>
    9238:	9c02      	ldr	r4, [sp, #8]
    923a:	46ba      	mov	sl, r7
    923c:	46cb      	mov	fp, r9
    923e:	f85a 1d04 	ldr.w	r1, [sl, #-4]!
    9242:	f854 0f04 	ldr.w	r0, [r4, #4]!
    9246:	f001 fa5f 	bl	a708 <__aeabi_fmul>
    924a:	4601      	mov	r1, r0
    924c:	4658      	mov	r0, fp
    924e:	f001 f953 	bl	a4f8 <__addsf3>
    9252:	42ac      	cmp	r4, r5
    9254:	4683      	mov	fp, r0
    9256:	d1f2      	bne.n	923e <__kernel_rem_pio2f+0xb6>
    9258:	f846 bb04 	str.w	fp, [r6], #4
    925c:	4546      	cmp	r6, r8
    925e:	f107 0704 	add.w	r7, r7, #4
    9262:	d1e4      	bne.n	922e <__kernel_rem_pio2f+0xa6>
    9264:	9900      	ldr	r1, [sp, #0]
    9266:	9802      	ldr	r0, [sp, #8]
    9268:	9a07      	ldr	r2, [sp, #28]
    926a:	9e03      	ldr	r6, [sp, #12]
    926c:	4401      	add	r1, r0
    926e:	f1a2 0308 	sub.w	r3, r2, #8
    9272:	460d      	mov	r5, r1
    9274:	a90c      	add	r1, sp, #48	; 0x30
    9276:	440b      	add	r3, r1
    9278:	9307      	str	r3, [sp, #28]
    927a:	ab0b      	add	r3, sp, #44	; 0x2c
    927c:	4413      	add	r3, r2
    927e:	9308      	str	r3, [sp, #32]
    9280:	ea4f 0986 	mov.w	r9, r6, lsl #2
    9284:	ab5c      	add	r3, sp, #368	; 0x170
    9286:	444b      	add	r3, r9
    9288:	2e00      	cmp	r6, #0
    928a:	f853 ac50 	ldr.w	sl, [r3, #-80]
    928e:	dd22      	ble.n	92d6 <__kernel_rem_pio2f+0x14e>
    9290:	f50d 7890 	add.w	r8, sp, #288	; 0x120
    9294:	eb08 0486 	add.w	r4, r8, r6, lsl #2
    9298:	af0c      	add	r7, sp, #48	; 0x30
    929a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
    929e:	4650      	mov	r0, sl
    92a0:	f001 fa32 	bl	a708 <__aeabi_fmul>
    92a4:	f001 fc0c 	bl	aac0 <__aeabi_f2iz>
    92a8:	f001 f9da 	bl	a660 <__aeabi_i2f>
    92ac:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
    92b0:	4683      	mov	fp, r0
    92b2:	f001 fa29 	bl	a708 <__aeabi_fmul>
    92b6:	4601      	mov	r1, r0
    92b8:	4650      	mov	r0, sl
    92ba:	f001 f91b 	bl	a4f4 <__aeabi_fsub>
    92be:	f001 fbff 	bl	aac0 <__aeabi_f2iz>
    92c2:	f854 1d04 	ldr.w	r1, [r4, #-4]!
    92c6:	f847 0b04 	str.w	r0, [r7], #4
    92ca:	4658      	mov	r0, fp
    92cc:	f001 f914 	bl	a4f8 <__addsf3>
    92d0:	4544      	cmp	r4, r8
    92d2:	4682      	mov	sl, r0
    92d4:	d1e1      	bne.n	929a <__kernel_rem_pio2f+0x112>
    92d6:	9f04      	ldr	r7, [sp, #16]
    92d8:	4650      	mov	r0, sl
    92da:	4639      	mov	r1, r7
    92dc:	f000 fbe4 	bl	9aa8 <scalbnf>
    92e0:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
    92e4:	4604      	mov	r4, r0
    92e6:	f001 fa0f 	bl	a708 <__aeabi_fmul>
    92ea:	f000 fb47 	bl	997c <floorf>
    92ee:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
    92f2:	f001 fa09 	bl	a708 <__aeabi_fmul>
    92f6:	4601      	mov	r1, r0
    92f8:	4620      	mov	r0, r4
    92fa:	f001 f8fb 	bl	a4f4 <__aeabi_fsub>
    92fe:	4604      	mov	r4, r0
    9300:	f001 fbde 	bl	aac0 <__aeabi_f2iz>
    9304:	4682      	mov	sl, r0
    9306:	f001 f9ab 	bl	a660 <__aeabi_i2f>
    930a:	4601      	mov	r1, r0
    930c:	4620      	mov	r0, r4
    930e:	f001 f8f1 	bl	a4f4 <__aeabi_fsub>
    9312:	2f00      	cmp	r7, #0
    9314:	4604      	mov	r4, r0
    9316:	f340 8083 	ble.w	9420 <__kernel_rem_pio2f+0x298>
    931a:	1e71      	subs	r1, r6, #1
    931c:	aa0c      	add	r2, sp, #48	; 0x30
    931e:	f1c7 0308 	rsb	r3, r7, #8
    9322:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    9326:	fa42 f003 	asr.w	r0, r2, r3
    932a:	fa00 f303 	lsl.w	r3, r0, r3
    932e:	1ad3      	subs	r3, r2, r3
    9330:	f1c7 0807 	rsb	r8, r7, #7
    9334:	aa0c      	add	r2, sp, #48	; 0x30
    9336:	fa43 f808 	asr.w	r8, r3, r8
    933a:	f1b8 0f00 	cmp.w	r8, #0
    933e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    9342:	4482      	add	sl, r0
    9344:	dc77      	bgt.n	9436 <__kernel_rem_pio2f+0x2ae>
    9346:	2100      	movs	r1, #0
    9348:	4620      	mov	r0, r4
    934a:	f001 fb71 	bl	aa30 <__aeabi_fcmpeq>
    934e:	2800      	cmp	r0, #0
    9350:	f000 80b4 	beq.w	94bc <__kernel_rem_pio2f+0x334>
    9354:	9b03      	ldr	r3, [sp, #12]
    9356:	1e77      	subs	r7, r6, #1
    9358:	42bb      	cmp	r3, r7
    935a:	dc10      	bgt.n	937e <__kernel_rem_pio2f+0x1f6>
    935c:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
    9360:	aa0c      	add	r2, sp, #48	; 0x30
    9362:	3b01      	subs	r3, #1
    9364:	9808      	ldr	r0, [sp, #32]
    9366:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    936a:	2200      	movs	r2, #0
    936c:	f853 1904 	ldr.w	r1, [r3], #-4
    9370:	4283      	cmp	r3, r0
    9372:	ea42 0201 	orr.w	r2, r2, r1
    9376:	d1f9      	bne.n	936c <__kernel_rem_pio2f+0x1e4>
    9378:	2a00      	cmp	r2, #0
    937a:	f040 80f8 	bne.w	956e <__kernel_rem_pio2f+0x3e6>
    937e:	9b03      	ldr	r3, [sp, #12]
    9380:	aa0c      	add	r2, sp, #48	; 0x30
    9382:	3b01      	subs	r3, #1
    9384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9388:	2b00      	cmp	r3, #0
    938a:	f040 80ea 	bne.w	9562 <__kernel_rem_pio2f+0x3da>
    938e:	9b07      	ldr	r3, [sp, #28]
    9390:	2701      	movs	r7, #1
    9392:	f853 2904 	ldr.w	r2, [r3], #-4
    9396:	3701      	adds	r7, #1
    9398:	2a00      	cmp	r2, #0
    939a:	d0fa      	beq.n	9392 <__kernel_rem_pio2f+0x20a>
    939c:	f106 0a01 	add.w	sl, r6, #1
    93a0:	19f3      	adds	r3, r6, r7
    93a2:	9300      	str	r3, [sp, #0]
    93a4:	46d0      	mov	r8, sl
    93a6:	9b05      	ldr	r3, [sp, #20]
    93a8:	eb0a 0903 	add.w	r9, sl, r3
    93ac:	9b06      	ldr	r3, [sp, #24]
    93ae:	199c      	adds	r4, r3, r6
    93b0:	ab20      	add	r3, sp, #128	; 0x80
    93b2:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
    93b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    93ba:	9b67      	ldr	r3, [sp, #412]	; 0x19c
    93bc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    93c0:	eb03 0989 	add.w	r9, r3, r9, lsl #2
    93c4:	ab48      	add	r3, sp, #288	; 0x120
    93c6:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
    93ca:	f859 0f04 	ldr.w	r0, [r9, #4]!
    93ce:	f001 f947 	bl	a660 <__aeabi_i2f>
    93d2:	9b01      	ldr	r3, [sp, #4]
    93d4:	4626      	mov	r6, r4
    93d6:	2b00      	cmp	r3, #0
    93d8:	f846 0b04 	str.w	r0, [r6], #4
    93dc:	db1b      	blt.n	9416 <__kernel_rem_pio2f+0x28e>
    93de:	3c04      	subs	r4, #4
    93e0:	f8dd b008 	ldr.w	fp, [sp, #8]
    93e4:	2700      	movs	r7, #0
    93e6:	e001      	b.n	93ec <__kernel_rem_pio2f+0x264>
    93e8:	f854 0904 	ldr.w	r0, [r4], #-4
    93ec:	f85b 1f04 	ldr.w	r1, [fp, #4]!
    93f0:	f001 f98a 	bl	a708 <__aeabi_fmul>
    93f4:	4601      	mov	r1, r0
    93f6:	4638      	mov	r0, r7
    93f8:	f001 f87e 	bl	a4f8 <__addsf3>
    93fc:	45ab      	cmp	fp, r5
    93fe:	4607      	mov	r7, r0
    9400:	d1f2      	bne.n	93e8 <__kernel_rem_pio2f+0x260>
    9402:	9b00      	ldr	r3, [sp, #0]
    9404:	f84a 7b04 	str.w	r7, [sl], #4
    9408:	f108 0801 	add.w	r8, r8, #1
    940c:	4598      	cmp	r8, r3
    940e:	4634      	mov	r4, r6
    9410:	dddb      	ble.n	93ca <__kernel_rem_pio2f+0x242>
    9412:	461e      	mov	r6, r3
    9414:	e734      	b.n	9280 <__kernel_rem_pio2f+0xf8>
    9416:	2700      	movs	r7, #0
    9418:	e7f3      	b.n	9402 <__kernel_rem_pio2f+0x27a>
    941a:	bf00      	nop
    941c:	0000c59c 	.word	0x0000c59c
    9420:	f040 8096 	bne.w	9550 <__kernel_rem_pio2f+0x3c8>
    9424:	1e73      	subs	r3, r6, #1
    9426:	aa0c      	add	r2, sp, #48	; 0x30
    9428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    942c:	ea4f 2823 	mov.w	r8, r3, asr #8
    9430:	f1b8 0f00 	cmp.w	r8, #0
    9434:	dd87      	ble.n	9346 <__kernel_rem_pio2f+0x1be>
    9436:	2e00      	cmp	r6, #0
    9438:	f10a 0a01 	add.w	sl, sl, #1
    943c:	f340 81cf 	ble.w	97de <__kernel_rem_pio2f+0x656>
    9440:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    9442:	2f00      	cmp	r7, #0
    9444:	d16c      	bne.n	9520 <__kernel_rem_pio2f+0x398>
    9446:	2e01      	cmp	r6, #1
    9448:	d009      	beq.n	945e <__kernel_rem_pio2f+0x2d6>
    944a:	a90c      	add	r1, sp, #48	; 0x30
    944c:	2201      	movs	r2, #1
    944e:	f851 7f04 	ldr.w	r7, [r1, #4]!
    9452:	1c53      	adds	r3, r2, #1
    9454:	2f00      	cmp	r7, #0
    9456:	d165      	bne.n	9524 <__kernel_rem_pio2f+0x39c>
    9458:	429e      	cmp	r6, r3
    945a:	461a      	mov	r2, r3
    945c:	d1f7      	bne.n	944e <__kernel_rem_pio2f+0x2c6>
    945e:	9b04      	ldr	r3, [sp, #16]
    9460:	2b00      	cmp	r3, #0
    9462:	dd0d      	ble.n	9480 <__kernel_rem_pio2f+0x2f8>
    9464:	2b01      	cmp	r3, #1
    9466:	f000 812e 	beq.w	96c6 <__kernel_rem_pio2f+0x53e>
    946a:	2b02      	cmp	r3, #2
    946c:	d108      	bne.n	9480 <__kernel_rem_pio2f+0x2f8>
    946e:	1e72      	subs	r2, r6, #1
    9470:	ab0c      	add	r3, sp, #48	; 0x30
    9472:	a90c      	add	r1, sp, #48	; 0x30
    9474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    947c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    9480:	f1b8 0f02 	cmp.w	r8, #2
    9484:	f47f af5f 	bne.w	9346 <__kernel_rem_pio2f+0x1be>
    9488:	4621      	mov	r1, r4
    948a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    948e:	f001 f831 	bl	a4f4 <__aeabi_fsub>
    9492:	4604      	mov	r4, r0
    9494:	2f00      	cmp	r7, #0
    9496:	f43f af56 	beq.w	9346 <__kernel_rem_pio2f+0x1be>
    949a:	9904      	ldr	r1, [sp, #16]
    949c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    94a0:	f000 fb02 	bl	9aa8 <scalbnf>
    94a4:	4601      	mov	r1, r0
    94a6:	4620      	mov	r0, r4
    94a8:	f001 f824 	bl	a4f4 <__aeabi_fsub>
    94ac:	4604      	mov	r4, r0
    94ae:	2100      	movs	r1, #0
    94b0:	4620      	mov	r0, r4
    94b2:	f001 fabd 	bl	aa30 <__aeabi_fcmpeq>
    94b6:	2800      	cmp	r0, #0
    94b8:	f47f af4c 	bne.w	9354 <__kernel_rem_pio2f+0x1cc>
    94bc:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
    94c0:	4620      	mov	r0, r4
    94c2:	1a99      	subs	r1, r3, r2
    94c4:	f8cd 8004 	str.w	r8, [sp, #4]
    94c8:	f000 faee 	bl	9aa8 <scalbnf>
    94cc:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
    94d0:	4604      	mov	r4, r0
    94d2:	f001 facb 	bl	aa6c <__aeabi_fcmpge>
    94d6:	2800      	cmp	r0, #0
    94d8:	f000 8183 	beq.w	97e2 <__kernel_rem_pio2f+0x65a>
    94dc:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
    94e0:	4620      	mov	r0, r4
    94e2:	f001 f911 	bl	a708 <__aeabi_fmul>
    94e6:	f001 faeb 	bl	aac0 <__aeabi_f2iz>
    94ea:	f001 f8b9 	bl	a660 <__aeabi_i2f>
    94ee:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
    94f2:	4605      	mov	r5, r0
    94f4:	f001 f908 	bl	a708 <__aeabi_fmul>
    94f8:	4601      	mov	r1, r0
    94fa:	4620      	mov	r0, r4
    94fc:	f000 fffa 	bl	a4f4 <__aeabi_fsub>
    9500:	f001 fade 	bl	aac0 <__aeabi_f2iz>
    9504:	ab0c      	add	r3, sp, #48	; 0x30
    9506:	1c77      	adds	r7, r6, #1
    9508:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    950c:	4628      	mov	r0, r5
    950e:	f001 fad7 	bl	aac0 <__aeabi_f2iz>
    9512:	9b04      	ldr	r3, [sp, #16]
    9514:	3308      	adds	r3, #8
    9516:	9304      	str	r3, [sp, #16]
    9518:	ab0c      	add	r3, sp, #48	; 0x30
    951a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
    951e:	e03c      	b.n	959a <__kernel_rem_pio2f+0x412>
    9520:	2301      	movs	r3, #1
    9522:	2200      	movs	r2, #0
    9524:	a90c      	add	r1, sp, #48	; 0x30
    9526:	f5c7 7780 	rsb	r7, r7, #256	; 0x100
    952a:	429e      	cmp	r6, r3
    952c:	f841 7022 	str.w	r7, [r1, r2, lsl #2]
    9530:	dd0c      	ble.n	954c <__kernel_rem_pio2f+0x3c4>
    9532:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    9536:	4489      	add	r9, r1
    9538:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    953c:	e000      	b.n	9540 <__kernel_rem_pio2f+0x3b8>
    953e:	681a      	ldr	r2, [r3, #0]
    9540:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
    9544:	f843 2b04 	str.w	r2, [r3], #4
    9548:	454b      	cmp	r3, r9
    954a:	d1f8      	bne.n	953e <__kernel_rem_pio2f+0x3b6>
    954c:	2701      	movs	r7, #1
    954e:	e786      	b.n	945e <__kernel_rem_pio2f+0x2d6>
    9550:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    9554:	f001 fa8a 	bl	aa6c <__aeabi_fcmpge>
    9558:	2800      	cmp	r0, #0
    955a:	f040 80c3 	bne.w	96e4 <__kernel_rem_pio2f+0x55c>
    955e:	4680      	mov	r8, r0
    9560:	e6f1      	b.n	9346 <__kernel_rem_pio2f+0x1be>
    9562:	f106 0a01 	add.w	sl, r6, #1
    9566:	46d0      	mov	r8, sl
    9568:	f8cd a000 	str.w	sl, [sp]
    956c:	e71b      	b.n	93a6 <__kernel_rem_pio2f+0x21e>
    956e:	ab0c      	add	r3, sp, #48	; 0x30
    9570:	9a04      	ldr	r2, [sp, #16]
    9572:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    9576:	f8cd 8004 	str.w	r8, [sp, #4]
    957a:	3a08      	subs	r2, #8
    957c:	9204      	str	r2, [sp, #16]
    957e:	b963      	cbnz	r3, 959a <__kernel_rem_pio2f+0x412>
    9580:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
    9584:	3b02      	subs	r3, #2
    9586:	a90c      	add	r1, sp, #48	; 0x30
    9588:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    958c:	f853 1904 	ldr.w	r1, [r3], #-4
    9590:	3f01      	subs	r7, #1
    9592:	3a08      	subs	r2, #8
    9594:	2900      	cmp	r1, #0
    9596:	d0f9      	beq.n	958c <__kernel_rem_pio2f+0x404>
    9598:	9204      	str	r2, [sp, #16]
    959a:	9904      	ldr	r1, [sp, #16]
    959c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    95a0:	f000 fa82 	bl	9aa8 <scalbnf>
    95a4:	2f00      	cmp	r7, #0
    95a6:	4604      	mov	r4, r0
    95a8:	f2c0 813f 	blt.w	982a <__kernel_rem_pio2f+0x6a2>
    95ac:	ea4f 0887 	mov.w	r8, r7, lsl #2
    95b0:	aa48      	add	r2, sp, #288	; 0x120
    95b2:	f108 0304 	add.w	r3, r8, #4
    95b6:	4490      	add	r8, r2
    95b8:	aa0c      	add	r2, sp, #48	; 0x30
    95ba:	9304      	str	r3, [sp, #16]
    95bc:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
    95c0:	eb02 0903 	add.w	r9, r2, r3
    95c4:	f108 0504 	add.w	r5, r8, #4
    95c8:	f859 0d04 	ldr.w	r0, [r9, #-4]!
    95cc:	f001 f848 	bl	a660 <__aeabi_i2f>
    95d0:	4621      	mov	r1, r4
    95d2:	f001 f899 	bl	a708 <__aeabi_fmul>
    95d6:	4631      	mov	r1, r6
    95d8:	f845 0d04 	str.w	r0, [r5, #-4]!
    95dc:	4620      	mov	r0, r4
    95de:	f001 f893 	bl	a708 <__aeabi_fmul>
    95e2:	ab0c      	add	r3, sp, #48	; 0x30
    95e4:	4599      	cmp	r9, r3
    95e6:	4604      	mov	r4, r0
    95e8:	d1ee      	bne.n	95c8 <__kernel_rem_pio2f+0x440>
    95ea:	f8dd 900c 	ldr.w	r9, [sp, #12]
    95ee:	f8cd a014 	str.w	sl, [sp, #20]
    95f2:	ab34      	add	r3, sp, #208	; 0xd0
    95f4:	f1b9 0f00 	cmp.w	r9, #0
    95f8:	9302      	str	r3, [sp, #8]
    95fa:	f1a8 0804 	sub.w	r8, r8, #4
    95fe:	f04f 0600 	mov.w	r6, #0
    9602:	469b      	mov	fp, r3
    9604:	9700      	str	r7, [sp, #0]
    9606:	db23      	blt.n	9650 <__kernel_rem_pio2f+0x4c8>
    9608:	4d92      	ldr	r5, [pc, #584]	; (9854 <__kernel_rem_pio2f+0x6cc>)
    960a:	4893      	ldr	r0, [pc, #588]	; (9858 <__kernel_rem_pio2f+0x6d0>)
    960c:	4647      	mov	r7, r8
    960e:	f04f 0a00 	mov.w	sl, #0
    9612:	2400      	movs	r4, #0
    9614:	e003      	b.n	961e <__kernel_rem_pio2f+0x496>
    9616:	42b4      	cmp	r4, r6
    9618:	dc0d      	bgt.n	9636 <__kernel_rem_pio2f+0x4ae>
    961a:	f855 0f04 	ldr.w	r0, [r5, #4]!
    961e:	f857 1f04 	ldr.w	r1, [r7, #4]!
    9622:	f001 f871 	bl	a708 <__aeabi_fmul>
    9626:	4601      	mov	r1, r0
    9628:	4650      	mov	r0, sl
    962a:	f000 ff65 	bl	a4f8 <__addsf3>
    962e:	3401      	adds	r4, #1
    9630:	45a1      	cmp	r9, r4
    9632:	4682      	mov	sl, r0
    9634:	daef      	bge.n	9616 <__kernel_rem_pio2f+0x48e>
    9636:	9a00      	ldr	r2, [sp, #0]
    9638:	f84b ab04 	str.w	sl, [fp], #4
    963c:	4296      	cmp	r6, r2
    963e:	f1a8 0804 	sub.w	r8, r8, #4
    9642:	f106 0301 	add.w	r3, r6, #1
    9646:	d006      	beq.n	9656 <__kernel_rem_pio2f+0x4ce>
    9648:	f1b9 0f00 	cmp.w	r9, #0
    964c:	461e      	mov	r6, r3
    964e:	dadb      	bge.n	9608 <__kernel_rem_pio2f+0x480>
    9650:	f04f 0a00 	mov.w	sl, #0
    9654:	e7ef      	b.n	9636 <__kernel_rem_pio2f+0x4ae>
    9656:	9b66      	ldr	r3, [sp, #408]	; 0x198
    9658:	f8dd a014 	ldr.w	sl, [sp, #20]
    965c:	9f00      	ldr	r7, [sp, #0]
    965e:	2b03      	cmp	r3, #3
    9660:	d82c      	bhi.n	96bc <__kernel_rem_pio2f+0x534>
    9662:	e8df f003 	tbb	[pc, r3]
    9666:	02a6      	.short	0x02a6
    9668:	5002      	.short	0x5002
    966a:	9b04      	ldr	r3, [sp, #16]
    966c:	461d      	mov	r5, r3
    966e:	9b02      	ldr	r3, [sp, #8]
    9670:	2400      	movs	r4, #0
    9672:	4620      	mov	r0, r4
    9674:	441d      	add	r5, r3
    9676:	461c      	mov	r4, r3
    9678:	f855 1d04 	ldr.w	r1, [r5, #-4]!
    967c:	f000 ff3c 	bl	a4f8 <__addsf3>
    9680:	42ac      	cmp	r4, r5
    9682:	d1f9      	bne.n	9678 <__kernel_rem_pio2f+0x4f0>
    9684:	4604      	mov	r4, r0
    9686:	9834      	ldr	r0, [sp, #208]	; 0xd0
    9688:	4621      	mov	r1, r4
    968a:	f000 ff33 	bl	a4f4 <__aeabi_fsub>
    968e:	9b01      	ldr	r3, [sp, #4]
    9690:	2b00      	cmp	r3, #0
    9692:	f040 80ae 	bne.w	97f2 <__kernel_rem_pio2f+0x66a>
    9696:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9698:	2f00      	cmp	r7, #0
    969a:	601c      	str	r4, [r3, #0]
    969c:	dd0c      	ble.n	96b8 <__kernel_rem_pio2f+0x530>
    969e:	ad34      	add	r5, sp, #208	; 0xd0
    96a0:	2401      	movs	r4, #1
    96a2:	3401      	adds	r4, #1
    96a4:	f855 1f04 	ldr.w	r1, [r5, #4]!
    96a8:	f000 ff26 	bl	a4f8 <__addsf3>
    96ac:	42a7      	cmp	r7, r4
    96ae:	daf8      	bge.n	96a2 <__kernel_rem_pio2f+0x51a>
    96b0:	9b01      	ldr	r3, [sp, #4]
    96b2:	b10b      	cbz	r3, 96b8 <__kernel_rem_pio2f+0x530>
    96b4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    96b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    96ba:	6058      	str	r0, [r3, #4]
    96bc:	f00a 0007 	and.w	r0, sl, #7
    96c0:	b05d      	add	sp, #372	; 0x174
    96c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96c6:	1e72      	subs	r2, r6, #1
    96c8:	ab0c      	add	r3, sp, #48	; 0x30
    96ca:	a90c      	add	r1, sp, #48	; 0x30
    96cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    96d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    96d4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    96d8:	e6d2      	b.n	9480 <__kernel_rem_pio2f+0x2f8>
    96da:	2308      	movs	r3, #8
    96dc:	930a      	str	r3, [sp, #40]	; 0x28
    96de:	2300      	movs	r3, #0
    96e0:	9305      	str	r3, [sp, #20]
    96e2:	e56b      	b.n	91bc <__kernel_rem_pio2f+0x34>
    96e4:	2e00      	cmp	r6, #0
    96e6:	f10a 0a01 	add.w	sl, sl, #1
    96ea:	bfc8      	it	gt
    96ec:	f04f 0802 	movgt.w	r8, #2
    96f0:	f73f aea6 	bgt.w	9440 <__kernel_rem_pio2f+0x2b8>
    96f4:	4621      	mov	r1, r4
    96f6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    96fa:	f000 fefb 	bl	a4f4 <__aeabi_fsub>
    96fe:	f04f 0802 	mov.w	r8, #2
    9702:	4604      	mov	r4, r0
    9704:	e61f      	b.n	9346 <__kernel_rem_pio2f+0x1be>
    9706:	2f00      	cmp	r7, #0
    9708:	f340 80a2 	ble.w	9850 <__kernel_rem_pio2f+0x6c8>
    970c:	00bd      	lsls	r5, r7, #2
    970e:	ab5c      	add	r3, sp, #368	; 0x170
    9710:	442b      	add	r3, r5
    9712:	aa34      	add	r2, sp, #208	; 0xd0
    9714:	f853 8ca0 	ldr.w	r8, [r3, #-160]
    9718:	9202      	str	r2, [sp, #8]
    971a:	1954      	adds	r4, r2, r5
    971c:	4693      	mov	fp, r2
    971e:	f854 9c04 	ldr.w	r9, [r4, #-4]
    9722:	4641      	mov	r1, r8
    9724:	4648      	mov	r0, r9
    9726:	f000 fee7 	bl	a4f8 <__addsf3>
    972a:	4606      	mov	r6, r0
    972c:	4601      	mov	r1, r0
    972e:	4648      	mov	r0, r9
    9730:	f000 fee0 	bl	a4f4 <__aeabi_fsub>
    9734:	4641      	mov	r1, r8
    9736:	f000 fedf 	bl	a4f8 <__addsf3>
    973a:	6020      	str	r0, [r4, #0]
    973c:	f844 6d04 	str.w	r6, [r4, #-4]!
    9740:	45a3      	cmp	fp, r4
    9742:	46b0      	mov	r8, r6
    9744:	d1eb      	bne.n	971e <__kernel_rem_pio2f+0x596>
    9746:	2f01      	cmp	r7, #1
    9748:	f340 8082 	ble.w	9850 <__kernel_rem_pio2f+0x6c8>
    974c:	ab5c      	add	r3, sp, #368	; 0x170
    974e:	442b      	add	r3, r5
    9750:	9a02      	ldr	r2, [sp, #8]
    9752:	f853 8ca0 	ldr.w	r8, [r3, #-160]
    9756:	4415      	add	r5, r2
    9758:	462c      	mov	r4, r5
    975a:	af35      	add	r7, sp, #212	; 0xd4
    975c:	f854 9c04 	ldr.w	r9, [r4, #-4]
    9760:	4641      	mov	r1, r8
    9762:	4648      	mov	r0, r9
    9764:	f000 fec8 	bl	a4f8 <__addsf3>
    9768:	4606      	mov	r6, r0
    976a:	4601      	mov	r1, r0
    976c:	4648      	mov	r0, r9
    976e:	f000 fec1 	bl	a4f4 <__aeabi_fsub>
    9772:	4641      	mov	r1, r8
    9774:	f000 fec0 	bl	a4f8 <__addsf3>
    9778:	6020      	str	r0, [r4, #0]
    977a:	f844 6d04 	str.w	r6, [r4, #-4]!
    977e:	42a7      	cmp	r7, r4
    9780:	46b0      	mov	r8, r6
    9782:	d1eb      	bne.n	975c <__kernel_rem_pio2f+0x5d4>
    9784:	9c02      	ldr	r4, [sp, #8]
    9786:	2000      	movs	r0, #0
    9788:	3504      	adds	r5, #4
    978a:	3408      	adds	r4, #8
    978c:	f855 1d04 	ldr.w	r1, [r5, #-4]!
    9790:	f000 feb2 	bl	a4f8 <__addsf3>
    9794:	42ac      	cmp	r4, r5
    9796:	d1f9      	bne.n	978c <__kernel_rem_pio2f+0x604>
    9798:	9901      	ldr	r1, [sp, #4]
    979a:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    979c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    979e:	bb81      	cbnz	r1, 9802 <__kernel_rem_pio2f+0x67a>
    97a0:	9909      	ldr	r1, [sp, #36]	; 0x24
    97a2:	600a      	str	r2, [r1, #0]
    97a4:	604b      	str	r3, [r1, #4]
    97a6:	6088      	str	r0, [r1, #8]
    97a8:	f00a 0007 	and.w	r0, sl, #7
    97ac:	b05d      	add	sp, #372	; 0x174
    97ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    97b2:	9b04      	ldr	r3, [sp, #16]
    97b4:	9d02      	ldr	r5, [sp, #8]
    97b6:	461c      	mov	r4, r3
    97b8:	2000      	movs	r0, #0
    97ba:	442c      	add	r4, r5
    97bc:	f854 1d04 	ldr.w	r1, [r4, #-4]!
    97c0:	f000 fe9a 	bl	a4f8 <__addsf3>
    97c4:	42a5      	cmp	r5, r4
    97c6:	d1f9      	bne.n	97bc <__kernel_rem_pio2f+0x634>
    97c8:	9b01      	ldr	r3, [sp, #4]
    97ca:	b10b      	cbz	r3, 97d0 <__kernel_rem_pio2f+0x648>
    97cc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    97d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    97d2:	6018      	str	r0, [r3, #0]
    97d4:	f00a 0007 	and.w	r0, sl, #7
    97d8:	b05d      	add	sp, #372	; 0x174
    97da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    97de:	2700      	movs	r7, #0
    97e0:	e63d      	b.n	945e <__kernel_rem_pio2f+0x2d6>
    97e2:	4620      	mov	r0, r4
    97e4:	f001 f96c 	bl	aac0 <__aeabi_f2iz>
    97e8:	ab0c      	add	r3, sp, #48	; 0x30
    97ea:	4637      	mov	r7, r6
    97ec:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    97f0:	e6d3      	b.n	959a <__kernel_rem_pio2f+0x412>
    97f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    97f4:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
    97f8:	2f00      	cmp	r7, #0
    97fa:	601c      	str	r4, [r3, #0]
    97fc:	f73f af4f 	bgt.w	969e <__kernel_rem_pio2f+0x516>
    9800:	e758      	b.n	96b4 <__kernel_rem_pio2f+0x52c>
    9802:	9909      	ldr	r1, [sp, #36]	; 0x24
    9804:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
    9808:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    980c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    9810:	600a      	str	r2, [r1, #0]
    9812:	604b      	str	r3, [r1, #4]
    9814:	6088      	str	r0, [r1, #8]
    9816:	e7c7      	b.n	97a8 <__kernel_rem_pio2f+0x620>
    9818:	1f2b      	subs	r3, r5, #4
    981a:	9302      	str	r3, [sp, #8]
    981c:	9b06      	ldr	r3, [sp, #24]
    981e:	009b      	lsls	r3, r3, #2
    9820:	9300      	str	r3, [sp, #0]
    9822:	9b03      	ldr	r3, [sp, #12]
    9824:	009b      	lsls	r3, r3, #2
    9826:	9307      	str	r3, [sp, #28]
    9828:	e51c      	b.n	9264 <__kernel_rem_pio2f+0xdc>
    982a:	9b66      	ldr	r3, [sp, #408]	; 0x198
    982c:	2b03      	cmp	r3, #3
    982e:	f63f af45 	bhi.w	96bc <__kernel_rem_pio2f+0x534>
    9832:	a201      	add	r2, pc, #4	; (adr r2, 9838 <__kernel_rem_pio2f+0x6b0>)
    9834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9838:	0000984d 	.word	0x0000984d
    983c:	00009849 	.word	0x00009849
    9840:	00009849 	.word	0x00009849
    9844:	00009707 	.word	0x00009707
    9848:	2400      	movs	r4, #0
    984a:	e71c      	b.n	9686 <__kernel_rem_pio2f+0x4fe>
    984c:	2000      	movs	r0, #0
    984e:	e7bb      	b.n	97c8 <__kernel_rem_pio2f+0x640>
    9850:	2000      	movs	r0, #0
    9852:	e7a1      	b.n	9798 <__kernel_rem_pio2f+0x610>
    9854:	0000c570 	.word	0x0000c570
    9858:	3fc90000 	.word	0x3fc90000

0000985c <__kernel_sinf>:
    985c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9860:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
    9864:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
    9868:	4604      	mov	r4, r0
    986a:	460f      	mov	r7, r1
    986c:	4690      	mov	r8, r2
    986e:	da03      	bge.n	9878 <__kernel_sinf+0x1c>
    9870:	f001 f926 	bl	aac0 <__aeabi_f2iz>
    9874:	2800      	cmp	r0, #0
    9876:	d058      	beq.n	992a <__kernel_sinf+0xce>
    9878:	4621      	mov	r1, r4
    987a:	4620      	mov	r0, r4
    987c:	f000 ff44 	bl	a708 <__aeabi_fmul>
    9880:	4605      	mov	r5, r0
    9882:	4601      	mov	r1, r0
    9884:	4620      	mov	r0, r4
    9886:	f000 ff3f 	bl	a708 <__aeabi_fmul>
    988a:	4929      	ldr	r1, [pc, #164]	; (9930 <__kernel_sinf+0xd4>)
    988c:	4606      	mov	r6, r0
    988e:	4628      	mov	r0, r5
    9890:	f000 ff3a 	bl	a708 <__aeabi_fmul>
    9894:	4927      	ldr	r1, [pc, #156]	; (9934 <__kernel_sinf+0xd8>)
    9896:	f000 fe2d 	bl	a4f4 <__aeabi_fsub>
    989a:	4629      	mov	r1, r5
    989c:	f000 ff34 	bl	a708 <__aeabi_fmul>
    98a0:	4925      	ldr	r1, [pc, #148]	; (9938 <__kernel_sinf+0xdc>)
    98a2:	f000 fe29 	bl	a4f8 <__addsf3>
    98a6:	4629      	mov	r1, r5
    98a8:	f000 ff2e 	bl	a708 <__aeabi_fmul>
    98ac:	4923      	ldr	r1, [pc, #140]	; (993c <__kernel_sinf+0xe0>)
    98ae:	f000 fe21 	bl	a4f4 <__aeabi_fsub>
    98b2:	4629      	mov	r1, r5
    98b4:	f000 ff28 	bl	a708 <__aeabi_fmul>
    98b8:	4921      	ldr	r1, [pc, #132]	; (9940 <__kernel_sinf+0xe4>)
    98ba:	f000 fe1d 	bl	a4f8 <__addsf3>
    98be:	4681      	mov	r9, r0
    98c0:	f1b8 0f00 	cmp.w	r8, #0
    98c4:	d022      	beq.n	990c <__kernel_sinf+0xb0>
    98c6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    98ca:	4638      	mov	r0, r7
    98cc:	f000 ff1c 	bl	a708 <__aeabi_fmul>
    98d0:	4649      	mov	r1, r9
    98d2:	4680      	mov	r8, r0
    98d4:	4630      	mov	r0, r6
    98d6:	f000 ff17 	bl	a708 <__aeabi_fmul>
    98da:	4601      	mov	r1, r0
    98dc:	4640      	mov	r0, r8
    98de:	f000 fe09 	bl	a4f4 <__aeabi_fsub>
    98e2:	4629      	mov	r1, r5
    98e4:	f000 ff10 	bl	a708 <__aeabi_fmul>
    98e8:	4639      	mov	r1, r7
    98ea:	f000 fe03 	bl	a4f4 <__aeabi_fsub>
    98ee:	4915      	ldr	r1, [pc, #84]	; (9944 <__kernel_sinf+0xe8>)
    98f0:	4605      	mov	r5, r0
    98f2:	4630      	mov	r0, r6
    98f4:	f000 ff08 	bl	a708 <__aeabi_fmul>
    98f8:	4601      	mov	r1, r0
    98fa:	4628      	mov	r0, r5
    98fc:	f000 fdfc 	bl	a4f8 <__addsf3>
    9900:	4601      	mov	r1, r0
    9902:	4620      	mov	r0, r4
    9904:	f000 fdf6 	bl	a4f4 <__aeabi_fsub>
    9908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    990c:	4601      	mov	r1, r0
    990e:	4628      	mov	r0, r5
    9910:	f000 fefa 	bl	a708 <__aeabi_fmul>
    9914:	490b      	ldr	r1, [pc, #44]	; (9944 <__kernel_sinf+0xe8>)
    9916:	f000 fded 	bl	a4f4 <__aeabi_fsub>
    991a:	4631      	mov	r1, r6
    991c:	f000 fef4 	bl	a708 <__aeabi_fmul>
    9920:	4621      	mov	r1, r4
    9922:	f000 fde9 	bl	a4f8 <__addsf3>
    9926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    992a:	4620      	mov	r0, r4
    992c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9930:	2f2ec9d3 	.word	0x2f2ec9d3
    9934:	32d72f34 	.word	0x32d72f34
    9938:	3638ef1b 	.word	0x3638ef1b
    993c:	39500d01 	.word	0x39500d01
    9940:	3c088889 	.word	0x3c088889
    9944:	3e2aaaab 	.word	0x3e2aaaab

00009948 <finite>:
    9948:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    994c:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
    9950:	0fc0      	lsrs	r0, r0, #31
    9952:	4770      	bx	lr

00009954 <matherr>:
    9954:	2000      	movs	r0, #0
    9956:	4770      	bx	lr

00009958 <nan>:
    9958:	2000      	movs	r0, #0
    995a:	4901      	ldr	r1, [pc, #4]	; (9960 <nan+0x8>)
    995c:	4770      	bx	lr
    995e:	bf00      	nop
    9960:	7ff80000 	.word	0x7ff80000

00009964 <fabsf>:
    9964:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    9968:	4770      	bx	lr
    996a:	bf00      	nop

0000996c <finitef>:
    996c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    9970:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
    9974:	bfac      	ite	ge
    9976:	2000      	movge	r0, #0
    9978:	2001      	movlt	r0, #1
    997a:	4770      	bx	lr

0000997c <floorf>:
    997c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    997e:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
    9982:	0dfc      	lsrs	r4, r7, #23
    9984:	3c7f      	subs	r4, #127	; 0x7f
    9986:	2c16      	cmp	r4, #22
    9988:	4605      	mov	r5, r0
    998a:	dc24      	bgt.n	99d6 <floorf+0x5a>
    998c:	2c00      	cmp	r4, #0
    998e:	4606      	mov	r6, r0
    9990:	db14      	blt.n	99bc <floorf+0x40>
    9992:	4f16      	ldr	r7, [pc, #88]	; (99ec <floorf+0x70>)
    9994:	4127      	asrs	r7, r4
    9996:	4238      	tst	r0, r7
    9998:	d01b      	beq.n	99d2 <floorf+0x56>
    999a:	4915      	ldr	r1, [pc, #84]	; (99f0 <floorf+0x74>)
    999c:	f000 fdac 	bl	a4f8 <__addsf3>
    99a0:	2100      	movs	r1, #0
    99a2:	f001 f86d 	bl	aa80 <__aeabi_fcmpgt>
    99a6:	b1a0      	cbz	r0, 99d2 <floorf+0x56>
    99a8:	2d00      	cmp	r5, #0
    99aa:	da04      	bge.n	99b6 <floorf+0x3a>
    99ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    99b0:	fa43 f404 	asr.w	r4, r3, r4
    99b4:	4426      	add	r6, r4
    99b6:	ea26 0007 	bic.w	r0, r6, r7
    99ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    99bc:	490c      	ldr	r1, [pc, #48]	; (99f0 <floorf+0x74>)
    99be:	f000 fd9b 	bl	a4f8 <__addsf3>
    99c2:	2100      	movs	r1, #0
    99c4:	f001 f85c 	bl	aa80 <__aeabi_fcmpgt>
    99c8:	b118      	cbz	r0, 99d2 <floorf+0x56>
    99ca:	2d00      	cmp	r5, #0
    99cc:	db0a      	blt.n	99e4 <floorf+0x68>
    99ce:	2000      	movs	r0, #0
    99d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    99d2:	4628      	mov	r0, r5
    99d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    99d6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
    99da:	d3fa      	bcc.n	99d2 <floorf+0x56>
    99dc:	4601      	mov	r1, r0
    99de:	f000 fd8b 	bl	a4f8 <__addsf3>
    99e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    99e4:	2f00      	cmp	r7, #0
    99e6:	d0f4      	beq.n	99d2 <floorf+0x56>
    99e8:	4802      	ldr	r0, [pc, #8]	; (99f4 <floorf+0x78>)
    99ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    99ec:	007fffff 	.word	0x007fffff
    99f0:	7149f2ca 	.word	0x7149f2ca
    99f4:	bf800000 	.word	0xbf800000

000099f8 <nanf>:
    99f8:	4800      	ldr	r0, [pc, #0]	; (99fc <nanf+0x4>)
    99fa:	4770      	bx	lr
    99fc:	7fc00000 	.word	0x7fc00000

00009a00 <rintf>:
    9a00:	b530      	push	{r4, r5, lr}
    9a02:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
    9a06:	0de3      	lsrs	r3, r4, #23
    9a08:	3b7f      	subs	r3, #127	; 0x7f
    9a0a:	2b16      	cmp	r3, #22
    9a0c:	b083      	sub	sp, #12
    9a0e:	4601      	mov	r1, r0
    9a10:	dc23      	bgt.n	9a5a <rintf+0x5a>
    9a12:	b1fc      	cbz	r4, 9a54 <rintf+0x54>
    9a14:	2b00      	cmp	r3, #0
    9a16:	4602      	mov	r2, r0
    9a18:	ea4f 74d0 	mov.w	r4, r0, lsr #31
    9a1c:	db26      	blt.n	9a6c <rintf+0x6c>
    9a1e:	4820      	ldr	r0, [pc, #128]	; (9aa0 <rintf+0xa0>)
    9a20:	4118      	asrs	r0, r3
    9a22:	4201      	tst	r1, r0
    9a24:	d016      	beq.n	9a54 <rintf+0x54>
    9a26:	0840      	lsrs	r0, r0, #1
    9a28:	4201      	tst	r1, r0
    9a2a:	d007      	beq.n	9a3c <rintf+0x3c>
    9a2c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    9a30:	ea22 0200 	bic.w	r2, r2, r0
    9a34:	fa41 f303 	asr.w	r3, r1, r3
    9a38:	ea42 0103 	orr.w	r1, r2, r3
    9a3c:	4b19      	ldr	r3, [pc, #100]	; (9aa4 <rintf+0xa4>)
    9a3e:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
    9a42:	4620      	mov	r0, r4
    9a44:	f000 fd58 	bl	a4f8 <__addsf3>
    9a48:	9001      	str	r0, [sp, #4]
    9a4a:	4621      	mov	r1, r4
    9a4c:	9801      	ldr	r0, [sp, #4]
    9a4e:	f000 fd51 	bl	a4f4 <__aeabi_fsub>
    9a52:	4601      	mov	r1, r0
    9a54:	4608      	mov	r0, r1
    9a56:	b003      	add	sp, #12
    9a58:	bd30      	pop	{r4, r5, pc}
    9a5a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
    9a5e:	d3f9      	bcc.n	9a54 <rintf+0x54>
    9a60:	f000 fd4a 	bl	a4f8 <__addsf3>
    9a64:	4601      	mov	r1, r0
    9a66:	4608      	mov	r0, r1
    9a68:	b003      	add	sp, #12
    9a6a:	bd30      	pop	{r4, r5, pc}
    9a6c:	f3c0 0316 	ubfx	r3, r0, #0, #23
    9a70:	480c      	ldr	r0, [pc, #48]	; (9aa4 <rintf+0xa4>)
    9a72:	425b      	negs	r3, r3
    9a74:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
    9a78:	0a5b      	lsrs	r3, r3, #9
    9a7a:	0d09      	lsrs	r1, r1, #20
    9a7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    9a80:	0509      	lsls	r1, r1, #20
    9a82:	4319      	orrs	r1, r3
    9a84:	4628      	mov	r0, r5
    9a86:	f000 fd37 	bl	a4f8 <__addsf3>
    9a8a:	9001      	str	r0, [sp, #4]
    9a8c:	4629      	mov	r1, r5
    9a8e:	9801      	ldr	r0, [sp, #4]
    9a90:	f000 fd30 	bl	a4f4 <__aeabi_fsub>
    9a94:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
    9a98:	ea41 71c4 	orr.w	r1, r1, r4, lsl #31
    9a9c:	e7da      	b.n	9a54 <rintf+0x54>
    9a9e:	bf00      	nop
    9aa0:	007fffff 	.word	0x007fffff
    9aa4:	0000c5a8 	.word	0x0000c5a8

00009aa8 <scalbnf>:
    9aa8:	b510      	push	{r4, lr}
    9aaa:	460c      	mov	r4, r1
    9aac:	f030 4100 	bics.w	r1, r0, #2147483648	; 0x80000000
    9ab0:	4603      	mov	r3, r0
    9ab2:	d01b      	beq.n	9aec <scalbnf+0x44>
    9ab4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
    9ab8:	d219      	bcs.n	9aee <scalbnf+0x46>
    9aba:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
    9abe:	4602      	mov	r2, r0
    9ac0:	d119      	bne.n	9af6 <scalbnf+0x4e>
    9ac2:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
    9ac6:	f000 fe1f 	bl	a708 <__aeabi_fmul>
    9aca:	4a1e      	ldr	r2, [pc, #120]	; (9b44 <scalbnf+0x9c>)
    9acc:	4294      	cmp	r4, r2
    9ace:	4603      	mov	r3, r0
    9ad0:	db2a      	blt.n	9b28 <scalbnf+0x80>
    9ad2:	4602      	mov	r2, r0
    9ad4:	f3c0 50c7 	ubfx	r0, r0, #23, #8
    9ad8:	3819      	subs	r0, #25
    9ada:	4420      	add	r0, r4
    9adc:	28fe      	cmp	r0, #254	; 0xfe
    9ade:	dd0e      	ble.n	9afe <scalbnf+0x56>
    9ae0:	4919      	ldr	r1, [pc, #100]	; (9b48 <scalbnf+0xa0>)
    9ae2:	4618      	mov	r0, r3
    9ae4:	f361 001e 	bfi	r0, r1, #0, #31
    9ae8:	f000 fe0e 	bl	a708 <__aeabi_fmul>
    9aec:	bd10      	pop	{r4, pc}
    9aee:	4601      	mov	r1, r0
    9af0:	f000 fd02 	bl	a4f8 <__addsf3>
    9af4:	bd10      	pop	{r4, pc}
    9af6:	0dc8      	lsrs	r0, r1, #23
    9af8:	4420      	add	r0, r4
    9afa:	28fe      	cmp	r0, #254	; 0xfe
    9afc:	dcf0      	bgt.n	9ae0 <scalbnf+0x38>
    9afe:	2800      	cmp	r0, #0
    9b00:	dc0d      	bgt.n	9b1e <scalbnf+0x76>
    9b02:	f110 0f16 	cmn.w	r0, #22
    9b06:	da13      	bge.n	9b30 <scalbnf+0x88>
    9b08:	f24c 3250 	movw	r2, #50000	; 0xc350
    9b0c:	4294      	cmp	r4, r2
    9b0e:	dce7      	bgt.n	9ae0 <scalbnf+0x38>
    9b10:	490e      	ldr	r1, [pc, #56]	; (9b4c <scalbnf+0xa4>)
    9b12:	4618      	mov	r0, r3
    9b14:	f361 001e 	bfi	r0, r1, #0, #31
    9b18:	f000 fdf6 	bl	a708 <__aeabi_fmul>
    9b1c:	bd10      	pop	{r4, pc}
    9b1e:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    9b22:	ea42 50c0 	orr.w	r0, r2, r0, lsl #23
    9b26:	bd10      	pop	{r4, pc}
    9b28:	4908      	ldr	r1, [pc, #32]	; (9b4c <scalbnf+0xa4>)
    9b2a:	f000 fded 	bl	a708 <__aeabi_fmul>
    9b2e:	bd10      	pop	{r4, pc}
    9b30:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    9b34:	3019      	adds	r0, #25
    9b36:	ea42 50c0 	orr.w	r0, r2, r0, lsl #23
    9b3a:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
    9b3e:	f000 fde3 	bl	a708 <__aeabi_fmul>
    9b42:	bd10      	pop	{r4, pc}
    9b44:	ffff3cb0 	.word	0xffff3cb0
    9b48:	7149f2ca 	.word	0x7149f2ca
    9b4c:	0da24260 	.word	0x0da24260

00009b50 <__aeabi_drsub>:
    9b50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    9b54:	e002      	b.n	9b5c <__adddf3>
    9b56:	bf00      	nop

00009b58 <__aeabi_dsub>:
    9b58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00009b5c <__adddf3>:
    9b5c:	b530      	push	{r4, r5, lr}
    9b5e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    9b62:	ea4f 0543 	mov.w	r5, r3, lsl #1
    9b66:	ea94 0f05 	teq	r4, r5
    9b6a:	bf08      	it	eq
    9b6c:	ea90 0f02 	teqeq	r0, r2
    9b70:	bf1f      	itttt	ne
    9b72:	ea54 0c00 	orrsne.w	ip, r4, r0
    9b76:	ea55 0c02 	orrsne.w	ip, r5, r2
    9b7a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    9b7e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    9b82:	f000 80e2 	beq.w	9d4a <__adddf3+0x1ee>
    9b86:	ea4f 5454 	mov.w	r4, r4, lsr #21
    9b8a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    9b8e:	bfb8      	it	lt
    9b90:	426d      	neglt	r5, r5
    9b92:	dd0c      	ble.n	9bae <__adddf3+0x52>
    9b94:	442c      	add	r4, r5
    9b96:	ea80 0202 	eor.w	r2, r0, r2
    9b9a:	ea81 0303 	eor.w	r3, r1, r3
    9b9e:	ea82 0000 	eor.w	r0, r2, r0
    9ba2:	ea83 0101 	eor.w	r1, r3, r1
    9ba6:	ea80 0202 	eor.w	r2, r0, r2
    9baa:	ea81 0303 	eor.w	r3, r1, r3
    9bae:	2d36      	cmp	r5, #54	; 0x36
    9bb0:	bf88      	it	hi
    9bb2:	bd30      	pophi	{r4, r5, pc}
    9bb4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    9bb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    9bbc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    9bc0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    9bc4:	d002      	beq.n	9bcc <__adddf3+0x70>
    9bc6:	4240      	negs	r0, r0
    9bc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    9bcc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    9bd0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    9bd4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    9bd8:	d002      	beq.n	9be0 <__adddf3+0x84>
    9bda:	4252      	negs	r2, r2
    9bdc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    9be0:	ea94 0f05 	teq	r4, r5
    9be4:	f000 80a7 	beq.w	9d36 <__adddf3+0x1da>
    9be8:	f1a4 0401 	sub.w	r4, r4, #1
    9bec:	f1d5 0e20 	rsbs	lr, r5, #32
    9bf0:	db0d      	blt.n	9c0e <__adddf3+0xb2>
    9bf2:	fa02 fc0e 	lsl.w	ip, r2, lr
    9bf6:	fa22 f205 	lsr.w	r2, r2, r5
    9bfa:	1880      	adds	r0, r0, r2
    9bfc:	f141 0100 	adc.w	r1, r1, #0
    9c00:	fa03 f20e 	lsl.w	r2, r3, lr
    9c04:	1880      	adds	r0, r0, r2
    9c06:	fa43 f305 	asr.w	r3, r3, r5
    9c0a:	4159      	adcs	r1, r3
    9c0c:	e00e      	b.n	9c2c <__adddf3+0xd0>
    9c0e:	f1a5 0520 	sub.w	r5, r5, #32
    9c12:	f10e 0e20 	add.w	lr, lr, #32
    9c16:	2a01      	cmp	r2, #1
    9c18:	fa03 fc0e 	lsl.w	ip, r3, lr
    9c1c:	bf28      	it	cs
    9c1e:	f04c 0c02 	orrcs.w	ip, ip, #2
    9c22:	fa43 f305 	asr.w	r3, r3, r5
    9c26:	18c0      	adds	r0, r0, r3
    9c28:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    9c2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    9c30:	d507      	bpl.n	9c42 <__adddf3+0xe6>
    9c32:	f04f 0e00 	mov.w	lr, #0
    9c36:	f1dc 0c00 	rsbs	ip, ip, #0
    9c3a:	eb7e 0000 	sbcs.w	r0, lr, r0
    9c3e:	eb6e 0101 	sbc.w	r1, lr, r1
    9c42:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    9c46:	d31b      	bcc.n	9c80 <__adddf3+0x124>
    9c48:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    9c4c:	d30c      	bcc.n	9c68 <__adddf3+0x10c>
    9c4e:	0849      	lsrs	r1, r1, #1
    9c50:	ea5f 0030 	movs.w	r0, r0, rrx
    9c54:	ea4f 0c3c 	mov.w	ip, ip, rrx
    9c58:	f104 0401 	add.w	r4, r4, #1
    9c5c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    9c60:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    9c64:	f080 809a 	bcs.w	9d9c <__adddf3+0x240>
    9c68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    9c6c:	bf08      	it	eq
    9c6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    9c72:	f150 0000 	adcs.w	r0, r0, #0
    9c76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    9c7a:	ea41 0105 	orr.w	r1, r1, r5
    9c7e:	bd30      	pop	{r4, r5, pc}
    9c80:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    9c84:	4140      	adcs	r0, r0
    9c86:	eb41 0101 	adc.w	r1, r1, r1
    9c8a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    9c8e:	f1a4 0401 	sub.w	r4, r4, #1
    9c92:	d1e9      	bne.n	9c68 <__adddf3+0x10c>
    9c94:	f091 0f00 	teq	r1, #0
    9c98:	bf04      	itt	eq
    9c9a:	4601      	moveq	r1, r0
    9c9c:	2000      	moveq	r0, #0
    9c9e:	fab1 f381 	clz	r3, r1
    9ca2:	bf08      	it	eq
    9ca4:	3320      	addeq	r3, #32
    9ca6:	f1a3 030b 	sub.w	r3, r3, #11
    9caa:	f1b3 0220 	subs.w	r2, r3, #32
    9cae:	da0c      	bge.n	9cca <__adddf3+0x16e>
    9cb0:	320c      	adds	r2, #12
    9cb2:	dd08      	ble.n	9cc6 <__adddf3+0x16a>
    9cb4:	f102 0c14 	add.w	ip, r2, #20
    9cb8:	f1c2 020c 	rsb	r2, r2, #12
    9cbc:	fa01 f00c 	lsl.w	r0, r1, ip
    9cc0:	fa21 f102 	lsr.w	r1, r1, r2
    9cc4:	e00c      	b.n	9ce0 <__adddf3+0x184>
    9cc6:	f102 0214 	add.w	r2, r2, #20
    9cca:	bfd8      	it	le
    9ccc:	f1c2 0c20 	rsble	ip, r2, #32
    9cd0:	fa01 f102 	lsl.w	r1, r1, r2
    9cd4:	fa20 fc0c 	lsr.w	ip, r0, ip
    9cd8:	bfdc      	itt	le
    9cda:	ea41 010c 	orrle.w	r1, r1, ip
    9cde:	4090      	lslle	r0, r2
    9ce0:	1ae4      	subs	r4, r4, r3
    9ce2:	bfa2      	ittt	ge
    9ce4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    9ce8:	4329      	orrge	r1, r5
    9cea:	bd30      	popge	{r4, r5, pc}
    9cec:	ea6f 0404 	mvn.w	r4, r4
    9cf0:	3c1f      	subs	r4, #31
    9cf2:	da1c      	bge.n	9d2e <__adddf3+0x1d2>
    9cf4:	340c      	adds	r4, #12
    9cf6:	dc0e      	bgt.n	9d16 <__adddf3+0x1ba>
    9cf8:	f104 0414 	add.w	r4, r4, #20
    9cfc:	f1c4 0220 	rsb	r2, r4, #32
    9d00:	fa20 f004 	lsr.w	r0, r0, r4
    9d04:	fa01 f302 	lsl.w	r3, r1, r2
    9d08:	ea40 0003 	orr.w	r0, r0, r3
    9d0c:	fa21 f304 	lsr.w	r3, r1, r4
    9d10:	ea45 0103 	orr.w	r1, r5, r3
    9d14:	bd30      	pop	{r4, r5, pc}
    9d16:	f1c4 040c 	rsb	r4, r4, #12
    9d1a:	f1c4 0220 	rsb	r2, r4, #32
    9d1e:	fa20 f002 	lsr.w	r0, r0, r2
    9d22:	fa01 f304 	lsl.w	r3, r1, r4
    9d26:	ea40 0003 	orr.w	r0, r0, r3
    9d2a:	4629      	mov	r1, r5
    9d2c:	bd30      	pop	{r4, r5, pc}
    9d2e:	fa21 f004 	lsr.w	r0, r1, r4
    9d32:	4629      	mov	r1, r5
    9d34:	bd30      	pop	{r4, r5, pc}
    9d36:	f094 0f00 	teq	r4, #0
    9d3a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    9d3e:	bf06      	itte	eq
    9d40:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    9d44:	3401      	addeq	r4, #1
    9d46:	3d01      	subne	r5, #1
    9d48:	e74e      	b.n	9be8 <__adddf3+0x8c>
    9d4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    9d4e:	bf18      	it	ne
    9d50:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    9d54:	d029      	beq.n	9daa <__adddf3+0x24e>
    9d56:	ea94 0f05 	teq	r4, r5
    9d5a:	bf08      	it	eq
    9d5c:	ea90 0f02 	teqeq	r0, r2
    9d60:	d005      	beq.n	9d6e <__adddf3+0x212>
    9d62:	ea54 0c00 	orrs.w	ip, r4, r0
    9d66:	bf04      	itt	eq
    9d68:	4619      	moveq	r1, r3
    9d6a:	4610      	moveq	r0, r2
    9d6c:	bd30      	pop	{r4, r5, pc}
    9d6e:	ea91 0f03 	teq	r1, r3
    9d72:	bf1e      	ittt	ne
    9d74:	2100      	movne	r1, #0
    9d76:	2000      	movne	r0, #0
    9d78:	bd30      	popne	{r4, r5, pc}
    9d7a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    9d7e:	d105      	bne.n	9d8c <__adddf3+0x230>
    9d80:	0040      	lsls	r0, r0, #1
    9d82:	4149      	adcs	r1, r1
    9d84:	bf28      	it	cs
    9d86:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    9d8a:	bd30      	pop	{r4, r5, pc}
    9d8c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    9d90:	bf3c      	itt	cc
    9d92:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    9d96:	bd30      	popcc	{r4, r5, pc}
    9d98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    9d9c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    9da0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    9da4:	f04f 0000 	mov.w	r0, #0
    9da8:	bd30      	pop	{r4, r5, pc}
    9daa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    9dae:	bf1a      	itte	ne
    9db0:	4619      	movne	r1, r3
    9db2:	4610      	movne	r0, r2
    9db4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    9db8:	bf1c      	itt	ne
    9dba:	460b      	movne	r3, r1
    9dbc:	4602      	movne	r2, r0
    9dbe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    9dc2:	bf06      	itte	eq
    9dc4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    9dc8:	ea91 0f03 	teqeq	r1, r3
    9dcc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    9dd0:	bd30      	pop	{r4, r5, pc}
    9dd2:	bf00      	nop

00009dd4 <__aeabi_ui2d>:
    9dd4:	f090 0f00 	teq	r0, #0
    9dd8:	bf04      	itt	eq
    9dda:	2100      	moveq	r1, #0
    9ddc:	4770      	bxeq	lr
    9dde:	b530      	push	{r4, r5, lr}
    9de0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    9de4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    9de8:	f04f 0500 	mov.w	r5, #0
    9dec:	f04f 0100 	mov.w	r1, #0
    9df0:	e750      	b.n	9c94 <__adddf3+0x138>
    9df2:	bf00      	nop

00009df4 <__aeabi_i2d>:
    9df4:	f090 0f00 	teq	r0, #0
    9df8:	bf04      	itt	eq
    9dfa:	2100      	moveq	r1, #0
    9dfc:	4770      	bxeq	lr
    9dfe:	b530      	push	{r4, r5, lr}
    9e00:	f44f 6480 	mov.w	r4, #1024	; 0x400
    9e04:	f104 0432 	add.w	r4, r4, #50	; 0x32
    9e08:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    9e0c:	bf48      	it	mi
    9e0e:	4240      	negmi	r0, r0
    9e10:	f04f 0100 	mov.w	r1, #0
    9e14:	e73e      	b.n	9c94 <__adddf3+0x138>
    9e16:	bf00      	nop

00009e18 <__aeabi_f2d>:
    9e18:	0042      	lsls	r2, r0, #1
    9e1a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    9e1e:	ea4f 0131 	mov.w	r1, r1, rrx
    9e22:	ea4f 7002 	mov.w	r0, r2, lsl #28
    9e26:	bf1f      	itttt	ne
    9e28:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    9e2c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    9e30:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    9e34:	4770      	bxne	lr
    9e36:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    9e3a:	bf08      	it	eq
    9e3c:	4770      	bxeq	lr
    9e3e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    9e42:	bf04      	itt	eq
    9e44:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    9e48:	4770      	bxeq	lr
    9e4a:	b530      	push	{r4, r5, lr}
    9e4c:	f44f 7460 	mov.w	r4, #896	; 0x380
    9e50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    9e54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    9e58:	e71c      	b.n	9c94 <__adddf3+0x138>
    9e5a:	bf00      	nop

00009e5c <__aeabi_ul2d>:
    9e5c:	ea50 0201 	orrs.w	r2, r0, r1
    9e60:	bf08      	it	eq
    9e62:	4770      	bxeq	lr
    9e64:	b530      	push	{r4, r5, lr}
    9e66:	f04f 0500 	mov.w	r5, #0
    9e6a:	e00a      	b.n	9e82 <__aeabi_l2d+0x16>

00009e6c <__aeabi_l2d>:
    9e6c:	ea50 0201 	orrs.w	r2, r0, r1
    9e70:	bf08      	it	eq
    9e72:	4770      	bxeq	lr
    9e74:	b530      	push	{r4, r5, lr}
    9e76:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    9e7a:	d502      	bpl.n	9e82 <__aeabi_l2d+0x16>
    9e7c:	4240      	negs	r0, r0
    9e7e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    9e82:	f44f 6480 	mov.w	r4, #1024	; 0x400
    9e86:	f104 0432 	add.w	r4, r4, #50	; 0x32
    9e8a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    9e8e:	f43f aed8 	beq.w	9c42 <__adddf3+0xe6>
    9e92:	f04f 0203 	mov.w	r2, #3
    9e96:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    9e9a:	bf18      	it	ne
    9e9c:	3203      	addne	r2, #3
    9e9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    9ea2:	bf18      	it	ne
    9ea4:	3203      	addne	r2, #3
    9ea6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    9eaa:	f1c2 0320 	rsb	r3, r2, #32
    9eae:	fa00 fc03 	lsl.w	ip, r0, r3
    9eb2:	fa20 f002 	lsr.w	r0, r0, r2
    9eb6:	fa01 fe03 	lsl.w	lr, r1, r3
    9eba:	ea40 000e 	orr.w	r0, r0, lr
    9ebe:	fa21 f102 	lsr.w	r1, r1, r2
    9ec2:	4414      	add	r4, r2
    9ec4:	e6bd      	b.n	9c42 <__adddf3+0xe6>
    9ec6:	bf00      	nop

00009ec8 <__aeabi_dmul>:
    9ec8:	b570      	push	{r4, r5, r6, lr}
    9eca:	f04f 0cff 	mov.w	ip, #255	; 0xff
    9ece:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    9ed2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    9ed6:	bf1d      	ittte	ne
    9ed8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    9edc:	ea94 0f0c 	teqne	r4, ip
    9ee0:	ea95 0f0c 	teqne	r5, ip
    9ee4:	f000 f8de 	bleq	a0a4 <__aeabi_dmul+0x1dc>
    9ee8:	442c      	add	r4, r5
    9eea:	ea81 0603 	eor.w	r6, r1, r3
    9eee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    9ef2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    9ef6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    9efa:	bf18      	it	ne
    9efc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    9f00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    9f04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    9f08:	d038      	beq.n	9f7c <__aeabi_dmul+0xb4>
    9f0a:	fba0 ce02 	umull	ip, lr, r0, r2
    9f0e:	f04f 0500 	mov.w	r5, #0
    9f12:	fbe1 e502 	umlal	lr, r5, r1, r2
    9f16:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    9f1a:	fbe0 e503 	umlal	lr, r5, r0, r3
    9f1e:	f04f 0600 	mov.w	r6, #0
    9f22:	fbe1 5603 	umlal	r5, r6, r1, r3
    9f26:	f09c 0f00 	teq	ip, #0
    9f2a:	bf18      	it	ne
    9f2c:	f04e 0e01 	orrne.w	lr, lr, #1
    9f30:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    9f34:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    9f38:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    9f3c:	d204      	bcs.n	9f48 <__aeabi_dmul+0x80>
    9f3e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    9f42:	416d      	adcs	r5, r5
    9f44:	eb46 0606 	adc.w	r6, r6, r6
    9f48:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    9f4c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    9f50:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    9f54:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    9f58:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    9f5c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    9f60:	bf88      	it	hi
    9f62:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    9f66:	d81e      	bhi.n	9fa6 <__aeabi_dmul+0xde>
    9f68:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    9f6c:	bf08      	it	eq
    9f6e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    9f72:	f150 0000 	adcs.w	r0, r0, #0
    9f76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    9f7a:	bd70      	pop	{r4, r5, r6, pc}
    9f7c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    9f80:	ea46 0101 	orr.w	r1, r6, r1
    9f84:	ea40 0002 	orr.w	r0, r0, r2
    9f88:	ea81 0103 	eor.w	r1, r1, r3
    9f8c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    9f90:	bfc2      	ittt	gt
    9f92:	ebd4 050c 	rsbsgt	r5, r4, ip
    9f96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    9f9a:	bd70      	popgt	{r4, r5, r6, pc}
    9f9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    9fa0:	f04f 0e00 	mov.w	lr, #0
    9fa4:	3c01      	subs	r4, #1
    9fa6:	f300 80ab 	bgt.w	a100 <__aeabi_dmul+0x238>
    9faa:	f114 0f36 	cmn.w	r4, #54	; 0x36
    9fae:	bfde      	ittt	le
    9fb0:	2000      	movle	r0, #0
    9fb2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    9fb6:	bd70      	pople	{r4, r5, r6, pc}
    9fb8:	f1c4 0400 	rsb	r4, r4, #0
    9fbc:	3c20      	subs	r4, #32
    9fbe:	da35      	bge.n	a02c <__aeabi_dmul+0x164>
    9fc0:	340c      	adds	r4, #12
    9fc2:	dc1b      	bgt.n	9ffc <__aeabi_dmul+0x134>
    9fc4:	f104 0414 	add.w	r4, r4, #20
    9fc8:	f1c4 0520 	rsb	r5, r4, #32
    9fcc:	fa00 f305 	lsl.w	r3, r0, r5
    9fd0:	fa20 f004 	lsr.w	r0, r0, r4
    9fd4:	fa01 f205 	lsl.w	r2, r1, r5
    9fd8:	ea40 0002 	orr.w	r0, r0, r2
    9fdc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    9fe0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    9fe4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    9fe8:	fa21 f604 	lsr.w	r6, r1, r4
    9fec:	eb42 0106 	adc.w	r1, r2, r6
    9ff0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    9ff4:	bf08      	it	eq
    9ff6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    9ffa:	bd70      	pop	{r4, r5, r6, pc}
    9ffc:	f1c4 040c 	rsb	r4, r4, #12
    a000:	f1c4 0520 	rsb	r5, r4, #32
    a004:	fa00 f304 	lsl.w	r3, r0, r4
    a008:	fa20 f005 	lsr.w	r0, r0, r5
    a00c:	fa01 f204 	lsl.w	r2, r1, r4
    a010:	ea40 0002 	orr.w	r0, r0, r2
    a014:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    a018:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    a01c:	f141 0100 	adc.w	r1, r1, #0
    a020:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    a024:	bf08      	it	eq
    a026:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    a02a:	bd70      	pop	{r4, r5, r6, pc}
    a02c:	f1c4 0520 	rsb	r5, r4, #32
    a030:	fa00 f205 	lsl.w	r2, r0, r5
    a034:	ea4e 0e02 	orr.w	lr, lr, r2
    a038:	fa20 f304 	lsr.w	r3, r0, r4
    a03c:	fa01 f205 	lsl.w	r2, r1, r5
    a040:	ea43 0302 	orr.w	r3, r3, r2
    a044:	fa21 f004 	lsr.w	r0, r1, r4
    a048:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    a04c:	fa21 f204 	lsr.w	r2, r1, r4
    a050:	ea20 0002 	bic.w	r0, r0, r2
    a054:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    a058:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    a05c:	bf08      	it	eq
    a05e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    a062:	bd70      	pop	{r4, r5, r6, pc}
    a064:	f094 0f00 	teq	r4, #0
    a068:	d10f      	bne.n	a08a <__aeabi_dmul+0x1c2>
    a06a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    a06e:	0040      	lsls	r0, r0, #1
    a070:	eb41 0101 	adc.w	r1, r1, r1
    a074:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    a078:	bf08      	it	eq
    a07a:	3c01      	subeq	r4, #1
    a07c:	d0f7      	beq.n	a06e <__aeabi_dmul+0x1a6>
    a07e:	ea41 0106 	orr.w	r1, r1, r6
    a082:	f095 0f00 	teq	r5, #0
    a086:	bf18      	it	ne
    a088:	4770      	bxne	lr
    a08a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    a08e:	0052      	lsls	r2, r2, #1
    a090:	eb43 0303 	adc.w	r3, r3, r3
    a094:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    a098:	bf08      	it	eq
    a09a:	3d01      	subeq	r5, #1
    a09c:	d0f7      	beq.n	a08e <__aeabi_dmul+0x1c6>
    a09e:	ea43 0306 	orr.w	r3, r3, r6
    a0a2:	4770      	bx	lr
    a0a4:	ea94 0f0c 	teq	r4, ip
    a0a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    a0ac:	bf18      	it	ne
    a0ae:	ea95 0f0c 	teqne	r5, ip
    a0b2:	d00c      	beq.n	a0ce <__aeabi_dmul+0x206>
    a0b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    a0b8:	bf18      	it	ne
    a0ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    a0be:	d1d1      	bne.n	a064 <__aeabi_dmul+0x19c>
    a0c0:	ea81 0103 	eor.w	r1, r1, r3
    a0c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    a0c8:	f04f 0000 	mov.w	r0, #0
    a0cc:	bd70      	pop	{r4, r5, r6, pc}
    a0ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    a0d2:	bf06      	itte	eq
    a0d4:	4610      	moveq	r0, r2
    a0d6:	4619      	moveq	r1, r3
    a0d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    a0dc:	d019      	beq.n	a112 <__aeabi_dmul+0x24a>
    a0de:	ea94 0f0c 	teq	r4, ip
    a0e2:	d102      	bne.n	a0ea <__aeabi_dmul+0x222>
    a0e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    a0e8:	d113      	bne.n	a112 <__aeabi_dmul+0x24a>
    a0ea:	ea95 0f0c 	teq	r5, ip
    a0ee:	d105      	bne.n	a0fc <__aeabi_dmul+0x234>
    a0f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    a0f4:	bf1c      	itt	ne
    a0f6:	4610      	movne	r0, r2
    a0f8:	4619      	movne	r1, r3
    a0fa:	d10a      	bne.n	a112 <__aeabi_dmul+0x24a>
    a0fc:	ea81 0103 	eor.w	r1, r1, r3
    a100:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    a104:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    a108:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    a10c:	f04f 0000 	mov.w	r0, #0
    a110:	bd70      	pop	{r4, r5, r6, pc}
    a112:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    a116:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    a11a:	bd70      	pop	{r4, r5, r6, pc}

0000a11c <__aeabi_ddiv>:
    a11c:	b570      	push	{r4, r5, r6, lr}
    a11e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    a122:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    a126:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    a12a:	bf1d      	ittte	ne
    a12c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    a130:	ea94 0f0c 	teqne	r4, ip
    a134:	ea95 0f0c 	teqne	r5, ip
    a138:	f000 f8a7 	bleq	a28a <__aeabi_ddiv+0x16e>
    a13c:	eba4 0405 	sub.w	r4, r4, r5
    a140:	ea81 0e03 	eor.w	lr, r1, r3
    a144:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    a148:	ea4f 3101 	mov.w	r1, r1, lsl #12
    a14c:	f000 8088 	beq.w	a260 <__aeabi_ddiv+0x144>
    a150:	ea4f 3303 	mov.w	r3, r3, lsl #12
    a154:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    a158:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    a15c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    a160:	ea4f 2202 	mov.w	r2, r2, lsl #8
    a164:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    a168:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    a16c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    a170:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    a174:	429d      	cmp	r5, r3
    a176:	bf08      	it	eq
    a178:	4296      	cmpeq	r6, r2
    a17a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    a17e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    a182:	d202      	bcs.n	a18a <__aeabi_ddiv+0x6e>
    a184:	085b      	lsrs	r3, r3, #1
    a186:	ea4f 0232 	mov.w	r2, r2, rrx
    a18a:	1ab6      	subs	r6, r6, r2
    a18c:	eb65 0503 	sbc.w	r5, r5, r3
    a190:	085b      	lsrs	r3, r3, #1
    a192:	ea4f 0232 	mov.w	r2, r2, rrx
    a196:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    a19a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    a19e:	ebb6 0e02 	subs.w	lr, r6, r2
    a1a2:	eb75 0e03 	sbcs.w	lr, r5, r3
    a1a6:	bf22      	ittt	cs
    a1a8:	1ab6      	subcs	r6, r6, r2
    a1aa:	4675      	movcs	r5, lr
    a1ac:	ea40 000c 	orrcs.w	r0, r0, ip
    a1b0:	085b      	lsrs	r3, r3, #1
    a1b2:	ea4f 0232 	mov.w	r2, r2, rrx
    a1b6:	ebb6 0e02 	subs.w	lr, r6, r2
    a1ba:	eb75 0e03 	sbcs.w	lr, r5, r3
    a1be:	bf22      	ittt	cs
    a1c0:	1ab6      	subcs	r6, r6, r2
    a1c2:	4675      	movcs	r5, lr
    a1c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    a1c8:	085b      	lsrs	r3, r3, #1
    a1ca:	ea4f 0232 	mov.w	r2, r2, rrx
    a1ce:	ebb6 0e02 	subs.w	lr, r6, r2
    a1d2:	eb75 0e03 	sbcs.w	lr, r5, r3
    a1d6:	bf22      	ittt	cs
    a1d8:	1ab6      	subcs	r6, r6, r2
    a1da:	4675      	movcs	r5, lr
    a1dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    a1e0:	085b      	lsrs	r3, r3, #1
    a1e2:	ea4f 0232 	mov.w	r2, r2, rrx
    a1e6:	ebb6 0e02 	subs.w	lr, r6, r2
    a1ea:	eb75 0e03 	sbcs.w	lr, r5, r3
    a1ee:	bf22      	ittt	cs
    a1f0:	1ab6      	subcs	r6, r6, r2
    a1f2:	4675      	movcs	r5, lr
    a1f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    a1f8:	ea55 0e06 	orrs.w	lr, r5, r6
    a1fc:	d018      	beq.n	a230 <__aeabi_ddiv+0x114>
    a1fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
    a202:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    a206:	ea4f 1606 	mov.w	r6, r6, lsl #4
    a20a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    a20e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    a212:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    a216:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    a21a:	d1c0      	bne.n	a19e <__aeabi_ddiv+0x82>
    a21c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    a220:	d10b      	bne.n	a23a <__aeabi_ddiv+0x11e>
    a222:	ea41 0100 	orr.w	r1, r1, r0
    a226:	f04f 0000 	mov.w	r0, #0
    a22a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    a22e:	e7b6      	b.n	a19e <__aeabi_ddiv+0x82>
    a230:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    a234:	bf04      	itt	eq
    a236:	4301      	orreq	r1, r0
    a238:	2000      	moveq	r0, #0
    a23a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    a23e:	bf88      	it	hi
    a240:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    a244:	f63f aeaf 	bhi.w	9fa6 <__aeabi_dmul+0xde>
    a248:	ebb5 0c03 	subs.w	ip, r5, r3
    a24c:	bf04      	itt	eq
    a24e:	ebb6 0c02 	subseq.w	ip, r6, r2
    a252:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    a256:	f150 0000 	adcs.w	r0, r0, #0
    a25a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    a25e:	bd70      	pop	{r4, r5, r6, pc}
    a260:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    a264:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    a268:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    a26c:	bfc2      	ittt	gt
    a26e:	ebd4 050c 	rsbsgt	r5, r4, ip
    a272:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    a276:	bd70      	popgt	{r4, r5, r6, pc}
    a278:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    a27c:	f04f 0e00 	mov.w	lr, #0
    a280:	3c01      	subs	r4, #1
    a282:	e690      	b.n	9fa6 <__aeabi_dmul+0xde>
    a284:	ea45 0e06 	orr.w	lr, r5, r6
    a288:	e68d      	b.n	9fa6 <__aeabi_dmul+0xde>
    a28a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    a28e:	ea94 0f0c 	teq	r4, ip
    a292:	bf08      	it	eq
    a294:	ea95 0f0c 	teqeq	r5, ip
    a298:	f43f af3b 	beq.w	a112 <__aeabi_dmul+0x24a>
    a29c:	ea94 0f0c 	teq	r4, ip
    a2a0:	d10a      	bne.n	a2b8 <__aeabi_ddiv+0x19c>
    a2a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    a2a6:	f47f af34 	bne.w	a112 <__aeabi_dmul+0x24a>
    a2aa:	ea95 0f0c 	teq	r5, ip
    a2ae:	f47f af25 	bne.w	a0fc <__aeabi_dmul+0x234>
    a2b2:	4610      	mov	r0, r2
    a2b4:	4619      	mov	r1, r3
    a2b6:	e72c      	b.n	a112 <__aeabi_dmul+0x24a>
    a2b8:	ea95 0f0c 	teq	r5, ip
    a2bc:	d106      	bne.n	a2cc <__aeabi_ddiv+0x1b0>
    a2be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    a2c2:	f43f aefd 	beq.w	a0c0 <__aeabi_dmul+0x1f8>
    a2c6:	4610      	mov	r0, r2
    a2c8:	4619      	mov	r1, r3
    a2ca:	e722      	b.n	a112 <__aeabi_dmul+0x24a>
    a2cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    a2d0:	bf18      	it	ne
    a2d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    a2d6:	f47f aec5 	bne.w	a064 <__aeabi_dmul+0x19c>
    a2da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    a2de:	f47f af0d 	bne.w	a0fc <__aeabi_dmul+0x234>
    a2e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    a2e6:	f47f aeeb 	bne.w	a0c0 <__aeabi_dmul+0x1f8>
    a2ea:	e712      	b.n	a112 <__aeabi_dmul+0x24a>

0000a2ec <__gedf2>:
    a2ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    a2f0:	e006      	b.n	a300 <__cmpdf2+0x4>
    a2f2:	bf00      	nop

0000a2f4 <__ledf2>:
    a2f4:	f04f 0c01 	mov.w	ip, #1
    a2f8:	e002      	b.n	a300 <__cmpdf2+0x4>
    a2fa:	bf00      	nop

0000a2fc <__cmpdf2>:
    a2fc:	f04f 0c01 	mov.w	ip, #1
    a300:	f84d cd04 	str.w	ip, [sp, #-4]!
    a304:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    a308:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    a30c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    a310:	bf18      	it	ne
    a312:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    a316:	d01b      	beq.n	a350 <__cmpdf2+0x54>
    a318:	b001      	add	sp, #4
    a31a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    a31e:	bf0c      	ite	eq
    a320:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    a324:	ea91 0f03 	teqne	r1, r3
    a328:	bf02      	ittt	eq
    a32a:	ea90 0f02 	teqeq	r0, r2
    a32e:	2000      	moveq	r0, #0
    a330:	4770      	bxeq	lr
    a332:	f110 0f00 	cmn.w	r0, #0
    a336:	ea91 0f03 	teq	r1, r3
    a33a:	bf58      	it	pl
    a33c:	4299      	cmppl	r1, r3
    a33e:	bf08      	it	eq
    a340:	4290      	cmpeq	r0, r2
    a342:	bf2c      	ite	cs
    a344:	17d8      	asrcs	r0, r3, #31
    a346:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    a34a:	f040 0001 	orr.w	r0, r0, #1
    a34e:	4770      	bx	lr
    a350:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    a354:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    a358:	d102      	bne.n	a360 <__cmpdf2+0x64>
    a35a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    a35e:	d107      	bne.n	a370 <__cmpdf2+0x74>
    a360:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    a364:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    a368:	d1d6      	bne.n	a318 <__cmpdf2+0x1c>
    a36a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    a36e:	d0d3      	beq.n	a318 <__cmpdf2+0x1c>
    a370:	f85d 0b04 	ldr.w	r0, [sp], #4
    a374:	4770      	bx	lr
    a376:	bf00      	nop

0000a378 <__aeabi_cdrcmple>:
    a378:	4684      	mov	ip, r0
    a37a:	4610      	mov	r0, r2
    a37c:	4662      	mov	r2, ip
    a37e:	468c      	mov	ip, r1
    a380:	4619      	mov	r1, r3
    a382:	4663      	mov	r3, ip
    a384:	e000      	b.n	a388 <__aeabi_cdcmpeq>
    a386:	bf00      	nop

0000a388 <__aeabi_cdcmpeq>:
    a388:	b501      	push	{r0, lr}
    a38a:	f7ff ffb7 	bl	a2fc <__cmpdf2>
    a38e:	2800      	cmp	r0, #0
    a390:	bf48      	it	mi
    a392:	f110 0f00 	cmnmi.w	r0, #0
    a396:	bd01      	pop	{r0, pc}

0000a398 <__aeabi_dcmpeq>:
    a398:	f84d ed08 	str.w	lr, [sp, #-8]!
    a39c:	f7ff fff4 	bl	a388 <__aeabi_cdcmpeq>
    a3a0:	bf0c      	ite	eq
    a3a2:	2001      	moveq	r0, #1
    a3a4:	2000      	movne	r0, #0
    a3a6:	f85d fb08 	ldr.w	pc, [sp], #8
    a3aa:	bf00      	nop

0000a3ac <__aeabi_dcmplt>:
    a3ac:	f84d ed08 	str.w	lr, [sp, #-8]!
    a3b0:	f7ff ffea 	bl	a388 <__aeabi_cdcmpeq>
    a3b4:	bf34      	ite	cc
    a3b6:	2001      	movcc	r0, #1
    a3b8:	2000      	movcs	r0, #0
    a3ba:	f85d fb08 	ldr.w	pc, [sp], #8
    a3be:	bf00      	nop

0000a3c0 <__aeabi_dcmple>:
    a3c0:	f84d ed08 	str.w	lr, [sp, #-8]!
    a3c4:	f7ff ffe0 	bl	a388 <__aeabi_cdcmpeq>
    a3c8:	bf94      	ite	ls
    a3ca:	2001      	movls	r0, #1
    a3cc:	2000      	movhi	r0, #0
    a3ce:	f85d fb08 	ldr.w	pc, [sp], #8
    a3d2:	bf00      	nop

0000a3d4 <__aeabi_dcmpge>:
    a3d4:	f84d ed08 	str.w	lr, [sp, #-8]!
    a3d8:	f7ff ffce 	bl	a378 <__aeabi_cdrcmple>
    a3dc:	bf94      	ite	ls
    a3de:	2001      	movls	r0, #1
    a3e0:	2000      	movhi	r0, #0
    a3e2:	f85d fb08 	ldr.w	pc, [sp], #8
    a3e6:	bf00      	nop

0000a3e8 <__aeabi_dcmpgt>:
    a3e8:	f84d ed08 	str.w	lr, [sp, #-8]!
    a3ec:	f7ff ffc4 	bl	a378 <__aeabi_cdrcmple>
    a3f0:	bf34      	ite	cc
    a3f2:	2001      	movcc	r0, #1
    a3f4:	2000      	movcs	r0, #0
    a3f6:	f85d fb08 	ldr.w	pc, [sp], #8
    a3fa:	bf00      	nop

0000a3fc <__aeabi_d2iz>:
    a3fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
    a400:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    a404:	d215      	bcs.n	a432 <__aeabi_d2iz+0x36>
    a406:	d511      	bpl.n	a42c <__aeabi_d2iz+0x30>
    a408:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    a40c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    a410:	d912      	bls.n	a438 <__aeabi_d2iz+0x3c>
    a412:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    a416:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    a41a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    a41e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    a422:	fa23 f002 	lsr.w	r0, r3, r2
    a426:	bf18      	it	ne
    a428:	4240      	negne	r0, r0
    a42a:	4770      	bx	lr
    a42c:	f04f 0000 	mov.w	r0, #0
    a430:	4770      	bx	lr
    a432:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    a436:	d105      	bne.n	a444 <__aeabi_d2iz+0x48>
    a438:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    a43c:	bf08      	it	eq
    a43e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    a442:	4770      	bx	lr
    a444:	f04f 0000 	mov.w	r0, #0
    a448:	4770      	bx	lr
    a44a:	bf00      	nop

0000a44c <__aeabi_d2f>:
    a44c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    a450:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    a454:	bf24      	itt	cs
    a456:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    a45a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    a45e:	d90d      	bls.n	a47c <__aeabi_d2f+0x30>
    a460:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    a464:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    a468:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    a46c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    a470:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    a474:	bf08      	it	eq
    a476:	f020 0001 	biceq.w	r0, r0, #1
    a47a:	4770      	bx	lr
    a47c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    a480:	d121      	bne.n	a4c6 <__aeabi_d2f+0x7a>
    a482:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    a486:	bfbc      	itt	lt
    a488:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    a48c:	4770      	bxlt	lr
    a48e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    a492:	ea4f 5252 	mov.w	r2, r2, lsr #21
    a496:	f1c2 0218 	rsb	r2, r2, #24
    a49a:	f1c2 0c20 	rsb	ip, r2, #32
    a49e:	fa10 f30c 	lsls.w	r3, r0, ip
    a4a2:	fa20 f002 	lsr.w	r0, r0, r2
    a4a6:	bf18      	it	ne
    a4a8:	f040 0001 	orrne.w	r0, r0, #1
    a4ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    a4b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    a4b4:	fa03 fc0c 	lsl.w	ip, r3, ip
    a4b8:	ea40 000c 	orr.w	r0, r0, ip
    a4bc:	fa23 f302 	lsr.w	r3, r3, r2
    a4c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    a4c4:	e7cc      	b.n	a460 <__aeabi_d2f+0x14>
    a4c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
    a4ca:	d107      	bne.n	a4dc <__aeabi_d2f+0x90>
    a4cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    a4d0:	bf1e      	ittt	ne
    a4d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    a4d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    a4da:	4770      	bxne	lr
    a4dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    a4e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    a4e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    a4e8:	4770      	bx	lr
    a4ea:	bf00      	nop

0000a4ec <__aeabi_frsub>:
    a4ec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    a4f0:	e002      	b.n	a4f8 <__addsf3>
    a4f2:	bf00      	nop

0000a4f4 <__aeabi_fsub>:
    a4f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000a4f8 <__addsf3>:
    a4f8:	0042      	lsls	r2, r0, #1
    a4fa:	bf1f      	itttt	ne
    a4fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    a500:	ea92 0f03 	teqne	r2, r3
    a504:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    a508:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    a50c:	d06a      	beq.n	a5e4 <__addsf3+0xec>
    a50e:	ea4f 6212 	mov.w	r2, r2, lsr #24
    a512:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    a516:	bfc1      	itttt	gt
    a518:	18d2      	addgt	r2, r2, r3
    a51a:	4041      	eorgt	r1, r0
    a51c:	4048      	eorgt	r0, r1
    a51e:	4041      	eorgt	r1, r0
    a520:	bfb8      	it	lt
    a522:	425b      	neglt	r3, r3
    a524:	2b19      	cmp	r3, #25
    a526:	bf88      	it	hi
    a528:	4770      	bxhi	lr
    a52a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    a52e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    a532:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a536:	bf18      	it	ne
    a538:	4240      	negne	r0, r0
    a53a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    a53e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    a542:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a546:	bf18      	it	ne
    a548:	4249      	negne	r1, r1
    a54a:	ea92 0f03 	teq	r2, r3
    a54e:	d03f      	beq.n	a5d0 <__addsf3+0xd8>
    a550:	f1a2 0201 	sub.w	r2, r2, #1
    a554:	fa41 fc03 	asr.w	ip, r1, r3
    a558:	eb10 000c 	adds.w	r0, r0, ip
    a55c:	f1c3 0320 	rsb	r3, r3, #32
    a560:	fa01 f103 	lsl.w	r1, r1, r3
    a564:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    a568:	d502      	bpl.n	a570 <__addsf3+0x78>
    a56a:	4249      	negs	r1, r1
    a56c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    a570:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    a574:	d313      	bcc.n	a59e <__addsf3+0xa6>
    a576:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    a57a:	d306      	bcc.n	a58a <__addsf3+0x92>
    a57c:	0840      	lsrs	r0, r0, #1
    a57e:	ea4f 0131 	mov.w	r1, r1, rrx
    a582:	f102 0201 	add.w	r2, r2, #1
    a586:	2afe      	cmp	r2, #254	; 0xfe
    a588:	d251      	bcs.n	a62e <__addsf3+0x136>
    a58a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    a58e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    a592:	bf08      	it	eq
    a594:	f020 0001 	biceq.w	r0, r0, #1
    a598:	ea40 0003 	orr.w	r0, r0, r3
    a59c:	4770      	bx	lr
    a59e:	0049      	lsls	r1, r1, #1
    a5a0:	eb40 0000 	adc.w	r0, r0, r0
    a5a4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    a5a8:	f1a2 0201 	sub.w	r2, r2, #1
    a5ac:	d1ed      	bne.n	a58a <__addsf3+0x92>
    a5ae:	fab0 fc80 	clz	ip, r0
    a5b2:	f1ac 0c08 	sub.w	ip, ip, #8
    a5b6:	ebb2 020c 	subs.w	r2, r2, ip
    a5ba:	fa00 f00c 	lsl.w	r0, r0, ip
    a5be:	bfaa      	itet	ge
    a5c0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    a5c4:	4252      	neglt	r2, r2
    a5c6:	4318      	orrge	r0, r3
    a5c8:	bfbc      	itt	lt
    a5ca:	40d0      	lsrlt	r0, r2
    a5cc:	4318      	orrlt	r0, r3
    a5ce:	4770      	bx	lr
    a5d0:	f092 0f00 	teq	r2, #0
    a5d4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    a5d8:	bf06      	itte	eq
    a5da:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    a5de:	3201      	addeq	r2, #1
    a5e0:	3b01      	subne	r3, #1
    a5e2:	e7b5      	b.n	a550 <__addsf3+0x58>
    a5e4:	ea4f 0341 	mov.w	r3, r1, lsl #1
    a5e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    a5ec:	bf18      	it	ne
    a5ee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    a5f2:	d021      	beq.n	a638 <__addsf3+0x140>
    a5f4:	ea92 0f03 	teq	r2, r3
    a5f8:	d004      	beq.n	a604 <__addsf3+0x10c>
    a5fa:	f092 0f00 	teq	r2, #0
    a5fe:	bf08      	it	eq
    a600:	4608      	moveq	r0, r1
    a602:	4770      	bx	lr
    a604:	ea90 0f01 	teq	r0, r1
    a608:	bf1c      	itt	ne
    a60a:	2000      	movne	r0, #0
    a60c:	4770      	bxne	lr
    a60e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    a612:	d104      	bne.n	a61e <__addsf3+0x126>
    a614:	0040      	lsls	r0, r0, #1
    a616:	bf28      	it	cs
    a618:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    a61c:	4770      	bx	lr
    a61e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    a622:	bf3c      	itt	cc
    a624:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    a628:	4770      	bxcc	lr
    a62a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    a62e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    a632:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    a636:	4770      	bx	lr
    a638:	ea7f 6222 	mvns.w	r2, r2, asr #24
    a63c:	bf16      	itet	ne
    a63e:	4608      	movne	r0, r1
    a640:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    a644:	4601      	movne	r1, r0
    a646:	0242      	lsls	r2, r0, #9
    a648:	bf06      	itte	eq
    a64a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    a64e:	ea90 0f01 	teqeq	r0, r1
    a652:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    a656:	4770      	bx	lr

0000a658 <__aeabi_ui2f>:
    a658:	f04f 0300 	mov.w	r3, #0
    a65c:	e004      	b.n	a668 <__aeabi_i2f+0x8>
    a65e:	bf00      	nop

0000a660 <__aeabi_i2f>:
    a660:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    a664:	bf48      	it	mi
    a666:	4240      	negmi	r0, r0
    a668:	ea5f 0c00 	movs.w	ip, r0
    a66c:	bf08      	it	eq
    a66e:	4770      	bxeq	lr
    a670:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    a674:	4601      	mov	r1, r0
    a676:	f04f 0000 	mov.w	r0, #0
    a67a:	e01c      	b.n	a6b6 <__aeabi_l2f+0x2a>

0000a67c <__aeabi_ul2f>:
    a67c:	ea50 0201 	orrs.w	r2, r0, r1
    a680:	bf08      	it	eq
    a682:	4770      	bxeq	lr
    a684:	f04f 0300 	mov.w	r3, #0
    a688:	e00a      	b.n	a6a0 <__aeabi_l2f+0x14>
    a68a:	bf00      	nop

0000a68c <__aeabi_l2f>:
    a68c:	ea50 0201 	orrs.w	r2, r0, r1
    a690:	bf08      	it	eq
    a692:	4770      	bxeq	lr
    a694:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    a698:	d502      	bpl.n	a6a0 <__aeabi_l2f+0x14>
    a69a:	4240      	negs	r0, r0
    a69c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    a6a0:	ea5f 0c01 	movs.w	ip, r1
    a6a4:	bf02      	ittt	eq
    a6a6:	4684      	moveq	ip, r0
    a6a8:	4601      	moveq	r1, r0
    a6aa:	2000      	moveq	r0, #0
    a6ac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    a6b0:	bf08      	it	eq
    a6b2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    a6b6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    a6ba:	fabc f28c 	clz	r2, ip
    a6be:	3a08      	subs	r2, #8
    a6c0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    a6c4:	db10      	blt.n	a6e8 <__aeabi_l2f+0x5c>
    a6c6:	fa01 fc02 	lsl.w	ip, r1, r2
    a6ca:	4463      	add	r3, ip
    a6cc:	fa00 fc02 	lsl.w	ip, r0, r2
    a6d0:	f1c2 0220 	rsb	r2, r2, #32
    a6d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    a6d8:	fa20 f202 	lsr.w	r2, r0, r2
    a6dc:	eb43 0002 	adc.w	r0, r3, r2
    a6e0:	bf08      	it	eq
    a6e2:	f020 0001 	biceq.w	r0, r0, #1
    a6e6:	4770      	bx	lr
    a6e8:	f102 0220 	add.w	r2, r2, #32
    a6ec:	fa01 fc02 	lsl.w	ip, r1, r2
    a6f0:	f1c2 0220 	rsb	r2, r2, #32
    a6f4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    a6f8:	fa21 f202 	lsr.w	r2, r1, r2
    a6fc:	eb43 0002 	adc.w	r0, r3, r2
    a700:	bf08      	it	eq
    a702:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    a706:	4770      	bx	lr

0000a708 <__aeabi_fmul>:
    a708:	f04f 0cff 	mov.w	ip, #255	; 0xff
    a70c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    a710:	bf1e      	ittt	ne
    a712:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    a716:	ea92 0f0c 	teqne	r2, ip
    a71a:	ea93 0f0c 	teqne	r3, ip
    a71e:	d06f      	beq.n	a800 <__aeabi_fmul+0xf8>
    a720:	441a      	add	r2, r3
    a722:	ea80 0c01 	eor.w	ip, r0, r1
    a726:	0240      	lsls	r0, r0, #9
    a728:	bf18      	it	ne
    a72a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    a72e:	d01e      	beq.n	a76e <__aeabi_fmul+0x66>
    a730:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    a734:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    a738:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    a73c:	fba0 3101 	umull	r3, r1, r0, r1
    a740:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    a744:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    a748:	bf3e      	ittt	cc
    a74a:	0049      	lslcc	r1, r1, #1
    a74c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    a750:	005b      	lslcc	r3, r3, #1
    a752:	ea40 0001 	orr.w	r0, r0, r1
    a756:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    a75a:	2afd      	cmp	r2, #253	; 0xfd
    a75c:	d81d      	bhi.n	a79a <__aeabi_fmul+0x92>
    a75e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    a762:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    a766:	bf08      	it	eq
    a768:	f020 0001 	biceq.w	r0, r0, #1
    a76c:	4770      	bx	lr
    a76e:	f090 0f00 	teq	r0, #0
    a772:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    a776:	bf08      	it	eq
    a778:	0249      	lsleq	r1, r1, #9
    a77a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    a77e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    a782:	3a7f      	subs	r2, #127	; 0x7f
    a784:	bfc2      	ittt	gt
    a786:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    a78a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    a78e:	4770      	bxgt	lr
    a790:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    a794:	f04f 0300 	mov.w	r3, #0
    a798:	3a01      	subs	r2, #1
    a79a:	dc5d      	bgt.n	a858 <__aeabi_fmul+0x150>
    a79c:	f112 0f19 	cmn.w	r2, #25
    a7a0:	bfdc      	itt	le
    a7a2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    a7a6:	4770      	bxle	lr
    a7a8:	f1c2 0200 	rsb	r2, r2, #0
    a7ac:	0041      	lsls	r1, r0, #1
    a7ae:	fa21 f102 	lsr.w	r1, r1, r2
    a7b2:	f1c2 0220 	rsb	r2, r2, #32
    a7b6:	fa00 fc02 	lsl.w	ip, r0, r2
    a7ba:	ea5f 0031 	movs.w	r0, r1, rrx
    a7be:	f140 0000 	adc.w	r0, r0, #0
    a7c2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    a7c6:	bf08      	it	eq
    a7c8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    a7cc:	4770      	bx	lr
    a7ce:	f092 0f00 	teq	r2, #0
    a7d2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    a7d6:	bf02      	ittt	eq
    a7d8:	0040      	lsleq	r0, r0, #1
    a7da:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    a7de:	3a01      	subeq	r2, #1
    a7e0:	d0f9      	beq.n	a7d6 <__aeabi_fmul+0xce>
    a7e2:	ea40 000c 	orr.w	r0, r0, ip
    a7e6:	f093 0f00 	teq	r3, #0
    a7ea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    a7ee:	bf02      	ittt	eq
    a7f0:	0049      	lsleq	r1, r1, #1
    a7f2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    a7f6:	3b01      	subeq	r3, #1
    a7f8:	d0f9      	beq.n	a7ee <__aeabi_fmul+0xe6>
    a7fa:	ea41 010c 	orr.w	r1, r1, ip
    a7fe:	e78f      	b.n	a720 <__aeabi_fmul+0x18>
    a800:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    a804:	ea92 0f0c 	teq	r2, ip
    a808:	bf18      	it	ne
    a80a:	ea93 0f0c 	teqne	r3, ip
    a80e:	d00a      	beq.n	a826 <__aeabi_fmul+0x11e>
    a810:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    a814:	bf18      	it	ne
    a816:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    a81a:	d1d8      	bne.n	a7ce <__aeabi_fmul+0xc6>
    a81c:	ea80 0001 	eor.w	r0, r0, r1
    a820:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    a824:	4770      	bx	lr
    a826:	f090 0f00 	teq	r0, #0
    a82a:	bf17      	itett	ne
    a82c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    a830:	4608      	moveq	r0, r1
    a832:	f091 0f00 	teqne	r1, #0
    a836:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    a83a:	d014      	beq.n	a866 <__aeabi_fmul+0x15e>
    a83c:	ea92 0f0c 	teq	r2, ip
    a840:	d101      	bne.n	a846 <__aeabi_fmul+0x13e>
    a842:	0242      	lsls	r2, r0, #9
    a844:	d10f      	bne.n	a866 <__aeabi_fmul+0x15e>
    a846:	ea93 0f0c 	teq	r3, ip
    a84a:	d103      	bne.n	a854 <__aeabi_fmul+0x14c>
    a84c:	024b      	lsls	r3, r1, #9
    a84e:	bf18      	it	ne
    a850:	4608      	movne	r0, r1
    a852:	d108      	bne.n	a866 <__aeabi_fmul+0x15e>
    a854:	ea80 0001 	eor.w	r0, r0, r1
    a858:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    a85c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    a860:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    a864:	4770      	bx	lr
    a866:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    a86a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    a86e:	4770      	bx	lr

0000a870 <__aeabi_fdiv>:
    a870:	f04f 0cff 	mov.w	ip, #255	; 0xff
    a874:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    a878:	bf1e      	ittt	ne
    a87a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    a87e:	ea92 0f0c 	teqne	r2, ip
    a882:	ea93 0f0c 	teqne	r3, ip
    a886:	d069      	beq.n	a95c <__aeabi_fdiv+0xec>
    a888:	eba2 0203 	sub.w	r2, r2, r3
    a88c:	ea80 0c01 	eor.w	ip, r0, r1
    a890:	0249      	lsls	r1, r1, #9
    a892:	ea4f 2040 	mov.w	r0, r0, lsl #9
    a896:	d037      	beq.n	a908 <__aeabi_fdiv+0x98>
    a898:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    a89c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    a8a0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    a8a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    a8a8:	428b      	cmp	r3, r1
    a8aa:	bf38      	it	cc
    a8ac:	005b      	lslcc	r3, r3, #1
    a8ae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    a8b2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    a8b6:	428b      	cmp	r3, r1
    a8b8:	bf24      	itt	cs
    a8ba:	1a5b      	subcs	r3, r3, r1
    a8bc:	ea40 000c 	orrcs.w	r0, r0, ip
    a8c0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    a8c4:	bf24      	itt	cs
    a8c6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    a8ca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    a8ce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    a8d2:	bf24      	itt	cs
    a8d4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    a8d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    a8dc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    a8e0:	bf24      	itt	cs
    a8e2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    a8e6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    a8ea:	011b      	lsls	r3, r3, #4
    a8ec:	bf18      	it	ne
    a8ee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    a8f2:	d1e0      	bne.n	a8b6 <__aeabi_fdiv+0x46>
    a8f4:	2afd      	cmp	r2, #253	; 0xfd
    a8f6:	f63f af50 	bhi.w	a79a <__aeabi_fmul+0x92>
    a8fa:	428b      	cmp	r3, r1
    a8fc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    a900:	bf08      	it	eq
    a902:	f020 0001 	biceq.w	r0, r0, #1
    a906:	4770      	bx	lr
    a908:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    a90c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    a910:	327f      	adds	r2, #127	; 0x7f
    a912:	bfc2      	ittt	gt
    a914:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    a918:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    a91c:	4770      	bxgt	lr
    a91e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    a922:	f04f 0300 	mov.w	r3, #0
    a926:	3a01      	subs	r2, #1
    a928:	e737      	b.n	a79a <__aeabi_fmul+0x92>
    a92a:	f092 0f00 	teq	r2, #0
    a92e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    a932:	bf02      	ittt	eq
    a934:	0040      	lsleq	r0, r0, #1
    a936:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    a93a:	3a01      	subeq	r2, #1
    a93c:	d0f9      	beq.n	a932 <__aeabi_fdiv+0xc2>
    a93e:	ea40 000c 	orr.w	r0, r0, ip
    a942:	f093 0f00 	teq	r3, #0
    a946:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    a94a:	bf02      	ittt	eq
    a94c:	0049      	lsleq	r1, r1, #1
    a94e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    a952:	3b01      	subeq	r3, #1
    a954:	d0f9      	beq.n	a94a <__aeabi_fdiv+0xda>
    a956:	ea41 010c 	orr.w	r1, r1, ip
    a95a:	e795      	b.n	a888 <__aeabi_fdiv+0x18>
    a95c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    a960:	ea92 0f0c 	teq	r2, ip
    a964:	d108      	bne.n	a978 <__aeabi_fdiv+0x108>
    a966:	0242      	lsls	r2, r0, #9
    a968:	f47f af7d 	bne.w	a866 <__aeabi_fmul+0x15e>
    a96c:	ea93 0f0c 	teq	r3, ip
    a970:	f47f af70 	bne.w	a854 <__aeabi_fmul+0x14c>
    a974:	4608      	mov	r0, r1
    a976:	e776      	b.n	a866 <__aeabi_fmul+0x15e>
    a978:	ea93 0f0c 	teq	r3, ip
    a97c:	d104      	bne.n	a988 <__aeabi_fdiv+0x118>
    a97e:	024b      	lsls	r3, r1, #9
    a980:	f43f af4c 	beq.w	a81c <__aeabi_fmul+0x114>
    a984:	4608      	mov	r0, r1
    a986:	e76e      	b.n	a866 <__aeabi_fmul+0x15e>
    a988:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    a98c:	bf18      	it	ne
    a98e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    a992:	d1ca      	bne.n	a92a <__aeabi_fdiv+0xba>
    a994:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    a998:	f47f af5c 	bne.w	a854 <__aeabi_fmul+0x14c>
    a99c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    a9a0:	f47f af3c 	bne.w	a81c <__aeabi_fmul+0x114>
    a9a4:	e75f      	b.n	a866 <__aeabi_fmul+0x15e>
    a9a6:	bf00      	nop

0000a9a8 <__gesf2>:
    a9a8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    a9ac:	e006      	b.n	a9bc <__cmpsf2+0x4>
    a9ae:	bf00      	nop

0000a9b0 <__lesf2>:
    a9b0:	f04f 0c01 	mov.w	ip, #1
    a9b4:	e002      	b.n	a9bc <__cmpsf2+0x4>
    a9b6:	bf00      	nop

0000a9b8 <__cmpsf2>:
    a9b8:	f04f 0c01 	mov.w	ip, #1
    a9bc:	f84d cd04 	str.w	ip, [sp, #-4]!
    a9c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
    a9c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
    a9c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    a9cc:	bf18      	it	ne
    a9ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    a9d2:	d011      	beq.n	a9f8 <__cmpsf2+0x40>
    a9d4:	b001      	add	sp, #4
    a9d6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    a9da:	bf18      	it	ne
    a9dc:	ea90 0f01 	teqne	r0, r1
    a9e0:	bf58      	it	pl
    a9e2:	ebb2 0003 	subspl.w	r0, r2, r3
    a9e6:	bf88      	it	hi
    a9e8:	17c8      	asrhi	r0, r1, #31
    a9ea:	bf38      	it	cc
    a9ec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    a9f0:	bf18      	it	ne
    a9f2:	f040 0001 	orrne.w	r0, r0, #1
    a9f6:	4770      	bx	lr
    a9f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    a9fc:	d102      	bne.n	aa04 <__cmpsf2+0x4c>
    a9fe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    aa02:	d105      	bne.n	aa10 <__cmpsf2+0x58>
    aa04:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    aa08:	d1e4      	bne.n	a9d4 <__cmpsf2+0x1c>
    aa0a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    aa0e:	d0e1      	beq.n	a9d4 <__cmpsf2+0x1c>
    aa10:	f85d 0b04 	ldr.w	r0, [sp], #4
    aa14:	4770      	bx	lr
    aa16:	bf00      	nop

0000aa18 <__aeabi_cfrcmple>:
    aa18:	4684      	mov	ip, r0
    aa1a:	4608      	mov	r0, r1
    aa1c:	4661      	mov	r1, ip
    aa1e:	e7ff      	b.n	aa20 <__aeabi_cfcmpeq>

0000aa20 <__aeabi_cfcmpeq>:
    aa20:	b50f      	push	{r0, r1, r2, r3, lr}
    aa22:	f7ff ffc9 	bl	a9b8 <__cmpsf2>
    aa26:	2800      	cmp	r0, #0
    aa28:	bf48      	it	mi
    aa2a:	f110 0f00 	cmnmi.w	r0, #0
    aa2e:	bd0f      	pop	{r0, r1, r2, r3, pc}

0000aa30 <__aeabi_fcmpeq>:
    aa30:	f84d ed08 	str.w	lr, [sp, #-8]!
    aa34:	f7ff fff4 	bl	aa20 <__aeabi_cfcmpeq>
    aa38:	bf0c      	ite	eq
    aa3a:	2001      	moveq	r0, #1
    aa3c:	2000      	movne	r0, #0
    aa3e:	f85d fb08 	ldr.w	pc, [sp], #8
    aa42:	bf00      	nop

0000aa44 <__aeabi_fcmplt>:
    aa44:	f84d ed08 	str.w	lr, [sp, #-8]!
    aa48:	f7ff ffea 	bl	aa20 <__aeabi_cfcmpeq>
    aa4c:	bf34      	ite	cc
    aa4e:	2001      	movcc	r0, #1
    aa50:	2000      	movcs	r0, #0
    aa52:	f85d fb08 	ldr.w	pc, [sp], #8
    aa56:	bf00      	nop

0000aa58 <__aeabi_fcmple>:
    aa58:	f84d ed08 	str.w	lr, [sp, #-8]!
    aa5c:	f7ff ffe0 	bl	aa20 <__aeabi_cfcmpeq>
    aa60:	bf94      	ite	ls
    aa62:	2001      	movls	r0, #1
    aa64:	2000      	movhi	r0, #0
    aa66:	f85d fb08 	ldr.w	pc, [sp], #8
    aa6a:	bf00      	nop

0000aa6c <__aeabi_fcmpge>:
    aa6c:	f84d ed08 	str.w	lr, [sp, #-8]!
    aa70:	f7ff ffd2 	bl	aa18 <__aeabi_cfrcmple>
    aa74:	bf94      	ite	ls
    aa76:	2001      	movls	r0, #1
    aa78:	2000      	movhi	r0, #0
    aa7a:	f85d fb08 	ldr.w	pc, [sp], #8
    aa7e:	bf00      	nop

0000aa80 <__aeabi_fcmpgt>:
    aa80:	f84d ed08 	str.w	lr, [sp, #-8]!
    aa84:	f7ff ffc8 	bl	aa18 <__aeabi_cfrcmple>
    aa88:	bf34      	ite	cc
    aa8a:	2001      	movcc	r0, #1
    aa8c:	2000      	movcs	r0, #0
    aa8e:	f85d fb08 	ldr.w	pc, [sp], #8
    aa92:	bf00      	nop

0000aa94 <__aeabi_fcmpun>:
    aa94:	ea4f 0240 	mov.w	r2, r0, lsl #1
    aa98:	ea4f 0341 	mov.w	r3, r1, lsl #1
    aa9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    aaa0:	d102      	bne.n	aaa8 <__aeabi_fcmpun+0x14>
    aaa2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    aaa6:	d108      	bne.n	aaba <__aeabi_fcmpun+0x26>
    aaa8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    aaac:	d102      	bne.n	aab4 <__aeabi_fcmpun+0x20>
    aaae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    aab2:	d102      	bne.n	aaba <__aeabi_fcmpun+0x26>
    aab4:	f04f 0000 	mov.w	r0, #0
    aab8:	4770      	bx	lr
    aaba:	f04f 0001 	mov.w	r0, #1
    aabe:	4770      	bx	lr

0000aac0 <__aeabi_f2iz>:
    aac0:	ea4f 0240 	mov.w	r2, r0, lsl #1
    aac4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    aac8:	d30f      	bcc.n	aaea <__aeabi_f2iz+0x2a>
    aaca:	f04f 039e 	mov.w	r3, #158	; 0x9e
    aace:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    aad2:	d90d      	bls.n	aaf0 <__aeabi_f2iz+0x30>
    aad4:	ea4f 2300 	mov.w	r3, r0, lsl #8
    aad8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    aadc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    aae0:	fa23 f002 	lsr.w	r0, r3, r2
    aae4:	bf18      	it	ne
    aae6:	4240      	negne	r0, r0
    aae8:	4770      	bx	lr
    aaea:	f04f 0000 	mov.w	r0, #0
    aaee:	4770      	bx	lr
    aaf0:	f112 0f61 	cmn.w	r2, #97	; 0x61
    aaf4:	d101      	bne.n	aafa <__aeabi_f2iz+0x3a>
    aaf6:	0242      	lsls	r2, r0, #9
    aaf8:	d105      	bne.n	ab06 <__aeabi_f2iz+0x46>
    aafa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    aafe:	bf08      	it	eq
    ab00:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    ab04:	4770      	bx	lr
    ab06:	f04f 0000 	mov.w	r0, #0
    ab0a:	4770      	bx	lr

0000ab0c <__errno>:
    ab0c:	4b01      	ldr	r3, [pc, #4]	; (ab14 <__errno+0x8>)
    ab0e:	6818      	ldr	r0, [r3, #0]
    ab10:	4770      	bx	lr
    ab12:	bf00      	nop
    ab14:	0000ca1c 	.word	0x0000ca1c

0000ab18 <__retarget_lock_init_recursive>:
    ab18:	4770      	bx	lr

0000ab1a <__retarget_lock_acquire_recursive>:
    ab1a:	4770      	bx	lr

0000ab1c <__retarget_lock_release_recursive>:
    ab1c:	4770      	bx	lr

0000ab1e <memcpy>:
    ab1e:	440a      	add	r2, r1
    ab20:	4291      	cmp	r1, r2
    ab22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    ab26:	d100      	bne.n	ab2a <memcpy+0xc>
    ab28:	4770      	bx	lr
    ab2a:	b510      	push	{r4, lr}
    ab2c:	f811 4b01 	ldrb.w	r4, [r1], #1
    ab30:	f803 4f01 	strb.w	r4, [r3, #1]!
    ab34:	4291      	cmp	r1, r2
    ab36:	d1f9      	bne.n	ab2c <memcpy+0xe>
    ab38:	bd10      	pop	{r4, pc}

0000ab3a <memmove>:
    ab3a:	4288      	cmp	r0, r1
    ab3c:	b510      	push	{r4, lr}
    ab3e:	eb01 0302 	add.w	r3, r1, r2
    ab42:	d902      	bls.n	ab4a <memmove+0x10>
    ab44:	4283      	cmp	r3, r0
    ab46:	461c      	mov	r4, r3
    ab48:	d807      	bhi.n	ab5a <memmove+0x20>
    ab4a:	1e42      	subs	r2, r0, #1
    ab4c:	4299      	cmp	r1, r3
    ab4e:	d008      	beq.n	ab62 <memmove+0x28>
    ab50:	f811 4b01 	ldrb.w	r4, [r1], #1
    ab54:	f802 4f01 	strb.w	r4, [r2, #1]!
    ab58:	e7f8      	b.n	ab4c <memmove+0x12>
    ab5a:	1883      	adds	r3, r0, r2
    ab5c:	1a9a      	subs	r2, r3, r2
    ab5e:	429a      	cmp	r2, r3
    ab60:	d100      	bne.n	ab64 <memmove+0x2a>
    ab62:	bd10      	pop	{r4, pc}
    ab64:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    ab68:	f803 1d01 	strb.w	r1, [r3, #-1]!
    ab6c:	e7f7      	b.n	ab5e <memmove+0x24>

0000ab6e <memset>:
    ab6e:	4402      	add	r2, r0
    ab70:	4603      	mov	r3, r0
    ab72:	4293      	cmp	r3, r2
    ab74:	d100      	bne.n	ab78 <memset+0xa>
    ab76:	4770      	bx	lr
    ab78:	f803 1b01 	strb.w	r1, [r3], #1
    ab7c:	e7f9      	b.n	ab72 <memset+0x4>
	...

0000ab80 <_free_r>:
    ab80:	b538      	push	{r3, r4, r5, lr}
    ab82:	4605      	mov	r5, r0
    ab84:	2900      	cmp	r1, #0
    ab86:	d045      	beq.n	ac14 <_free_r+0x94>
    ab88:	f851 3c04 	ldr.w	r3, [r1, #-4]
    ab8c:	1f0c      	subs	r4, r1, #4
    ab8e:	2b00      	cmp	r3, #0
    ab90:	bfb8      	it	lt
    ab92:	18e4      	addlt	r4, r4, r3
    ab94:	f000 fc32 	bl	b3fc <__malloc_lock>
    ab98:	4a1f      	ldr	r2, [pc, #124]	; (ac18 <_free_r+0x98>)
    ab9a:	6813      	ldr	r3, [r2, #0]
    ab9c:	4610      	mov	r0, r2
    ab9e:	b933      	cbnz	r3, abae <_free_r+0x2e>
    aba0:	6063      	str	r3, [r4, #4]
    aba2:	6014      	str	r4, [r2, #0]
    aba4:	4628      	mov	r0, r5
    aba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    abaa:	f000 bc2d 	b.w	b408 <__malloc_unlock>
    abae:	42a3      	cmp	r3, r4
    abb0:	d90c      	bls.n	abcc <_free_r+0x4c>
    abb2:	6821      	ldr	r1, [r4, #0]
    abb4:	1862      	adds	r2, r4, r1
    abb6:	4293      	cmp	r3, r2
    abb8:	bf04      	itt	eq
    abba:	681a      	ldreq	r2, [r3, #0]
    abbc:	685b      	ldreq	r3, [r3, #4]
    abbe:	6063      	str	r3, [r4, #4]
    abc0:	bf04      	itt	eq
    abc2:	1852      	addeq	r2, r2, r1
    abc4:	6022      	streq	r2, [r4, #0]
    abc6:	6004      	str	r4, [r0, #0]
    abc8:	e7ec      	b.n	aba4 <_free_r+0x24>
    abca:	4613      	mov	r3, r2
    abcc:	685a      	ldr	r2, [r3, #4]
    abce:	b10a      	cbz	r2, abd4 <_free_r+0x54>
    abd0:	42a2      	cmp	r2, r4
    abd2:	d9fa      	bls.n	abca <_free_r+0x4a>
    abd4:	6819      	ldr	r1, [r3, #0]
    abd6:	1858      	adds	r0, r3, r1
    abd8:	42a0      	cmp	r0, r4
    abda:	d10b      	bne.n	abf4 <_free_r+0x74>
    abdc:	6820      	ldr	r0, [r4, #0]
    abde:	4401      	add	r1, r0
    abe0:	1858      	adds	r0, r3, r1
    abe2:	4282      	cmp	r2, r0
    abe4:	6019      	str	r1, [r3, #0]
    abe6:	d1dd      	bne.n	aba4 <_free_r+0x24>
    abe8:	6810      	ldr	r0, [r2, #0]
    abea:	6852      	ldr	r2, [r2, #4]
    abec:	605a      	str	r2, [r3, #4]
    abee:	4401      	add	r1, r0
    abf0:	6019      	str	r1, [r3, #0]
    abf2:	e7d7      	b.n	aba4 <_free_r+0x24>
    abf4:	d902      	bls.n	abfc <_free_r+0x7c>
    abf6:	230c      	movs	r3, #12
    abf8:	602b      	str	r3, [r5, #0]
    abfa:	e7d3      	b.n	aba4 <_free_r+0x24>
    abfc:	6820      	ldr	r0, [r4, #0]
    abfe:	1821      	adds	r1, r4, r0
    ac00:	428a      	cmp	r2, r1
    ac02:	bf04      	itt	eq
    ac04:	6811      	ldreq	r1, [r2, #0]
    ac06:	6852      	ldreq	r2, [r2, #4]
    ac08:	6062      	str	r2, [r4, #4]
    ac0a:	bf04      	itt	eq
    ac0c:	1809      	addeq	r1, r1, r0
    ac0e:	6021      	streq	r1, [r4, #0]
    ac10:	605c      	str	r4, [r3, #4]
    ac12:	e7c7      	b.n	aba4 <_free_r+0x24>
    ac14:	bd38      	pop	{r3, r4, r5, pc}
    ac16:	bf00      	nop
    ac18:	00031674 	.word	0x00031674

0000ac1c <_malloc_r>:
    ac1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac1e:	1ccd      	adds	r5, r1, #3
    ac20:	f025 0503 	bic.w	r5, r5, #3
    ac24:	3508      	adds	r5, #8
    ac26:	2d0c      	cmp	r5, #12
    ac28:	bf38      	it	cc
    ac2a:	250c      	movcc	r5, #12
    ac2c:	2d00      	cmp	r5, #0
    ac2e:	4606      	mov	r6, r0
    ac30:	db01      	blt.n	ac36 <_malloc_r+0x1a>
    ac32:	42a9      	cmp	r1, r5
    ac34:	d903      	bls.n	ac3e <_malloc_r+0x22>
    ac36:	230c      	movs	r3, #12
    ac38:	6033      	str	r3, [r6, #0]
    ac3a:	2000      	movs	r0, #0
    ac3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac3e:	f000 fbdd 	bl	b3fc <__malloc_lock>
    ac42:	4921      	ldr	r1, [pc, #132]	; (acc8 <_malloc_r+0xac>)
    ac44:	680a      	ldr	r2, [r1, #0]
    ac46:	4614      	mov	r4, r2
    ac48:	b99c      	cbnz	r4, ac72 <_malloc_r+0x56>
    ac4a:	4f20      	ldr	r7, [pc, #128]	; (accc <_malloc_r+0xb0>)
    ac4c:	683b      	ldr	r3, [r7, #0]
    ac4e:	b923      	cbnz	r3, ac5a <_malloc_r+0x3e>
    ac50:	4621      	mov	r1, r4
    ac52:	4630      	mov	r0, r6
    ac54:	f000 f8b2 	bl	adbc <_sbrk_r>
    ac58:	6038      	str	r0, [r7, #0]
    ac5a:	4629      	mov	r1, r5
    ac5c:	4630      	mov	r0, r6
    ac5e:	f000 f8ad 	bl	adbc <_sbrk_r>
    ac62:	1c43      	adds	r3, r0, #1
    ac64:	d123      	bne.n	acae <_malloc_r+0x92>
    ac66:	230c      	movs	r3, #12
    ac68:	6033      	str	r3, [r6, #0]
    ac6a:	4630      	mov	r0, r6
    ac6c:	f000 fbcc 	bl	b408 <__malloc_unlock>
    ac70:	e7e3      	b.n	ac3a <_malloc_r+0x1e>
    ac72:	6823      	ldr	r3, [r4, #0]
    ac74:	1b5b      	subs	r3, r3, r5
    ac76:	d417      	bmi.n	aca8 <_malloc_r+0x8c>
    ac78:	2b0b      	cmp	r3, #11
    ac7a:	d903      	bls.n	ac84 <_malloc_r+0x68>
    ac7c:	6023      	str	r3, [r4, #0]
    ac7e:	441c      	add	r4, r3
    ac80:	6025      	str	r5, [r4, #0]
    ac82:	e004      	b.n	ac8e <_malloc_r+0x72>
    ac84:	6863      	ldr	r3, [r4, #4]
    ac86:	42a2      	cmp	r2, r4
    ac88:	bf0c      	ite	eq
    ac8a:	600b      	streq	r3, [r1, #0]
    ac8c:	6053      	strne	r3, [r2, #4]
    ac8e:	4630      	mov	r0, r6
    ac90:	f000 fbba 	bl	b408 <__malloc_unlock>
    ac94:	f104 000b 	add.w	r0, r4, #11
    ac98:	1d23      	adds	r3, r4, #4
    ac9a:	f020 0007 	bic.w	r0, r0, #7
    ac9e:	1ac2      	subs	r2, r0, r3
    aca0:	d0cc      	beq.n	ac3c <_malloc_r+0x20>
    aca2:	1a1b      	subs	r3, r3, r0
    aca4:	50a3      	str	r3, [r4, r2]
    aca6:	e7c9      	b.n	ac3c <_malloc_r+0x20>
    aca8:	4622      	mov	r2, r4
    acaa:	6864      	ldr	r4, [r4, #4]
    acac:	e7cc      	b.n	ac48 <_malloc_r+0x2c>
    acae:	1cc4      	adds	r4, r0, #3
    acb0:	f024 0403 	bic.w	r4, r4, #3
    acb4:	42a0      	cmp	r0, r4
    acb6:	d0e3      	beq.n	ac80 <_malloc_r+0x64>
    acb8:	1a21      	subs	r1, r4, r0
    acba:	4630      	mov	r0, r6
    acbc:	f000 f87e 	bl	adbc <_sbrk_r>
    acc0:	3001      	adds	r0, #1
    acc2:	d1dd      	bne.n	ac80 <_malloc_r+0x64>
    acc4:	e7cf      	b.n	ac66 <_malloc_r+0x4a>
    acc6:	bf00      	nop
    acc8:	00031674 	.word	0x00031674
    accc:	00031678 	.word	0x00031678

0000acd0 <_puts_r>:
    acd0:	b570      	push	{r4, r5, r6, lr}
    acd2:	460e      	mov	r6, r1
    acd4:	4605      	mov	r5, r0
    acd6:	b118      	cbz	r0, ace0 <_puts_r+0x10>
    acd8:	6983      	ldr	r3, [r0, #24]
    acda:	b90b      	cbnz	r3, ace0 <_puts_r+0x10>
    acdc:	f000 fa8e 	bl	b1fc <__sinit>
    ace0:	69ab      	ldr	r3, [r5, #24]
    ace2:	68ac      	ldr	r4, [r5, #8]
    ace4:	b913      	cbnz	r3, acec <_puts_r+0x1c>
    ace6:	4628      	mov	r0, r5
    ace8:	f000 fa88 	bl	b1fc <__sinit>
    acec:	4b2c      	ldr	r3, [pc, #176]	; (ada0 <_puts_r+0xd0>)
    acee:	429c      	cmp	r4, r3
    acf0:	d120      	bne.n	ad34 <_puts_r+0x64>
    acf2:	686c      	ldr	r4, [r5, #4]
    acf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
    acf6:	07db      	lsls	r3, r3, #31
    acf8:	d405      	bmi.n	ad06 <_puts_r+0x36>
    acfa:	89a3      	ldrh	r3, [r4, #12]
    acfc:	0598      	lsls	r0, r3, #22
    acfe:	d402      	bmi.n	ad06 <_puts_r+0x36>
    ad00:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ad02:	f7ff ff0a 	bl	ab1a <__retarget_lock_acquire_recursive>
    ad06:	89a3      	ldrh	r3, [r4, #12]
    ad08:	0719      	lsls	r1, r3, #28
    ad0a:	d51d      	bpl.n	ad48 <_puts_r+0x78>
    ad0c:	6923      	ldr	r3, [r4, #16]
    ad0e:	b1db      	cbz	r3, ad48 <_puts_r+0x78>
    ad10:	3e01      	subs	r6, #1
    ad12:	68a3      	ldr	r3, [r4, #8]
    ad14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    ad18:	3b01      	subs	r3, #1
    ad1a:	60a3      	str	r3, [r4, #8]
    ad1c:	bb39      	cbnz	r1, ad6e <_puts_r+0x9e>
    ad1e:	2b00      	cmp	r3, #0
    ad20:	da38      	bge.n	ad94 <_puts_r+0xc4>
    ad22:	4622      	mov	r2, r4
    ad24:	210a      	movs	r1, #10
    ad26:	4628      	mov	r0, r5
    ad28:	f000 f88e 	bl	ae48 <__swbuf_r>
    ad2c:	3001      	adds	r0, #1
    ad2e:	d011      	beq.n	ad54 <_puts_r+0x84>
    ad30:	250a      	movs	r5, #10
    ad32:	e011      	b.n	ad58 <_puts_r+0x88>
    ad34:	4b1b      	ldr	r3, [pc, #108]	; (ada4 <_puts_r+0xd4>)
    ad36:	429c      	cmp	r4, r3
    ad38:	d101      	bne.n	ad3e <_puts_r+0x6e>
    ad3a:	68ac      	ldr	r4, [r5, #8]
    ad3c:	e7da      	b.n	acf4 <_puts_r+0x24>
    ad3e:	4b1a      	ldr	r3, [pc, #104]	; (ada8 <_puts_r+0xd8>)
    ad40:	429c      	cmp	r4, r3
    ad42:	bf08      	it	eq
    ad44:	68ec      	ldreq	r4, [r5, #12]
    ad46:	e7d5      	b.n	acf4 <_puts_r+0x24>
    ad48:	4621      	mov	r1, r4
    ad4a:	4628      	mov	r0, r5
    ad4c:	f000 f8ce 	bl	aeec <__swsetup_r>
    ad50:	2800      	cmp	r0, #0
    ad52:	d0dd      	beq.n	ad10 <_puts_r+0x40>
    ad54:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    ad58:	6e63      	ldr	r3, [r4, #100]	; 0x64
    ad5a:	07da      	lsls	r2, r3, #31
    ad5c:	d405      	bmi.n	ad6a <_puts_r+0x9a>
    ad5e:	89a3      	ldrh	r3, [r4, #12]
    ad60:	059b      	lsls	r3, r3, #22
    ad62:	d402      	bmi.n	ad6a <_puts_r+0x9a>
    ad64:	6da0      	ldr	r0, [r4, #88]	; 0x58
    ad66:	f7ff fed9 	bl	ab1c <__retarget_lock_release_recursive>
    ad6a:	4628      	mov	r0, r5
    ad6c:	bd70      	pop	{r4, r5, r6, pc}
    ad6e:	2b00      	cmp	r3, #0
    ad70:	da04      	bge.n	ad7c <_puts_r+0xac>
    ad72:	69a2      	ldr	r2, [r4, #24]
    ad74:	429a      	cmp	r2, r3
    ad76:	dc06      	bgt.n	ad86 <_puts_r+0xb6>
    ad78:	290a      	cmp	r1, #10
    ad7a:	d004      	beq.n	ad86 <_puts_r+0xb6>
    ad7c:	6823      	ldr	r3, [r4, #0]
    ad7e:	1c5a      	adds	r2, r3, #1
    ad80:	6022      	str	r2, [r4, #0]
    ad82:	7019      	strb	r1, [r3, #0]
    ad84:	e7c5      	b.n	ad12 <_puts_r+0x42>
    ad86:	4622      	mov	r2, r4
    ad88:	4628      	mov	r0, r5
    ad8a:	f000 f85d 	bl	ae48 <__swbuf_r>
    ad8e:	3001      	adds	r0, #1
    ad90:	d1bf      	bne.n	ad12 <_puts_r+0x42>
    ad92:	e7df      	b.n	ad54 <_puts_r+0x84>
    ad94:	6823      	ldr	r3, [r4, #0]
    ad96:	250a      	movs	r5, #10
    ad98:	1c5a      	adds	r2, r3, #1
    ad9a:	6022      	str	r2, [r4, #0]
    ad9c:	701d      	strb	r5, [r3, #0]
    ad9e:	e7db      	b.n	ad58 <_puts_r+0x88>
    ada0:	0000c5d4 	.word	0x0000c5d4
    ada4:	0000c5f4 	.word	0x0000c5f4
    ada8:	0000c5b4 	.word	0x0000c5b4

0000adac <puts>:
    adac:	4b02      	ldr	r3, [pc, #8]	; (adb8 <puts+0xc>)
    adae:	4601      	mov	r1, r0
    adb0:	6818      	ldr	r0, [r3, #0]
    adb2:	f7ff bf8d 	b.w	acd0 <_puts_r>
    adb6:	bf00      	nop
    adb8:	0000ca1c 	.word	0x0000ca1c

0000adbc <_sbrk_r>:
    adbc:	b538      	push	{r3, r4, r5, lr}
    adbe:	4c06      	ldr	r4, [pc, #24]	; (add8 <_sbrk_r+0x1c>)
    adc0:	2300      	movs	r3, #0
    adc2:	4605      	mov	r5, r0
    adc4:	4608      	mov	r0, r1
    adc6:	6023      	str	r3, [r4, #0]
    adc8:	f7f8 f9e2 	bl	3190 <_sbrk>
    adcc:	1c43      	adds	r3, r0, #1
    adce:	d102      	bne.n	add6 <_sbrk_r+0x1a>
    add0:	6823      	ldr	r3, [r4, #0]
    add2:	b103      	cbz	r3, add6 <_sbrk_r+0x1a>
    add4:	602b      	str	r3, [r5, #0]
    add6:	bd38      	pop	{r3, r4, r5, pc}
    add8:	000318e0 	.word	0x000318e0

0000addc <strcpy>:
    addc:	4603      	mov	r3, r0
    adde:	f811 2b01 	ldrb.w	r2, [r1], #1
    ade2:	f803 2b01 	strb.w	r2, [r3], #1
    ade6:	2a00      	cmp	r2, #0
    ade8:	d1f9      	bne.n	adde <strcpy+0x2>
    adea:	4770      	bx	lr

0000adec <strlen>:
    adec:	4603      	mov	r3, r0
    adee:	f813 2b01 	ldrb.w	r2, [r3], #1
    adf2:	2a00      	cmp	r2, #0
    adf4:	d1fb      	bne.n	adee <strlen+0x2>
    adf6:	1a18      	subs	r0, r3, r0
    adf8:	3801      	subs	r0, #1
    adfa:	4770      	bx	lr

0000adfc <strncmp>:
    adfc:	b510      	push	{r4, lr}
    adfe:	b16a      	cbz	r2, ae1c <strncmp+0x20>
    ae00:	3901      	subs	r1, #1
    ae02:	1884      	adds	r4, r0, r2
    ae04:	f810 3b01 	ldrb.w	r3, [r0], #1
    ae08:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    ae0c:	4293      	cmp	r3, r2
    ae0e:	d103      	bne.n	ae18 <strncmp+0x1c>
    ae10:	42a0      	cmp	r0, r4
    ae12:	d001      	beq.n	ae18 <strncmp+0x1c>
    ae14:	2b00      	cmp	r3, #0
    ae16:	d1f5      	bne.n	ae04 <strncmp+0x8>
    ae18:	1a98      	subs	r0, r3, r2
    ae1a:	bd10      	pop	{r4, pc}
    ae1c:	4610      	mov	r0, r2
    ae1e:	e7fc      	b.n	ae1a <strncmp+0x1e>

0000ae20 <strncpy>:
    ae20:	b510      	push	{r4, lr}
    ae22:	3901      	subs	r1, #1
    ae24:	4603      	mov	r3, r0
    ae26:	b132      	cbz	r2, ae36 <strncpy+0x16>
    ae28:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    ae2c:	f803 4b01 	strb.w	r4, [r3], #1
    ae30:	3a01      	subs	r2, #1
    ae32:	2c00      	cmp	r4, #0
    ae34:	d1f7      	bne.n	ae26 <strncpy+0x6>
    ae36:	441a      	add	r2, r3
    ae38:	2100      	movs	r1, #0
    ae3a:	4293      	cmp	r3, r2
    ae3c:	d100      	bne.n	ae40 <strncpy+0x20>
    ae3e:	bd10      	pop	{r4, pc}
    ae40:	f803 1b01 	strb.w	r1, [r3], #1
    ae44:	e7f9      	b.n	ae3a <strncpy+0x1a>
	...

0000ae48 <__swbuf_r>:
    ae48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ae4a:	460e      	mov	r6, r1
    ae4c:	4614      	mov	r4, r2
    ae4e:	4605      	mov	r5, r0
    ae50:	b118      	cbz	r0, ae5a <__swbuf_r+0x12>
    ae52:	6983      	ldr	r3, [r0, #24]
    ae54:	b90b      	cbnz	r3, ae5a <__swbuf_r+0x12>
    ae56:	f000 f9d1 	bl	b1fc <__sinit>
    ae5a:	4b21      	ldr	r3, [pc, #132]	; (aee0 <__swbuf_r+0x98>)
    ae5c:	429c      	cmp	r4, r3
    ae5e:	d12b      	bne.n	aeb8 <__swbuf_r+0x70>
    ae60:	686c      	ldr	r4, [r5, #4]
    ae62:	69a3      	ldr	r3, [r4, #24]
    ae64:	60a3      	str	r3, [r4, #8]
    ae66:	89a3      	ldrh	r3, [r4, #12]
    ae68:	071a      	lsls	r2, r3, #28
    ae6a:	d52f      	bpl.n	aecc <__swbuf_r+0x84>
    ae6c:	6923      	ldr	r3, [r4, #16]
    ae6e:	b36b      	cbz	r3, aecc <__swbuf_r+0x84>
    ae70:	6923      	ldr	r3, [r4, #16]
    ae72:	6820      	ldr	r0, [r4, #0]
    ae74:	1ac0      	subs	r0, r0, r3
    ae76:	6963      	ldr	r3, [r4, #20]
    ae78:	b2f6      	uxtb	r6, r6
    ae7a:	4283      	cmp	r3, r0
    ae7c:	4637      	mov	r7, r6
    ae7e:	dc04      	bgt.n	ae8a <__swbuf_r+0x42>
    ae80:	4621      	mov	r1, r4
    ae82:	4628      	mov	r0, r5
    ae84:	f000 f926 	bl	b0d4 <_fflush_r>
    ae88:	bb30      	cbnz	r0, aed8 <__swbuf_r+0x90>
    ae8a:	68a3      	ldr	r3, [r4, #8]
    ae8c:	3b01      	subs	r3, #1
    ae8e:	60a3      	str	r3, [r4, #8]
    ae90:	6823      	ldr	r3, [r4, #0]
    ae92:	1c5a      	adds	r2, r3, #1
    ae94:	6022      	str	r2, [r4, #0]
    ae96:	701e      	strb	r6, [r3, #0]
    ae98:	6963      	ldr	r3, [r4, #20]
    ae9a:	3001      	adds	r0, #1
    ae9c:	4283      	cmp	r3, r0
    ae9e:	d004      	beq.n	aeaa <__swbuf_r+0x62>
    aea0:	89a3      	ldrh	r3, [r4, #12]
    aea2:	07db      	lsls	r3, r3, #31
    aea4:	d506      	bpl.n	aeb4 <__swbuf_r+0x6c>
    aea6:	2e0a      	cmp	r6, #10
    aea8:	d104      	bne.n	aeb4 <__swbuf_r+0x6c>
    aeaa:	4621      	mov	r1, r4
    aeac:	4628      	mov	r0, r5
    aeae:	f000 f911 	bl	b0d4 <_fflush_r>
    aeb2:	b988      	cbnz	r0, aed8 <__swbuf_r+0x90>
    aeb4:	4638      	mov	r0, r7
    aeb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aeb8:	4b0a      	ldr	r3, [pc, #40]	; (aee4 <__swbuf_r+0x9c>)
    aeba:	429c      	cmp	r4, r3
    aebc:	d101      	bne.n	aec2 <__swbuf_r+0x7a>
    aebe:	68ac      	ldr	r4, [r5, #8]
    aec0:	e7cf      	b.n	ae62 <__swbuf_r+0x1a>
    aec2:	4b09      	ldr	r3, [pc, #36]	; (aee8 <__swbuf_r+0xa0>)
    aec4:	429c      	cmp	r4, r3
    aec6:	bf08      	it	eq
    aec8:	68ec      	ldreq	r4, [r5, #12]
    aeca:	e7ca      	b.n	ae62 <__swbuf_r+0x1a>
    aecc:	4621      	mov	r1, r4
    aece:	4628      	mov	r0, r5
    aed0:	f000 f80c 	bl	aeec <__swsetup_r>
    aed4:	2800      	cmp	r0, #0
    aed6:	d0cb      	beq.n	ae70 <__swbuf_r+0x28>
    aed8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    aedc:	e7ea      	b.n	aeb4 <__swbuf_r+0x6c>
    aede:	bf00      	nop
    aee0:	0000c5d4 	.word	0x0000c5d4
    aee4:	0000c5f4 	.word	0x0000c5f4
    aee8:	0000c5b4 	.word	0x0000c5b4

0000aeec <__swsetup_r>:
    aeec:	4b32      	ldr	r3, [pc, #200]	; (afb8 <__swsetup_r+0xcc>)
    aeee:	b570      	push	{r4, r5, r6, lr}
    aef0:	681d      	ldr	r5, [r3, #0]
    aef2:	4606      	mov	r6, r0
    aef4:	460c      	mov	r4, r1
    aef6:	b125      	cbz	r5, af02 <__swsetup_r+0x16>
    aef8:	69ab      	ldr	r3, [r5, #24]
    aefa:	b913      	cbnz	r3, af02 <__swsetup_r+0x16>
    aefc:	4628      	mov	r0, r5
    aefe:	f000 f97d 	bl	b1fc <__sinit>
    af02:	4b2e      	ldr	r3, [pc, #184]	; (afbc <__swsetup_r+0xd0>)
    af04:	429c      	cmp	r4, r3
    af06:	d10f      	bne.n	af28 <__swsetup_r+0x3c>
    af08:	686c      	ldr	r4, [r5, #4]
    af0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    af0e:	b29a      	uxth	r2, r3
    af10:	0715      	lsls	r5, r2, #28
    af12:	d42c      	bmi.n	af6e <__swsetup_r+0x82>
    af14:	06d0      	lsls	r0, r2, #27
    af16:	d411      	bmi.n	af3c <__swsetup_r+0x50>
    af18:	2209      	movs	r2, #9
    af1a:	6032      	str	r2, [r6, #0]
    af1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    af20:	81a3      	strh	r3, [r4, #12]
    af22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    af26:	e03e      	b.n	afa6 <__swsetup_r+0xba>
    af28:	4b25      	ldr	r3, [pc, #148]	; (afc0 <__swsetup_r+0xd4>)
    af2a:	429c      	cmp	r4, r3
    af2c:	d101      	bne.n	af32 <__swsetup_r+0x46>
    af2e:	68ac      	ldr	r4, [r5, #8]
    af30:	e7eb      	b.n	af0a <__swsetup_r+0x1e>
    af32:	4b24      	ldr	r3, [pc, #144]	; (afc4 <__swsetup_r+0xd8>)
    af34:	429c      	cmp	r4, r3
    af36:	bf08      	it	eq
    af38:	68ec      	ldreq	r4, [r5, #12]
    af3a:	e7e6      	b.n	af0a <__swsetup_r+0x1e>
    af3c:	0751      	lsls	r1, r2, #29
    af3e:	d512      	bpl.n	af66 <__swsetup_r+0x7a>
    af40:	6b61      	ldr	r1, [r4, #52]	; 0x34
    af42:	b141      	cbz	r1, af56 <__swsetup_r+0x6a>
    af44:	f104 0344 	add.w	r3, r4, #68	; 0x44
    af48:	4299      	cmp	r1, r3
    af4a:	d002      	beq.n	af52 <__swsetup_r+0x66>
    af4c:	4630      	mov	r0, r6
    af4e:	f7ff fe17 	bl	ab80 <_free_r>
    af52:	2300      	movs	r3, #0
    af54:	6363      	str	r3, [r4, #52]	; 0x34
    af56:	89a3      	ldrh	r3, [r4, #12]
    af58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
    af5c:	81a3      	strh	r3, [r4, #12]
    af5e:	2300      	movs	r3, #0
    af60:	6063      	str	r3, [r4, #4]
    af62:	6923      	ldr	r3, [r4, #16]
    af64:	6023      	str	r3, [r4, #0]
    af66:	89a3      	ldrh	r3, [r4, #12]
    af68:	f043 0308 	orr.w	r3, r3, #8
    af6c:	81a3      	strh	r3, [r4, #12]
    af6e:	6923      	ldr	r3, [r4, #16]
    af70:	b94b      	cbnz	r3, af86 <__swsetup_r+0x9a>
    af72:	89a3      	ldrh	r3, [r4, #12]
    af74:	f403 7320 	and.w	r3, r3, #640	; 0x280
    af78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    af7c:	d003      	beq.n	af86 <__swsetup_r+0x9a>
    af7e:	4621      	mov	r1, r4
    af80:	4630      	mov	r0, r6
    af82:	f000 f9fb 	bl	b37c <__smakebuf_r>
    af86:	89a2      	ldrh	r2, [r4, #12]
    af88:	f012 0301 	ands.w	r3, r2, #1
    af8c:	d00c      	beq.n	afa8 <__swsetup_r+0xbc>
    af8e:	2300      	movs	r3, #0
    af90:	60a3      	str	r3, [r4, #8]
    af92:	6963      	ldr	r3, [r4, #20]
    af94:	425b      	negs	r3, r3
    af96:	61a3      	str	r3, [r4, #24]
    af98:	6923      	ldr	r3, [r4, #16]
    af9a:	b953      	cbnz	r3, afb2 <__swsetup_r+0xc6>
    af9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    afa0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
    afa4:	d1ba      	bne.n	af1c <__swsetup_r+0x30>
    afa6:	bd70      	pop	{r4, r5, r6, pc}
    afa8:	0792      	lsls	r2, r2, #30
    afaa:	bf58      	it	pl
    afac:	6963      	ldrpl	r3, [r4, #20]
    afae:	60a3      	str	r3, [r4, #8]
    afb0:	e7f2      	b.n	af98 <__swsetup_r+0xac>
    afb2:	2000      	movs	r0, #0
    afb4:	e7f7      	b.n	afa6 <__swsetup_r+0xba>
    afb6:	bf00      	nop
    afb8:	0000ca1c 	.word	0x0000ca1c
    afbc:	0000c5d4 	.word	0x0000c5d4
    afc0:	0000c5f4 	.word	0x0000c5f4
    afc4:	0000c5b4 	.word	0x0000c5b4

0000afc8 <__sflush_r>:
    afc8:	898a      	ldrh	r2, [r1, #12]
    afca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    afce:	4605      	mov	r5, r0
    afd0:	0710      	lsls	r0, r2, #28
    afd2:	460c      	mov	r4, r1
    afd4:	d458      	bmi.n	b088 <__sflush_r+0xc0>
    afd6:	684b      	ldr	r3, [r1, #4]
    afd8:	2b00      	cmp	r3, #0
    afda:	dc05      	bgt.n	afe8 <__sflush_r+0x20>
    afdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    afde:	2b00      	cmp	r3, #0
    afe0:	dc02      	bgt.n	afe8 <__sflush_r+0x20>
    afe2:	2000      	movs	r0, #0
    afe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    afe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    afea:	2e00      	cmp	r6, #0
    afec:	d0f9      	beq.n	afe2 <__sflush_r+0x1a>
    afee:	2300      	movs	r3, #0
    aff0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    aff4:	682f      	ldr	r7, [r5, #0]
    aff6:	602b      	str	r3, [r5, #0]
    aff8:	d032      	beq.n	b060 <__sflush_r+0x98>
    affa:	6d60      	ldr	r0, [r4, #84]	; 0x54
    affc:	89a3      	ldrh	r3, [r4, #12]
    affe:	075a      	lsls	r2, r3, #29
    b000:	d505      	bpl.n	b00e <__sflush_r+0x46>
    b002:	6863      	ldr	r3, [r4, #4]
    b004:	1ac0      	subs	r0, r0, r3
    b006:	6b63      	ldr	r3, [r4, #52]	; 0x34
    b008:	b10b      	cbz	r3, b00e <__sflush_r+0x46>
    b00a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    b00c:	1ac0      	subs	r0, r0, r3
    b00e:	2300      	movs	r3, #0
    b010:	4602      	mov	r2, r0
    b012:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    b014:	6a21      	ldr	r1, [r4, #32]
    b016:	4628      	mov	r0, r5
    b018:	47b0      	blx	r6
    b01a:	1c43      	adds	r3, r0, #1
    b01c:	89a3      	ldrh	r3, [r4, #12]
    b01e:	d106      	bne.n	b02e <__sflush_r+0x66>
    b020:	6829      	ldr	r1, [r5, #0]
    b022:	291d      	cmp	r1, #29
    b024:	d849      	bhi.n	b0ba <__sflush_r+0xf2>
    b026:	4a2a      	ldr	r2, [pc, #168]	; (b0d0 <__sflush_r+0x108>)
    b028:	40ca      	lsrs	r2, r1
    b02a:	07d6      	lsls	r6, r2, #31
    b02c:	d545      	bpl.n	b0ba <__sflush_r+0xf2>
    b02e:	2200      	movs	r2, #0
    b030:	6062      	str	r2, [r4, #4]
    b032:	04d9      	lsls	r1, r3, #19
    b034:	6922      	ldr	r2, [r4, #16]
    b036:	6022      	str	r2, [r4, #0]
    b038:	d504      	bpl.n	b044 <__sflush_r+0x7c>
    b03a:	1c42      	adds	r2, r0, #1
    b03c:	d101      	bne.n	b042 <__sflush_r+0x7a>
    b03e:	682b      	ldr	r3, [r5, #0]
    b040:	b903      	cbnz	r3, b044 <__sflush_r+0x7c>
    b042:	6560      	str	r0, [r4, #84]	; 0x54
    b044:	6b61      	ldr	r1, [r4, #52]	; 0x34
    b046:	602f      	str	r7, [r5, #0]
    b048:	2900      	cmp	r1, #0
    b04a:	d0ca      	beq.n	afe2 <__sflush_r+0x1a>
    b04c:	f104 0344 	add.w	r3, r4, #68	; 0x44
    b050:	4299      	cmp	r1, r3
    b052:	d002      	beq.n	b05a <__sflush_r+0x92>
    b054:	4628      	mov	r0, r5
    b056:	f7ff fd93 	bl	ab80 <_free_r>
    b05a:	2000      	movs	r0, #0
    b05c:	6360      	str	r0, [r4, #52]	; 0x34
    b05e:	e7c1      	b.n	afe4 <__sflush_r+0x1c>
    b060:	6a21      	ldr	r1, [r4, #32]
    b062:	2301      	movs	r3, #1
    b064:	4628      	mov	r0, r5
    b066:	47b0      	blx	r6
    b068:	1c41      	adds	r1, r0, #1
    b06a:	d1c7      	bne.n	affc <__sflush_r+0x34>
    b06c:	682b      	ldr	r3, [r5, #0]
    b06e:	2b00      	cmp	r3, #0
    b070:	d0c4      	beq.n	affc <__sflush_r+0x34>
    b072:	2b1d      	cmp	r3, #29
    b074:	d001      	beq.n	b07a <__sflush_r+0xb2>
    b076:	2b16      	cmp	r3, #22
    b078:	d101      	bne.n	b07e <__sflush_r+0xb6>
    b07a:	602f      	str	r7, [r5, #0]
    b07c:	e7b1      	b.n	afe2 <__sflush_r+0x1a>
    b07e:	89a3      	ldrh	r3, [r4, #12]
    b080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b084:	81a3      	strh	r3, [r4, #12]
    b086:	e7ad      	b.n	afe4 <__sflush_r+0x1c>
    b088:	690f      	ldr	r7, [r1, #16]
    b08a:	2f00      	cmp	r7, #0
    b08c:	d0a9      	beq.n	afe2 <__sflush_r+0x1a>
    b08e:	0793      	lsls	r3, r2, #30
    b090:	680e      	ldr	r6, [r1, #0]
    b092:	bf08      	it	eq
    b094:	694b      	ldreq	r3, [r1, #20]
    b096:	600f      	str	r7, [r1, #0]
    b098:	bf18      	it	ne
    b09a:	2300      	movne	r3, #0
    b09c:	eba6 0807 	sub.w	r8, r6, r7
    b0a0:	608b      	str	r3, [r1, #8]
    b0a2:	f1b8 0f00 	cmp.w	r8, #0
    b0a6:	dd9c      	ble.n	afe2 <__sflush_r+0x1a>
    b0a8:	4643      	mov	r3, r8
    b0aa:	463a      	mov	r2, r7
    b0ac:	6a21      	ldr	r1, [r4, #32]
    b0ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    b0b0:	4628      	mov	r0, r5
    b0b2:	47b0      	blx	r6
    b0b4:	2800      	cmp	r0, #0
    b0b6:	dc06      	bgt.n	b0c6 <__sflush_r+0xfe>
    b0b8:	89a3      	ldrh	r3, [r4, #12]
    b0ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b0be:	81a3      	strh	r3, [r4, #12]
    b0c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b0c4:	e78e      	b.n	afe4 <__sflush_r+0x1c>
    b0c6:	4407      	add	r7, r0
    b0c8:	eba8 0800 	sub.w	r8, r8, r0
    b0cc:	e7e9      	b.n	b0a2 <__sflush_r+0xda>
    b0ce:	bf00      	nop
    b0d0:	20400001 	.word	0x20400001

0000b0d4 <_fflush_r>:
    b0d4:	b538      	push	{r3, r4, r5, lr}
    b0d6:	690b      	ldr	r3, [r1, #16]
    b0d8:	4605      	mov	r5, r0
    b0da:	460c      	mov	r4, r1
    b0dc:	b913      	cbnz	r3, b0e4 <_fflush_r+0x10>
    b0de:	2500      	movs	r5, #0
    b0e0:	4628      	mov	r0, r5
    b0e2:	bd38      	pop	{r3, r4, r5, pc}
    b0e4:	b118      	cbz	r0, b0ee <_fflush_r+0x1a>
    b0e6:	6983      	ldr	r3, [r0, #24]
    b0e8:	b90b      	cbnz	r3, b0ee <_fflush_r+0x1a>
    b0ea:	f000 f887 	bl	b1fc <__sinit>
    b0ee:	4b14      	ldr	r3, [pc, #80]	; (b140 <_fflush_r+0x6c>)
    b0f0:	429c      	cmp	r4, r3
    b0f2:	d11b      	bne.n	b12c <_fflush_r+0x58>
    b0f4:	686c      	ldr	r4, [r5, #4]
    b0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b0fa:	2b00      	cmp	r3, #0
    b0fc:	d0ef      	beq.n	b0de <_fflush_r+0xa>
    b0fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
    b100:	07d0      	lsls	r0, r2, #31
    b102:	d404      	bmi.n	b10e <_fflush_r+0x3a>
    b104:	0599      	lsls	r1, r3, #22
    b106:	d402      	bmi.n	b10e <_fflush_r+0x3a>
    b108:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b10a:	f7ff fd06 	bl	ab1a <__retarget_lock_acquire_recursive>
    b10e:	4628      	mov	r0, r5
    b110:	4621      	mov	r1, r4
    b112:	f7ff ff59 	bl	afc8 <__sflush_r>
    b116:	6e63      	ldr	r3, [r4, #100]	; 0x64
    b118:	07da      	lsls	r2, r3, #31
    b11a:	4605      	mov	r5, r0
    b11c:	d4e0      	bmi.n	b0e0 <_fflush_r+0xc>
    b11e:	89a3      	ldrh	r3, [r4, #12]
    b120:	059b      	lsls	r3, r3, #22
    b122:	d4dd      	bmi.n	b0e0 <_fflush_r+0xc>
    b124:	6da0      	ldr	r0, [r4, #88]	; 0x58
    b126:	f7ff fcf9 	bl	ab1c <__retarget_lock_release_recursive>
    b12a:	e7d9      	b.n	b0e0 <_fflush_r+0xc>
    b12c:	4b05      	ldr	r3, [pc, #20]	; (b144 <_fflush_r+0x70>)
    b12e:	429c      	cmp	r4, r3
    b130:	d101      	bne.n	b136 <_fflush_r+0x62>
    b132:	68ac      	ldr	r4, [r5, #8]
    b134:	e7df      	b.n	b0f6 <_fflush_r+0x22>
    b136:	4b04      	ldr	r3, [pc, #16]	; (b148 <_fflush_r+0x74>)
    b138:	429c      	cmp	r4, r3
    b13a:	bf08      	it	eq
    b13c:	68ec      	ldreq	r4, [r5, #12]
    b13e:	e7da      	b.n	b0f6 <_fflush_r+0x22>
    b140:	0000c5d4 	.word	0x0000c5d4
    b144:	0000c5f4 	.word	0x0000c5f4
    b148:	0000c5b4 	.word	0x0000c5b4

0000b14c <std>:
    b14c:	2300      	movs	r3, #0
    b14e:	b510      	push	{r4, lr}
    b150:	4604      	mov	r4, r0
    b152:	e9c0 3300 	strd	r3, r3, [r0]
    b156:	6083      	str	r3, [r0, #8]
    b158:	8181      	strh	r1, [r0, #12]
    b15a:	6643      	str	r3, [r0, #100]	; 0x64
    b15c:	81c2      	strh	r2, [r0, #14]
    b15e:	e9c0 3304 	strd	r3, r3, [r0, #16]
    b162:	6183      	str	r3, [r0, #24]
    b164:	4619      	mov	r1, r3
    b166:	2208      	movs	r2, #8
    b168:	305c      	adds	r0, #92	; 0x5c
    b16a:	f7ff fd00 	bl	ab6e <memset>
    b16e:	4b05      	ldr	r3, [pc, #20]	; (b184 <std+0x38>)
    b170:	6263      	str	r3, [r4, #36]	; 0x24
    b172:	4b05      	ldr	r3, [pc, #20]	; (b188 <std+0x3c>)
    b174:	62a3      	str	r3, [r4, #40]	; 0x28
    b176:	4b05      	ldr	r3, [pc, #20]	; (b18c <std+0x40>)
    b178:	62e3      	str	r3, [r4, #44]	; 0x2c
    b17a:	4b05      	ldr	r3, [pc, #20]	; (b190 <std+0x44>)
    b17c:	6224      	str	r4, [r4, #32]
    b17e:	6323      	str	r3, [r4, #48]	; 0x30
    b180:	bd10      	pop	{r4, pc}
    b182:	bf00      	nop
    b184:	0000b415 	.word	0x0000b415
    b188:	0000b437 	.word	0x0000b437
    b18c:	0000b46f 	.word	0x0000b46f
    b190:	0000b493 	.word	0x0000b493

0000b194 <_cleanup_r>:
    b194:	4901      	ldr	r1, [pc, #4]	; (b19c <_cleanup_r+0x8>)
    b196:	f000 b8af 	b.w	b2f8 <_fwalk_reent>
    b19a:	bf00      	nop
    b19c:	0000b0d5 	.word	0x0000b0d5

0000b1a0 <__sfmoreglue>:
    b1a0:	b570      	push	{r4, r5, r6, lr}
    b1a2:	1e4a      	subs	r2, r1, #1
    b1a4:	2568      	movs	r5, #104	; 0x68
    b1a6:	4355      	muls	r5, r2
    b1a8:	460e      	mov	r6, r1
    b1aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
    b1ae:	f7ff fd35 	bl	ac1c <_malloc_r>
    b1b2:	4604      	mov	r4, r0
    b1b4:	b140      	cbz	r0, b1c8 <__sfmoreglue+0x28>
    b1b6:	2100      	movs	r1, #0
    b1b8:	e9c0 1600 	strd	r1, r6, [r0]
    b1bc:	300c      	adds	r0, #12
    b1be:	60a0      	str	r0, [r4, #8]
    b1c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
    b1c4:	f7ff fcd3 	bl	ab6e <memset>
    b1c8:	4620      	mov	r0, r4
    b1ca:	bd70      	pop	{r4, r5, r6, pc}

0000b1cc <__sfp_lock_acquire>:
    b1cc:	4801      	ldr	r0, [pc, #4]	; (b1d4 <__sfp_lock_acquire+0x8>)
    b1ce:	f7ff bca4 	b.w	ab1a <__retarget_lock_acquire_recursive>
    b1d2:	bf00      	nop
    b1d4:	000318dc 	.word	0x000318dc

0000b1d8 <__sfp_lock_release>:
    b1d8:	4801      	ldr	r0, [pc, #4]	; (b1e0 <__sfp_lock_release+0x8>)
    b1da:	f7ff bc9f 	b.w	ab1c <__retarget_lock_release_recursive>
    b1de:	bf00      	nop
    b1e0:	000318dc 	.word	0x000318dc

0000b1e4 <__sinit_lock_acquire>:
    b1e4:	4801      	ldr	r0, [pc, #4]	; (b1ec <__sinit_lock_acquire+0x8>)
    b1e6:	f7ff bc98 	b.w	ab1a <__retarget_lock_acquire_recursive>
    b1ea:	bf00      	nop
    b1ec:	000318d7 	.word	0x000318d7

0000b1f0 <__sinit_lock_release>:
    b1f0:	4801      	ldr	r0, [pc, #4]	; (b1f8 <__sinit_lock_release+0x8>)
    b1f2:	f7ff bc93 	b.w	ab1c <__retarget_lock_release_recursive>
    b1f6:	bf00      	nop
    b1f8:	000318d7 	.word	0x000318d7

0000b1fc <__sinit>:
    b1fc:	b510      	push	{r4, lr}
    b1fe:	4604      	mov	r4, r0
    b200:	f7ff fff0 	bl	b1e4 <__sinit_lock_acquire>
    b204:	69a3      	ldr	r3, [r4, #24]
    b206:	b11b      	cbz	r3, b210 <__sinit+0x14>
    b208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b20c:	f7ff bff0 	b.w	b1f0 <__sinit_lock_release>
    b210:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    b214:	6523      	str	r3, [r4, #80]	; 0x50
    b216:	4b13      	ldr	r3, [pc, #76]	; (b264 <__sinit+0x68>)
    b218:	4a13      	ldr	r2, [pc, #76]	; (b268 <__sinit+0x6c>)
    b21a:	681b      	ldr	r3, [r3, #0]
    b21c:	62a2      	str	r2, [r4, #40]	; 0x28
    b21e:	42a3      	cmp	r3, r4
    b220:	bf04      	itt	eq
    b222:	2301      	moveq	r3, #1
    b224:	61a3      	streq	r3, [r4, #24]
    b226:	4620      	mov	r0, r4
    b228:	f000 f820 	bl	b26c <__sfp>
    b22c:	6060      	str	r0, [r4, #4]
    b22e:	4620      	mov	r0, r4
    b230:	f000 f81c 	bl	b26c <__sfp>
    b234:	60a0      	str	r0, [r4, #8]
    b236:	4620      	mov	r0, r4
    b238:	f000 f818 	bl	b26c <__sfp>
    b23c:	2200      	movs	r2, #0
    b23e:	60e0      	str	r0, [r4, #12]
    b240:	2104      	movs	r1, #4
    b242:	6860      	ldr	r0, [r4, #4]
    b244:	f7ff ff82 	bl	b14c <std>
    b248:	2201      	movs	r2, #1
    b24a:	2109      	movs	r1, #9
    b24c:	68a0      	ldr	r0, [r4, #8]
    b24e:	f7ff ff7d 	bl	b14c <std>
    b252:	2202      	movs	r2, #2
    b254:	2112      	movs	r1, #18
    b256:	68e0      	ldr	r0, [r4, #12]
    b258:	f7ff ff78 	bl	b14c <std>
    b25c:	2301      	movs	r3, #1
    b25e:	61a3      	str	r3, [r4, #24]
    b260:	e7d2      	b.n	b208 <__sinit+0xc>
    b262:	bf00      	nop
    b264:	0000c5b0 	.word	0x0000c5b0
    b268:	0000b195 	.word	0x0000b195

0000b26c <__sfp>:
    b26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b26e:	4607      	mov	r7, r0
    b270:	f7ff ffac 	bl	b1cc <__sfp_lock_acquire>
    b274:	4b1e      	ldr	r3, [pc, #120]	; (b2f0 <__sfp+0x84>)
    b276:	681e      	ldr	r6, [r3, #0]
    b278:	69b3      	ldr	r3, [r6, #24]
    b27a:	b913      	cbnz	r3, b282 <__sfp+0x16>
    b27c:	4630      	mov	r0, r6
    b27e:	f7ff ffbd 	bl	b1fc <__sinit>
    b282:	3648      	adds	r6, #72	; 0x48
    b284:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    b288:	3b01      	subs	r3, #1
    b28a:	d503      	bpl.n	b294 <__sfp+0x28>
    b28c:	6833      	ldr	r3, [r6, #0]
    b28e:	b30b      	cbz	r3, b2d4 <__sfp+0x68>
    b290:	6836      	ldr	r6, [r6, #0]
    b292:	e7f7      	b.n	b284 <__sfp+0x18>
    b294:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    b298:	b9d5      	cbnz	r5, b2d0 <__sfp+0x64>
    b29a:	4b16      	ldr	r3, [pc, #88]	; (b2f4 <__sfp+0x88>)
    b29c:	60e3      	str	r3, [r4, #12]
    b29e:	f104 0058 	add.w	r0, r4, #88	; 0x58
    b2a2:	6665      	str	r5, [r4, #100]	; 0x64
    b2a4:	f7ff fc38 	bl	ab18 <__retarget_lock_init_recursive>
    b2a8:	f7ff ff96 	bl	b1d8 <__sfp_lock_release>
    b2ac:	6025      	str	r5, [r4, #0]
    b2ae:	e9c4 5501 	strd	r5, r5, [r4, #4]
    b2b2:	e9c4 5504 	strd	r5, r5, [r4, #16]
    b2b6:	61a5      	str	r5, [r4, #24]
    b2b8:	2208      	movs	r2, #8
    b2ba:	4629      	mov	r1, r5
    b2bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    b2c0:	f7ff fc55 	bl	ab6e <memset>
    b2c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    b2c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    b2cc:	4620      	mov	r0, r4
    b2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b2d0:	3468      	adds	r4, #104	; 0x68
    b2d2:	e7d9      	b.n	b288 <__sfp+0x1c>
    b2d4:	2104      	movs	r1, #4
    b2d6:	4638      	mov	r0, r7
    b2d8:	f7ff ff62 	bl	b1a0 <__sfmoreglue>
    b2dc:	4604      	mov	r4, r0
    b2de:	6030      	str	r0, [r6, #0]
    b2e0:	2800      	cmp	r0, #0
    b2e2:	d1d5      	bne.n	b290 <__sfp+0x24>
    b2e4:	f7ff ff78 	bl	b1d8 <__sfp_lock_release>
    b2e8:	230c      	movs	r3, #12
    b2ea:	603b      	str	r3, [r7, #0]
    b2ec:	e7ee      	b.n	b2cc <__sfp+0x60>
    b2ee:	bf00      	nop
    b2f0:	0000c5b0 	.word	0x0000c5b0
    b2f4:	ffff0001 	.word	0xffff0001

0000b2f8 <_fwalk_reent>:
    b2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b2fc:	4680      	mov	r8, r0
    b2fe:	4689      	mov	r9, r1
    b300:	f100 0448 	add.w	r4, r0, #72	; 0x48
    b304:	2600      	movs	r6, #0
    b306:	b914      	cbnz	r4, b30e <_fwalk_reent+0x16>
    b308:	4630      	mov	r0, r6
    b30a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b30e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
    b312:	3f01      	subs	r7, #1
    b314:	d501      	bpl.n	b31a <_fwalk_reent+0x22>
    b316:	6824      	ldr	r4, [r4, #0]
    b318:	e7f5      	b.n	b306 <_fwalk_reent+0xe>
    b31a:	89ab      	ldrh	r3, [r5, #12]
    b31c:	2b01      	cmp	r3, #1
    b31e:	d907      	bls.n	b330 <_fwalk_reent+0x38>
    b320:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    b324:	3301      	adds	r3, #1
    b326:	d003      	beq.n	b330 <_fwalk_reent+0x38>
    b328:	4629      	mov	r1, r5
    b32a:	4640      	mov	r0, r8
    b32c:	47c8      	blx	r9
    b32e:	4306      	orrs	r6, r0
    b330:	3568      	adds	r5, #104	; 0x68
    b332:	e7ee      	b.n	b312 <_fwalk_reent+0x1a>

0000b334 <__swhatbuf_r>:
    b334:	b570      	push	{r4, r5, r6, lr}
    b336:	460e      	mov	r6, r1
    b338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b33c:	2900      	cmp	r1, #0
    b33e:	b096      	sub	sp, #88	; 0x58
    b340:	4614      	mov	r4, r2
    b342:	461d      	mov	r5, r3
    b344:	da07      	bge.n	b356 <__swhatbuf_r+0x22>
    b346:	2300      	movs	r3, #0
    b348:	602b      	str	r3, [r5, #0]
    b34a:	89b3      	ldrh	r3, [r6, #12]
    b34c:	061a      	lsls	r2, r3, #24
    b34e:	d410      	bmi.n	b372 <__swhatbuf_r+0x3e>
    b350:	f44f 6380 	mov.w	r3, #1024	; 0x400
    b354:	e00e      	b.n	b374 <__swhatbuf_r+0x40>
    b356:	466a      	mov	r2, sp
    b358:	f000 f8c2 	bl	b4e0 <_fstat_r>
    b35c:	2800      	cmp	r0, #0
    b35e:	dbf2      	blt.n	b346 <__swhatbuf_r+0x12>
    b360:	9a01      	ldr	r2, [sp, #4]
    b362:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    b366:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
    b36a:	425a      	negs	r2, r3
    b36c:	415a      	adcs	r2, r3
    b36e:	602a      	str	r2, [r5, #0]
    b370:	e7ee      	b.n	b350 <__swhatbuf_r+0x1c>
    b372:	2340      	movs	r3, #64	; 0x40
    b374:	2000      	movs	r0, #0
    b376:	6023      	str	r3, [r4, #0]
    b378:	b016      	add	sp, #88	; 0x58
    b37a:	bd70      	pop	{r4, r5, r6, pc}

0000b37c <__smakebuf_r>:
    b37c:	898b      	ldrh	r3, [r1, #12]
    b37e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b380:	079d      	lsls	r5, r3, #30
    b382:	4606      	mov	r6, r0
    b384:	460c      	mov	r4, r1
    b386:	d507      	bpl.n	b398 <__smakebuf_r+0x1c>
    b388:	f104 0347 	add.w	r3, r4, #71	; 0x47
    b38c:	6023      	str	r3, [r4, #0]
    b38e:	6123      	str	r3, [r4, #16]
    b390:	2301      	movs	r3, #1
    b392:	6163      	str	r3, [r4, #20]
    b394:	b002      	add	sp, #8
    b396:	bd70      	pop	{r4, r5, r6, pc}
    b398:	ab01      	add	r3, sp, #4
    b39a:	466a      	mov	r2, sp
    b39c:	f7ff ffca 	bl	b334 <__swhatbuf_r>
    b3a0:	9900      	ldr	r1, [sp, #0]
    b3a2:	4605      	mov	r5, r0
    b3a4:	4630      	mov	r0, r6
    b3a6:	f7ff fc39 	bl	ac1c <_malloc_r>
    b3aa:	b948      	cbnz	r0, b3c0 <__smakebuf_r+0x44>
    b3ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    b3b0:	059a      	lsls	r2, r3, #22
    b3b2:	d4ef      	bmi.n	b394 <__smakebuf_r+0x18>
    b3b4:	f023 0303 	bic.w	r3, r3, #3
    b3b8:	f043 0302 	orr.w	r3, r3, #2
    b3bc:	81a3      	strh	r3, [r4, #12]
    b3be:	e7e3      	b.n	b388 <__smakebuf_r+0xc>
    b3c0:	4b0d      	ldr	r3, [pc, #52]	; (b3f8 <__smakebuf_r+0x7c>)
    b3c2:	62b3      	str	r3, [r6, #40]	; 0x28
    b3c4:	89a3      	ldrh	r3, [r4, #12]
    b3c6:	6020      	str	r0, [r4, #0]
    b3c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b3cc:	81a3      	strh	r3, [r4, #12]
    b3ce:	9b00      	ldr	r3, [sp, #0]
    b3d0:	6163      	str	r3, [r4, #20]
    b3d2:	9b01      	ldr	r3, [sp, #4]
    b3d4:	6120      	str	r0, [r4, #16]
    b3d6:	b15b      	cbz	r3, b3f0 <__smakebuf_r+0x74>
    b3d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b3dc:	4630      	mov	r0, r6
    b3de:	f000 f891 	bl	b504 <_isatty_r>
    b3e2:	b128      	cbz	r0, b3f0 <__smakebuf_r+0x74>
    b3e4:	89a3      	ldrh	r3, [r4, #12]
    b3e6:	f023 0303 	bic.w	r3, r3, #3
    b3ea:	f043 0301 	orr.w	r3, r3, #1
    b3ee:	81a3      	strh	r3, [r4, #12]
    b3f0:	89a3      	ldrh	r3, [r4, #12]
    b3f2:	431d      	orrs	r5, r3
    b3f4:	81a5      	strh	r5, [r4, #12]
    b3f6:	e7cd      	b.n	b394 <__smakebuf_r+0x18>
    b3f8:	0000b195 	.word	0x0000b195

0000b3fc <__malloc_lock>:
    b3fc:	4801      	ldr	r0, [pc, #4]	; (b404 <__malloc_lock+0x8>)
    b3fe:	f7ff bb8c 	b.w	ab1a <__retarget_lock_acquire_recursive>
    b402:	bf00      	nop
    b404:	000318d8 	.word	0x000318d8

0000b408 <__malloc_unlock>:
    b408:	4801      	ldr	r0, [pc, #4]	; (b410 <__malloc_unlock+0x8>)
    b40a:	f7ff bb87 	b.w	ab1c <__retarget_lock_release_recursive>
    b40e:	bf00      	nop
    b410:	000318d8 	.word	0x000318d8

0000b414 <__sread>:
    b414:	b510      	push	{r4, lr}
    b416:	460c      	mov	r4, r1
    b418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b41c:	f000 f894 	bl	b548 <_read_r>
    b420:	2800      	cmp	r0, #0
    b422:	bfab      	itete	ge
    b424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    b426:	89a3      	ldrhlt	r3, [r4, #12]
    b428:	181b      	addge	r3, r3, r0
    b42a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    b42e:	bfac      	ite	ge
    b430:	6563      	strge	r3, [r4, #84]	; 0x54
    b432:	81a3      	strhlt	r3, [r4, #12]
    b434:	bd10      	pop	{r4, pc}

0000b436 <__swrite>:
    b436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b43a:	461f      	mov	r7, r3
    b43c:	898b      	ldrh	r3, [r1, #12]
    b43e:	05db      	lsls	r3, r3, #23
    b440:	4605      	mov	r5, r0
    b442:	460c      	mov	r4, r1
    b444:	4616      	mov	r6, r2
    b446:	d505      	bpl.n	b454 <__swrite+0x1e>
    b448:	2302      	movs	r3, #2
    b44a:	2200      	movs	r2, #0
    b44c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b450:	f000 f868 	bl	b524 <_lseek_r>
    b454:	89a3      	ldrh	r3, [r4, #12]
    b456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    b45a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    b45e:	81a3      	strh	r3, [r4, #12]
    b460:	4632      	mov	r2, r6
    b462:	463b      	mov	r3, r7
    b464:	4628      	mov	r0, r5
    b466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b46a:	f000 b817 	b.w	b49c <_write_r>

0000b46e <__sseek>:
    b46e:	b510      	push	{r4, lr}
    b470:	460c      	mov	r4, r1
    b472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b476:	f000 f855 	bl	b524 <_lseek_r>
    b47a:	1c43      	adds	r3, r0, #1
    b47c:	89a3      	ldrh	r3, [r4, #12]
    b47e:	bf15      	itete	ne
    b480:	6560      	strne	r0, [r4, #84]	; 0x54
    b482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    b486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    b48a:	81a3      	strheq	r3, [r4, #12]
    b48c:	bf18      	it	ne
    b48e:	81a3      	strhne	r3, [r4, #12]
    b490:	bd10      	pop	{r4, pc}

0000b492 <__sclose>:
    b492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    b496:	f000 b813 	b.w	b4c0 <_close_r>
	...

0000b49c <_write_r>:
    b49c:	b538      	push	{r3, r4, r5, lr}
    b49e:	4c07      	ldr	r4, [pc, #28]	; (b4bc <_write_r+0x20>)
    b4a0:	4605      	mov	r5, r0
    b4a2:	4608      	mov	r0, r1
    b4a4:	4611      	mov	r1, r2
    b4a6:	2200      	movs	r2, #0
    b4a8:	6022      	str	r2, [r4, #0]
    b4aa:	461a      	mov	r2, r3
    b4ac:	f000 f886 	bl	b5bc <_write>
    b4b0:	1c43      	adds	r3, r0, #1
    b4b2:	d102      	bne.n	b4ba <_write_r+0x1e>
    b4b4:	6823      	ldr	r3, [r4, #0]
    b4b6:	b103      	cbz	r3, b4ba <_write_r+0x1e>
    b4b8:	602b      	str	r3, [r5, #0]
    b4ba:	bd38      	pop	{r3, r4, r5, pc}
    b4bc:	000318e0 	.word	0x000318e0

0000b4c0 <_close_r>:
    b4c0:	b538      	push	{r3, r4, r5, lr}
    b4c2:	4c06      	ldr	r4, [pc, #24]	; (b4dc <_close_r+0x1c>)
    b4c4:	2300      	movs	r3, #0
    b4c6:	4605      	mov	r5, r0
    b4c8:	4608      	mov	r0, r1
    b4ca:	6023      	str	r3, [r4, #0]
    b4cc:	f000 f84e 	bl	b56c <_close>
    b4d0:	1c43      	adds	r3, r0, #1
    b4d2:	d102      	bne.n	b4da <_close_r+0x1a>
    b4d4:	6823      	ldr	r3, [r4, #0]
    b4d6:	b103      	cbz	r3, b4da <_close_r+0x1a>
    b4d8:	602b      	str	r3, [r5, #0]
    b4da:	bd38      	pop	{r3, r4, r5, pc}
    b4dc:	000318e0 	.word	0x000318e0

0000b4e0 <_fstat_r>:
    b4e0:	b538      	push	{r3, r4, r5, lr}
    b4e2:	4c07      	ldr	r4, [pc, #28]	; (b500 <_fstat_r+0x20>)
    b4e4:	2300      	movs	r3, #0
    b4e6:	4605      	mov	r5, r0
    b4e8:	4608      	mov	r0, r1
    b4ea:	4611      	mov	r1, r2
    b4ec:	6023      	str	r3, [r4, #0]
    b4ee:	f000 f845 	bl	b57c <_fstat>
    b4f2:	1c43      	adds	r3, r0, #1
    b4f4:	d102      	bne.n	b4fc <_fstat_r+0x1c>
    b4f6:	6823      	ldr	r3, [r4, #0]
    b4f8:	b103      	cbz	r3, b4fc <_fstat_r+0x1c>
    b4fa:	602b      	str	r3, [r5, #0]
    b4fc:	bd38      	pop	{r3, r4, r5, pc}
    b4fe:	bf00      	nop
    b500:	000318e0 	.word	0x000318e0

0000b504 <_isatty_r>:
    b504:	b538      	push	{r3, r4, r5, lr}
    b506:	4c06      	ldr	r4, [pc, #24]	; (b520 <_isatty_r+0x1c>)
    b508:	2300      	movs	r3, #0
    b50a:	4605      	mov	r5, r0
    b50c:	4608      	mov	r0, r1
    b50e:	6023      	str	r3, [r4, #0]
    b510:	f000 f83c 	bl	b58c <_isatty>
    b514:	1c43      	adds	r3, r0, #1
    b516:	d102      	bne.n	b51e <_isatty_r+0x1a>
    b518:	6823      	ldr	r3, [r4, #0]
    b51a:	b103      	cbz	r3, b51e <_isatty_r+0x1a>
    b51c:	602b      	str	r3, [r5, #0]
    b51e:	bd38      	pop	{r3, r4, r5, pc}
    b520:	000318e0 	.word	0x000318e0

0000b524 <_lseek_r>:
    b524:	b538      	push	{r3, r4, r5, lr}
    b526:	4c07      	ldr	r4, [pc, #28]	; (b544 <_lseek_r+0x20>)
    b528:	4605      	mov	r5, r0
    b52a:	4608      	mov	r0, r1
    b52c:	4611      	mov	r1, r2
    b52e:	2200      	movs	r2, #0
    b530:	6022      	str	r2, [r4, #0]
    b532:	461a      	mov	r2, r3
    b534:	f000 f832 	bl	b59c <_lseek>
    b538:	1c43      	adds	r3, r0, #1
    b53a:	d102      	bne.n	b542 <_lseek_r+0x1e>
    b53c:	6823      	ldr	r3, [r4, #0]
    b53e:	b103      	cbz	r3, b542 <_lseek_r+0x1e>
    b540:	602b      	str	r3, [r5, #0]
    b542:	bd38      	pop	{r3, r4, r5, pc}
    b544:	000318e0 	.word	0x000318e0

0000b548 <_read_r>:
    b548:	b538      	push	{r3, r4, r5, lr}
    b54a:	4c07      	ldr	r4, [pc, #28]	; (b568 <_read_r+0x20>)
    b54c:	4605      	mov	r5, r0
    b54e:	4608      	mov	r0, r1
    b550:	4611      	mov	r1, r2
    b552:	2200      	movs	r2, #0
    b554:	6022      	str	r2, [r4, #0]
    b556:	461a      	mov	r2, r3
    b558:	f000 f828 	bl	b5ac <_read>
    b55c:	1c43      	adds	r3, r0, #1
    b55e:	d102      	bne.n	b566 <_read_r+0x1e>
    b560:	6823      	ldr	r3, [r4, #0]
    b562:	b103      	cbz	r3, b566 <_read_r+0x1e>
    b564:	602b      	str	r3, [r5, #0]
    b566:	bd38      	pop	{r3, r4, r5, pc}
    b568:	000318e0 	.word	0x000318e0

0000b56c <_close>:
    b56c:	4b02      	ldr	r3, [pc, #8]	; (b578 <_close+0xc>)
    b56e:	2258      	movs	r2, #88	; 0x58
    b570:	601a      	str	r2, [r3, #0]
    b572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b576:	4770      	bx	lr
    b578:	000318e0 	.word	0x000318e0

0000b57c <_fstat>:
    b57c:	4b02      	ldr	r3, [pc, #8]	; (b588 <_fstat+0xc>)
    b57e:	2258      	movs	r2, #88	; 0x58
    b580:	601a      	str	r2, [r3, #0]
    b582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b586:	4770      	bx	lr
    b588:	000318e0 	.word	0x000318e0

0000b58c <_isatty>:
    b58c:	4b02      	ldr	r3, [pc, #8]	; (b598 <_isatty+0xc>)
    b58e:	2258      	movs	r2, #88	; 0x58
    b590:	601a      	str	r2, [r3, #0]
    b592:	2000      	movs	r0, #0
    b594:	4770      	bx	lr
    b596:	bf00      	nop
    b598:	000318e0 	.word	0x000318e0

0000b59c <_lseek>:
    b59c:	4b02      	ldr	r3, [pc, #8]	; (b5a8 <_lseek+0xc>)
    b59e:	2258      	movs	r2, #88	; 0x58
    b5a0:	601a      	str	r2, [r3, #0]
    b5a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b5a6:	4770      	bx	lr
    b5a8:	000318e0 	.word	0x000318e0

0000b5ac <_read>:
    b5ac:	4b02      	ldr	r3, [pc, #8]	; (b5b8 <_read+0xc>)
    b5ae:	2258      	movs	r2, #88	; 0x58
    b5b0:	601a      	str	r2, [r3, #0]
    b5b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b5b6:	4770      	bx	lr
    b5b8:	000318e0 	.word	0x000318e0

0000b5bc <_write>:
    b5bc:	4b02      	ldr	r3, [pc, #8]	; (b5c8 <_write+0xc>)
    b5be:	2258      	movs	r2, #88	; 0x58
    b5c0:	601a      	str	r2, [r3, #0]
    b5c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b5c6:	4770      	bx	lr
    b5c8:	000318e0 	.word	0x000318e0

Disassembly of section .dsp_text_data:

0003ad00 <arm_mult_f32>:
   3ad00:	b5f0      	push	{r4, r5, r6, r7, lr}
   3ad02:	ea5f 0e93 	movs.w	lr, r3, lsr #2
   3ad06:	d033      	beq.n	3ad70 <arm_mult_f32+0x70>
   3ad08:	f100 0610 	add.w	r6, r0, #16
   3ad0c:	f101 0510 	add.w	r5, r1, #16
   3ad10:	f102 0410 	add.w	r4, r2, #16
   3ad14:	4677      	mov	r7, lr
   3ad16:	ed16 6a04 	vldr	s12, [r6, #-16]
   3ad1a:	ed55 4a04 	vldr	s9, [r5, #-16]
   3ad1e:	ed56 6a02 	vldr	s13, [r6, #-8]
   3ad22:	ed15 5a02 	vldr	s10, [r5, #-8]
   3ad26:	ed16 7a03 	vldr	s14, [r6, #-12]
   3ad2a:	ed55 5a03 	vldr	s11, [r5, #-12]
   3ad2e:	ed56 7a01 	vldr	s15, [r6, #-4]
   3ad32:	ee26 6a24 	vmul.f32	s12, s12, s9
   3ad36:	ee66 6a85 	vmul.f32	s13, s13, s10
   3ad3a:	ed04 6a04 	vstr	s12, [r4, #-16]
   3ad3e:	ed15 6a01 	vldr	s12, [r5, #-4]
   3ad42:	ed44 6a02 	vstr	s13, [r4, #-8]
   3ad46:	ee27 7a25 	vmul.f32	s14, s14, s11
   3ad4a:	ee67 7a86 	vmul.f32	s15, s15, s12
   3ad4e:	3f01      	subs	r7, #1
   3ad50:	ed04 7a03 	vstr	s14, [r4, #-12]
   3ad54:	ed44 7a01 	vstr	s15, [r4, #-4]
   3ad58:	f106 0610 	add.w	r6, r6, #16
   3ad5c:	f105 0510 	add.w	r5, r5, #16
   3ad60:	f104 0410 	add.w	r4, r4, #16
   3ad64:	d1d7      	bne.n	3ad16 <arm_mult_f32+0x16>
   3ad66:	ea4f 140e 	mov.w	r4, lr, lsl #4
   3ad6a:	4420      	add	r0, r4
   3ad6c:	4421      	add	r1, r4
   3ad6e:	4422      	add	r2, r4
   3ad70:	f013 0303 	ands.w	r3, r3, #3
   3ad74:	d009      	beq.n	3ad8a <arm_mult_f32+0x8a>
   3ad76:	ecf0 7a01 	vldmia	r0!, {s15}
   3ad7a:	ecb1 7a01 	vldmia	r1!, {s14}
   3ad7e:	ee67 7a87 	vmul.f32	s15, s15, s14
   3ad82:	3b01      	subs	r3, #1
   3ad84:	ece2 7a01 	vstmia	r2!, {s15}
   3ad88:	d1f5      	bne.n	3ad76 <arm_mult_f32+0x76>
   3ad8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003ad8c <arm_add_f32>:
   3ad8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3ad8e:	ea5f 0e93 	movs.w	lr, r3, lsr #2
   3ad92:	d033      	beq.n	3adfc <arm_add_f32+0x70>
   3ad94:	f100 0610 	add.w	r6, r0, #16
   3ad98:	f101 0510 	add.w	r5, r1, #16
   3ad9c:	f102 0410 	add.w	r4, r2, #16
   3ada0:	4677      	mov	r7, lr
   3ada2:	ed16 6a03 	vldr	s12, [r6, #-12]
   3ada6:	ed15 4a03 	vldr	s8, [r5, #-12]
   3adaa:	ed56 6a02 	vldr	s13, [r6, #-8]
   3adae:	ed55 4a02 	vldr	s9, [r5, #-8]
   3adb2:	ed16 7a01 	vldr	s14, [r6, #-4]
   3adb6:	ed15 5a01 	vldr	s10, [r5, #-4]
   3adba:	ed56 7a04 	vldr	s15, [r6, #-16]
   3adbe:	ed55 5a04 	vldr	s11, [r5, #-16]
   3adc2:	ee36 6a04 	vadd.f32	s12, s12, s8
   3adc6:	ee76 6aa4 	vadd.f32	s13, s13, s9
   3adca:	ee37 7a05 	vadd.f32	s14, s14, s10
   3adce:	ee77 7aa5 	vadd.f32	s15, s15, s11
   3add2:	3f01      	subs	r7, #1
   3add4:	ed04 6a03 	vstr	s12, [r4, #-12]
   3add8:	ed44 6a02 	vstr	s13, [r4, #-8]
   3addc:	ed04 7a01 	vstr	s14, [r4, #-4]
   3ade0:	ed44 7a04 	vstr	s15, [r4, #-16]
   3ade4:	f106 0610 	add.w	r6, r6, #16
   3ade8:	f105 0510 	add.w	r5, r5, #16
   3adec:	f104 0410 	add.w	r4, r4, #16
   3adf0:	d1d7      	bne.n	3ada2 <arm_add_f32+0x16>
   3adf2:	ea4f 140e 	mov.w	r4, lr, lsl #4
   3adf6:	4420      	add	r0, r4
   3adf8:	4421      	add	r1, r4
   3adfa:	4422      	add	r2, r4
   3adfc:	f013 0303 	ands.w	r3, r3, #3
   3ae00:	d009      	beq.n	3ae16 <arm_add_f32+0x8a>
   3ae02:	ecf0 7a01 	vldmia	r0!, {s15}
   3ae06:	ecb1 7a01 	vldmia	r1!, {s14}
   3ae0a:	ee77 7a87 	vadd.f32	s15, s15, s14
   3ae0e:	3b01      	subs	r3, #1
   3ae10:	ece2 7a01 	vstmia	r2!, {s15}
   3ae14:	d1f5      	bne.n	3ae02 <arm_add_f32+0x76>
   3ae16:	bdf0      	pop	{r4, r5, r6, r7, pc}

Disassembly of section .vq_text_data:

00042cac <add_forward>:
   42cac:	b538      	push	{r3, r4, r5, lr}
   42cae:	4605      	mov	r5, r0
   42cb0:	4610      	mov	r0, r2
   42cb2:	e9d1 2300 	ldrd	r2, r3, [r1]
   42cb6:	435a      	muls	r2, r3
   42cb8:	688b      	ldr	r3, [r1, #8]
   42cba:	6940      	ldr	r0, [r0, #20]
   42cbc:	4353      	muls	r3, r2
   42cbe:	68ca      	ldr	r2, [r1, #12]
   42cc0:	4353      	muls	r3, r2
   42cc2:	694a      	ldr	r2, [r1, #20]
   42cc4:	460c      	mov	r4, r1
   42cc6:	4611      	mov	r1, r2
   42cc8:	f7f8 f860 	bl	3ad8c <arm_add_f32>
   42ccc:	6823      	ldr	r3, [r4, #0]
   42cce:	602b      	str	r3, [r5, #0]
   42cd0:	68a3      	ldr	r3, [r4, #8]
   42cd2:	60ab      	str	r3, [r5, #8]
   42cd4:	6863      	ldr	r3, [r4, #4]
   42cd6:	606b      	str	r3, [r5, #4]
   42cd8:	68e3      	ldr	r3, [r4, #12]
   42cda:	e9c5 3403 	strd	r3, r4, [r5, #12]
   42cde:	bd38      	pop	{r3, r4, r5, pc}

00042ce0 <cmvn_forward>:
   42ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   42ce4:	460d      	mov	r5, r1
   42ce6:	6809      	ldr	r1, [r1, #0]
   42ce8:	68ab      	ldr	r3, [r5, #8]
   42cea:	686f      	ldr	r7, [r5, #4]
   42cec:	6083      	str	r3, [r0, #8]
   42cee:	4604      	mov	r4, r0
   42cf0:	6047      	str	r7, [r0, #4]
   42cf2:	6001      	str	r1, [r0, #0]
   42cf4:	434b      	muls	r3, r1
   42cf6:	68e8      	ldr	r0, [r5, #12]
   42cf8:	60e0      	str	r0, [r4, #12]
   42cfa:	f04f 0800 	mov.w	r8, #0
   42cfe:	61a5      	str	r5, [r4, #24]
   42d00:	435f      	muls	r7, r3
   42d02:	46c1      	mov	r9, r8
   42d04:	45b9      	cmp	r9, r7
   42d06:	db01      	blt.n	42d0c <cmvn_forward+0x2c>
   42d08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   42d0c:	69a3      	ldr	r3, [r4, #24]
   42d0e:	6968      	ldr	r0, [r5, #20]
   42d10:	695a      	ldr	r2, [r3, #20]
   42d12:	6921      	ldr	r1, [r4, #16]
   42d14:	68e3      	ldr	r3, [r4, #12]
   42d16:	ea4f 0688 	mov.w	r6, r8, lsl #2
   42d1a:	4432      	add	r2, r6
   42d1c:	4430      	add	r0, r6
   42d1e:	f7f8 f835 	bl	3ad8c <arm_add_f32>
   42d22:	69a3      	ldr	r3, [r4, #24]
   42d24:	6961      	ldr	r1, [r4, #20]
   42d26:	695a      	ldr	r2, [r3, #20]
   42d28:	68e3      	ldr	r3, [r4, #12]
   42d2a:	4432      	add	r2, r6
   42d2c:	4610      	mov	r0, r2
   42d2e:	f7f7 ffe7 	bl	3ad00 <__SRAM_segment_end__>
   42d32:	68e3      	ldr	r3, [r4, #12]
   42d34:	f109 0901 	add.w	r9, r9, #1
   42d38:	4498      	add	r8, r3
   42d3a:	e7e3      	b.n	42d04 <cmvn_forward+0x24>

00042d3c <conv_forward_naive>:
   42d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42d40:	b091      	sub	sp, #68	; 0x44
   42d42:	6803      	ldr	r3, [r0, #0]
   42d44:	eddf 6a65 	vldr	s13, [pc, #404]	; 42edc <conv_forward_naive+0x1a0>
   42d48:	910f      	str	r1, [sp, #60]	; 0x3c
   42d4a:	930d      	str	r3, [sp, #52]	; 0x34
   42d4c:	2400      	movs	r4, #0
   42d4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   42d50:	42a3      	cmp	r3, r4
   42d52:	f340 80bf 	ble.w	42ed4 <conv_forward_naive+0x198>
   42d56:	6b03      	ldr	r3, [r0, #48]	; 0x30
   42d58:	930c      	str	r3, [sp, #48]	; 0x30
   42d5a:	f04f 0a00 	mov.w	sl, #0
   42d5e:	e0af      	b.n	42ec0 <conv_forward_naive+0x184>
   42d60:	e9d0 320c 	ldrd	r3, r2, [r0, #48]	; 0x30
   42d64:	fb03 a704 	mla	r7, r3, r4, sl
   42d68:	4357      	muls	r7, r2
   42d6a:	9b02      	ldr	r3, [sp, #8]
   42d6c:	9a07      	ldr	r2, [sp, #28]
   42d6e:	fb07 2703 	mla	r7, r7, r3, r2
   42d72:	197b      	adds	r3, r7, r5
   42d74:	9301      	str	r3, [sp, #4]
   42d76:	e9d0 230f 	ldrd	r2, r3, [r0, #60]	; 0x3c
   42d7a:	9901      	ldr	r1, [sp, #4]
   42d7c:	695b      	ldr	r3, [r3, #20]
   42d7e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   42d82:	b9a2      	cbnz	r2, 42dae <conv_forward_naive+0x72>
   42d84:	edc3 6a00 	vstr	s13, [r3]
   42d88:	68c3      	ldr	r3, [r0, #12]
   42d8a:	9305      	str	r3, [sp, #20]
   42d8c:	4363      	muls	r3, r4
   42d8e:	9308      	str	r3, [sp, #32]
   42d90:	2300      	movs	r3, #0
   42d92:	9300      	str	r3, [sp, #0]
   42d94:	9a00      	ldr	r2, [sp, #0]
   42d96:	9b05      	ldr	r3, [sp, #20]
   42d98:	4293      	cmp	r3, r2
   42d9a:	dd7e      	ble.n	42e9a <conv_forward_naive+0x15e>
   42d9c:	6903      	ldr	r3, [r0, #16]
   42d9e:	9304      	str	r3, [sp, #16]
   42da0:	4613      	mov	r3, r2
   42da2:	9a04      	ldr	r2, [sp, #16]
   42da4:	4353      	muls	r3, r2
   42da6:	930e      	str	r3, [sp, #56]	; 0x38
   42da8:	f04f 0b00 	mov.w	fp, #0
   42dac:	e04f      	b.n	42e4e <conv_forward_naive+0x112>
   42dae:	6952      	ldr	r2, [r2, #20]
   42db0:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   42db4:	6812      	ldr	r2, [r2, #0]
   42db6:	601a      	str	r2, [r3, #0]
   42db8:	e7e6      	b.n	42d88 <conv_forward_naive+0x4c>
   42dba:	6983      	ldr	r3, [r0, #24]
   42dbc:	fb03 bc09 	mla	ip, r3, r9, fp
   42dc0:	6883      	ldr	r3, [r0, #8]
   42dc2:	4563      	cmp	r3, ip
   42dc4:	dd3d      	ble.n	42e42 <conv_forward_naive+0x106>
   42dc6:	6941      	ldr	r1, [r0, #20]
   42dc8:	9e00      	ldr	r6, [sp, #0]
   42dca:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   42dcc:	fb01 6e0a 	mla	lr, r1, sl, r6
   42dd0:	6c06      	ldr	r6, [r0, #64]	; 0x40
   42dd2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
   42dd4:	6976      	ldr	r6, [r6, #20]
   42dd6:	9103      	str	r1, [sp, #12]
   42dd8:	9606      	str	r6, [sp, #24]
   42dda:	6a01      	ldr	r1, [r0, #32]
   42ddc:	9e09      	ldr	r6, [sp, #36]	; 0x24
   42dde:	fb01 5606 	mla	r6, r1, r6, r5
   42de2:	fb01 6607 	mla	r6, r1, r7, r6
   42de6:	6b87      	ldr	r7, [r0, #56]	; 0x38
   42de8:	697f      	ldr	r7, [r7, #20]
   42dea:	fb01 6608 	mla	r6, r1, r8, r6
   42dee:	eb07 0686 	add.w	r6, r7, r6, lsl #2
   42df2:	ed96 7a00 	vldr	s14, [r6]
   42df6:	9e03      	ldr	r6, [sp, #12]
   42df8:	4576      	cmp	r6, lr
   42dfa:	fb0c 8c02 	mla	ip, ip, r2, r8
   42dfe:	dd33      	ble.n	42e68 <conv_forward_naive+0x12c>
   42e00:	e9d0 760c 	ldrd	r7, r6, [r0, #48]	; 0x30
   42e04:	fb07 a704 	mla	r7, r7, r4, sl
   42e08:	fb07 9706 	mla	r7, r7, r6, r9
   42e0c:	fb07 5101 	mla	r1, r7, r1, r5
   42e10:	9101      	str	r1, [sp, #4]
   42e12:	9e01      	ldr	r6, [sp, #4]
   42e14:	9906      	ldr	r1, [sp, #24]
   42e16:	9f08      	ldr	r7, [sp, #32]
   42e18:	eb01 0186 	add.w	r1, r1, r6, lsl #2
   42e1c:	6c86      	ldr	r6, [r0, #72]	; 0x48
   42e1e:	435f      	muls	r7, r3
   42e20:	fb02 cc07 	mla	ip, r2, r7, ip
   42e24:	fb0e f303 	mul.w	r3, lr, r3
   42e28:	6977      	ldr	r7, [r6, #20]
   42e2a:	fb02 c303 	mla	r3, r2, r3, ip
   42e2e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   42e32:	ed93 6a00 	vldr	s12, [r3]
   42e36:	edd1 7a00 	vldr	s15, [r1]
   42e3a:	eee6 7a07 	vfma.f32	s15, s12, s14
   42e3e:	edc1 7a00 	vstr	s15, [r1]
   42e42:	f108 0801 	add.w	r8, r8, #1
   42e46:	4542      	cmp	r2, r8
   42e48:	dcb7      	bgt.n	42dba <conv_forward_naive+0x7e>
   42e4a:	f10b 0b01 	add.w	fp, fp, #1
   42e4e:	9b04      	ldr	r3, [sp, #16]
   42e50:	455b      	cmp	r3, fp
   42e52:	dd1f      	ble.n	42e94 <conv_forward_naive+0x158>
   42e54:	69c2      	ldr	r2, [r0, #28]
   42e56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   42e58:	4353      	muls	r3, r2
   42e5a:	9309      	str	r3, [sp, #36]	; 0x24
   42e5c:	fb02 f30b 	mul.w	r3, r2, fp
   42e60:	930a      	str	r3, [sp, #40]	; 0x28
   42e62:	f04f 0800 	mov.w	r8, #0
   42e66:	e7ee      	b.n	42e46 <conv_forward_naive+0x10a>
   42e68:	9e01      	ldr	r6, [sp, #4]
   42e6a:	9906      	ldr	r1, [sp, #24]
   42e6c:	9f03      	ldr	r7, [sp, #12]
   42e6e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
   42e72:	6846      	ldr	r6, [r0, #4]
   42e74:	4366      	muls	r6, r4
   42e76:	435e      	muls	r6, r3
   42e78:	ebae 0e07 	sub.w	lr, lr, r7
   42e7c:	fb03 fe0e 	mul.w	lr, r3, lr
   42e80:	fb02 c606 	mla	r6, r2, r6, ip
   42e84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   42e86:	fb02 6e0e 	mla	lr, r2, lr, r6
   42e8a:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
   42e8e:	ed9e 6a00 	vldr	s12, [lr]
   42e92:	e7d0      	b.n	42e36 <conv_forward_naive+0xfa>
   42e94:	9b00      	ldr	r3, [sp, #0]
   42e96:	3301      	adds	r3, #1
   42e98:	e77b      	b.n	42d92 <conv_forward_naive+0x56>
   42e9a:	3501      	adds	r5, #1
   42e9c:	9b02      	ldr	r3, [sp, #8]
   42e9e:	42ab      	cmp	r3, r5
   42ea0:	f73f af5e 	bgt.w	42d60 <conv_forward_naive+0x24>
   42ea4:	f109 0901 	add.w	r9, r9, #1
   42ea8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   42eaa:	454b      	cmp	r3, r9
   42eac:	dd06      	ble.n	42ebc <conv_forward_naive+0x180>
   42eae:	6a03      	ldr	r3, [r0, #32]
   42eb0:	9302      	str	r3, [sp, #8]
   42eb2:	fb09 f303 	mul.w	r3, r9, r3
   42eb6:	9307      	str	r3, [sp, #28]
   42eb8:	2500      	movs	r5, #0
   42eba:	e7ef      	b.n	42e9c <conv_forward_naive+0x160>
   42ebc:	f10a 0a01 	add.w	sl, sl, #1
   42ec0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   42ec2:	4553      	cmp	r3, sl
   42ec4:	dd04      	ble.n	42ed0 <conv_forward_naive+0x194>
   42ec6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   42ec8:	930b      	str	r3, [sp, #44]	; 0x2c
   42eca:	f04f 0900 	mov.w	r9, #0
   42ece:	e7eb      	b.n	42ea8 <conv_forward_naive+0x16c>
   42ed0:	3401      	adds	r4, #1
   42ed2:	e73c      	b.n	42d4e <conv_forward_naive+0x12>
   42ed4:	b011      	add	sp, #68	; 0x44
   42ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42eda:	bf00      	nop
   42edc:	00000000 	.word	0x00000000

00042ee0 <im2col>:
   42ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42ee4:	b093      	sub	sp, #76	; 0x4c
   42ee6:	6d03      	ldr	r3, [r0, #80]	; 0x50
   42ee8:	9111      	str	r1, [sp, #68]	; 0x44
   42eea:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	; 0x30
   42eee:	4604      	mov	r4, r0
   42ef0:	434a      	muls	r2, r1
   42ef2:	bb33      	cbnz	r3, 42f42 <im2col+0x62>
   42ef4:	e9d0 3103 	ldrd	r3, r1, [r0, #12]
   42ef8:	f44f 70d1 	mov.w	r0, #418	; 0x1a2
   42efc:	9001      	str	r0, [sp, #4]
   42efe:	4864      	ldr	r0, [pc, #400]	; (43090 <im2col+0x1b0>)
   42f00:	9000      	str	r0, [sp, #0]
   42f02:	434b      	muls	r3, r1
   42f04:	69e1      	ldr	r1, [r4, #28]
   42f06:	6820      	ldr	r0, [r4, #0]
   42f08:	f019 f94c 	bl	5c1a4 <tensor_new>
   42f0c:	6520      	str	r0, [r4, #80]	; 0x50
   42f0e:	68e3      	ldr	r3, [r4, #12]
   42f10:	9306      	str	r3, [sp, #24]
   42f12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   42f14:	9307      	str	r3, [sp, #28]
   42f16:	6823      	ldr	r3, [r4, #0]
   42f18:	930d      	str	r3, [sp, #52]	; 0x34
   42f1a:	9a07      	ldr	r2, [sp, #28]
   42f1c:	9b06      	ldr	r3, [sp, #24]
   42f1e:	9906      	ldr	r1, [sp, #24]
   42f20:	3b01      	subs	r3, #1
   42f22:	3a01      	subs	r2, #1
   42f24:	fb02 1303 	mla	r3, r2, r3, r1
   42f28:	930f      	str	r3, [sp, #60]	; 0x3c
   42f2a:	2300      	movs	r3, #0
   42f2c:	9304      	str	r3, [sp, #16]
   42f2e:	4698      	mov	r8, r3
   42f30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   42f32:	4543      	cmp	r3, r8
   42f34:	f340 80a9 	ble.w	4308a <im2col+0x1aa>
   42f38:	6b23      	ldr	r3, [r4, #48]	; 0x30
   42f3a:	930c      	str	r3, [sp, #48]	; 0x30
   42f3c:	f04f 0900 	mov.w	r9, #0
   42f40:	e092      	b.n	43068 <im2col+0x188>
   42f42:	68db      	ldr	r3, [r3, #12]
   42f44:	4293      	cmp	r3, r2
   42f46:	dae2      	bge.n	42f0e <im2col+0x2e>
   42f48:	4d51      	ldr	r5, [pc, #324]	; (43090 <im2col+0x1b0>)
   42f4a:	4852      	ldr	r0, [pc, #328]	; (43094 <im2col+0x1b4>)
   42f4c:	f7c7 ff2e 	bl	adac <puts>
   42f50:	f240 12a9 	movw	r2, #425	; 0x1a9
   42f54:	4629      	mov	r1, r5
   42f56:	6d20      	ldr	r0, [r4, #80]	; 0x50
   42f58:	f019 f956 	bl	5c208 <tensor_delete>
   42f5c:	e9d4 3003 	ldrd	r3, r0, [r4, #12]
   42f60:	e9d4 210c 	ldrd	r2, r1, [r4, #48]	; 0x30
   42f64:	f44f 76d5 	mov.w	r6, #426	; 0x1aa
   42f68:	e9cd 5600 	strd	r5, r6, [sp]
   42f6c:	4343      	muls	r3, r0
   42f6e:	434a      	muls	r2, r1
   42f70:	e7c8      	b.n	42f04 <im2col+0x24>
   42f72:	69a2      	ldr	r2, [r4, #24]
   42f74:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   42f78:	4372      	muls	r2, r6
   42f7a:	2b00      	cmp	r3, #0
   42f7c:	d04d      	beq.n	4301a <im2col+0x13a>
   42f7e:	eb02 030e 	add.w	r3, r2, lr
   42f82:	9308      	str	r3, [sp, #32]
   42f84:	9a08      	ldr	r2, [sp, #32]
   42f86:	68a3      	ldr	r3, [r4, #8]
   42f88:	4293      	cmp	r3, r2
   42f8a:	dd28      	ble.n	42fde <im2col+0xfe>
   42f8c:	9805      	ldr	r0, [sp, #20]
   42f8e:	6961      	ldr	r1, [r4, #20]
   42f90:	fb01 0109 	mla	r1, r1, r9, r0
   42f94:	e9d4 a013 	ldrd	sl, r0, [r4, #76]	; 0x4c
   42f98:	6842      	ldr	r2, [r0, #4]
   42f9a:	68c7      	ldr	r7, [r0, #12]
   42f9c:	fb02 cb08 	mla	fp, r2, r8, ip
   42fa0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   42fa2:	fb0b 2707 	mla	r7, fp, r7, r2
   42fa6:	6882      	ldr	r2, [r0, #8]
   42fa8:	6940      	ldr	r0, [r0, #20]
   42faa:	4693      	mov	fp, r2
   42fac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   42fae:	fb07 270b 	mla	r7, r7, fp, r2
   42fb2:	9a08      	ldr	r2, [sp, #32]
   42fb4:	4477      	add	r7, lr
   42fb6:	458a      	cmp	sl, r1
   42fb8:	eb00 0b87 	add.w	fp, r0, r7, lsl #2
   42fbc:	fb02 c205 	mla	r2, r2, r5, ip
   42fc0:	dd2e      	ble.n	43020 <im2col+0x140>
   42fc2:	9804      	ldr	r0, [sp, #16]
   42fc4:	6ca7      	ldr	r7, [r4, #72]	; 0x48
   42fc6:	4358      	muls	r0, r3
   42fc8:	fb05 2200 	mla	r2, r5, r0, r2
   42fcc:	4359      	muls	r1, r3
   42fce:	fb05 2101 	mla	r1, r5, r1, r2
   42fd2:	697a      	ldr	r2, [r7, #20]
   42fd4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   42fd8:	680b      	ldr	r3, [r1, #0]
   42fda:	f8cb 3000 	str.w	r3, [fp]
   42fde:	9b02      	ldr	r3, [sp, #8]
   42fe0:	9a07      	ldr	r2, [sp, #28]
   42fe2:	4413      	add	r3, r2
   42fe4:	f10e 0e01 	add.w	lr, lr, #1
   42fe8:	9302      	str	r3, [sp, #8]
   42fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   42fec:	4573      	cmp	r3, lr
   42fee:	dcc0      	bgt.n	42f72 <im2col+0x92>
   42ff0:	9b03      	ldr	r3, [sp, #12]
   42ff2:	9a07      	ldr	r2, [sp, #28]
   42ff4:	3301      	adds	r3, #1
   42ff6:	9303      	str	r3, [sp, #12]
   42ff8:	9b05      	ldr	r3, [sp, #20]
   42ffa:	4413      	add	r3, r2
   42ffc:	9305      	str	r3, [sp, #20]
   42ffe:	9b06      	ldr	r3, [sp, #24]
   43000:	9a03      	ldr	r2, [sp, #12]
   43002:	4293      	cmp	r3, r2
   43004:	dd1b      	ble.n	4303e <im2col+0x15e>
   43006:	6923      	ldr	r3, [r4, #16]
   43008:	9309      	str	r3, [sp, #36]	; 0x24
   4300a:	4613      	mov	r3, r2
   4300c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   4300e:	4353      	muls	r3, r2
   43010:	930b      	str	r3, [sp, #44]	; 0x2c
   43012:	2300      	movs	r3, #0
   43014:	9302      	str	r3, [sp, #8]
   43016:	469e      	mov	lr, r3
   43018:	e7e7      	b.n	42fea <im2col+0x10a>
   4301a:	9b02      	ldr	r3, [sp, #8]
   4301c:	18d3      	adds	r3, r2, r3
   4301e:	e7b0      	b.n	42f82 <im2col+0xa2>
   43020:	6860      	ldr	r0, [r4, #4]
   43022:	fb00 f008 	mul.w	r0, r0, r8
   43026:	4358      	muls	r0, r3
   43028:	eba1 010a 	sub.w	r1, r1, sl
   4302c:	4359      	muls	r1, r3
   4302e:	fb05 2200 	mla	r2, r5, r0, r2
   43032:	9b11      	ldr	r3, [sp, #68]	; 0x44
   43034:	fb05 2101 	mla	r1, r5, r1, r2
   43038:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   4303c:	e7cc      	b.n	42fd8 <im2col+0xf8>
   4303e:	f10c 0c01 	add.w	ip, ip, #1
   43042:	4565      	cmp	r5, ip
   43044:	dd03      	ble.n	4304e <im2col+0x16e>
   43046:	2300      	movs	r3, #0
   43048:	9305      	str	r3, [sp, #20]
   4304a:	9303      	str	r3, [sp, #12]
   4304c:	e7d7      	b.n	42ffe <im2col+0x11e>
   4304e:	3601      	adds	r6, #1
   43050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   43052:	42b3      	cmp	r3, r6
   43054:	dd06      	ble.n	43064 <im2col+0x184>
   43056:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   43058:	69e5      	ldr	r5, [r4, #28]
   4305a:	18f3      	adds	r3, r6, r3
   4305c:	9310      	str	r3, [sp, #64]	; 0x40
   4305e:	f04f 0c00 	mov.w	ip, #0
   43062:	e7ee      	b.n	43042 <im2col+0x162>
   43064:	f109 0901 	add.w	r9, r9, #1
   43068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   4306a:	454b      	cmp	r3, r9
   4306c:	dd06      	ble.n	4307c <im2col+0x19c>
   4306e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   43070:	930a      	str	r3, [sp, #40]	; 0x28
   43072:	fb09 f303 	mul.w	r3, r9, r3
   43076:	930e      	str	r3, [sp, #56]	; 0x38
   43078:	2600      	movs	r6, #0
   4307a:	e7e9      	b.n	43050 <im2col+0x170>
   4307c:	9b04      	ldr	r3, [sp, #16]
   4307e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   43080:	4413      	add	r3, r2
   43082:	f108 0801 	add.w	r8, r8, #1
   43086:	9304      	str	r3, [sp, #16]
   43088:	e752      	b.n	42f30 <im2col+0x50>
   4308a:	b013      	add	sp, #76	; 0x4c
   4308c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43090:	000434bb 	.word	0x000434bb
   43094:	000434c8 	.word	0x000434c8

00043098 <conv_forward_im2col>:
   43098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4309c:	4604      	mov	r4, r0
   4309e:	b087      	sub	sp, #28
   430a0:	f7ff ff1e 	bl	42ee0 <im2col>
   430a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   430a6:	b95b      	cbnz	r3, 430c0 <conv_forward_im2col+0x28>
   430a8:	f240 2309 	movw	r3, #521	; 0x209
   430ac:	9301      	str	r3, [sp, #4]
   430ae:	2101      	movs	r1, #1
   430b0:	4b45      	ldr	r3, [pc, #276]	; (431c8 <conv_forward_im2col+0x130>)
   430b2:	9300      	str	r3, [sp, #0]
   430b4:	4608      	mov	r0, r1
   430b6:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   430ba:	f019 f873 	bl	5c1a4 <tensor_new>
   430be:	6560      	str	r0, [r4, #84]	; 0x54
   430c0:	f04f 0800 	mov.w	r8, #0
   430c4:	4647      	mov	r7, r8
   430c6:	6823      	ldr	r3, [r4, #0]
   430c8:	42bb      	cmp	r3, r7
   430ca:	dc7a      	bgt.n	431c2 <conv_forward_im2col+0x12a>
   430cc:	b007      	add	sp, #28
   430ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   430d2:	69e3      	ldr	r3, [r4, #28]
   430d4:	fb03 f105 	mul.w	r1, r3, r5
   430d8:	68e3      	ldr	r3, [r4, #12]
   430da:	434b      	muls	r3, r1
   430dc:	6921      	ldr	r1, [r4, #16]
   430de:	434b      	muls	r3, r1
   430e0:	6d21      	ldr	r1, [r4, #80]	; 0x50
   430e2:	9304      	str	r3, [sp, #16]
   430e4:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
   430e8:	68c9      	ldr	r1, [r1, #12]
   430ea:	fb02 a209 	mla	r2, r2, r9, sl
   430ee:	437b      	muls	r3, r7
   430f0:	fb01 2303 	mla	r3, r1, r3, r2
   430f4:	4343      	muls	r3, r0
   430f6:	9305      	str	r3, [sp, #20]
   430f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   430fa:	695b      	ldr	r3, [r3, #20]
   430fc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   43100:	ea4f 0b88 	mov.w	fp, r8, lsl #2
   43104:	681a      	ldr	r2, [r3, #0]
   43106:	6c23      	ldr	r3, [r4, #64]	; 0x40
   43108:	695b      	ldr	r3, [r3, #20]
   4310a:	445b      	add	r3, fp
   4310c:	2600      	movs	r6, #0
   4310e:	601a      	str	r2, [r3, #0]
   43110:	69e3      	ldr	r3, [r4, #28]
   43112:	42b3      	cmp	r3, r6
   43114:	dc12      	bgt.n	4313c <conv_forward_im2col+0xa4>
   43116:	f108 0801 	add.w	r8, r8, #1
   4311a:	3501      	adds	r5, #1
   4311c:	6a23      	ldr	r3, [r4, #32]
   4311e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   43120:	42ab      	cmp	r3, r5
   43122:	dcd6      	bgt.n	430d2 <conv_forward_im2col+0x3a>
   43124:	f10a 0a01 	add.w	sl, sl, #1
   43128:	6b63      	ldr	r3, [r4, #52]	; 0x34
   4312a:	4553      	cmp	r3, sl
   4312c:	dc44      	bgt.n	431b8 <conv_forward_im2col+0x120>
   4312e:	f109 0901 	add.w	r9, r9, #1
   43132:	6b23      	ldr	r3, [r4, #48]	; 0x30
   43134:	454b      	cmp	r3, r9
   43136:	dc41      	bgt.n	431bc <conv_forward_im2col+0x124>
   43138:	3701      	adds	r7, #1
   4313a:	e7c4      	b.n	430c6 <conv_forward_im2col+0x2e>
   4313c:	68e2      	ldr	r2, [r4, #12]
   4313e:	9203      	str	r2, [sp, #12]
   43140:	fb06 f102 	mul.w	r1, r6, r2
   43144:	6922      	ldr	r2, [r4, #16]
   43146:	6d23      	ldr	r3, [r4, #80]	; 0x50
   43148:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   4314a:	4694      	mov	ip, r2
   4314c:	9a04      	ldr	r2, [sp, #16]
   4314e:	f8d0 e014 	ldr.w	lr, [r0, #20]
   43152:	68d8      	ldr	r0, [r3, #12]
   43154:	fb0c 2101 	mla	r1, ip, r1, r2
   43158:	689a      	ldr	r2, [r3, #8]
   4315a:	4694      	mov	ip, r2
   4315c:	9a05      	ldr	r2, [sp, #20]
   4315e:	4370      	muls	r0, r6
   43160:	fb0c 2000 	mla	r0, ip, r0, r2
   43164:	f8d3 c014 	ldr.w	ip, [r3, #20]
   43168:	9a03      	ldr	r2, [sp, #12]
   4316a:	6923      	ldr	r3, [r4, #16]
   4316c:	4353      	muls	r3, r2
   4316e:	6d62      	ldr	r2, [r4, #84]	; 0x54
   43170:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
   43174:	6952      	ldr	r2, [r2, #20]
   43176:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
   4317a:	f7f7 fdc1 	bl	3ad00 <__SRAM_segment_end__>
   4317e:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   43182:	ed9f 7a12 	vldr	s14, [pc, #72]	; 431cc <conv_forward_im2col+0x134>
   43186:	435a      	muls	r2, r3
   43188:	2300      	movs	r3, #0
   4318a:	429a      	cmp	r2, r3
   4318c:	dc0a      	bgt.n	431a4 <conv_forward_im2col+0x10c>
   4318e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   43190:	695b      	ldr	r3, [r3, #20]
   43192:	445b      	add	r3, fp
   43194:	edd3 7a00 	vldr	s15, [r3]
   43198:	ee77 7a87 	vadd.f32	s15, s15, s14
   4319c:	3601      	adds	r6, #1
   4319e:	edc3 7a00 	vstr	s15, [r3]
   431a2:	e7b5      	b.n	43110 <conv_forward_im2col+0x78>
   431a4:	6d61      	ldr	r1, [r4, #84]	; 0x54
   431a6:	6949      	ldr	r1, [r1, #20]
   431a8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   431ac:	edd1 7a00 	vldr	s15, [r1]
   431b0:	3301      	adds	r3, #1
   431b2:	ee37 7a27 	vadd.f32	s14, s14, s15
   431b6:	e7e8      	b.n	4318a <conv_forward_im2col+0xf2>
   431b8:	2500      	movs	r5, #0
   431ba:	e7af      	b.n	4311c <conv_forward_im2col+0x84>
   431bc:	f04f 0a00 	mov.w	sl, #0
   431c0:	e7b2      	b.n	43128 <conv_forward_im2col+0x90>
   431c2:	f04f 0900 	mov.w	r9, #0
   431c6:	e7b4      	b.n	43132 <conv_forward_im2col+0x9a>
   431c8:	000434bb 	.word	0x000434bb
   431cc:	00000000 	.word	0x00000000

000431d0 <conv_forward>:
   431d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   431d4:	680b      	ldr	r3, [r1, #0]
   431d6:	684d      	ldr	r5, [r1, #4]
   431d8:	6003      	str	r3, [r0, #0]
   431da:	68cb      	ldr	r3, [r1, #12]
   431dc:	6045      	str	r5, [r0, #4]
   431de:	b085      	sub	sp, #20
   431e0:	4604      	mov	r4, r0
   431e2:	4689      	mov	r9, r1
   431e4:	6083      	str	r3, [r0, #8]
   431e6:	b92d      	cbnz	r5, 431f4 <conv_forward+0x24>
   431e8:	487b      	ldr	r0, [pc, #492]	; (433d8 <conv_forward+0x208>)
   431ea:	b005      	add	sp, #20
   431ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   431f0:	f7c7 bddc 	b.w	adac <puts>
   431f4:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
   431f8:	2902      	cmp	r1, #2
   431fa:	e9d0 7203 	ldrd	r7, r2, [r0, #12]
   431fe:	d10a      	bne.n	43216 <conv_forward+0x46>
   43200:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   43202:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
   43206:	3901      	subs	r1, #1
   43208:	b910      	cbnz	r0, 43210 <conv_forward+0x40>
   4320a:	1e50      	subs	r0, r2, #1
   4320c:	fb01 2200 	mla	r2, r1, r0, r2
   43210:	1e78      	subs	r0, r7, #1
   43212:	fb01 7700 	mla	r7, r1, r0, r7
   43216:	f8d4 a04c 	ldr.w	sl, [r4, #76]	; 0x4c
   4321a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   4321c:	4455      	add	r5, sl
   4321e:	42af      	cmp	r7, r5
   43220:	441e      	add	r6, r3
   43222:	eba6 0602 	sub.w	r6, r6, r2
   43226:	69a3      	ldr	r3, [r4, #24]
   43228:	bfd8      	it	le
   4322a:	6962      	ldrle	r2, [r4, #20]
   4322c:	fb96 f6f3 	sdiv	r6, r6, r3
   43230:	bfdf      	itttt	le
   43232:	1bed      	suble	r5, r5, r7
   43234:	fb95 f3f2 	sdivle	r3, r5, r2
   43238:	fb02 5513 	mlsle	r5, r2, r3, r5
   4323c:	f103 0801 	addle.w	r8, r3, #1
   43240:	6b23      	ldr	r3, [r4, #48]	; 0x30
   43242:	bfd6      	itet	le
   43244:	19ed      	addle	r5, r5, r7
   43246:	f04f 0800 	movgt.w	r8, #0
   4324a:	1aad      	suble	r5, r5, r2
   4324c:	4543      	cmp	r3, r8
   4324e:	f106 0601 	add.w	r6, r6, #1
   43252:	d102      	bne.n	4325a <conv_forward+0x8a>
   43254:	6b63      	ldr	r3, [r4, #52]	; 0x34
   43256:	42b3      	cmp	r3, r6
   43258:	d017      	beq.n	4328a <conv_forward+0xba>
   4325a:	f8df b180 	ldr.w	fp, [pc, #384]	; 433dc <conv_forward+0x20c>
   4325e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   43260:	f240 226f 	movw	r2, #623	; 0x26f
   43264:	4659      	mov	r1, fp
   43266:	f018 ffcf 	bl	5c208 <tensor_delete>
   4326a:	e9c4 860c 	strd	r8, r6, [r4, #48]	; 0x30
   4326e:	f1b8 0f00 	cmp.w	r8, #0
   43272:	d04d      	beq.n	43310 <conv_forward+0x140>
   43274:	f44f 731d 	mov.w	r3, #628	; 0x274
   43278:	e9cd b300 	strd	fp, r3, [sp]
   4327c:	4632      	mov	r2, r6
   4327e:	6a23      	ldr	r3, [r4, #32]
   43280:	6820      	ldr	r0, [r4, #0]
   43282:	4641      	mov	r1, r8
   43284:	f018 ff8e 	bl	5c1a4 <tensor_new>
   43288:	6420      	str	r0, [r4, #64]	; 0x40
   4328a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   4328c:	f018 ffcf 	bl	5c22e <tensor_clear>
   43290:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   43292:	b9ab      	cbnz	r3, 432c0 <conv_forward+0xf0>
   43294:	f240 237f 	movw	r3, #639	; 0x27f
   43298:	9301      	str	r3, [sp, #4]
   4329a:	4b50      	ldr	r3, [pc, #320]	; (433dc <conv_forward+0x20c>)
   4329c:	9300      	str	r3, [sp, #0]
   4329e:	68a2      	ldr	r2, [r4, #8]
   432a0:	69e3      	ldr	r3, [r4, #28]
   432a2:	6820      	ldr	r0, [r4, #0]
   432a4:	4639      	mov	r1, r7
   432a6:	f018 ff7d 	bl	5c1a4 <tensor_new>
   432aa:	f8cd 8000 	str.w	r8, [sp]
   432ae:	64a0      	str	r0, [r4, #72]	; 0x48
   432b0:	e9cd 6001 	strd	r6, r0, [sp, #4]
   432b4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   432b8:	4651      	mov	r1, sl
   432ba:	4849      	ldr	r0, [pc, #292]	; (433e0 <conv_forward+0x210>)
   432bc:	f7c0 f9e0 	bl	3680 <printf>
   432c0:	f1b8 0f00 	cmp.w	r8, #0
   432c4:	d008      	beq.n	432d8 <conv_forward+0x108>
   432c6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   432ca:	2b01      	cmp	r3, #1
   432cc:	d82d      	bhi.n	4332a <conv_forward+0x15a>
   432ce:	f8d9 1014 	ldr.w	r1, [r9, #20]
   432d2:	4620      	mov	r0, r4
   432d4:	f7ff fd32 	bl	42d3c <conv_forward_naive>
   432d8:	6863      	ldr	r3, [r4, #4]
   432da:	64e5      	str	r5, [r4, #76]	; 0x4c
   432dc:	42ab      	cmp	r3, r5
   432de:	bfb6      	itet	lt
   432e0:	1aee      	sublt	r6, r5, r3
   432e2:	2600      	movge	r6, #0
   432e4:	461d      	movlt	r5, r3
   432e6:	4556      	cmp	r6, sl
   432e8:	dd27      	ble.n	4333a <conv_forward+0x16a>
   432ea:	4632      	mov	r2, r6
   432ec:	4651      	mov	r1, sl
   432ee:	483d      	ldr	r0, [pc, #244]	; (433e4 <conv_forward+0x214>)
   432f0:	f7c0 f9c6 	bl	3680 <printf>
   432f4:	b12d      	cbz	r5, 43302 <conv_forward+0x132>
   432f6:	f04f 0a00 	mov.w	sl, #0
   432fa:	46d0      	mov	r8, sl
   432fc:	6823      	ldr	r3, [r4, #0]
   432fe:	4543      	cmp	r3, r8
   43300:	dc3e      	bgt.n	43380 <conv_forward+0x1b0>
   43302:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   43306:	2b00      	cmp	r3, #0
   43308:	d15d      	bne.n	433c6 <conv_forward+0x1f6>
   4330a:	b005      	add	sp, #20
   4330c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43310:	f44f 731e 	mov.w	r3, #632	; 0x278
   43314:	e9cd b301 	strd	fp, r3, [sp, #4]
   43318:	f8cd 8000 	str.w	r8, [sp]
   4331c:	6a23      	ldr	r3, [r4, #32]
   4331e:	6820      	ldr	r0, [r4, #0]
   43320:	4632      	mov	r2, r6
   43322:	4641      	mov	r1, r8
   43324:	f018 ff5d 	bl	5c1e2 <tensor_new_wo_malloc>
   43328:	e7ae      	b.n	43288 <conv_forward+0xb8>
   4332a:	2b02      	cmp	r3, #2
   4332c:	d1d4      	bne.n	432d8 <conv_forward+0x108>
   4332e:	f8d9 1014 	ldr.w	r1, [r9, #20]
   43332:	4620      	mov	r0, r4
   43334:	f7ff feb0 	bl	43098 <conv_forward_im2col>
   43338:	e7ce      	b.n	432d8 <conv_forward+0x108>
   4333a:	dadb      	bge.n	432f4 <conv_forward+0x124>
   4333c:	f04f 0800 	mov.w	r8, #0
   43340:	46c3      	mov	fp, r8
   43342:	ebaa 0a06 	sub.w	sl, sl, r6
   43346:	6823      	ldr	r3, [r4, #0]
   43348:	455b      	cmp	r3, fp
   4334a:	ddd3      	ble.n	432f4 <conv_forward+0x124>
   4334c:	68a3      	ldr	r3, [r4, #8]
   4334e:	69e1      	ldr	r1, [r4, #28]
   43350:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   43352:	fb03 f008 	mul.w	r0, r3, r8
   43356:	f8d2 c014 	ldr.w	ip, [r2, #20]
   4335a:	4348      	muls	r0, r1
   4335c:	fb01 f203 	mul.w	r2, r1, r3
   43360:	fb03 f30a 	mul.w	r3, r3, sl
   43364:	fb01 0103 	mla	r1, r1, r3, r0
   43368:	4372      	muls	r2, r6
   4336a:	0092      	lsls	r2, r2, #2
   4336c:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
   43370:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
   43374:	f7c7 fbe1 	bl	ab3a <memmove>
   43378:	f10b 0b01 	add.w	fp, fp, #1
   4337c:	44b8      	add	r8, r7
   4337e:	e7e2      	b.n	43346 <conv_forward+0x176>
   43380:	e9d4 3e01 	ldrd	r3, lr, [r4, #4]
   43384:	fb08 fb03 	mul.w	fp, r8, r3
   43388:	69e1      	ldr	r1, [r4, #28]
   4338a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   4338c:	fb0e f00a 	mul.w	r0, lr, sl
   43390:	fb0e fb0b 	mul.w	fp, lr, fp
   43394:	1b5b      	subs	r3, r3, r5
   43396:	fb06 000e 	mla	r0, r6, lr, r0
   4339a:	fb0e b303 	mla	r3, lr, r3, fp
   4339e:	f8d2 c014 	ldr.w	ip, [r2, #20]
   433a2:	434b      	muls	r3, r1
   433a4:	fb01 f20e 	mul.w	r2, r1, lr
   433a8:	4348      	muls	r0, r1
   433aa:	f8d9 1014 	ldr.w	r1, [r9, #20]
   433ae:	436a      	muls	r2, r5
   433b0:	0092      	lsls	r2, r2, #2
   433b2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   433b6:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
   433ba:	f7c7 fbb0 	bl	ab1e <memcpy>
   433be:	f108 0801 	add.w	r8, r8, #1
   433c2:	44ba      	add	sl, r7
   433c4:	e79a      	b.n	432fc <conv_forward+0x12c>
   433c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   433c8:	68da      	ldr	r2, [r3, #12]
   433ca:	2a01      	cmp	r2, #1
   433cc:	bf04      	itt	eq
   433ce:	6899      	ldreq	r1, [r3, #8]
   433d0:	e9c3 2102 	strdeq	r2, r1, [r3, #8]
   433d4:	e799      	b.n	4330a <conv_forward+0x13a>
   433d6:	bf00      	nop
   433d8:	000433e8 	.word	0x000433e8
   433dc:	000434bb 	.word	0x000434bb
   433e0:	000433f3 	.word	0x000433f3
   433e4:	00043431 	.word	0x00043431
   433e8:	6f72657a 	.word	0x6f72657a
   433ec:	706e6920 	.word	0x706e6920
   433f0:	61007475 	.word	0x61007475
   433f4:	636f6c6c 	.word	0x636f6c6c
   433f8:	20657461 	.word	0x20657461
   433fc:	69736572 	.word	0x69736572
   43400:	6c617564 	.word	0x6c617564
   43404:	66756220 	.word	0x66756220
   43408:	20726566 	.word	0x20726566
   4340c:	74696e69 	.word	0x74696e69
   43410:	20642520 	.word	0x20642520
   43414:	25206e69 	.word	0x25206e69
   43418:	64257864 	.word	0x64257864
   4341c:	74756f20 	.word	0x74756f20
   43420:	78642520 	.word	0x78642520
   43424:	70206425 	.word	0x70206425
   43428:	30207274 	.word	0x30207274
   4342c:	0a782578 	.word	0x0a782578
   43430:	72756300 	.word	0x72756300
   43434:	746e6572 	.word	0x746e6572
   43438:	73657220 	.word	0x73657220
   4343c:	61756469 	.word	0x61756469
   43440:	7562206c 	.word	0x7562206c
   43444:	72656666 	.word	0x72656666
   43448:	20736920 	.word	0x20736920
   4344c:	20746f6e 	.word	0x20746f6e
   43450:	756f6e65 	.word	0x756f6e65
   43454:	74206867 	.word	0x74206867
   43458:	6f63206f 	.word	0x6f63206f
   4345c:	74207970 	.word	0x74207970
   43460:	656e206f 	.word	0x656e206f
   43464:	6e6f2077 	.word	0x6e6f2077
   43468:	63202c65 	.word	0x63202c65
   4346c:	65727275 	.word	0x65727275
   43470:	6c20746e 	.word	0x6c20746e
   43474:	67746e65 	.word	0x67746e65
   43478:	64252068 	.word	0x64252068
   4347c:	71657220 	.word	0x71657220
   43480:	65726975 	.word	0x65726975
   43484:	656c2064 	.word	0x656c2064
   43488:	6874676e 	.word	0x6874676e
   4348c:	0a642520 	.word	0x0a642520
   43490:	00          	.byte	0x00
   43491:	45          	.byte	0x45
   43492:	5252      	.short	0x5252
   43494:	6620524f 	.word	0x6620524f
   43498:	6d207466 	.word	0x6d207466
   4349c:	6f687465 	.word	0x6f687465
   434a0:	6f642064 	.word	0x6f642064
   434a4:	276e7365 	.word	0x276e7365
   434a8:	75732074 	.word	0x75732074
   434ac:	726f7070 	.word	0x726f7070
   434b0:	61702074 	.word	0x61702074
   434b4:	6e692064 	.word	0x6e692064
   434b8:	2e007720 	.word	0x2e007720
   434bc:	6e6e5c2e 	.word	0x6e6e5c2e
   434c0:	6e6f635c 	.word	0x6e6f635c
   434c4:	00632e76 	.word	0x00632e76
   434c8:	6c616572 	.word	0x6c616572
   434cc:	61636f6c 	.word	0x61636f6c
   434d0:	69206574 	.word	0x69206574
   434d4:	6f635f6e 	.word	0x6f635f6e
   434d8:	0000006c 	.word	0x0000006c

000434dc <MyMalloc>:
   434dc:	4a07      	ldr	r2, [pc, #28]	; (434fc <MyMalloc+0x20>)
   434de:	f100 030f 	add.w	r3, r0, #15
   434e2:	6810      	ldr	r0, [r2, #0]
   434e4:	f023 030f 	bic.w	r3, r3, #15
   434e8:	4403      	add	r3, r0
   434ea:	f5b3 4fc8 	cmp.w	r3, #25600	; 0x6400
   434ee:	bf3d      	ittte	cc
   434f0:	4903      	ldrcc	r1, [pc, #12]	; (43500 <MyMalloc+0x24>)
   434f2:	6013      	strcc	r3, [r2, #0]
   434f4:	1840      	addcc	r0, r0, r1
   434f6:	2000      	movcs	r0, #0
   434f8:	4770      	bx	lr
   434fa:	bf00      	nop
   434fc:	00041a18 	.word	0x00041a18
   43500:	0003ae18 	.word	0x0003ae18

00043504 <VecAllocMem>:
   43504:	b510      	push	{r4, lr}
   43506:	4604      	mov	r4, r0
   43508:	6001      	str	r1, [r0, #0]
   4350a:	1cc8      	adds	r0, r1, #3
   4350c:	bf48      	it	mi
   4350e:	1d88      	addmi	r0, r1, #6
   43510:	1080      	asrs	r0, r0, #2
   43512:	0083      	lsls	r3, r0, #2
   43514:	e9c4 3001 	strd	r3, r0, [r4, #4]
   43518:	0100      	lsls	r0, r0, #4
   4351a:	f7ff ffdf 	bl	434dc <MyMalloc>
   4351e:	60e0      	str	r0, [r4, #12]
   43520:	2000      	movs	r0, #0
   43522:	bd10      	pop	{r4, pc}

00043524 <MatAllocMem>:
   43524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   43526:	1cd3      	adds	r3, r2, #3
   43528:	bf48      	it	mi
   4352a:	1d93      	addmi	r3, r2, #6
   4352c:	109b      	asrs	r3, r3, #2
   4352e:	6082      	str	r2, [r0, #8]
   43530:	009a      	lsls	r2, r3, #2
   43532:	4604      	mov	r4, r0
   43534:	e9c0 2303 	strd	r2, r3, [r0, #12]
   43538:	e9c0 1100 	strd	r1, r1, [r0]
   4353c:	0088      	lsls	r0, r1, #2
   4353e:	460d      	mov	r5, r1
   43540:	f7ff ffcc 	bl	434dc <MyMalloc>
   43544:	2600      	movs	r6, #0
   43546:	6160      	str	r0, [r4, #20]
   43548:	42ae      	cmp	r6, r5
   4354a:	db01      	blt.n	43550 <MatAllocMem+0x2c>
   4354c:	2000      	movs	r0, #0
   4354e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   43550:	68e0      	ldr	r0, [r4, #12]
   43552:	6967      	ldr	r7, [r4, #20]
   43554:	0080      	lsls	r0, r0, #2
   43556:	f7ff ffc1 	bl	434dc <MyMalloc>
   4355a:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
   4355e:	3601      	adds	r6, #1
   43560:	e7f2      	b.n	43548 <MatAllocMem+0x24>
	...

00043564 <ZFea_ExtractFBank>:
   43564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   43568:	ed2d 8b06 	vpush	{d8-d10}
   4356c:	6806      	ldr	r6, [r0, #0]
   4356e:	b0cb      	sub	sp, #300	; 0x12c
   43570:	4604      	mov	r4, r0
   43572:	468b      	mov	fp, r1
   43574:	9301      	str	r3, [sp, #4]
   43576:	2e00      	cmp	r6, #0
   43578:	f040 80be 	bne.w	436f8 <ZFea_ExtractFBank+0x194>
   4357c:	2301      	movs	r3, #1
   4357e:	e9c0 3200 	strd	r3, r2, [r0]
   43582:	2328      	movs	r3, #40	; 0x28
   43584:	6183      	str	r3, [r0, #24]
   43586:	f44f 71c8 	mov.w	r1, #400	; 0x190
   4358a:	23a0      	movs	r3, #160	; 0xa0
   4358c:	e9c0 1304 	strd	r1, r3, [r0, #16]
   43590:	60c6      	str	r6, [r0, #12]
   43592:	2302      	movs	r3, #2
   43594:	60a3      	str	r3, [r4, #8]
   43596:	68a3      	ldr	r3, [r4, #8]
   43598:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   4359c:	f2c0 80e4 	blt.w	43768 <ZFea_ExtractFBank+0x204>
   435a0:	222a      	movs	r2, #42	; 0x2a
   435a2:	232c      	movs	r3, #44	; 0x2c
   435a4:	e9c4 2307 	strd	r2, r3, [r4, #28]
   435a8:	230b      	movs	r3, #11
   435aa:	6263      	str	r3, [r4, #36]	; 0x24
   435ac:	20b0      	movs	r0, #176	; 0xb0
   435ae:	f7ff ff95 	bl	434dc <MyMalloc>
   435b2:	68a1      	ldr	r1, [r4, #8]
   435b4:	62e0      	str	r0, [r4, #44]	; 0x2c
   435b6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   435ba:	1049      	asrs	r1, r1, #1
   435bc:	3101      	adds	r1, #1
   435be:	f104 0030 	add.w	r0, r4, #48	; 0x30
   435c2:	f7ff ff9f 	bl	43504 <VecAllocMem>
   435c6:	f44f 7280 	mov.w	r2, #256	; 0x100
   435ca:	2100      	movs	r1, #0
   435cc:	a80a      	add	r0, sp, #40	; 0x28
   435ce:	f7c7 face 	bl	ab6e <memset>
   435d2:	69e3      	ldr	r3, [r4, #28]
   435d4:	2b40      	cmp	r3, #64	; 0x40
   435d6:	dd02      	ble.n	435de <ZFea_ExtractFBank+0x7a>
   435d8:	48d0      	ldr	r0, [pc, #832]	; (4391c <ZFea_ExtractFBank+0x3b8>)
   435da:	f7c7 fbe7 	bl	adac <puts>
   435de:	69e2      	ldr	r2, [r4, #28]
   435e0:	eddf 6acf 	vldr	s13, [pc, #828]	; 43920 <ZFea_ExtractFBank+0x3bc>
   435e4:	1e53      	subs	r3, r2, #1
   435e6:	ee07 3a90 	vmov	s15, r3
   435ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   435ee:	a90a      	add	r1, sp, #40	; 0x28
   435f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   435f4:	2300      	movs	r3, #0
   435f6:	eddf 7acb 	vldr	s15, [pc, #812]	; 43924 <ZFea_ExtractFBank+0x3c0>
   435fa:	429a      	cmp	r2, r3
   435fc:	f300 80b6 	bgt.w	4376c <ZFea_ExtractFBank+0x208>
   43600:	2200      	movs	r2, #0
   43602:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   43606:	69e3      	ldr	r3, [r4, #28]
   43608:	429a      	cmp	r2, r3
   4360a:	f2c0 80bb 	blt.w	43784 <ZFea_ExtractFBank+0x220>
   4360e:	aa0a      	add	r2, sp, #40	; 0x28
   43610:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   43614:	ed9d 8a0a 	vldr	s16, [sp, #40]	; 0x28
   43618:	ed53 8a01 	vldr	s17, [r3, #-4]
   4361c:	ed9f 9ac2 	vldr	s18, [pc, #776]	; 43928 <ZFea_ExtractFBank+0x3c4>
   43620:	eddf 9ac2 	vldr	s19, [pc, #776]	; 4392c <ZFea_ExtractFBank+0x3c8>
   43624:	ed9f aac2 	vldr	s20, [pc, #776]	; 43930 <ZFea_ExtractFBank+0x3cc>
   43628:	2500      	movs	r5, #0
   4362a:	68a3      	ldr	r3, [r4, #8]
   4362c:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
   43630:	ebb5 0f62 	cmp.w	r5, r2, asr #1
   43634:	f340 80ab 	ble.w	4378e <ZFea_ExtractFBank+0x22a>
   43638:	69e3      	ldr	r3, [r4, #28]
   4363a:	3b01      	subs	r3, #1
   4363c:	2b00      	cmp	r3, #0
   4363e:	f300 80e5 	bgt.w	4380c <ZFea_ExtractFBank+0x2a8>
   43642:	4bbc      	ldr	r3, [pc, #752]	; (43934 <ZFea_ExtractFBank+0x3d0>)
   43644:	6463      	str	r3, [r4, #68]	; 0x44
   43646:	6922      	ldr	r2, [r4, #16]
   43648:	6861      	ldr	r1, [r4, #4]
   4364a:	eddf 8abb 	vldr	s17, [pc, #748]	; 43938 <ZFea_ExtractFBank+0x3d4>
   4364e:	4fbb      	ldr	r7, [pc, #748]	; (4393c <ZFea_ExtractFBank+0x3d8>)
   43650:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   43654:	f7ff ff66 	bl	43524 <MatAllocMem>
   43658:	6922      	ldr	r2, [r4, #16]
   4365a:	6861      	ldr	r1, [r4, #4]
   4365c:	f104 0074 	add.w	r0, r4, #116	; 0x74
   43660:	f7ff ff60 	bl	43524 <MatAllocMem>
   43664:	6921      	ldr	r1, [r4, #16]
   43666:	f104 0048 	add.w	r0, r4, #72	; 0x48
   4366a:	f7ff ff4b 	bl	43504 <VecAllocMem>
   4366e:	2500      	movs	r5, #0
   43670:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
   43674:	6923      	ldr	r3, [r4, #16]
   43676:	42ab      	cmp	r3, r5
   43678:	f300 80d2 	bgt.w	43820 <ZFea_ExtractFBank+0x2bc>
   4367c:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
   43680:	e9c4 3023 	strd	r3, r0, [r4, #140]	; 0x8c
   43684:	4358      	muls	r0, r3
   43686:	0080      	lsls	r0, r0, #2
   43688:	f7ff ff28 	bl	434dc <MyMalloc>
   4368c:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
   43690:	e9d4 3023 	ldrd	r3, r0, [r4, #140]	; 0x8c
   43694:	4358      	muls	r0, r3
   43696:	00c0      	lsls	r0, r0, #3
   43698:	f7ff ff20 	bl	434dc <MyMalloc>
   4369c:	e9d4 5301 	ldrd	r5, r3, [r4, #4]
   436a0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   436a4:	105b      	asrs	r3, r3, #1
   436a6:	1cda      	adds	r2, r3, #3
   436a8:	bf48      	it	mi
   436aa:	1d9a      	addmi	r2, r3, #6
   436ac:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
   436b0:	1093      	asrs	r3, r2, #2
   436b2:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
   436b6:	009b      	lsls	r3, r3, #2
   436b8:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
   436bc:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
   436c0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   436c4:	00a8      	lsls	r0, r5, #2
   436c6:	f7ff ff09 	bl	434dc <MyMalloc>
   436ca:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
   436ce:	42b5      	cmp	r5, r6
   436d0:	f300 80c9 	bgt.w	43866 <ZFea_ExtractFBank+0x302>
   436d4:	68a1      	ldr	r1, [r4, #8]
   436d6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   436da:	1049      	asrs	r1, r1, #1
   436dc:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
   436e0:	f7ff ff10 	bl	43504 <VecAllocMem>
   436e4:	69a2      	ldr	r2, [r4, #24]
   436e6:	210c      	movs	r1, #12
   436e8:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   436ec:	f7ff ff1a 	bl	43524 <MatAllocMem>
   436f0:	2300      	movs	r3, #0
   436f2:	60e3      	str	r3, [r4, #12]
   436f4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   436f8:	68e3      	ldr	r3, [r4, #12]
   436fa:	9a01      	ldr	r2, [sp, #4]
   436fc:	6921      	ldr	r1, [r4, #16]
   436fe:	6865      	ldr	r5, [r4, #4]
   43700:	4413      	add	r3, r2
   43702:	1a5b      	subs	r3, r3, r1
   43704:	6961      	ldr	r1, [r4, #20]
   43706:	fb93 f3f1 	sdiv	r3, r3, r1
   4370a:	fb03 5505 	mla	r5, r3, r5, r5
   4370e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   43712:	42ab      	cmp	r3, r5
   43714:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
   43718:	f280 80b0 	bge.w	4387c <ZFea_ExtractFBank+0x318>
   4371c:	f8d4 70d0 	ldr.w	r7, [r4, #208]	; 0xd0
   43720:	4887      	ldr	r0, [pc, #540]	; (43940 <ZFea_ExtractFBank+0x3dc>)
   43722:	f7c7 fb43 	bl	adac <puts>
   43726:	463a      	mov	r2, r7
   43728:	4629      	mov	r1, r5
   4372a:	4630      	mov	r0, r6
   4372c:	f7ff fefa 	bl	43524 <MatAllocMem>
   43730:	9b5a      	ldr	r3, [sp, #360]	; 0x168
   43732:	ed9f 8a84 	vldr	s16, [pc, #528]	; 43944 <ZFea_ExtractFBank+0x3e0>
   43736:	601e      	str	r6, [r3, #0]
   43738:	f04f 0a00 	mov.w	sl, #0
   4373c:	f8cd a000 	str.w	sl, [sp]
   43740:	9b01      	ldr	r3, [sp, #4]
   43742:	459a      	cmp	sl, r3
   43744:	f2c0 809d 	blt.w	43882 <ZFea_ExtractFBank+0x31e>
   43748:	9a00      	ldr	r2, [sp, #0]
   4374a:	6863      	ldr	r3, [r4, #4]
   4374c:	4353      	muls	r3, r2
   4374e:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
   43752:	4293      	cmp	r3, r2
   43754:	f300 82c8 	bgt.w	43ce8 <ZFea_ExtractFBank+0x784>
   43758:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
   4375c:	2000      	movs	r0, #0
   4375e:	b04b      	add	sp, #300	; 0x12c
   43760:	ecbd 8b06 	vpop	{d8-d10}
   43764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43768:	005b      	lsls	r3, r3, #1
   4376a:	e713      	b.n	43594 <ZFea_ExtractFBank+0x30>
   4376c:	ee06 3a90 	vmov	s13, r3
   43770:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   43774:	eeb0 6a67 	vmov.f32	s12, s15
   43778:	eea7 6a26 	vfma.f32	s12, s14, s13
   4377c:	3301      	adds	r3, #1
   4377e:	eca1 6a01 	vstmia	r1!, {s12}
   43782:	e73a      	b.n	435fa <ZFea_ExtractFBank+0x96>
   43784:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   43786:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   4378a:	3201      	adds	r2, #1
   4378c:	e73b      	b.n	43606 <ZFea_ExtractFBank+0xa2>
   4378e:	ee07 5a90 	vmov	s15, r5
   43792:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   43796:	ee07 3a90 	vmov	s15, r3
   4379a:	ee27 7a09 	vmul.f32	s14, s14, s18
   4379e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   437a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
   437a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   437aa:	ee86 7aa9 	vdiv.f32	s14, s13, s19
   437ae:	ee77 7a27 	vadd.f32	s15, s14, s15
   437b2:	ee17 0a90 	vmov	r0, s15
   437b6:	f7c4 f9eb 	bl	7b90 <logf>
   437ba:	ee07 0a90 	vmov	s15, r0
   437be:	ee67 7a8a 	vmul.f32	s15, s15, s20
   437c2:	eeb4 8ae7 	vcmpe.f32	s16, s15
   437c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   437ca:	da0a      	bge.n	437e2 <ZFea_ExtractFBank+0x27e>
   437cc:	eef4 8ae7 	vcmpe.f32	s17, s15
   437d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   437d4:	d905      	bls.n	437e2 <ZFea_ExtractFBank+0x27e>
   437d6:	69e3      	ldr	r3, [r4, #28]
   437d8:	a90a      	add	r1, sp, #40	; 0x28
   437da:	1e5a      	subs	r2, r3, #1
   437dc:	2300      	movs	r3, #0
   437de:	4293      	cmp	r3, r2
   437e0:	db01      	blt.n	437e6 <ZFea_ExtractFBank+0x282>
   437e2:	3501      	adds	r5, #1
   437e4:	e721      	b.n	4362a <ZFea_ExtractFBank+0xc6>
   437e6:	ecf1 6a01 	vldmia	r1!, {s13}
   437ea:	eef4 7ae6 	vcmpe.f32	s15, s13
   437ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   437f2:	f103 0001 	add.w	r0, r3, #1
   437f6:	db07      	blt.n	43808 <ZFea_ExtractFBank+0x2a4>
   437f8:	ed91 7a00 	vldr	s14, [r1]
   437fc:	eef4 7ac7 	vcmpe.f32	s15, s14
   43800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   43804:	f240 8279 	bls.w	43cfa <ZFea_ExtractFBank+0x796>
   43808:	4603      	mov	r3, r0
   4380a:	e7e8      	b.n	437de <ZFea_ExtractFBank+0x27a>
   4380c:	009a      	lsls	r2, r3, #2
   4380e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   43810:	3a04      	subs	r2, #4
   43812:	5888      	ldr	r0, [r1, r2]
   43814:	3001      	adds	r0, #1
   43816:	bf04      	itt	eq
   43818:	f851 0023 	ldreq.w	r0, [r1, r3, lsl #2]
   4381c:	5088      	streq	r0, [r1, r2]
   4381e:	e70c      	b.n	4363a <ZFea_ExtractFBank+0xd6>
   43820:	3b01      	subs	r3, #1
   43822:	ee07 3a90 	vmov	s15, r3
   43826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   4382a:	ee88 7aa7 	vdiv.f32	s14, s17, s15
   4382e:	ee07 5a90 	vmov	s15, r5
   43832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   43836:	ee67 7a27 	vmul.f32	s15, s14, s15
   4383a:	ee17 0a90 	vmov	r0, s15
   4383e:	f7c4 f8eb 	bl	7a18 <cosf>
   43842:	ee07 0a10 	vmov	s14, r0
   43846:	eef0 7a48 	vmov.f32	s15, s16
   4384a:	eee7 7a48 	vfms.f32	s15, s14, s16
   4384e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   43850:	4639      	mov	r1, r7
   43852:	ee17 0a90 	vmov	r0, s15
   43856:	eb03 0885 	add.w	r8, r3, r5, lsl #2
   4385a:	f7c4 fa15 	bl	7c88 <powf>
   4385e:	3501      	adds	r5, #1
   43860:	f8c8 0000 	str.w	r0, [r8]
   43864:	e706      	b.n	43674 <ZFea_ExtractFBank+0x110>
   43866:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   4386a:	f8d4 70b0 	ldr.w	r7, [r4, #176]	; 0xb0
   4386e:	00c0      	lsls	r0, r0, #3
   43870:	f7ff fe34 	bl	434dc <MyMalloc>
   43874:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
   43878:	3601      	adds	r6, #1
   4387a:	e728      	b.n	436ce <ZFea_ExtractFBank+0x16a>
   4387c:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
   43880:	e756      	b.n	43730 <ZFea_ExtractFBank+0x1cc>
   43882:	9b01      	ldr	r3, [sp, #4]
   43884:	eba3 060a 	sub.w	r6, r3, sl
   43888:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   4388c:	1ad3      	subs	r3, r2, r3
   4388e:	429e      	cmp	r6, r3
   43890:	9303      	str	r3, [sp, #12]
   43892:	ea4f 058a 	mov.w	r5, sl, lsl #2
   43896:	db28      	blt.n	438ea <ZFea_ExtractFBank+0x386>
   43898:	009e      	lsls	r6, r3, #2
   4389a:	2700      	movs	r7, #0
   4389c:	6860      	ldr	r0, [r4, #4]
   4389e:	42b8      	cmp	r0, r7
   438a0:	dc54      	bgt.n	4394c <ZFea_ExtractFBank+0x3e8>
   438a2:	2100      	movs	r1, #0
   438a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   438a8:	4288      	cmp	r0, r1
   438aa:	dc78      	bgt.n	4399e <ZFea_ExtractFBank+0x43a>
   438ac:	f04f 0800 	mov.w	r8, #0
   438b0:	6863      	ldr	r3, [r4, #4]
   438b2:	4543      	cmp	r3, r8
   438b4:	f300 80c5 	bgt.w	43a42 <ZFea_ExtractFBank+0x4de>
   438b8:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   438bc:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   438c0:	0092      	lsls	r2, r2, #2
   438c2:	2100      	movs	r1, #0
   438c4:	f7c7 f953 	bl	ab6e <memset>
   438c8:	2500      	movs	r5, #0
   438ca:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
   438ce:	6862      	ldr	r2, [r4, #4]
   438d0:	42aa      	cmp	r2, r5
   438d2:	f300 8189 	bgt.w	43be8 <ZFea_ExtractFBank+0x684>
   438d6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   438da:	1a9b      	subs	r3, r3, r2
   438dc:	60e3      	str	r3, [r4, #12]
   438de:	9b03      	ldr	r3, [sp, #12]
   438e0:	449a      	add	sl, r3
   438e2:	9b00      	ldr	r3, [sp, #0]
   438e4:	3301      	adds	r3, #1
   438e6:	9300      	str	r3, [sp, #0]
   438e8:	e72a      	b.n	43740 <ZFea_ExtractFBank+0x1dc>
   438ea:	ea4f 0886 	mov.w	r8, r6, lsl #2
   438ee:	2700      	movs	r7, #0
   438f0:	6863      	ldr	r3, [r4, #4]
   438f2:	68e0      	ldr	r0, [r4, #12]
   438f4:	42bb      	cmp	r3, r7
   438f6:	dc04      	bgt.n	43902 <ZFea_ExtractFBank+0x39e>
   438f8:	4406      	add	r6, r0
   438fa:	60e6      	str	r6, [r4, #12]
   438fc:	f8dd a004 	ldr.w	sl, [sp, #4]
   43900:	e71e      	b.n	43740 <ZFea_ExtractFBank+0x1dc>
   43902:	6f23      	ldr	r3, [r4, #112]	; 0x70
   43904:	f85b 1027 	ldr.w	r1, [fp, r7, lsl #2]
   43908:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   4390c:	4642      	mov	r2, r8
   4390e:	4429      	add	r1, r5
   43910:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   43914:	f7c7 f903 	bl	ab1e <memcpy>
   43918:	3701      	adds	r7, #1
   4391a:	e7e9      	b.n	438f0 <ZFea_ExtractFBank+0x38c>
   4391c:	00043d78 	.word	0x00043d78
   43920:	45267565 	.word	0x45267565
   43924:	43167d6c 	.word	0x43167d6c
   43928:	467a0000 	.word	0x467a0000
   4392c:	442f0000 	.word	0x442f0000
   43930:	448ce000 	.word	0x448ce000
   43934:	3f7851ec 	.word	0x3f7851ec
   43938:	40c90fdb 	.word	0x40c90fdb
   4393c:	3f59999a 	.word	0x3f59999a
   43940:	00043d92 	.word	0x00043d92
   43944:	358637bd 	.word	0x358637bd
   43948:	00000000 	.word	0x00000000
   4394c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   43950:	68e2      	ldr	r2, [r4, #12]
   43952:	6f21      	ldr	r1, [r4, #112]	; 0x70
   43954:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   43958:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
   4395c:	0092      	lsls	r2, r2, #2
   4395e:	f7c7 f8de 	bl	ab1e <memcpy>
   43962:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   43966:	68e3      	ldr	r3, [r4, #12]
   43968:	f852 0027 	ldr.w	r0, [r2, r7, lsl #2]
   4396c:	f85b 1027 	ldr.w	r1, [fp, r7, lsl #2]
   43970:	4632      	mov	r2, r6
   43972:	4429      	add	r1, r5
   43974:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   43978:	f7c7 f8d1 	bl	ab1e <memcpy>
   4397c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   43980:	6961      	ldr	r1, [r4, #20]
   43982:	6922      	ldr	r2, [r4, #16]
   43984:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
   43988:	6f23      	ldr	r3, [r4, #112]	; 0x70
   4398a:	1a52      	subs	r2, r2, r1
   4398c:	0092      	lsls	r2, r2, #2
   4398e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   43992:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   43996:	f7c7 f8c2 	bl	ab1e <memcpy>
   4399a:	3701      	adds	r7, #1
   4399c:	e77e      	b.n	4389c <ZFea_ExtractFBank+0x338>
   4399e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   439a2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   439a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   439aa:	ed5f 7a19 	vldr	s15, [pc, #-100]	; 43948 <ZFea_ExtractFBank+0x3e4>
   439ae:	0095      	lsls	r5, r2, #2
   439b0:	461e      	mov	r6, r3
   439b2:	461f      	mov	r7, r3
   439b4:	2200      	movs	r2, #0
   439b6:	42aa      	cmp	r2, r5
   439b8:	db21      	blt.n	439fe <ZFea_ExtractFBank+0x49a>
   439ba:	ed94 7a1f 	vldr	s14, [r4, #124]	; 0x7c
   439be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   439c2:	eef1 7a67 	vneg.f32	s15, s15
   439c6:	ee87 6a87 	vdiv.f32	s12, s15, s14
   439ca:	461f      	mov	r7, r3
   439cc:	2200      	movs	r2, #0
   439ce:	42aa      	cmp	r2, r5
   439d0:	db1b      	blt.n	43a0a <ZFea_ExtractFBank+0x4a6>
   439d2:	6922      	ldr	r2, [r4, #16]
   439d4:	1e57      	subs	r7, r2, #1
   439d6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   439da:	2f00      	cmp	r7, #0
   439dc:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
   439e0:	dc1b      	bgt.n	43a1a <ZFea_ExtractFBank+0x4b6>
   439e2:	ed93 7a00 	vldr	s14, [r3]
   439e6:	6d62      	ldr	r2, [r4, #84]	; 0x54
   439e8:	ee76 7ae7 	vsub.f32	s15, s13, s15
   439ec:	ee67 7a27 	vmul.f32	s15, s14, s15
   439f0:	edc3 7a00 	vstr	s15, [r3]
   439f4:	2300      	movs	r3, #0
   439f6:	429d      	cmp	r5, r3
   439f8:	dc19      	bgt.n	43a2e <ZFea_ExtractFBank+0x4ca>
   439fa:	3101      	adds	r1, #1
   439fc:	e754      	b.n	438a8 <ZFea_ExtractFBank+0x344>
   439fe:	ecb7 7a01 	vldmia	r7!, {s14}
   43a02:	3201      	adds	r2, #1
   43a04:	ee77 7a87 	vadd.f32	s15, s15, s14
   43a08:	e7d5      	b.n	439b6 <ZFea_ExtractFBank+0x452>
   43a0a:	edd7 7a00 	vldr	s15, [r7]
   43a0e:	ee76 7a27 	vadd.f32	s15, s12, s15
   43a12:	3201      	adds	r2, #1
   43a14:	ece7 7a01 	vstmia	r7!, {s15}
   43a18:	e7d9      	b.n	439ce <ZFea_ExtractFBank+0x46a>
   43a1a:	ed12 6a02 	vldr	s12, [r2, #-8]
   43a1e:	ed12 7a01 	vldr	s14, [r2, #-4]
   43a22:	eea6 7a67 	vfms.f32	s14, s12, s15
   43a26:	3f01      	subs	r7, #1
   43a28:	ed22 7a01 	vstmdb	r2!, {s14}
   43a2c:	e7d5      	b.n	439da <ZFea_ExtractFBank+0x476>
   43a2e:	edd6 7a00 	vldr	s15, [r6]
   43a32:	ecb2 7a01 	vldmia	r2!, {s14}
   43a36:	ee67 7a87 	vmul.f32	s15, s15, s14
   43a3a:	3301      	adds	r3, #1
   43a3c:	ece6 7a01 	vstmia	r6!, {s15}
   43a40:	e7d9      	b.n	439f6 <ZFea_ExtractFBank+0x492>
   43a42:	f44f 6200 	mov.w	r2, #2048	; 0x800
   43a46:	2100      	movs	r1, #0
   43a48:	48ba      	ldr	r0, [pc, #744]	; (43d34 <ZFea_ExtractFBank+0x7d0>)
   43a4a:	4dbb      	ldr	r5, [pc, #748]	; (43d38 <ZFea_ExtractFBank+0x7d4>)
   43a4c:	f7c7 f88f 	bl	ab6e <memset>
   43a50:	f44f 6200 	mov.w	r2, #2048	; 0x800
   43a54:	2100      	movs	r1, #0
   43a56:	48b8      	ldr	r0, [pc, #736]	; (43d38 <ZFea_ExtractFBank+0x7d4>)
   43a58:	f7c7 f889 	bl	ab6e <memset>
   43a5c:	ea4f 0388 	mov.w	r3, r8, lsl #2
   43a60:	9309      	str	r3, [sp, #36]	; 0x24
   43a62:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   43a64:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   43a68:	48b2      	ldr	r0, [pc, #712]	; (43d34 <ZFea_ExtractFBank+0x7d0>)
   43a6a:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
   43a6e:	0092      	lsls	r2, r2, #2
   43a70:	f7c7 f855 	bl	ab1e <memcpy>
   43a74:	48af      	ldr	r0, [pc, #700]	; (43d34 <ZFea_ExtractFBank+0x7d0>)
   43a76:	2200      	movs	r2, #0
   43a78:	2100      	movs	r1, #0
   43a7a:	4616      	mov	r6, r2
   43a7c:	460b      	mov	r3, r1
   43a7e:	3101      	adds	r1, #1
   43a80:	f006 0701 	and.w	r7, r6, #1
   43a84:	2909      	cmp	r1, #9
   43a86:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   43a8a:	ea4f 0666 	mov.w	r6, r6, asr #1
   43a8e:	d1f6      	bne.n	43a7e <ZFea_ExtractFBank+0x51a>
   43a90:	4293      	cmp	r3, r2
   43a92:	dd0c      	ble.n	43aae <ZFea_ExtractFBank+0x54a>
   43a94:	49a7      	ldr	r1, [pc, #668]	; (43d34 <ZFea_ExtractFBank+0x7d0>)
   43a96:	6806      	ldr	r6, [r0, #0]
   43a98:	009b      	lsls	r3, r3, #2
   43a9a:	4419      	add	r1, r3
   43a9c:	680f      	ldr	r7, [r1, #0]
   43a9e:	6007      	str	r7, [r0, #0]
   43aa0:	600e      	str	r6, [r1, #0]
   43aa2:	4ea5      	ldr	r6, [pc, #660]	; (43d38 <ZFea_ExtractFBank+0x7d4>)
   43aa4:	6829      	ldr	r1, [r5, #0]
   43aa6:	4433      	add	r3, r6
   43aa8:	681e      	ldr	r6, [r3, #0]
   43aaa:	602e      	str	r6, [r5, #0]
   43aac:	6019      	str	r1, [r3, #0]
   43aae:	3201      	adds	r2, #1
   43ab0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   43ab4:	f100 0004 	add.w	r0, r0, #4
   43ab8:	f105 0504 	add.w	r5, r5, #4
   43abc:	d1dc      	bne.n	43a78 <ZFea_ExtractFBank+0x514>
   43abe:	499f      	ldr	r1, [pc, #636]	; (43d3c <ZFea_ExtractFBank+0x7d8>)
   43ac0:	eddf 6a9f 	vldr	s13, [pc, #636]	; 43d40 <ZFea_ExtractFBank+0x7dc>
   43ac4:	eddf 5a9f 	vldr	s11, [pc, #636]	; 43d44 <ZFea_ExtractFBank+0x7e0>
   43ac8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   43acc:	600b      	str	r3, [r1, #0]
   43ace:	4b9e      	ldr	r3, [pc, #632]	; (43d48 <ZFea_ExtractFBank+0x7e4>)
   43ad0:	2200      	movs	r2, #0
   43ad2:	601a      	str	r2, [r3, #0]
   43ad4:	22ff      	movs	r2, #255	; 0xff
   43ad6:	edd3 7a00 	vldr	s15, [r3]
   43ada:	ed91 6a00 	vldr	s12, [r1]
   43ade:	ee26 7ae7 	vnmul.f32	s14, s13, s15
   43ae2:	ee67 7aa5 	vmul.f32	s15, s15, s11
   43ae6:	eea6 7a25 	vfma.f32	s14, s12, s11
   43aea:	3a01      	subs	r2, #1
   43aec:	eee6 7a26 	vfma.f32	s15, s12, s13
   43af0:	ee17 0a10 	vmov	r0, s14
   43af4:	f841 0f04 	str.w	r0, [r1, #4]!
   43af8:	ee17 0a90 	vmov	r0, s15
   43afc:	f843 0f04 	str.w	r0, [r3, #4]!
   43b00:	d1e9      	bne.n	43ad6 <ZFea_ExtractFBank+0x572>
   43b02:	2309      	movs	r3, #9
   43b04:	9306      	str	r3, [sp, #24]
   43b06:	2102      	movs	r1, #2
   43b08:	104b      	asrs	r3, r1, #1
   43b0a:	9308      	str	r3, [sp, #32]
   43b0c:	008b      	lsls	r3, r1, #2
   43b0e:	9305      	str	r3, [sp, #20]
   43b10:	104b      	asrs	r3, r1, #1
   43b12:	009b      	lsls	r3, r3, #2
   43b14:	9307      	str	r3, [sp, #28]
   43b16:	2300      	movs	r3, #0
   43b18:	4d87      	ldr	r5, [pc, #540]	; (43d38 <ZFea_ExtractFBank+0x7d4>)
   43b1a:	4886      	ldr	r0, [pc, #536]	; (43d34 <ZFea_ExtractFBank+0x7d0>)
   43b1c:	9304      	str	r3, [sp, #16]
   43b1e:	e03d      	b.n	43b9c <ZFea_ExtractFBank+0x638>
   43b20:	4f86      	ldr	r7, [pc, #536]	; (43d3c <ZFea_ExtractFBank+0x7d8>)
   43b22:	edd9 7a00 	vldr	s15, [r9]
   43b26:	0273      	lsls	r3, r6, #9
   43b28:	fbb3 f3f1 	udiv	r3, r3, r1
   43b2c:	009b      	lsls	r3, r3, #2
   43b2e:	441f      	add	r7, r3
   43b30:	edd7 5a00 	vldr	s11, [r7]
   43b34:	4f84      	ldr	r7, [pc, #528]	; (43d48 <ZFea_ExtractFBank+0x7e4>)
   43b36:	443b      	add	r3, r7
   43b38:	ed93 5a00 	vldr	s10, [r3]
   43b3c:	9b02      	ldr	r3, [sp, #8]
   43b3e:	ed93 7a00 	vldr	s14, [r3]
   43b42:	ee67 6a45 	vnmul.f32	s13, s14, s10
   43b46:	3601      	adds	r6, #1
   43b48:	eee5 6aa7 	vfma.f32	s13, s11, s15
   43b4c:	ee67 7a85 	vmul.f32	s15, s15, s10
   43b50:	eeb0 6a66 	vmov.f32	s12, s13
   43b54:	eee5 7a87 	vfma.f32	s15, s11, s14
   43b58:	edde 6a00 	vldr	s13, [lr]
   43b5c:	ed9c 7a00 	vldr	s14, [ip]
   43b60:	ee76 5a26 	vadd.f32	s11, s12, s13
   43b64:	ee76 6ac6 	vsub.f32	s13, s13, s12
   43b68:	ecee 5a01 	vstmia	lr!, {s11}
   43b6c:	ee77 5a87 	vadd.f32	s11, s15, s14
   43b70:	ee77 7a67 	vsub.f32	s15, s14, s15
   43b74:	ecec 5a01 	vstmia	ip!, {s11}
   43b78:	ece3 7a01 	vstmia	r3!, {s15}
   43b7c:	9302      	str	r3, [sp, #8]
   43b7e:	9b08      	ldr	r3, [sp, #32]
   43b80:	ece9 6a01 	vstmia	r9!, {s13}
   43b84:	42b3      	cmp	r3, r6
   43b86:	d1cb      	bne.n	43b20 <ZFea_ExtractFBank+0x5bc>
   43b88:	9b04      	ldr	r3, [sp, #16]
   43b8a:	440b      	add	r3, r1
   43b8c:	9304      	str	r3, [sp, #16]
   43b8e:	9b05      	ldr	r3, [sp, #20]
   43b90:	4418      	add	r0, r3
   43b92:	441d      	add	r5, r3
   43b94:	9b04      	ldr	r3, [sp, #16]
   43b96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   43b9a:	da08      	bge.n	43bae <ZFea_ExtractFBank+0x64a>
   43b9c:	9b07      	ldr	r3, [sp, #28]
   43b9e:	eb00 0903 	add.w	r9, r0, r3
   43ba2:	18eb      	adds	r3, r5, r3
   43ba4:	9302      	str	r3, [sp, #8]
   43ba6:	4686      	mov	lr, r0
   43ba8:	46ac      	mov	ip, r5
   43baa:	2600      	movs	r6, #0
   43bac:	e7b8      	b.n	43b20 <ZFea_ExtractFBank+0x5bc>
   43bae:	9b06      	ldr	r3, [sp, #24]
   43bb0:	3b01      	subs	r3, #1
   43bb2:	ea4f 0141 	mov.w	r1, r1, lsl #1
   43bb6:	9306      	str	r3, [sp, #24]
   43bb8:	d1a6      	bne.n	43b08 <ZFea_ExtractFBank+0x5a4>
   43bba:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   43bbe:	4863      	ldr	r0, [pc, #396]	; (43d4c <ZFea_ExtractFBank+0x7e8>)
   43bc0:	4b63      	ldr	r3, [pc, #396]	; (43d50 <ZFea_ExtractFBank+0x7ec>)
   43bc2:	42aa      	cmp	r2, r5
   43bc4:	db02      	blt.n	43bcc <ZFea_ExtractFBank+0x668>
   43bc6:	f108 0801 	add.w	r8, r8, #1
   43bca:	e671      	b.n	438b0 <ZFea_ExtractFBank+0x34c>
   43bcc:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
   43bd0:	9e09      	ldr	r6, [sp, #36]	; 0x24
   43bd2:	5989      	ldr	r1, [r1, r6]
   43bd4:	f850 6b04 	ldr.w	r6, [r0], #4
   43bd8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
   43bdc:	3201      	adds	r2, #1
   43bde:	600e      	str	r6, [r1, #0]
   43be0:	f853 6b04 	ldr.w	r6, [r3], #4
   43be4:	604e      	str	r6, [r1, #4]
   43be6:	e7ec      	b.n	43bc2 <ZFea_ExtractFBank+0x65e>
   43be8:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   43bec:	f8d4 e0c0 	ldr.w	lr, [r4, #192]	; 0xc0
   43bf0:	436b      	muls	r3, r5
   43bf2:	fb93 f3f2 	sdiv	r3, r3, r2
   43bf6:	9a00      	ldr	r2, [sp, #0]
   43bf8:	4413      	add	r3, r2
   43bfa:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
   43bfe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   43c02:	68a3      	ldr	r3, [r4, #8]
   43c04:	2b00      	cmp	r3, #0
   43c06:	bfb8      	it	lt
   43c08:	3307      	addlt	r3, #7
   43c0a:	10db      	asrs	r3, r3, #3
   43c0c:	0099      	lsls	r1, r3, #2
   43c0e:	4670      	mov	r0, lr
   43c10:	4676      	mov	r6, lr
   43c12:	2300      	movs	r3, #0
   43c14:	428b      	cmp	r3, r1
   43c16:	db19      	blt.n	43c4c <ZFea_ExtractFBank+0x6e8>
   43c18:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   43c1c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   43c20:	2600      	movs	r6, #0
   43c22:	428e      	cmp	r6, r1
   43c24:	f103 0308 	add.w	r3, r3, #8
   43c28:	db14      	blt.n	43c54 <ZFea_ExtractFBank+0x6f0>
   43c2a:	69e7      	ldr	r7, [r4, #28]
   43c2c:	1f11      	subs	r1, r2, #4
   43c2e:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
   43c32:	2300      	movs	r3, #0
   43c34:	3f02      	subs	r7, #2
   43c36:	4543      	cmp	r3, r8
   43c38:	db1c      	blt.n	43c74 <ZFea_ExtractFBank+0x710>
   43c3a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   43c3e:	4690      	mov	r8, r2
   43c40:	009f      	lsls	r7, r3, #2
   43c42:	2600      	movs	r6, #0
   43c44:	42be      	cmp	r6, r7
   43c46:	db47      	blt.n	43cd8 <ZFea_ExtractFBank+0x774>
   43c48:	3501      	adds	r5, #1
   43c4a:	e640      	b.n	438ce <ZFea_ExtractFBank+0x36a>
   43c4c:	eca6 8a01 	vstmia	r6!, {s16}
   43c50:	3301      	adds	r3, #1
   43c52:	e7df      	b.n	43c14 <ZFea_ExtractFBank+0x6b0>
   43c54:	ed53 7a01 	vldr	s15, [r3, #-4]
   43c58:	ed13 7a02 	vldr	s14, [r3, #-8]
   43c5c:	edd0 6a00 	vldr	s13, [r0]
   43c60:	ee67 7aa7 	vmul.f32	s15, s15, s15
   43c64:	3601      	adds	r6, #1
   43c66:	eee7 7a07 	vfma.f32	s15, s14, s14
   43c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
   43c6e:	ece0 7a01 	vstmia	r0!, {s15}
   43c72:	e7d6      	b.n	43c22 <ZFea_ExtractFBank+0x6be>
   43c74:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   43c76:	eddf 7a37 	vldr	s15, [pc, #220]	; 43d54 <ZFea_ExtractFBank+0x7f0>
   43c7a:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
   43c7e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   43c82:	2e01      	cmp	r6, #1
   43c84:	bfb8      	it	lt
   43c86:	2601      	movlt	r6, #1
   43c88:	6840      	ldr	r0, [r0, #4]
   43c8a:	9002      	str	r0, [sp, #8]
   43c8c:	eb06 0c09 	add.w	ip, r6, r9
   43c90:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
   43c94:	eeb0 7a67 	vmov.f32	s14, s15
   43c98:	9802      	ldr	r0, [sp, #8]
   43c9a:	4286      	cmp	r6, r0
   43c9c:	db0f      	blt.n	43cbe <ZFea_ExtractFBank+0x75a>
   43c9e:	42bb      	cmp	r3, r7
   43ca0:	bfbc      	itt	lt
   43ca2:	ee77 7ac7 	vsublt.f32	s15, s15, s14
   43ca6:	edc1 7a01 	vstrlt	s15, [r1, #4]
   43caa:	b12b      	cbz	r3, 43cb8 <ZFea_ExtractFBank+0x754>
   43cac:	edd1 7a00 	vldr	s15, [r1]
   43cb0:	ee37 7a87 	vadd.f32	s14, s15, s14
   43cb4:	ed81 7a00 	vstr	s14, [r1]
   43cb8:	3301      	adds	r3, #1
   43cba:	3104      	adds	r1, #4
   43cbc:	e7bb      	b.n	43c36 <ZFea_ExtractFBank+0x6d2>
   43cbe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   43cc0:	ecfc 6a01 	vldmia	ip!, {s13}
   43cc4:	eb00 0086 	add.w	r0, r0, r6, lsl #2
   43cc8:	ed90 6a00 	vldr	s12, [r0]
   43ccc:	ee77 7aa6 	vadd.f32	s15, s15, s13
   43cd0:	eea6 7a86 	vfma.f32	s14, s13, s12
   43cd4:	3601      	adds	r6, #1
   43cd6:	e7df      	b.n	43c98 <ZFea_ExtractFBank+0x734>
   43cd8:	f8d8 0000 	ldr.w	r0, [r8]
   43cdc:	f7c3 ff58 	bl	7b90 <logf>
   43ce0:	3601      	adds	r6, #1
   43ce2:	f848 0b04 	str.w	r0, [r8], #4
   43ce6:	e7ad      	b.n	43c44 <ZFea_ExtractFBank+0x6e0>
   43ce8:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
   43cec:	4293      	cmp	r3, r2
   43cee:	f43f ad35 	beq.w	4375c <ZFea_ExtractFBank+0x1f8>
   43cf2:	4819      	ldr	r0, [pc, #100]	; (43d58 <ZFea_ExtractFBank+0x7f4>)
   43cf4:	f7c7 f85a 	bl	adac <puts>
   43cf8:	e530      	b.n	4375c <ZFea_ExtractFBank+0x1f8>
   43cfa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   43cfc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   43d00:	3101      	adds	r1, #1
   43d02:	eb02 0083 	add.w	r0, r2, r3, lsl #2
   43d06:	d101      	bne.n	43d0c <ZFea_ExtractFBank+0x7a8>
   43d08:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
   43d0c:	ee77 7a67 	vsub.f32	s15, s14, s15
   43d10:	ee37 7a66 	vsub.f32	s14, s14, s13
   43d14:	68a3      	ldr	r3, [r4, #8]
   43d16:	eec7 6a87 	vdiv.f32	s13, s15, s14
   43d1a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   43d1e:	ebb5 0f63 	cmp.w	r5, r3, asr #1
   43d22:	bfbc      	itt	lt
   43d24:	1c6b      	addlt	r3, r5, #1
   43d26:	6043      	strlt	r3, [r0, #4]
   43d28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   43d2a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   43d2e:	edc3 6a00 	vstr	s13, [r3]
   43d32:	e556      	b.n	437e2 <ZFea_ExtractFBank+0x27e>
   43d34:	00041a1c 	.word	0x00041a1c
   43d38:	00041218 	.word	0x00041218
   43d3c:	0004261c 	.word	0x0004261c
   43d40:	bc490e90 	.word	0xbc490e90
   43d44:	3f7ffb11 	.word	0x3f7ffb11
   43d48:	0004221c 	.word	0x0004221c
   43d4c:	00041a20 	.word	0x00041a20
   43d50:	0004121c 	.word	0x0004121c
   43d54:	00000000 	.word	0x00000000
   43d58:	00043da4 	.word	0x00043da4

00043d5c <ZFea_creat>:
   43d5c:	b508      	push	{r3, lr}
   43d5e:	f240 22ef 	movw	r2, #751	; 0x2ef
   43d62:	4904      	ldr	r1, [pc, #16]	; (43d74 <ZFea_creat+0x18>)
   43d64:	20f8      	movs	r0, #248	; 0xf8
   43d66:	f018 fa71 	bl	5c24c <safe_malloc>
   43d6a:	22f8      	movs	r2, #248	; 0xf8
   43d6c:	2100      	movs	r1, #0
   43d6e:	f7c6 fefe 	bl	ab6e <memset>
   43d72:	bd08      	pop	{r3, pc}
   43d74:	00043daa 	.word	0x00043daa
   43d78:	6f727265 	.word	0x6f727265
   43d7c:	4d702072 	.word	0x4d702072
   43d80:	6f506c65 	.word	0x6f506c65
   43d84:	733e2d73 	.word	0x733e2d73
   43d88:	20657a69 	.word	0x20657a69
   43d8c:	3436203e 	.word	0x3436203e
   43d90:	72450020 	.word	0x72450020
   43d94:	20726f72 	.word	0x20726f72
   43d98:	74614d5a 	.word	0x74614d5a
   43d9c:	65657246 	.word	0x65657246
   43da0:	006d654d 	.word	0x006d654d
   43da4:	6f727265 	.word	0x6f727265
   43da8:	0072      	.short	0x0072
   43daa:	2e2e      	.short	0x2e2e
   43dac:	6165665c 	.word	0x6165665c
   43db0:	6165665c 	.word	0x6165665c
   43db4:	0000632e 	.word	0x0000632e

00043db8 <kws_create>:
   43db8:	f000 b840 	b.w	43e3c <kws_impl_create>

00043dbc <kws_status>:
   43dbc:	f000 b8fc 	b.w	43fb8 <kws_impl_status>

00043dc0 <softmax>:
   43dc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   43dc4:	460c      	mov	r4, r1
   43dc6:	4617      	mov	r7, r2
   43dc8:	4606      	mov	r6, r0
   43dca:	4683      	mov	fp, r0
   43dcc:	f04f 0a00 	mov.w	sl, #0
   43dd0:	2500      	movs	r5, #0
   43dd2:	45ba      	cmp	sl, r7
   43dd4:	db05      	blt.n	43de2 <softmax+0x22>
   43dd6:	f04f 0a00 	mov.w	sl, #0
   43dda:	45ba      	cmp	sl, r7
   43ddc:	db16      	blt.n	43e0c <softmax+0x4c>
   43dde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43de2:	f85b 0b04 	ldr.w	r0, [fp], #4
   43de6:	f7c6 f817 	bl	9e18 <__aeabi_f2d>
   43dea:	f7c3 fe51 	bl	7a90 <exp>
   43dee:	4680      	mov	r8, r0
   43df0:	4689      	mov	r9, r1
   43df2:	4628      	mov	r0, r5
   43df4:	f7c6 f810 	bl	9e18 <__aeabi_f2d>
   43df8:	4642      	mov	r2, r8
   43dfa:	464b      	mov	r3, r9
   43dfc:	f7c5 feae 	bl	9b5c <__adddf3>
   43e00:	f7c6 fb24 	bl	a44c <__aeabi_d2f>
   43e04:	f10a 0a01 	add.w	sl, sl, #1
   43e08:	4605      	mov	r5, r0
   43e0a:	e7e2      	b.n	43dd2 <softmax+0x12>
   43e0c:	f856 0b04 	ldr.w	r0, [r6], #4
   43e10:	f7c6 f802 	bl	9e18 <__aeabi_f2d>
   43e14:	f7c3 fe3c 	bl	7a90 <exp>
   43e18:	4680      	mov	r8, r0
   43e1a:	4628      	mov	r0, r5
   43e1c:	4689      	mov	r9, r1
   43e1e:	f7c5 fffb 	bl	9e18 <__aeabi_f2d>
   43e22:	4602      	mov	r2, r0
   43e24:	460b      	mov	r3, r1
   43e26:	4640      	mov	r0, r8
   43e28:	4649      	mov	r1, r9
   43e2a:	f7c6 f977 	bl	a11c <__aeabi_ddiv>
   43e2e:	f7c6 fb0d 	bl	a44c <__aeabi_d2f>
   43e32:	f10a 0a01 	add.w	sl, sl, #1
   43e36:	f844 0b04 	str.w	r0, [r4], #4
   43e3a:	e7ce      	b.n	43dda <softmax+0x1a>

00043e3c <kws_impl_create>:
   43e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   43e40:	4e2f      	ldr	r6, [pc, #188]	; (43f00 <kws_impl_create+0xc4>)
   43e42:	b087      	sub	sp, #28
   43e44:	4615      	mov	r5, r2
   43e46:	4680      	mov	r8, r0
   43e48:	4689      	mov	r9, r1
   43e4a:	2221      	movs	r2, #33	; 0x21
   43e4c:	4631      	mov	r1, r6
   43e4e:	20d0      	movs	r0, #208	; 0xd0
   43e50:	461f      	mov	r7, r3
   43e52:	f018 f9fb 	bl	5c24c <safe_malloc>
   43e56:	2327      	movs	r3, #39	; 0x27
   43e58:	e9cd 6301 	strd	r6, r3, [sp, #4]
   43e5c:	2300      	movs	r3, #0
   43e5e:	4604      	mov	r4, r0
   43e60:	2228      	movs	r2, #40	; 0x28
   43e62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   43e66:	9300      	str	r3, [sp, #0]
   43e68:	4648      	mov	r0, r9
   43e6a:	2301      	movs	r3, #1
   43e6c:	f018 f9b9 	bl	5c1e2 <tensor_new_wo_malloc>
   43e70:	6020      	str	r0, [r4, #0]
   43e72:	4640      	mov	r0, r8
   43e74:	f000 f966 	bl	44144 <load_model>
   43e78:	462a      	mov	r2, r5
   43e7a:	6060      	str	r0, [r4, #4]
   43e7c:	f104 0308 	add.w	r3, r4, #8
   43e80:	f105 000c 	add.w	r0, r5, #12
   43e84:	2100      	movs	r1, #0
   43e86:	f852 5b04 	ldr.w	r5, [r2], #4
   43e8a:	f843 5b04 	str.w	r5, [r3], #4
   43e8e:	4290      	cmp	r0, r2
   43e90:	6499      	str	r1, [r3, #72]	; 0x48
   43e92:	6559      	str	r1, [r3, #84]	; 0x54
   43e94:	6619      	str	r1, [r3, #96]	; 0x60
   43e96:	66d9      	str	r1, [r3, #108]	; 0x6c
   43e98:	6799      	str	r1, [r3, #120]	; 0x78
   43e9a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
   43e9e:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
   43ea2:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
   43ea6:	d1ee      	bne.n	43e86 <kws_impl_create+0x4a>
   43ea8:	2300      	movs	r3, #0
   43eaa:	f06f 0262 	mvn.w	r2, #98	; 0x62
   43eae:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
   43eb2:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
   43eb6:	f06f 0361 	mvn.w	r3, #97	; 0x61
   43eba:	e9c4 2331 	strd	r2, r3, [r4, #196]	; 0xc4
   43ebe:	f8c4 70bc 	str.w	r7, [r4, #188]	; 0xbc
   43ec2:	f7ff ff4b 	bl	43d5c <ZFea_creat>
   43ec6:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
   43eca:	68a0      	ldr	r0, [r4, #8]
   43ecc:	f7c5 ffa4 	bl	9e18 <__aeabi_f2d>
   43ed0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   43ed4:	9304      	str	r3, [sp, #16]
   43ed6:	4606      	mov	r6, r0
   43ed8:	6920      	ldr	r0, [r4, #16]
   43eda:	460f      	mov	r7, r1
   43edc:	f7c5 ff9c 	bl	9e18 <__aeabi_f2d>
   43ee0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   43ee4:	68e0      	ldr	r0, [r4, #12]
   43ee6:	f7c5 ff97 	bl	9e18 <__aeabi_f2d>
   43eea:	4632      	mov	r2, r6
   43eec:	e9cd 0100 	strd	r0, r1, [sp]
   43ef0:	463b      	mov	r3, r7
   43ef2:	4804      	ldr	r0, [pc, #16]	; (43f04 <kws_impl_create+0xc8>)
   43ef4:	f7bf fbc4 	bl	3680 <printf>
   43ef8:	4620      	mov	r0, r4
   43efa:	b007      	add	sp, #28
   43efc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   43f00:	000440a4 	.word	0x000440a4
   43f04:	000440b6 	.word	0x000440b6

00043f08 <kws_impl_score>:
   43f08:	b5f0      	push	{r4, r5, r6, r7, lr}
   43f0a:	b085      	sub	sp, #20
   43f0c:	2300      	movs	r3, #0
   43f0e:	4604      	mov	r4, r0
   43f10:	9303      	str	r3, [sp, #12]
   43f12:	6800      	ldr	r0, [r0, #0]
   43f14:	ab03      	add	r3, sp, #12
   43f16:	9300      	str	r3, [sp, #0]
   43f18:	4613      	mov	r3, r2
   43f1a:	6802      	ldr	r2, [r0, #0]
   43f1c:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   43f20:	f7ff fb20 	bl	43564 <ZFea_ExtractFBank>
   43f24:	9903      	ldr	r1, [sp, #12]
   43f26:	6822      	ldr	r2, [r4, #0]
   43f28:	680b      	ldr	r3, [r1, #0]
   43f2a:	6949      	ldr	r1, [r1, #20]
   43f2c:	6810      	ldr	r0, [r2, #0]
   43f2e:	6809      	ldr	r1, [r1, #0]
   43f30:	fb93 f3f0 	sdiv	r3, r3, r0
   43f34:	6151      	str	r1, [r2, #20]
   43f36:	6053      	str	r3, [r2, #4]
   43f38:	b91b      	cbnz	r3, 43f42 <kws_impl_score+0x3a>
   43f3a:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
   43f3e:	b005      	add	sp, #20
   43f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
   43f42:	6863      	ldr	r3, [r4, #4]
   43f44:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
   43f48:	f018 f8a2 	bl	5c090 <mcu_network_forward>
   43f4c:	6843      	ldr	r3, [r0, #4]
   43f4e:	4606      	mov	r6, r0
   43f50:	2b00      	cmp	r3, #0
   43f52:	d0f2      	beq.n	43f3a <kws_impl_score+0x32>
   43f54:	68c1      	ldr	r1, [r0, #12]
   43f56:	6803      	ldr	r3, [r0, #0]
   43f58:	434b      	muls	r3, r1
   43f5a:	6881      	ldr	r1, [r0, #8]
   43f5c:	4359      	muls	r1, r3
   43f5e:	2900      	cmp	r1, #0
   43f60:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
   43f64:	dd1e      	ble.n	43fa4 <kws_impl_score+0x9c>
   43f66:	6823      	ldr	r3, [r4, #0]
   43f68:	681b      	ldr	r3, [r3, #0]
   43f6a:	005b      	lsls	r3, r3, #1
   43f6c:	fb91 f5f3 	sdiv	r5, r1, r3
   43f70:	fb03 1515 	mls	r5, r3, r5, r1
   43f74:	b9bd      	cbnz	r5, 43fa6 <kws_impl_score+0x9e>
   43f76:	f104 0714 	add.w	r7, r4, #20
   43f7a:	6823      	ldr	r3, [r4, #0]
   43f7c:	681b      	ldr	r3, [r3, #0]
   43f7e:	42ab      	cmp	r3, r5
   43f80:	dddd      	ble.n	43f3e <kws_impl_score+0x36>
   43f82:	6870      	ldr	r0, [r6, #4]
   43f84:	fb00 f305 	mul.w	r3, r0, r5
   43f88:	68f0      	ldr	r0, [r6, #12]
   43f8a:	4343      	muls	r3, r0
   43f8c:	68b0      	ldr	r0, [r6, #8]
   43f8e:	4358      	muls	r0, r3
   43f90:	6973      	ldr	r3, [r6, #20]
   43f92:	4639      	mov	r1, r7
   43f94:	2202      	movs	r2, #2
   43f96:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   43f9a:	f7ff ff11 	bl	43dc0 <softmax>
   43f9e:	3501      	adds	r5, #1
   43fa0:	3708      	adds	r7, #8
   43fa2:	e7ea      	b.n	43f7a <kws_impl_score+0x72>
   43fa4:	d0cb      	beq.n	43f3e <kws_impl_score+0x36>
   43fa6:	6823      	ldr	r3, [r4, #0]
   43fa8:	4802      	ldr	r0, [pc, #8]	; (43fb4 <kws_impl_score+0xac>)
   43faa:	681a      	ldr	r2, [r3, #0]
   43fac:	f7bf fb68 	bl	3680 <printf>
   43fb0:	e7c5      	b.n	43f3e <kws_impl_score+0x36>
   43fb2:	bf00      	nop
   43fb4:	000440ed 	.word	0x000440ed

00043fb8 <kws_impl_status>:
   43fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   43fba:	4604      	mov	r4, r0
   43fbc:	461e      	mov	r6, r3
   43fbe:	f7ff ffa3 	bl	43f08 <kws_impl_score>
   43fc2:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   43fc6:	2900      	cmp	r1, #0
   43fc8:	dd59      	ble.n	4407e <kws_impl_status+0xc6>
   43fca:	6827      	ldr	r7, [r4, #0]
   43fcc:	683a      	ldr	r2, [r7, #0]
   43fce:	0050      	lsls	r0, r2, #1
   43fd0:	fb91 f2f0 	sdiv	r2, r1, r0
   43fd4:	fb00 1212 	mls	r2, r0, r2, r1
   43fd8:	2a00      	cmp	r2, #0
   43fda:	d151      	bne.n	44080 <kws_impl_status+0xc8>
   43fdc:	4621      	mov	r1, r4
   43fde:	4623      	mov	r3, r4
   43fe0:	4615      	mov	r5, r2
   43fe2:	f04f 0c01 	mov.w	ip, #1
   43fe6:	6838      	ldr	r0, [r7, #0]
   43fe8:	4290      	cmp	r0, r2
   43fea:	dc1b      	bgt.n	44024 <kws_impl_status+0x6c>
   43fec:	2d00      	cmp	r5, #0
   43fee:	d04a      	beq.n	44086 <kws_impl_status+0xce>
   43ff0:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
   43ff4:	2b00      	cmp	r3, #0
   43ff6:	d150      	bne.n	4409a <kws_impl_status+0xe2>
   43ff8:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   43ffc:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   44000:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   44004:	1ac0      	subs	r0, r0, r3
   44006:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   4400a:	4298      	cmp	r0, r3
   4400c:	bfd4      	ite	le
   4400e:	2000      	movle	r0, #0
   44010:	2001      	movgt	r0, #1
   44012:	462b      	mov	r3, r5
   44014:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
   44018:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   4401c:	3301      	adds	r3, #1
   4401e:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
   44022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   44024:	edd3 7a06 	vldr	s15, [r3, #24]
   44028:	edd1 6a16 	vldr	s13, [r1, #88]	; 0x58
   4402c:	edc1 7a15 	vstr	s15, [r1, #84]	; 0x54
   44030:	ed94 7a02 	vldr	s14, [r4, #8]
   44034:	eef4 7ac7 	vcmpe.f32	s15, s14
   44038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   4403c:	da13      	bge.n	44066 <kws_impl_status+0xae>
   4403e:	ee27 7aa6 	vmul.f32	s14, s15, s13
   44042:	ed94 6a03 	vldr	s12, [r4, #12]
   44046:	eeb4 7ac6 	vcmpe.f32	s14, s12
   4404a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   4404e:	da0a      	bge.n	44066 <kws_impl_status+0xae>
   44050:	ed91 6a17 	vldr	s12, [r1, #92]	; 0x5c
   44054:	ee27 7a06 	vmul.f32	s14, s14, s12
   44058:	ed94 6a04 	vldr	s12, [r4, #16]
   4405c:	eeb4 7ac6 	vcmpe.f32	s14, s12
   44060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   44064:	db03      	blt.n	4406e <kws_impl_status+0xb6>
   44066:	b10e      	cbz	r6, 4406c <kws_impl_status+0xb4>
   44068:	f846 c022 	str.w	ip, [r6, r2, lsl #2]
   4406c:	2501      	movs	r5, #1
   4406e:	edc1 6a17 	vstr	s13, [r1, #92]	; 0x5c
   44072:	edc1 7a16 	vstr	s15, [r1, #88]	; 0x58
   44076:	3201      	adds	r2, #1
   44078:	310c      	adds	r1, #12
   4407a:	3308      	adds	r3, #8
   4407c:	e7b3      	b.n	43fe6 <kws_impl_status+0x2e>
   4407e:	d002      	beq.n	44086 <kws_impl_status+0xce>
   44080:	4807      	ldr	r0, [pc, #28]	; (440a0 <kws_impl_status+0xe8>)
   44082:	f7bf fafd 	bl	3680 <printf>
   44086:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
   4408a:	b123      	cbz	r3, 44096 <kws_impl_status+0xde>
   4408c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   44090:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
   44094:	2300      	movs	r3, #0
   44096:	4618      	mov	r0, r3
   44098:	e7bc      	b.n	44014 <kws_impl_status+0x5c>
   4409a:	2000      	movs	r0, #0
   4409c:	e7ba      	b.n	44014 <kws_impl_status+0x5c>
   4409e:	bf00      	nop
   440a0:	0004411a 	.word	0x0004411a
   440a4:	6b5c2e2e 	.word	0x6b5c2e2e
   440a8:	6b5c7377 	.word	0x6b5c7377
   440ac:	695f7377 	.word	0x695f7377
   440b0:	2e6c706d 	.word	0x2e6c706d
   440b4:	776b0063 	.word	0x776b0063
   440b8:	6d695f73 	.word	0x6d695f73
   440bc:	635f6c70 	.word	0x635f6c70
   440c0:	74616572 	.word	0x74616572
   440c4:	68742065 	.word	0x68742065
   440c8:	68736572 	.word	0x68736572
   440cc:	73646c6f 	.word	0x73646c6f
   440d0:	20662520 	.word	0x20662520
   440d4:	25206625 	.word	0x25206625
   440d8:	696d2066 	.word	0x696d2066
   440dc:	63615f6e 	.word	0x63615f6e
   440e0:	65766974 	.word	0x65766974
   440e4:	7061675f 	.word	0x7061675f
   440e8:	0a642520 	.word	0x0a642520
   440ec:	00          	.byte	0x00
   440ed:	75          	.byte	0x75
   440ee:	656e      	.short	0x656e
   440f0:	63657078 	.word	0x63657078
   440f4:	20646574 	.word	0x20646574
   440f8:	7074756f 	.word	0x7074756f
   440fc:	6c207475 	.word	0x6c207475
   44100:	73206e65 	.word	0x73206e65
   44104:	65726f63 	.word	0x65726f63
   44108:	656c5f73 	.word	0x656c5f73
   4410c:	6874676e 	.word	0x6874676e
   44110:	20642520 	.word	0x20642520
   44114:	6425206e 	.word	0x6425206e
   44118:	000a      	.short	0x000a
   4411a:	6e75      	.short	0x6e75
   4411c:	65707865 	.word	0x65707865
   44120:	64657463 	.word	0x64657463
   44124:	74756f20 	.word	0x74756f20
   44128:	20747570 	.word	0x20747570
   4412c:	206e656c 	.word	0x206e656c
   44130:	726f6373 	.word	0x726f6373
   44134:	6c5f7365 	.word	0x6c5f7365
   44138:	74676e65 	.word	0x74676e65
   4413c:	64252068 	.word	0x64252068
   44140:	0000000a 	.word	0x0000000a

00044144 <load_model>:
   44144:	4a74      	ldr	r2, [pc, #464]	; (44318 <load_model+0x1d4>)
   44146:	4875      	ldr	r0, [pc, #468]	; (4431c <load_model+0x1d8>)
   44148:	b5f0      	push	{r4, r5, r6, r7, lr}
   4414a:	2100      	movs	r1, #0
   4414c:	4613      	mov	r3, r2
   4414e:	4605      	mov	r5, r0
   44150:	3101      	adds	r1, #1
   44152:	2919      	cmp	r1, #25
   44154:	f840 2b04 	str.w	r2, [r0], #4
   44158:	f102 0210 	add.w	r2, r2, #16
   4415c:	d1f8      	bne.n	44150 <load_model+0xc>
   4415e:	4a70      	ldr	r2, [pc, #448]	; (44320 <load_model+0x1dc>)
   44160:	601a      	str	r2, [r3, #0]
   44162:	2004      	movs	r0, #4
   44164:	2200      	movs	r2, #0
   44166:	e9c3 0201 	strd	r0, r2, [r3, #4]
   4416a:	60da      	str	r2, [r3, #12]
   4416c:	4a6d      	ldr	r2, [pc, #436]	; (44324 <load_model+0x1e0>)
   4416e:	611a      	str	r2, [r3, #16]
   44170:	4a6d      	ldr	r2, [pc, #436]	; (44328 <load_model+0x1e4>)
   44172:	4e6e      	ldr	r6, [pc, #440]	; (4432c <load_model+0x1e8>)
   44174:	4f6e      	ldr	r7, [pc, #440]	; (44330 <load_model+0x1ec>)
   44176:	61dd      	str	r5, [r3, #28]
   44178:	e9c3 2008 	strd	r2, r0, [r3, #32]
   4417c:	4a6d      	ldr	r2, [pc, #436]	; (44334 <load_model+0x1f0>)
   4417e:	62da      	str	r2, [r3, #44]	; 0x2c
   44180:	2406      	movs	r4, #6
   44182:	e9c3 640c 	strd	r6, r4, [r3, #48]	; 0x30
   44186:	1816      	adds	r6, r2, r0
   44188:	63de      	str	r6, [r3, #60]	; 0x3c
   4418a:	4e6b      	ldr	r6, [pc, #428]	; (44338 <load_model+0x1f4>)
   4418c:	e9c3 6010 	strd	r6, r0, [r3, #64]	; 0x40
   44190:	f102 0608 	add.w	r6, r2, #8
   44194:	64de      	str	r6, [r3, #76]	; 0x4c
   44196:	4e69      	ldr	r6, [pc, #420]	; (4433c <load_model+0x1f8>)
   44198:	e9c3 6414 	strd	r6, r4, [r3, #80]	; 0x50
   4419c:	f102 060c 	add.w	r6, r2, #12
   441a0:	65de      	str	r6, [r3, #92]	; 0x5c
   441a2:	4e67      	ldr	r6, [pc, #412]	; (44340 <load_model+0x1fc>)
   441a4:	e9c3 6018 	strd	r6, r0, [r3, #96]	; 0x60
   441a8:	f102 0610 	add.w	r6, r2, #16
   441ac:	66de      	str	r6, [r3, #108]	; 0x6c
   441ae:	4e65      	ldr	r6, [pc, #404]	; (44344 <load_model+0x200>)
   441b0:	e9c3 641c 	strd	r6, r4, [r3, #112]	; 0x70
   441b4:	f102 0614 	add.w	r6, r2, #20
   441b8:	2101      	movs	r1, #1
   441ba:	67de      	str	r6, [r3, #124]	; 0x7c
   441bc:	4e62      	ldr	r6, [pc, #392]	; (44348 <load_model+0x204>)
   441be:	6299      	str	r1, [r3, #40]	; 0x28
   441c0:	e9c3 4105 	strd	r4, r1, [r3, #20]
   441c4:	6399      	str	r1, [r3, #56]	; 0x38
   441c6:	6499      	str	r1, [r3, #72]	; 0x48
   441c8:	6599      	str	r1, [r3, #88]	; 0x58
   441ca:	6699      	str	r1, [r3, #104]	; 0x68
   441cc:	6799      	str	r1, [r3, #120]	; 0x78
   441ce:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
   441d2:	69ee      	ldr	r6, [r5, #28]
   441d4:	603e      	str	r6, [r7, #0]
   441d6:	68ee      	ldr	r6, [r5, #12]
   441d8:	607e      	str	r6, [r7, #4]
   441da:	f8c3 708c 	str.w	r7, [r3, #140]	; 0x8c
   441de:	4f5b      	ldr	r7, [pc, #364]	; (4434c <load_model+0x208>)
   441e0:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
   441e4:	f102 071c 	add.w	r7, r2, #28
   441e8:	f8c3 709c 	str.w	r7, [r3, #156]	; 0x9c
   441ec:	4f58      	ldr	r7, [pc, #352]	; (44350 <load_model+0x20c>)
   441ee:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
   441f2:	e9c3 7028 	strd	r7, r0, [r3, #160]	; 0xa0
   441f6:	f102 0720 	add.w	r7, r2, #32
   441fa:	f8c3 70ac 	str.w	r7, [r3, #172]	; 0xac
   441fe:	4f55      	ldr	r7, [pc, #340]	; (44354 <load_model+0x210>)
   44200:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
   44204:	e9c3 742c 	strd	r7, r4, [r3, #176]	; 0xb0
   44208:	f102 0724 	add.w	r7, r2, #36	; 0x24
   4420c:	f8c3 70bc 	str.w	r7, [r3, #188]	; 0xbc
   44210:	4f51      	ldr	r7, [pc, #324]	; (44358 <load_model+0x214>)
   44212:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
   44216:	e9c3 7030 	strd	r7, r0, [r3, #192]	; 0xc0
   4421a:	f102 0728 	add.w	r7, r2, #40	; 0x28
   4421e:	f8c3 70cc 	str.w	r7, [r3, #204]	; 0xcc
   44222:	4f4e      	ldr	r7, [pc, #312]	; (4435c <load_model+0x218>)
   44224:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
   44228:	e9c3 7434 	strd	r7, r4, [r3, #208]	; 0xd0
   4422c:	f102 072c 	add.w	r7, r2, #44	; 0x2c
   44230:	f8c3 70dc 	str.w	r7, [r3, #220]	; 0xdc
   44234:	4f4a      	ldr	r7, [pc, #296]	; (44360 <load_model+0x21c>)
   44236:	f8c3 10e8 	str.w	r1, [r3, #232]	; 0xe8
   4423a:	e9c3 7038 	strd	r7, r0, [r3, #224]	; 0xe0
   4423e:	f102 0730 	add.w	r7, r2, #48	; 0x30
   44242:	f8c3 70ec 	str.w	r7, [r3, #236]	; 0xec
   44246:	4f47      	ldr	r7, [pc, #284]	; (44364 <load_model+0x220>)
   44248:	f04f 0e02 	mov.w	lr, #2
   4424c:	f04f 0c05 	mov.w	ip, #5
   44250:	e9c3 ee21 	strd	lr, lr, [r3, #132]	; 0x84
   44254:	e9c3 c125 	strd	ip, r1, [r3, #148]	; 0x94
   44258:	e9c3 743c 	strd	r7, r4, [r3, #240]	; 0xf0
   4425c:	f102 0734 	add.w	r7, r2, #52	; 0x34
   44260:	f8c3 70fc 	str.w	r7, [r3, #252]	; 0xfc
   44264:	4f40      	ldr	r7, [pc, #256]	; (44368 <load_model+0x224>)
   44266:	6bee      	ldr	r6, [r5, #60]	; 0x3c
   44268:	f8c3 10f8 	str.w	r1, [r3, #248]	; 0xf8
   4426c:	e9c3 7e40 	strd	r7, lr, [r3, #256]	; 0x100
   44270:	4f3e      	ldr	r7, [pc, #248]	; (4436c <load_model+0x228>)
   44272:	f8c3 710c 	str.w	r7, [r3, #268]	; 0x10c
   44276:	603e      	str	r6, [r7, #0]
   44278:	6aee      	ldr	r6, [r5, #44]	; 0x2c
   4427a:	607e      	str	r6, [r7, #4]
   4427c:	4f3c      	ldr	r7, [pc, #240]	; (44370 <load_model+0x22c>)
   4427e:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
   44282:	e9c3 7c44 	strd	r7, ip, [r3, #272]	; 0x110
   44286:	f102 073c 	add.w	r7, r2, #60	; 0x3c
   4428a:	f8c3 711c 	str.w	r7, [r3, #284]	; 0x11c
   4428e:	4f39      	ldr	r7, [pc, #228]	; (44374 <load_model+0x230>)
   44290:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
   44294:	e9c3 7048 	strd	r7, r0, [r3, #288]	; 0x120
   44298:	f102 0740 	add.w	r7, r2, #64	; 0x40
   4429c:	f8c3 712c 	str.w	r7, [r3, #300]	; 0x12c
   442a0:	4f35      	ldr	r7, [pc, #212]	; (44378 <load_model+0x234>)
   442a2:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
   442a6:	e9c3 744c 	strd	r7, r4, [r3, #304]	; 0x130
   442aa:	f102 0744 	add.w	r7, r2, #68	; 0x44
   442ae:	f8c3 713c 	str.w	r7, [r3, #316]	; 0x13c
   442b2:	4f32      	ldr	r7, [pc, #200]	; (4437c <load_model+0x238>)
   442b4:	f8c3 1138 	str.w	r1, [r3, #312]	; 0x138
   442b8:	e9c3 7050 	strd	r7, r0, [r3, #320]	; 0x140
   442bc:	f102 0748 	add.w	r7, r2, #72	; 0x48
   442c0:	f8c3 714c 	str.w	r7, [r3, #332]	; 0x14c
   442c4:	4f2e      	ldr	r7, [pc, #184]	; (44380 <load_model+0x23c>)
   442c6:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
   442ca:	e9c3 7454 	strd	r7, r4, [r3, #336]	; 0x150
   442ce:	f102 044c 	add.w	r4, r2, #76	; 0x4c
   442d2:	f8c3 415c 	str.w	r4, [r3, #348]	; 0x15c
   442d6:	4c2b      	ldr	r4, [pc, #172]	; (44384 <load_model+0x240>)
   442d8:	f8c3 1158 	str.w	r1, [r3, #344]	; 0x158
   442dc:	e9c3 4e58 	strd	r4, lr, [r3, #352]	; 0x160
   442e0:	4c29      	ldr	r4, [pc, #164]	; (44388 <load_model+0x244>)
   442e2:	f8c3 e168 	str.w	lr, [r3, #360]	; 0x168
   442e6:	6d6e      	ldr	r6, [r5, #84]	; 0x54
   442e8:	6c6d      	ldr	r5, [r5, #68]	; 0x44
   442ea:	6026      	str	r6, [r4, #0]
   442ec:	6065      	str	r5, [r4, #4]
   442ee:	f8c3 416c 	str.w	r4, [r3, #364]	; 0x16c
   442f2:	4c26      	ldr	r4, [pc, #152]	; (4438c <load_model+0x248>)
   442f4:	f8c3 1178 	str.w	r1, [r3, #376]	; 0x178
   442f8:	e9c3 4c5c 	strd	r4, ip, [r3, #368]	; 0x170
   442fc:	f102 0454 	add.w	r4, r2, #84	; 0x54
   44300:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
   44304:	4c22      	ldr	r4, [pc, #136]	; (44390 <load_model+0x24c>)
   44306:	f8c3 1188 	str.w	r1, [r3, #392]	; 0x188
   4430a:	3258      	adds	r2, #88	; 0x58
   4430c:	e9c3 4060 	strd	r4, r0, [r3, #384]	; 0x180
   44310:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   44314:	481f      	ldr	r0, [pc, #124]	; (44394 <load_model+0x250>)
   44316:	bdf0      	pop	{r4, r5, r6, r7, pc}
   44318:	00042a1c 	.word	0x00042a1c
   4431c:	00042c48 	.word	0x00042c48
   44320:	000443a4 	.word	0x000443a4
   44324:	00044648 	.word	0x00044648
   44328:	00044760 	.word	0x00044760
   4432c:	000447d4 	.word	0x000447d4
   44330:	00042c28 	.word	0x00042c28
   44334:	00042c4c 	.word	0x00042c4c
   44338:	000447ec 	.word	0x000447ec
   4433c:	00044860 	.word	0x00044860
   44340:	00044878 	.word	0x00044878
   44344:	000448ec 	.word	0x000448ec
   44348:	00042c14 	.word	0x00042c14
   4434c:	00042c30 	.word	0x00042c30
   44350:	00044418 	.word	0x00044418
   44354:	0004448c 	.word	0x0004448c
   44358:	000444a4 	.word	0x000444a4
   4435c:	00044518 	.word	0x00044518
   44360:	00044530 	.word	0x00044530
   44364:	000445a4 	.word	0x000445a4
   44368:	00042bac 	.word	0x00042bac
   4436c:	00042bc0 	.word	0x00042bc0
   44370:	00042bc8 	.word	0x00042bc8
   44374:	000445bc 	.word	0x000445bc
   44378:	00044630 	.word	0x00044630
   4437c:	00044660 	.word	0x00044660
   44380:	000446d4 	.word	0x000446d4
   44384:	00042be0 	.word	0x00042be0
   44388:	00042bf4 	.word	0x00042bf4
   4438c:	00042bfc 	.word	0x00042bfc
   44390:	000446ec 	.word	0x000446ec
   44394:	00044398 	.word	0x00044398

00044398 <_model.7508>:
   44398:	00000001 00000019 00042c48              ........H,..

000443a4 <layer0_cnnx>:
	...
   443b0:	00000003 00000028 00000002 00000001     ....(...........
   443c0:	00000001 00000010 00000000 00000000     ................
   443d0:	00000001 ffffffff ffffffff 0004495c     ............\I..
   443e0:	00044904 00000000 00000101 00000000     .I..............
	...

00044418 <layer10_cnnx>:
	...
   44424:	00000003 00000018 00000002 00000001     ................
   44434:	00000001 00000018 00000000 00000000     ................
   44444:	00000001 ffffffff ffffffff 000467ec     .............g..
   44454:	00046774 00000000 00000101 00000000     tg..............
	...

0004448c <layer11_prelu>:
	...
   4449c:	0005bcec 00000000                       ........

000444a4 <layer12_cnnx>:
	...
   444b0:	00000005 00000018 00000001 00000001     ................
   444c0:	00000001 00000018 00000004 00000000     ................
   444d0:	00000002 ffffffff ffffffff 0004837c     ............|...
   444e0:	00048304 00000000 00000101 00000000     ................
   444f0:	00000004 00000000 00000000 00000000     ................
	...

00044518 <layer13_prelu>:
	...
   44528:	0005bd4c 00000000                       L.......

00044530 <layer14_cnnx>:
	...
   4453c:	00000005 00000018 00000001 00000001     ................
   4454c:	00000001 00000018 00000004 00000000     ................
   4455c:	00000002 ffffffff ffffffff 0004b10c     ................
   4456c:	0004b094 00000000 00000101 00000000     ................
   4457c:	00000004 00000000 00000000 00000000     ................
	...

000445a4 <layer15_prelu>:
	...
   445b4:	0005bdac 00000000                       ........

000445bc <layer18_cnnx>:
	...
   445c8:	00000007 00000018 00000001 00000001     ................
   445d8:	00000001 00000018 00000006 00000000     ................
   445e8:	00000003 ffffffff ffffffff 0004de9c     ................
   445f8:	0004de24 00000000 00000101 00000000     $...............
   44608:	00000006 00000000 00000000 00000000     ................
	...

00044630 <layer19_prelu>:
	...
   44640:	0005be0c 00000000                       ........

00044648 <layer1_prelu>:
	...
   44658:	0005be6c 00000000                       l.......

00044660 <layer20_cnnx>:
	...
   4466c:	00000007 00000018 00000001 00000001     ................
   4467c:	00000001 00000018 00000006 00000000     ................
   4468c:	00000003 ffffffff ffffffff 00051e2c     ............,...
   4469c:	00051db4 00000000 00000101 00000000     ................
   446ac:	00000006 00000000 00000000 00000000     ................
	...

000446d4 <layer21_prelu>:
	...
   446e4:	0005beac 00000000                       ........

000446ec <layer24_cnnx>:
	...
   446f8:	0000001d 00000018 00000001 00000001     ................
   44708:	00000001 00000002 00000000 00000000     ................
   44718:	00000001 ffffffff ffffffff 00055d64     ............d]..
   44728:	00055d44 00000000 00000101 00000000     D]..............
	...

00044760 <layer2_cnnx>:
	...
   4476c:	00000003 00000010 00000002 00000001     ................
   4477c:	00000001 00000018 00000000 00000000     ................
   4478c:	00000001 ffffffff ffffffff 000573b4     .............s..
   4479c:	0005733c 00000000 00000101 00000000     <s..............
	...

000447d4 <layer3_prelu>:
	...
   447e4:	0005bf0c 00000000                       ........

000447ec <layer4_cnnx>:
	...
   447f8:	00000003 00000018 00000001 00000001     ................
   44808:	00000001 00000018 00000002 00000000     ................
   44818:	00000001 ffffffff ffffffff 00058644     ............D...
   44828:	000585cc 00000000 00000101 00000000     ................
   44838:	00000002 00000000 00000000 00000000     ................
	...

00044860 <layer5_prelu>:
	...
   44870:	0005bf6c 00000000                       l.......

00044878 <layer6_cnnx>:
	...
   44884:	00000003 00000018 00000001 00000001     ................
   44894:	00000001 00000018 00000002 00000000     ................
   448a4:	00000001 ffffffff ffffffff 0005a1d4     ................
   448b4:	0005a15c 00000000 00000101 00000000     \...............
   448c4:	00000002 00000000 00000000 00000000     ................
	...

000448ec <layer7_prelu>:
	...
   448fc:	0005bfcc 00000000                       ........

00044904 <cnnx0_b_tensor>:
	...
   44918:	0004491c                                .I..

0004491c <cnnx0_biases>:
   4491c:	3e1f65a9 3d15a1a0 bf4adeae bf474197     .e.>...=..J..AG.
   4492c:	3f634908 3f2cb515 bf1d31d6 be118451     .Ic?..,?.1..Q...
   4493c:	bf3415a2 bf9dd00f be6ec2c6 bf24f4f0     ..4.......n...$.
   4494c:	be792f37 3eaa70ab bf8d1883 bf111dd6     7/y..p.>........

0004495c <cnnx0_k_tensor>:
	...
   44970:	00044974                                tI..

00044974 <cnnx0_weights>:
   44974:	3eb201a8 3ddeb21d bdb61c10 be4257ee     ...>...=.....WB.
   44984:	3e61c209 be167390 3d9faf79 3e4f0ed0     ..a>.s..y..=..O>
   44994:	3e29934e 3d85503b be2f7988 bd92b84f     N.)>;P.=.y/.O...
   449a4:	bdd610a0 3d12f924 be23e218 bc8ae56c     ....$..=..#.l...
   449b4:	3ecb385e bcb154f7 bde5ea3c 3dac5644     ^8.>.T..<...DV.=
   449c4:	3e90eddd 3da02c5e 3d196620 be27401b     ...>^,.= f.=.@'.
   449d4:	3e1bf25b bdd62f14 3d40397c bea7abb2     [..>./..|9@=....
   449e4:	3dd9143e 3d19ef1d 3d7d05d5 bea8f610     >..=...=..}=....
   449f4:	3d256232 3ede6b66 3d21f18a 3cc46fb6     2b%=fk.>..!=.o.<
   44a04:	3ca596c8 bd11b17b 3dec91e1 bd917dbf     ...<{......=.}..
   44a14:	3e949caf 3da86343 3d941d79 be4e0d78     ...>Cc.=y..=x.N.
   44a24:	3d8fbe20 bd91c499 3e23c660 3d2d7eb6      ..=....`.#>.~-=
   44a34:	3e7b87ff 3e26be9a bd4a855d 3ddeb094     ..{>..&>].J....=
   44a44:	3e21ffd5 be5011ce 3de321c8 bcdba08a     ..!>..P..!.=....
   44a54:	3bdb877b bca113ac 3e0e5a48 3db26058     {..;....HZ.>X`.=
   44a64:	bd4908c5 bc892a96 bdde839e 3dd47c7d     ..I..*......}|.=
   44a74:	3ea13f2f 3e486528 3e149a97 3cd09833     /?.>(eH>...>3..<
   44a84:	3ea7b62b 3dd01726 3dcc44f4 bd89a324     +..>&..=.D.=$...
   44a94:	be352e62 3d2da43b bd4b9601 3e543b2c     b.5.;.-=..K.,;T>
   44aa4:	3c84dfff 3d2a0a0d bd8ec2b7 3da655f9     ...<..*=.....U.=
   44ab4:	3e229935 3e011fae 3ce9276c bdaa5dd6     5.">...>l'.<.]..
   44ac4:	3ec5cb9d bd898f6e 3e9c622e bdf806c7     ...>n....b.>....
   44ad4:	be20ddd6 be06a9c6 be23ba6a 3dcefeb7     .. .....j.#....=
   44ae4:	be215c4b bdbab09f be7ca258 3d8067b7     K\!.....X.|..g.=
   44af4:	3e29327e 3e8c3bff 3cab3adc bcfdb598     ~2)>.;.>.:.<....
   44b04:	3ea09ae1 3e4a1579 3e3ac8c8 bbe84132     ...>y.J>..:>2A..
   44b14:	3d43f67a 3d8d0122 bdfb361d bc6c2cef     z.C="..=.6...,l.
   44b24:	be2574ae bddba653 3e28c7b0 be6a1b47     .t%.S.....(>G.j.
   44b34:	bd632b8e 3ebf96d9 3dccc452 be68e189     .+c....>R..=..h.
   44b44:	3d13cc5b 3daeb405 3ec43132 bcb92805     [..=...=21.>.(..
   44b54:	bccdb174 bd0079cb be1ee169 bea33f76     t....y..i...v?..
   44b64:	be13980d be82112a 3dbcf5fa be71c1b6     ....*......=..q.
   44b74:	3e0cdc94 3e796467 be55e41e 3de1b8cd     ...>gdy>..U....=
   44b84:	be661ba8 3dd9911f 3ece277a bdce10b9     ..f....=z'.>....
   44b94:	3e6d8cdd bda05842 3d967e3d bea2fd95     ..m>BX..=~.=....
   44ba4:	bcade241 be1a0dbd bc1a8d4a be0047d1     A.......J....G..
   44bb4:	3cb0d0a3 3d747dec bd5921e8 bd8a4e4e     ...<.}t=.!Y.NN..
   44bc4:	3e458b11 3df46f77 3e4a22c9 3d9a8d18     ..E>wo.=."J>...=
   44bd4:	3cf121d1 3dacd631 be32d0ef be6601fd     .!.<1..=..2...f.
   44be4:	bd8598bd 3de3d679 3df426bf be27de73     ....y..=.&.=s.'.
   44bf4:	bda7d693 3e459898 bd11be1b 3d49a5ae     ......E>......I=
   44c04:	bd9b5bc0 3e0e9249 3d280911 bd7e7477     .[..I..>..(=wt~.
   44c14:	3ccaf3ca 3c4afd3f bdcc3e2b be1ef01d     ...<?.J<+>......
   44c24:	3e395348 bd2dbd7b be4eb89a be0c52df     HS9>{.-...N..R..
   44c34:	3ca35773 3e04f7f4 bd945b87 3e922515     sW.<...>.[...%.>
   44c44:	3d900b42 3ddb0472 bd6f696d 3d0d31ba     B..=r..=mio..1.=
   44c54:	3df58455 3da21e84 bcb1bf30 be06141c     U..=...=0.......
   44c64:	3cce989a bd1d67fb be2d40cf bdd38d03     ...<.g...@-.....
   44c74:	3d9bbed3 3da092c4 bc20816a 3df2cac2     ...=...=j. ....=
   44c84:	bddd7a8f 3ce7d16b 3c61dbd3 bdce4a60     .z..k..<..a<`J..
   44c94:	3c0ab15f 3d097217 3e4f5139 3de5b339     _..<.r.=9QO>9..=
   44ca4:	3df27de0 3d3202d4 be69e522 3e0d666a     .}.=..2=".i.jf.>
   44cb4:	bd17d485 bb9b941b bdd9afd2 bc920e2a     ............*...
   44cc4:	bdb68348 3e3f681e ba0a8453 bda26c62     H....h?>S...bl..
   44cd4:	bb03d4b6 bdb30edb 3df04a32 be34f700     ........2J.=..4.
   44ce4:	3d989823 bde27acd be76a2df bdcd0756     #..=.z....v.V...
   44cf4:	3d930e81 bd96b7e7 bd88e580 bcf96b51     ...=........Qk..
   44d04:	3ccea336 3e11367c 3e0bb068 be2c8180     6..<|6.>h..>..,.
   44d14:	bc0fff27 3d41ec54 3da1fc24 bc660888     '...T.A=$..=..f.
   44d24:	3cac6b53 3e98af30 bc3442c8 bc9b3c82     Sk.<0..>.B4..<..
   44d34:	bd5d2c81 3d4cdc4c 3cdef6c6 3d1f69d8     .,].L.L=...<.i.=
   44d44:	be02db49 3e60a4aa 3c82f40b 3c360fd2     I.....`>...<..6<
   44d54:	3de23686 bcb3eaa9 3ba6cee1 bd90ff05     .6.=.......;....
   44d64:	bdf27c78 3e46f28c 3be5f2ce 3c5cc528     x|....F>...;(.\<
   44d74:	3dbf0383 3ded7824 bca06dc9 bd913338     ...=$x.=.m..83..
   44d84:	3cbc5a3e 3dce2c92 3bfa3982 3d39d37b     >Z.<.,.=.9.;{.9=
   44d94:	bda97090 3de7c207 bd27db8f be19bdb7     .p.....=..'.....
   44da4:	bd52b5a5 ba7ff066 3b0545d0 bd826f2e     ..R.f....E.;.o..
   44db4:	3c7aeb03 3daa8c6e bd89beba 3ddeacac     ..z<n..=.......=
   44dc4:	bdddff01 3d919686 3cfda5a3 3e3239a7     .......=...<.92>
   44dd4:	3e147f08 bc85b6f4 3d2f8aea be0e860a     ...>....../=....
   44de4:	be5328b6 3e382f99 3e4ae332 bdbba23f     .(S../8>2.J>?...
   44df4:	3e86a21b 3cc8f4fc 3ccf8fcb be557235     ...>...<...<5rU.
   44e04:	bc2535c5 3e09e09e bda4b8a3 bd5b5216     .5%....>.....R[.
   44e14:	3dbabe39 bcdb9f6e 3e26d3fe bd8d6b95     9..=n.....&>.k..
   44e24:	3dfd7226 bd6b58c7 3e5feca6 bd3bf970     &r.=.Xk..._>p.;.
   44e34:	3d12ba04 3e0e8eb3 3e5a26bc be570600     ...=...>.&Z>..W.
   44e44:	3badd14a 3d9a2fa5 bb9aa720 3c11e815     J..;./.= ......<
   44e54:	bd539363 3c8d2db0 3c4c7462 bd0b4853     c.S..-.<btL<SH..
   44e64:	bda3aec1 3e49062e 3bb87f38 be097623     ......I>8..;#v..
   44e74:	3e5e1735 3dab1baa 3e058d43 3d417904     5.^>...=C..>.yA=
   44e84:	3cb73d69 3e3b3b88 be415063 be18aedd     i=.<.;;>cPA.....
   44e94:	3e23e2e2 bd6cd0dc 3dc30f87 bcdb76ff     ..#>..l....=.v..
   44ea4:	bbf36c5e bcd2b6d7 3e42f360 bc079271     ^l......`.B>q...
   44eb4:	3d1930b6 3dc510bb 3e0828f7 bda1ef93     .0.=...=.(.>....
   44ec4:	bdc13cf3 bd23f9d5 3c62f4e2 be204ef1     .<....#...b<.N .
   44ed4:	be2de554 bda11f24 be02cfc7 3de41f6c     T.-.$.......l..=
   44ee4:	3e3560a1 be5193da 3e6ee6f7 3d33cb11     .`5>..Q...n>..3=
   44ef4:	3d11dc29 3e4c85ea 3e3bd68d 3da2dd73     )..=..L>..;>s..=
   44f04:	3e3a4d6e 3d2982e9 bd8176bb bd9abb23     nM:>..)=.v..#...
   44f14:	bd111feb bd98f707 3d81e635 bd2f9130     ........5..=0./.
   44f24:	3e17d2d0 bdb66bd0 bdd1869c be07de61     ...>.k......a...
   44f34:	3ddde99f bdf16b12 3d8512c8 be67e923     ...=.k.....=#.g.
   44f44:	3e812e1b 3a858a43 3dfaf116 3ce0a28d     ...>C..:...=...<
   44f54:	3db8dd2d be2bea01 3c9cd1fe bda58e3a     -..=..+....<:...
   44f64:	3dfff194 be53b91f 3dabe888 bc8462e6     ...=..S....=.b..
   44f74:	3e09a1bd 3da9e004 3e009ee3 3d938217     ...>...=...>...=
   44f84:	3e808345 3e1f277e 3bfc2d38 be746514     E..>~'.>8-.;.et.
   44f94:	3e0a5a94 bbf1a41d bddc7ceb 3dab97b1     .Z.>.....|.....=
   44fa4:	bcba512a be7dff14 bdf0c9e6 3e257e48     *Q....}.....H~%>
   44fb4:	3da49ea0 3dc202df 3da514a7 3e0f6b44     ...=...=...=Dk.>
   44fc4:	3cff3db8 3dacba93 bd1ec14c be0a8c67     .=.<...=L...g...
   44fd4:	bcd16522 3ca371a5 bdc566a3 3c704974     "e...q.<.f..tIp<
   44fe4:	bd76490d bc8881a4 3d1b5d3e 3e2af322     .Iv.....>].=".*>
   44ff4:	3e10d801 3e781c05 3e02fe8f bdca8595     ...>..x>...>....
   45004:	bd9139c0 3de49080 3d758301 3c45e10b     .9.....=..u=..E<
   45014:	3d8ac6e5 be459be6 bdeed452 bcd54abb     ...=..E.R....J..
   45024:	be01b0ba bc8a0872 be25341b bddf21f5     ....r....4%..!..
   45034:	3d921f2b 3d029f01 3e1e4186 3d8a544a     +..=...=.A.>JT.=
   45044:	3c8944d3 be28764e 3e483c20 bd2cf544     .D.<Nv(. <H>D.,.
   45054:	be9625d8 bdc69ec8 3d9034b1 bddef153     .%.......4.=S...
   45064:	bd50bade be21b192 be0bdef7 3e299538     ..P...!.....8.)>
   45074:	3de1e9a9 3e361dbd 3e3ba4d2 bb2fe637     ...=..6>..;>7./.
   45084:	bbe28b90 bd333397 3dfeb5f3 3cee3ec2     .....33....=.>.<
   45094:	3e057329 bdfa8351 bdc0e665 bd9f4e52     )s.>Q...e...RN..
   450a4:	be0f4e1f 3bd0195d be07c5bb 3df06261     .N..]..;....ab.=
   450b4:	bdb80b72 3c257dc9 be45eac9 3e0e599a     r....}%<..E..Y.>
   450c4:	3d775534 3d95fbe0 3e4731c6 be48458f     4Uw=...=.1G>.EH.
   450d4:	3d49dffe bdcfe1ae 3e46a957 be5685ba     ..I=....W.F>..V.
   450e4:	be731245 3c14b1c9 3be655e0 3d918046     E.s....<.U.;F..=
   450f4:	3dc48684 3e413086 3dc8bf9f 3d5ed771     ...=.0A>...=q.^=
   45104:	bc31d504 bcdf27ee 3de1fc05 bd8c93d3     ..1..'.....=....
   45114:	bbacbda3 bd91218c 3d2ef335 bde8ca1e     .....!..5..=....
   45124:	bdc9bd7b bb051325 bdf31923 be33292c     {...%...#...,)3.
   45134:	3e4626ea 3e024594 3e198577 3e818595     .&F>.E.>w..>...>
   45144:	bd619680 3b7fbfe9 3c63a25c 3e20832d     ..a....;\.c<-. >
   45154:	3e212ae8 bdb7f966 be5aa306 beb4b899     .*!>f.....Z.....
   45164:	be121de9 bddcb5a4 bd33be7e 3c434a22     ........~.3."JC<
   45174:	be0aafce bcaeac30 3b21fec3 be1cc7fc     ....0.....!;....
   45184:	bd8dd335 3d88a18d bc48f1ec 3d00b7e1     5......=..H....=
   45194:	3e2877b9 3dcb905a be700386 bc2b59c0     .w(>Z..=..p..Y+.
   451a4:	be93519d 3d3472e9 3d9ed08f 3e6a3012     .Q...r4=...=.0j>
   451b4:	bdce4228 bcf68fea 3e28283a bad7de79     (B......:((>y...
   451c4:	3dcc762b 3dda3736 bc44066a 3db672d2     +v.=67.=j.D..r.=
   451d4:	bdfefb17 bdf67c2f 3d856a0f bdab9b1c     ..../|...j.=....
   451e4:	3d830867 3e2dc8ef bd0fe2b9 3d0202bf     g..=..->.......=
   451f4:	3e103f11 3e5a69c3 bd4ca9a1 bda42091     .?.>.iZ>..L.. ..
   45204:	bce4bfde bce135aa 3ce62a61 3d2cc502     .....5..a*.<..,=
   45214:	be2407ee 3ddb180b 3cd7bc85 3daee909     ..$....=...<...=
   45224:	3ce75879 3e887251 3d8bf81a 3e11aa9b     yX.<Qr.>...=...>
   45234:	bcbfbce9 3c670b3c be3c0023 3dcb73c1     ....<.g<#.<..s.=
   45244:	3d347fc7 bdf3407a bcc81ffa bdb3f724     ..4=z@......$...
   45254:	bdd9041c 3d1dcb0c bea5e90e bcbc9c89     .......=........
   45264:	be098454 bcb27aec 3dd0b8ac 3d2ebf18     T....z.....=...=
   45274:	3e281d9c 3db1a4e7 be1b2b9c 3dfa6a13     ..(>...=.+...j.=
   45284:	bd54b902 bdd6b69b 3e059a43 bcdf2fdc     ..T.....C..>./..
   45294:	3d9b9bdd 3d6d03af be5e79ba 3cbcd2fa     ...=..m=.y^....<
   452a4:	bd8ac7b9 3dca6a89 bda1ec28 3e68d546     .....j.=(...F.h>
   452b4:	bd2f09c6 3d4f6934 bd8e9064 3d9f6d16     ../.4iO=d....m.=
   452c4:	3bd4ab3e 3da3c170 3cbd242e 3cddeacd     >..;p..=.$.<...<
   452d4:	bd33a74f 3e11bd16 3d2c78ca 3db8d912     O.3....>.x,=...=
   452e4:	bd807f5b bd8a9be1 bd9b1ecb 3ddff2c2     [..............=
   452f4:	3df00c97 3b2fb73d bdc5511f be0e94af     ...==./;.Q......
   45304:	bd985541 3b912e91 bd2addc2 3e353ba5     AU.....;..*..;5>
   45314:	3e5e7499 3e96a5d6 3dd28319 3c7f7bb6     .t^>...>...=.{.<
   45324:	3df3416f 3c66430b 3db6ef72 3e2f55b5     oA.=.Cf<r..=.U/>
   45334:	bd688e37 3b6ad1f0 3e099cfa bedd0372     7.h...j;...>r...
   45344:	bc6aa505 3e9f3de4 be95faa2 be48f7ac     ..j..=.>......H.
   45354:	be5c50e9 3dcf2655 be2d6437 3da4310f     .P\.U&.=7d-..1.=
   45364:	bd24328a bd41ccbc 3d6cbd3b 3d479d4b     .2$...A.;.l=K.G=
   45374:	3ddc9bda bd9dd624 bd660b72 bccce4f6     ...=$...r.f.....
   45384:	3c9c344e bdbdabf7 3d2124b8 3f05a987     N4.<.....$!=...?
   45394:	bc34f00c 3dc0684f 3bf1ec6c be17de86     ..4.Oh.=l..;....
   453a4:	bdeb6567 3dd8c1bf 3e3b7aa9 be099ee8     ge.....=.z;>....
   453b4:	3d8016f3 3e1afa01 3b08b922 3b5a67eb     ...=...>"..;.gZ;
   453c4:	3e0b997f 3ebdc524 bc775dd0 bda6ca50     ...>$..>.]w.P...
   453d4:	bc66cc27 3d57315a 3cea225e bda94c7c     '.f.Z1W=^".<|L..
   453e4:	3d0d8cd6 3be7ffc4 3dcfbd7e bd0b6381     ...=...;~..=.c..
   453f4:	bd812824 3e96758d bcba2c2c 3e24489a     $(...u.>,,...H$>
   45404:	bde98dd0 be5efdf9 bdc32f0a be735827     ......^../..'Xs.
   45414:	3e0e8395 be1cf733 3e3e497c bda05ddd     ...>3...|I>>.]..
   45424:	3e6c11e8 3e1c1bfd 3e12aac1 bd23e55a     ..l>...>...>Z.#.
   45434:	be491831 3e717acd bd112bef 3d2e0f7d     1.I..zq>.+..}..=
   45444:	3df6e8de 3e4ea81f 3d85811d bdcb93f4     ...=..N>...=....
   45454:	be1343ff be279284 3ea29054 3e203db6     .C....'.T..>.= >
   45464:	bdb88c23 3e215e81 3de4dd49 3de93823     #....^!>I..=#8.=
   45474:	3db2c80a 3e219e78 bdc2ac23 bd4487f5     ...=x.!>#.....D.
   45484:	3d8c6713 3e0220b4 bd621cf3 3d851b38     .g.=. .>..b.8..=
   45494:	bd91017e 3d9a30d3 bc88915f 3d450d1b     ~....0.=_.....E=
   454a4:	bde9ad21 3b95d6ac 3ddf5add 3d8457a0     !......;.Z.=.W.=
   454b4:	3cb5b569 3e166db3 3d6c9ac0 bcd7b005     i..<.m.>..l=....
   454c4:	bd6d8313 bd5fb163 bd7af95e bd8a3fb0     ..m.c._.^.z..?..
   454d4:	be3947e6 3c351536 be51c515 3ed73e7e     .G9.6.5<..Q.~>.>
   454e4:	bceec3bd 3b2e7fdb be27fb1c 3db1be61     .......;..'.a..=
   454f4:	3aa1fc3f 3e65257f bdbf0346 3bbf3dd8     ?..:.%e>F....=.;
   45504:	bd1c76c4 be5a3561 3e5ce353 3d92f4c2     .v..a5Z.S.\>...=
   45514:	bd1731a8 bd91eddc be537fdd 3e68afe3     .1........S...h>
   45524:	3e3225fa be86497f be2d395a 3e13bdbe     .%2>.I..Z9-....>
   45534:	3e17e85c bdd72944 bd21ee85 bda7ef92     \..>D)....!.....
   45544:	be51c3d9 3ddc19d2 3db1db65 3dd0abcc     ..Q....=e..=...=
   45554:	bcdf2864 3bb4d58a 3d5ebef8 3b368c9a     d(.....;..^=..6;
   45564:	3e561df9 bdfa7a96 3e809621 bbf80cd7     ..V>.z..!..>....
   45574:	3cfbd3cb bd3bb4fa bde632fa 3d532ce6     ...<..;..2...,S=
   45584:	3d065346 3d980fd5 3d7e2753 3dec0e5c     FS.=...=S'~=\..=
   45594:	bd8d8c11 3d2da4a4 bd6ca661 bcfa6379     ......-=a.l.yc..
   455a4:	3d74bfee bc905380 3e1edda9 bda07477     ..t=.S.....>wt..
   455b4:	3d8afb3f bd4c60d9 3e1e58e2 bc9958a7     ?..=.`L..X.>.X..
   455c4:	bd6598ec 3e4db1cf bd9a2673 3dc71c36     ..e...M>s&..6..=
   455d4:	bb45a338 3e3cceec bc7ebbfd be111d9c     8.E...<>..~.....
   455e4:	3df377ef 3d34984b 3e5ee43b be151a7b     .w.=K.4=;.^>{...
   455f4:	bd80ebfa bde005a1 bd967731 bd608e05     ........1w....`.
   45604:	3e1d0787 bb94ef10 3ce9c52b 3d9813f8     ...>....+..<...=
   45614:	3df7440b 3e2671a9 3d027fdf be605a88     .D.=.q&>...=.Z`.
   45624:	3d87c7ed bcf92b6a bd1deff8 bdaa56a4     ...=j+.......V..
   45634:	3d50a1e4 be232fbf 3e0cd7da 3d920bc6     ..P=./#....>...=
   45644:	badc1844 bc4824dd 3d84fb62 bd95ae1a     D....$H.b..=....
   45654:	bde00523 3e56111e 3e01bf10 bdeafd73     #.....V>...>s...
   45664:	3e46dba1 bd898d08 bd809eb6 bdd72efd     ..F>............
   45674:	bcc279d2 3b367878 3d5e2c91 bdbdc74d     .y..xx6;.,^=M...
   45684:	bd8a592e bd8c9d03 3d05cbd4 3b8f8f80     .Y.........=...;
   45694:	3e5be75d 3e51fc17 be33ad07 3cfc10b2     ].[>..Q>..3....<
   456a4:	3cc24d5d be706cb7 be30f3a2 bdd67e0e     ]M.<.lp...0..~..
   456b4:	3da0c3dc bdd54e63 be0cb11c 3e24b0da     ...=cN........$>
   456c4:	bdfe3438 bd39065c 3c680b6d bcf55257     84..\.9.m.h<WR..
   456d4:	3e4336d7 3d9dbc1c 3e6cc7c6 ba3561f7     .6C>...=..l>.a5.
   456e4:	be3e7c0e bd4fc3fd bd344bda be255ac6     .|>...O..K4..Z%.
   456f4:	bcdc001c bc16d3e2 3e148d5a 3d8d94d0     ........Z..>...=
   45704:	3a93d50a bd4672c9 bb2ffcdd 3d8bfea5     ...:.rF.../....=
   45714:	3d591649 bdebeaa5 bc5b7089 3db49914     I.Y=.....p[....=
   45724:	be0d9f12 bccbf470 be6a096d bd56c5ea     ....p...m.j...V.
   45734:	3df1e56e bd7340ed bdc8aaea be17e726     n..=.@s.....&...
   45744:	3db2a5a8 bdbedcfe bd9d45d4 3ce9201f     ...=.....E... .<
   45754:	3d7196a6 3c8187e5 b961da50 3d8f31a3     ..q=...<P.a..1.=
   45764:	bd2f2933 3dbe1943 3e12d9f7 bc21d009     3)/.C..=...>..!.
   45774:	3d48de43 bde6b705 bdb48be2 3d841161     C.H=........a..=
   45784:	3d4f05fa bdb03dfb 3d66b162 bd49d00b     ..O=.=..b.f=..I.
   45794:	bdfc242b 3d80c6c3 3be1a130 3c64f913     +$.....=0..;..d<
   457a4:	be1a314a 3e32290b be5811af be0297c7     J1...)2>..X.....
   457b4:	bced5873 be0d8413 3da26e75 3ddae1a4     sX......un.=...=
   457c4:	3d669f9a 3e077999 3d23f078 3e3a13ea     ..f=.y.>x.#=..:>
   457d4:	3df29e8c be093a5a 3bc19c98 bd2de51b     ...=Z:.....;..-.
   457e4:	be2ce76c be2b1864 3df32d9b bdd0584e     l.,.d.+..-.=NX..
   457f4:	3dc4d89b 3cbffc75 3e810090 3e145d10     ...=u..<...>.].>
   45804:	3cc14abe bd70e3f9 be394324 3b8a3ac1     .J.<..p.$C9..:.;
   45814:	bce10447 be114678 3e4c2ca1 3bebc83b     G...xF...,L>;..;
   45824:	3db387b7 3cabfa8f 3deebfe5 3ca05c21     ...=...<...=!\.<
   45834:	bd333ec7 3d81ab4b 3dc41bdc bc4df719     .>3.K..=...=..M.
   45844:	bd7b22b3 3e084d4f bcfc0eba 3d9e7cda     ."{.OM.>.....|.=
   45854:	be5b69e9 be8b88a9 3b5e96cf bda210f6     .i[.......^;....
   45864:	3cecf2e2 bd70c728 3dc0851b bcf8c2d5     ...<(.p....=....
   45874:	bd637bb0 bda5386d 3e1f2a3d 3d454b66     .{c.m8..=*.>fKE=
   45884:	bd33cb9f bdec2347 bc7e7cfe bb807607     ..3.G#...|~..v..
   45894:	3d5c161e be73b5a6 be00955e 3dbe691e     ..\=..s.^....i.=
   458a4:	3c796d3f 3db69dc8 be550cc3 bdeaaea9     ?my<...=..U.....
   458b4:	3df2b56b 3bce3293 bd393de2 bd89c401     k..=.2.;.=9.....
   458c4:	bd093e25 3d6a0f60 be664a1f 3dcf9153     %>..`.j=.Jf.S..=
   458d4:	bd7a643a bdad4993 bcc4aaa5 be0427df     :dz..I.......'..
   458e4:	3cbac7d7 3dfd8206 bdb16875 bd09472c     ...<...=uh..,G..
   458f4:	be585893 bd3154fa ba4c5559 be0e24d2     .XX..T1.YUL..$..
   45904:	bd2c2be0 be4ea1f4 bc0aff2d 3d874ef1     .+,...N.-....N.=
   45914:	be320181 bd99d4c7 bcb1c4ae bdd50ce1     ..2.............
   45924:	3e2ce83b be7e4cea 3e37388f 3d550fed     ;.,>.L~..87>..U=
   45934:	3d75fa48 bd0b12a6 3d61b8c5 bd5f24ab     H.u=......a=.$_.
   45944:	3d821ca9 be8c6374 bd0676b2 bdf2067c     ...=tc...v..|...
   45954:	3e9824eb 3d727111 3b5d8455 bd948d36     .$.>.qr=U.];6...
   45964:	3e0b7c1f bdb09513 3da9fde1 be1cc67f     .|.>.......=....
   45974:	bd1d2aee 3e3b7dbe bd8b594f 3a905929     .*...};>OY..)Y.:
   45984:	bdbb710c bd7fc0ad be0058ac be5a4802     .q.......X...HZ.
   45994:	3e1a6510 be962f28 3d15ed70 3bb23a90     .e.>(/..p..=.:.;
   459a4:	bda9baab 3d03409a be6e5c2f 3e45a1ce     .....@.=/\n...E>
   459b4:	be59e660 3d17a2a7 3da6bcc5 bc3d4215     `.Y....=...=.B=.
   459c4:	3c9a8c83 3c89b5f7 3d834b92 3d41ba35     ...<...<.K.=5.A=
   459d4:	bd9ad334 be102272 3c2d76e6 3d74956e     4...r"...v-<n.t=
   459e4:	3c85cbc7 3c286a37 3ddde652 bd756bdd     ...<7j(<R..=.ku.
   459f4:	3d82c5b5 3db81a91 3d35670d 3da27c21     ...=...=.g5=!|.=
   45a04:	bd813cff bd32c5a8 3dd16770 be4d9dc6     .<....2.pg.=..M.
   45a14:	bdf5c9fd be1e9e4b 3dce6456 3c391a9e     ....K...Vd.=..9<
   45a24:	3da39594 3e46b0ca 3d59aee6 3de6638f     ...=..F>..Y=.c.=
   45a34:	bdcc69f2 3d60f383 bd9246f7 3d1430ba     .i....`=.F...0.=
   45a44:	bd8bbce9 3cb9865e bb45b5ac bdec5f55     ....^..<..E.U_..
   45a54:	be166288 bd6759ef 3b7d43b8 be0a8d46     .b...Yg..C};F...
   45a64:	3c2baad4 3e226726 3d17cf0f bde48d4f     ..+<&g">...=O...
   45a74:	3d7577d9 3cc6011c 3bae5bc8 3b127711     .wu=...<.[.;.w.;
   45a84:	bd09ff90 3d98826d 3d5d1d98 3db75293     ....m..=..]=.R.=
   45a94:	bdbbad8a 3d883f8d 3bdb87fc bc99d178     .....?.=...;x...
   45aa4:	3b983210 bcc43b6e 3d749726 3d1abc49     .2.;n;..&.t=I..=
   45ab4:	bd357728 3e1dee3b be113abd 3e95dc3f     (w5.;..>.:..?..>
   45ac4:	bdb65bf2 be252ada 3e11b5af bc9e168c     .[...*%....>....
   45ad4:	3dba1cf5 3cee6d86 be2a0d3f 3e0dd475     ...=.m.<?.*.u..>
   45ae4:	3bdb78a2 bd020690 3d738602 3e1c3f1b     .x.;......s=.?.>
   45af4:	3e0bc963 bdfb8039 3e05d308 bd40ddfe     c..>9......>..@.
   45b04:	3da6fc34 3d91d775 bde11429 3e02da34     4..=u..=)...4..>
   45b14:	bc9e1930 3db7ba9c bd1c3bb5 3db63fe9     0......=.;...?.=
   45b24:	bc86ab10 3dfc2172 bb3287fd 3dc371f2     ....r!.=..2..q.=
   45b34:	be82787c b8b8b239 bdf17dcd 3e3d33c1     |x..9....}...3=>
   45b44:	bbfdecd5 3d939cc7 bd93ed42 be83ecd5     .......=B.......
   45b54:	bcf4e037 bdebaee4 be265be9 bdeae17f     7........[&.....
   45b64:	3c7572de be8ebbd5 bd92adea bd8497ca     .ru<............
   45b74:	bafb056f 3e1a3b8d 3cec98d5 3e0543fe     o....;.>...<.C.>
   45b84:	bd803e88 be0ee116 bdd14e09 3d0d1f22     .>.......N.."..=
   45b94:	3e5e02b1 3d01827f 3e22bfa2 bdc4d5a6     ..^>...=..">....
   45ba4:	bdc8bfdc bdb882b4 be737e0d 3e2504c7     .........~s...%>
   45bb4:	3cd65242 3d4334a6 bccf7147 3bcbbe1a     BR.<.4C=Gq.....;
   45bc4:	bd6172d7 bd346aec 3d26ca62 3e147d8b     .ra..j4.b.&=.}.>
   45bd4:	3dbd2723 bca455bb 3cfd8ad5 3d70070c     #'.=.U.....<..p=
   45be4:	3db042f5 3cb4608a 3e801d3e 3dcf3d95     .B.=.`.<>..>.=.=
   45bf4:	bd83d768 be08dcc7 be062733 be29a122     h.......3'..".).
   45c04:	3e4a68ce 3e397a9d bcdcade1 3c9270a0     .hJ>.z9>.....p.<
   45c14:	bdde83b7 bcfd9e7c bb25c9ff 3ddaa8d6     ....|.....%....=
   45c24:	bdf67cd4 bdb3231c 3e47f059 3be85178     .|...#..Y.G>xQ.;
   45c34:	bd14b612 bc74b843 be2da5d3 be012567     ....C.t...-.g%..
   45c44:	be2d8400 bd96b2d2 3dc42eea bd319ca5     ..-........=..1.
   45c54:	be0b6bf6 3e4a6f60 3de1c677 bc580f4b     .k..`oJ>w..=K.X.
   45c64:	3a135486 3d8b2d5d be8ddea9 bdc778ad     .T.:]-.=.....x..
   45c74:	bdf1af52 bd840bfa be198474 3dd5da7a     R.......t...z..=
   45c84:	3d72fb7d 3da0ddbf 3e1c666d 3be36af4     }.r=...=mf.>.j.;
   45c94:	3d276b8f 3db3e1a9 3d693154 3db99081     .k'=...=T1i=...=
   45ca4:	be19e517 3c72380c 3e0e8882 3e27ead1     .....8r<...>..'>
   45cb4:	3e20bf36 bbf0e7b4 3c9a7fc3 bc5d920c     6. >.......<..].
   45cc4:	bdcdf9c4 3cd966ef be067f51 bd8c069e     .....f.<Q.......
   45cd4:	3e717b3f 3e2cb530 be1a3202 bd7f5dbc     ?{q>0.,>.2...]..
   45ce4:	be258ee0 3db8b3f8 3d0c532a 3d77312a     ..%....=*S.=*1w=
   45cf4:	bc7b2377 3cacdcbd 3e0714de 3d1c107c     w#{....<...>|..=
   45d04:	3d9be41a bde397dc 3d2e6c4f 3e96f62e     ...=....Ol.=...>
   45d14:	3e222e7f 3ea124af 3d0358d3 3d6394e8     ..">.$.>.X.=..c=
   45d24:	bd6e9cd4 3e05aacf 3d81bd28 3e12d80b     ..n....>(..=...>
   45d34:	bccc784e 3d3fd31c 3cfc0f50 be997852     Nx....?=P..<Rx..
   45d44:	bdaa231f bdd1d8fb 3dbf6461 be22dc74     .#......ad.=t.".
   45d54:	beddd62b be2ab8b5 bbeb2a30 bd749e75     +.....*.0*..u.t.
   45d64:	3df224e9 be5ae00d bc224d52 bdcbda41     .$.=..Z.RM".A...
   45d74:	be65b7c7 beaf01d7 bdc3a84b bbd01cce     ..e.....K.......
   45d84:	bd8c0518 3cd6ea32 be12fc58 3eaa39e7     ....2..<X....9.>
   45d94:	3e67eab2 bc52862a bc0fafcb 3d7d1df6     ..g>*.R.......}=
   45da4:	bdab0ee3 3e9a05ad 3ca7b47a bc8d1bcd     .......>z..<....
   45db4:	be779ec3 bc81b679 3e15076d bda42686     ..w.y...m..>.&..
   45dc4:	be42b2f4 3d86a546 bdb5c0a7 be31e126     ..B.F..=....&.1.
   45dd4:	3d1a3040 3e0940ab 3e40c2a1 3e4da24f     @0.=.@.>..@>O.M>
   45de4:	bdbda537 bd2d8b0b ba567517 3e4ca3c0     7.....-..uV...L>
   45df4:	beb78bee 3e847852 bdb91d1d 3d481a40     ....Rx.>....@.H=
   45e04:	bd66bf44 3bc8d7a0 bdde84df be39def6     D.f....;......9.
   45e14:	bdb5460b 3dcfbc07 3e4dd0e4 3d8f881b     .F.....=..M>...=
   45e24:	3e7f0e10 3e5d9d82 3d47e71a 3d006624     ...>..]>..G=$f.=
   45e34:	bdffaf13 bdbe139d bddf2269 bd83bcd1     ........i"......
   45e44:	bdd102d2 3e27e3f1 be2c18eb 3d40a6d9     ......'>..,...@=
   45e54:	3d961447 3d048fea 3d35d407 3e6fbca6     G..=...=..5=..o>
   45e64:	bdfaee7e 3e4fa5ca 3e08cd36 bd7975ed     ~.....O>6..>.uy.
   45e74:	bd63b3ff bd19a672 3d2c6043 3d81cabb     ..c.r...C`,=...=
   45e84:	be150403 3c91538f be690e4c 3d91576b     .....S.<L.i.kW.=
   45e94:	be3714f9 bae46194 3e9254e7 3b9832d2     ..7..a...T.>.2.;
   45ea4:	bc895c3f 3e82faaf bdb2890e 3e2c58e4     ?\.....>.....X,>
   45eb4:	be373ee5 bd19c635 bdd77222 bdd9c814     .>7.5..."r......
   45ec4:	be16937d bd95835f be0ccacf 3e08ca7c     }..._.......|..>
   45ed4:	be150718 bd9c7f14 bb38ec9b 3e8fe802     ..........8....>
   45ee4:	3e8b54b4 3c8919df bdbba765 3cef6fda     .T.>...<e....o.<
   45ef4:	bdb4b673 be7d62f0 bdd88568 bddadb13     s....b}.h.......
   45f04:	beac8441 3b1e96d9 be9362d3 3e42210e     A......;.b...!B>
   45f14:	3bf4429d bcdfd593 be29541f 3e244805     .B.;.....T)..H$>
   45f24:	3e80a41c be135062 3e04e457 3e49a9f8     ...>bP..W..>..I>
   45f34:	3e32dab7 becd220f be31d724 bdb0f534     ..2>."..$.1.4...
   45f44:	bd495928 bdbe6d9b bea108de 3e43ed23     (YI..m......#.C>
   45f54:	3d5f89e1 3c29096e bd85ea29 3ecb27f2     .._=n.)<)....'.>
   45f64:	3e8c938d bd344b59 3d9d4d6c bc233dfd     ...>YK4.lM.=.=#.
   45f74:	bdef1a77 be7933b9 3d8e4831 3df62661     w....3y.1H.=a&.=
   45f84:	be0fe369 be3782e5 bdcc80f5 3e2f3719     i.....7......7/>
   45f94:	bdd4bd30 3e063b6c 3d2100e7 3dd1a704     0...l;.>..!=...=
   45fa4:	3dbc168d bd8da0d5 3e27e7f1 bcf78cf5     ...=......'>....
   45fb4:	3da5cb16 bedc1664 bd95cb70 3e35ddd9     ...=d...p.....5>
   45fc4:	bc75172e 3d9b6111 3dcaf294 bd75cd64     ..u..a.=...=d.u.
   45fd4:	be3b94f1 bde68804 bd56ece1 3eae36a3     ..;.......V..6.>
   45fe4:	3de8a023 3cf0bc50 bd9b5fb4 3c8f133e     #..=P..<._..>..<
   45ff4:	bd25a0c6 be58f40b 3e3a6550 3e25a015     ..%...X.Pe:>..%>
   46004:	3d3c8d8d bc4f4288 3dc1943d bdc79157     ..<=.BO.=..=W...
   46014:	be1f9b2a 3e69fb91 bdbe1d7f 3e2a571d     *.....i>.....W*>
   46024:	bd4908fb b9e377b4 bd928afb bdba50dc     ..I..w.......P..
   46034:	3d833de7 bdddbe45 3dd14681 bc4af1b6     .=.=E....F.=..J.
   46044:	bd91d2aa bce9c1d5 bd30e81d bd974111     ..........0..A..
   46054:	bce6ba09 bc2f5c84 3cc39506 3ddc2752     .....\/....<R'.=
   46064:	3d540e62 bdad5f2e bd2636ce bd3b3d99     b.T=._...6&..=;.
   46074:	bd8bbc86 be608970 3dc94083 3da3c692     ....p.`..@.=...=
   46084:	3d8b2a35 3c917c74 bc8264d4 3d11def0     5*.=t|.<.d.....=
   46094:	bd7e251f bcb201c5 3c17e9f7 be12e453     .%~........<S...
   460a4:	bce46dce be0287e3 3dd4f718 be58db5d     .m.........=].X.
   460b4:	3e067d70 3ca360cd 3d1fff19 3c9cedbc     p}.>.`.<...=...<
   460c4:	bcbc6e80 be5b57cb 3b2eec3c bdb1a9f8     .n...W[.<..;....
   460d4:	bce93af7 3ceebef5 3affc878 3dbec00e     .:.....<x..:...=
   460e4:	be605b45 bcf8fd01 bccaf20c 3dd193c2     E[`............=
   460f4:	3e00aad5 bdcbc018 bce61c49 bd940ecc     ...>....I.......
   46104:	3dab2cea 3de9bf2d bd8aacbe bdc7621a     .,.=-..=.....b..
   46114:	3e09bbc2 3de244c8 bceb68da bc87f623     ...>.D.=.h..#...
   46124:	bd66b182 bd0663c2 be36e636 be347646     ..f..c..6.6.Fv4.
   46134:	3e0dcbb6 bcec0084 bc4cbb04 3e0d523e     ...>......L.>R.>
   46144:	3e790566 bda33563 3d83edaa bd800ac1     f.y>c5.....=....
   46154:	be654249 bcc1220f 3dc6f227 3d81e125     IBe.."..'..=%..=
   46164:	be02a157 bce359fd bdbea6ea bd9c995f     W....Y......_...
   46174:	3bf808e6 be3a149e 3dbb41cf bd6b7849     ...;..:..A.=Ixk.
   46184:	bc6f084b be41104c bdd2b265 3d2c8eff     K.o.L.A.e.....,=
   46194:	3d1390e9 3e11c95d bc8dea59 3e6122bb     ...=]..>Y...."a>
   461a4:	be0f6d61 3d74c3b1 3d54b282 bcd9a6cb     am....t=..T=....
   461b4:	3e0f5f7c bd9658a1 3cbd5b2a bdc95c10     |_.>.X..*[.<.\..
   461c4:	3d6ca5c0 bdd34117 be32946e 3db0e57a     ..l=.A..n.2.z..=
   461d4:	bd54abf7 3b4021c4 be4e6f92 3c82d770     ..T..!@;.oN.p..<
   461e4:	be06ca89 bc2e8666 3d715b47 bd100ee9     ....f...G[q=....
   461f4:	be86a240 bd8f640c 3e001f06 bd18b5ef     @....d.....>....
   46204:	3e0489bc bd8de975 3d12b4be 3e8591c5     ...>u......=...>
   46214:	bb303c9e 3d7c435a bcc78c97 be16ae4e     .<0.ZC|=....N...
   46224:	bda37fd2 bd36df1d bd497b92 be028a05     ......6..{I.....
   46234:	be91fadc be6815f7 3e1e1102 3d25cf9b     ......h....>..%=
   46244:	bd45d742 bd235cef 3e093425 3e808415     B.E..\#.%4.>...>
   46254:	bd836e4e bdc02a10 be211d59 3ced25f3     Nn...*..Y.!..%.<
   46264:	3dcda830 be40f65c 3e36283e 3e05e1a6     0..=\.@.>(6>...>
   46274:	be7f273f 3be74cab 3d0b0af3 3d0addcc     ?'...L.;...=...=
   46284:	bda54d4e bd00be4c 3d01ab8c 3e9824e1     NM..L......=.$.>
   46294:	bdd7b194 be0e85a4 3dae3977 bdc815b9     ........w9.=....
   462a4:	bce6ffd9 bdb56d5c 3d77be15 be1ae5a0     ....\m....w=....
   462b4:	bc9b566d bab0a34b 3e255ce9 bdd72c8f     mV..K....\%>.,..
   462c4:	3cbbf000 be89e01c bda86c41 3da00c24     ...<....Al..$..=
   462d4:	3dee4870 3ddc99c3 3de00413 3d28891e     pH.=...=...=..(=
   462e4:	b9ea41d3 3cf8a16c be08f909 3d741893     .A..l..<......t=
   462f4:	be761e58 be556317 bd4e6e17 bd8899c7     X.v..cU..nN.....
   46304:	3d97157c bdde9ede 3c4a40c1 be4a4822     |..=.....@J<"HJ.
   46314:	bd9e91a6 3c78b2a4 3bd256ba be1a9233     ......x<.V.;3...
   46324:	3dc30200 3e0b69ba bdee02b4 bd62d149     ...=.i.>....I.b.
   46334:	be84ff1a be09ebd3 be0c38c8 3e281ec9     .........8....(>
   46344:	3dd7af49 be2dab68 3db6cd78 3e41c5ff     I..=h.-.x..=..A>
   46354:	3d01fdac 3df0fbfe bcf0e2c7 3dc05699     ...=...=.....V.=
   46364:	3ea59a4c bcaab682 be3228ba 3d584219     L..>.....(2..BX=
   46374:	be095aa3 be4768e9 be40a108 bdb7ba38     .Z...hG...@.8...
   46384:	be3d029f be151130 be1492b3 3d261f36     ..=.0.......6.&=
   46394:	3e143b91 be87858a be453fb0 bd369818     .;.>.....?E...6.
   463a4:	3e209248 bdaded1a be0de578 3d2be3cc     H. >....x.....+=
   463b4:	bd05f037 3dff7597 3d26a259 bcb145de     7....u.=Y.&=.E..
   463c4:	be4d3a88 3d080b6d be1c3b61 be233d89     .:M.m..=a;...=#.
   463d4:	3ccc078b bddf0968 3e74ff63 3cb89502     ...<h...c.t>...<
   463e4:	3e371636 3e6e39b4 be55d471 3e24067e     6.7>.9n>q.U.~.$>
   463f4:	be90dad6 be8f645b be0b2c29 3e01f255     ....[d..),..U..>
   46404:	bdb50d39 3ddcc158 3dd324de bcabed79     9...X..=.$.=y...
   46414:	bdf455f3 be09faec 3ca3af7d 3dfe6acc     .U......}..<.j.=
   46424:	bc0f61d3 3e22fd82 3cf37f7f 3e1c0461     .a....">...<a..>
   46434:	bd73a6b1 bd06c6cc 3a5cfa17 3d5d6cd5     ..s.......\:.l]=
   46444:	be09afa0 be8b8161 bd66435b bda6ef05     ....a...[Cf.....
   46454:	bdd11f76 bcd521b0 3cc9d023 3e1214e8     v....!..#..<...>
   46464:	bcf7a767 3e04adf4 3da64cda bb2e1b31     g......>.L.=1...
   46474:	be4d8e6f be0cfd0a bd17e445 3e79772a     o.M.....E...*wy>
   46484:	bda0f878 bc832e02 3bba9ee2 bd72019a     x..........;..r.
   46494:	3d1d9e74 bdd13544 bd8d899b 3e74d218     t..=D5........t>
   464a4:	bb8974f4 3e002902 bccefa9f 3d927ba4     .t...).>.....{.=
   464b4:	3cd12653 be486594 bdef65a6 3e05bbfe     S&.<.eH..e.....>
   464c4:	bdac0bb7 bcb8c706 be771685 3d763c4d     ..........w.M<v=
   464d4:	bdf5b71c bd4efcab be07f4e7 3e11abc5     ......N........>
   464e4:	bcccad6d 3dfaaf86 3d5b7247 3e1304f8     m......=Gr[=...>
   464f4:	bdc47241 be886e9a be8058d3 3c5ee020     Ar...n...X.. .^<
   46504:	3d6a87bb bdf2e7e3 bce8abe6 bda762b5     ..j=.........b..
   46514:	3e1bdb6b 3e16380c bde75650 3cafd19a     k..>.8.>PV.....<
   46524:	3e09a09c bd79bce8 3d22e1c7 3c614a88     ...>..y..."=.Ja<
   46534:	be63976e be1918f0 bab355d8 3e045bae     n.c......U...[.>
   46544:	bdee0220 3b95cfa0 bbc8c846 bdfee80d      ......;F.......
   46554:	bdee2ff7 3dde8beb bd582124 3e376ad9     ./.....=$!X..j7>
   46564:	bd41a6cc 3ce5d567 bb926faf 3e5db9e2     ..A.g..<.o....]>
   46574:	be6e1bc3 bd6e027f 3d94dd6e bdd578cf     ..n...n.n..=.x..
   46584:	bd50f07b bd8360c3 bd1c930e 3dc517c9     {.P..`.........=
   46594:	be4eee42 3d15a4e8 3e3453ba be04a476     B.N....=.S4>v...
   465a4:	bc9f0ea9 3e20c8ab 3d4bd97d bd891ed9     ...... >}.K=....
   465b4:	bca82d2b bdd2bece bcdd90cf be560337     +-..........7.V.
   465c4:	3e96cf7b bc459058 be32fedc 3c44515e     {..>X.E...2.^QD<
   465d4:	bd25ad1b 3d9ef607 be39b519 3dbf087a     ..%....=..9.z..=
   465e4:	bd275f93 bda7d935 3e8da141 bde72802     ._'.5...A..>.(..
   465f4:	bd9869ac bdf754e7 3e3884a6 bd033707     .i...T....8>.7..
   46604:	bddcd2d3 be18fc96 3cb258c3 bdd4f59e     .........X.<....
   46614:	3da7a247 bdb1f7ee 3daa52fe bc2da5c0     G..=.....R.=..-.
   46624:	bdabd45e be06dab2 3adc0377 3d4b22fc     ^.......w..:."K=
   46634:	3caa083c bc3485ef be30d2fc 3cd86ae6     <..<..4...0..j.<
   46644:	3d0f9cfe 3d8c811c bda5028f bc516f69     ...=...=....ioQ.
   46654:	3e393898 3d838c91 3ceda097 3d5691b2     .89>...=...<..V=
   46664:	3d0ed1b2 bdc23831 bda96d5b bdc79ef2     ...=18..[m......
   46674:	3cf46e9d be886586 bd598e19 3e0e9296     .n.<.e....Y....>
   46684:	bd933002 bd063063 bde90bc9 3d8db590     .0..c0.........=
   46694:	bd60d9a7 3d8ad10e 3dda3552 be1eb87f     ..`....=R5.=....
   466a4:	bd2a53a3 bc77d1f4 bc37c5f5 3d843705     .S*...w...7..7.=
   466b4:	3e134dae bd867aa9 bb601fe6 3b1d2413     .M.>.z....`..$.;
   466c4:	3cf553fa bd098524 be0b5e43 bd91b742     .S.<$...C^..B...
   466d4:	3d968c27 3da367aa 3e8301c2 be6ed831     '..=.g.=...>1.n.
   466e4:	3a2bb19f be0d4e54 bddc2b72 bd25cb94     ..+:TN..r+....%.
   466f4:	bdb2b64d 3d2e9d85 bd9db9a8 be7727ff     M......=.....'w.
   46704:	bcc88484 bdad26fd 3e1aca65 be090dc0     .....&..e..>....
   46714:	3e66f5ec bc0627f8 3e32d40f 3cdfa8bd     ..f>.'....2>...<
   46724:	3daa59d6 3c87f344 3dae3fad bdf2068f     .Y.=D..<.?.=....
   46734:	bdf4261c bd0bef95 bdd692df bee32a90     .&...........*..
   46744:	baf77c79 3e188852 bcb3c0d7 bbf2b783     y|..R..>........
   46754:	be36f085 be00de63 3d413e87 bd88f323     ..6.c....>A=#...
   46764:	3df4f30d 3cea0fd4 be7c0151 bd586d04     ...=...<Q.|..mX.

00046774 <cnnx10_b_tensor>:
	...
   46788:	0004678c                                .g..

0004678c <cnnx10_biases>:
   4678c:	bda2c0d5 3dd53ad5 be37e191 bec7a1ae     .....:.=..7.....
   4679c:	3df18f27 3e04473e bdaa8678 be794d0c     '..=>G.>x....My.
   467ac:	3e923b9b 3e35790f be83e485 be290f0d     .;.>.y5>......).
   467bc:	bdd05ac2 bcf5f3ed 3c8cc28c 3c286f0a     .Z.........<.o(<
   467cc:	bcd5afe0 be8f7a9e beab76bd bd887881     .....z...v...x..
   467dc:	3d5072ea 3e9173cd be7509eb bc66ff9e     .rP=.s.>..u...f.

000467ec <cnnx10_k_tensor>:
	...
   46800:	00046804                                .h..

00046804 <cnnx10_weights>:
   46804:	3dd53cc2 bebf41b4 bd021dca be1eca4e     .<.=.A......N...
   46814:	3da5923f 3d05c019 bd3ab19a be1e9e7b     ?..=...=..:.{...
   46824:	3b2f6863 be0ae5c8 be4b13bd bedcd4d6     ch/;......K.....
   46834:	3d8771bd 3c9ca35f 3cfedd46 bdea08ba     .q.=_..<F..<....
   46844:	bd6c4c92 bea9289d 3da2f828 be35f1aa     .Ll..(..(..=..5.
   46854:	bd9eb292 beda05f2 be928813 be2626c3     .............&&.
   46864:	bee052cc bdc1cf15 3d16b9b3 3cd4fbd5     .R.........=...<
   46874:	bda6ea1a bdd0a3f5 bf0f63b0 3aa7a622     .........c.."..:
   46884:	bda46c66 bc7eda51 3d44b93d ba4e4aa6     fl..Q.~.=.D=.JN.
   46894:	be1dd888 bea36442 3bcbd72e 3de0537e     ....Bd.....;~S.=
   468a4:	beb3622f be55533b bdec7512 3dc90cc0     /b..;SU..u.....=
   468b4:	bc89cf82 3ddfcd40 bbcf5279 be5323cb     ....@..=yR...#S.
   468c4:	3e339ec4 3df732af 3d1eef9d 3dbc16e2     ..3>.2.=...=...=
   468d4:	bdbb61c3 3c646504 bd1857f6 bdbefe31     .a...ed<.W..1...
   468e4:	bcea31bd 3bf6184b bd64b935 3d62a689     .1..K..;5.d...b=
   468f4:	3e01a5ca be30fd61 bc8d13aa be1a6bb6     ...>a.0......k..
   46904:	3bad6bf4 bde9bc6a be21cdf2 3d00402c     .k.;j.....!.,@.=
   46914:	be52ec88 be4d05bc 3dabcbba bca494ba     ..R...M....=....
   46924:	3d8fa808 3da01507 be0c8319 3d9ca72c     ...=...=....,..=
   46934:	bdc95159 3cdb7a2f 3e0bc77c be021efb     YQ../z.<|..>....
   46944:	be62c7d9 3e4806e2 3dbbea99 3d706d71     ..b...H>...=qmp=
   46954:	be260ba3 bc53ac0f bdc26e75 be411320     ..&...S.un.. .A.
   46964:	bdd61c0a beca896f bea0323d 3cb6efdc     ....o...=2.....<
   46974:	be0837e1 be2d2eee bcd7f408 3bb868d2     .7....-......h.;
   46984:	3e00ea6f be103156 be86b8da 3e88b823     o..>V1......#..>
   46994:	be236fba bd94c570 be0e9281 bc4e5f09     .o#.p........_N.
   469a4:	beb6d710 bc627efb 3e1bf419 bd92163f     .....~b....>?...
   469b4:	3da1ae5a bd9f96dc bd22836d 3e8d029b     Z..=....m."....>
   469c4:	be8fc969 bcefb691 bebee2a5 bd7b107a     i...........z.{.
   469d4:	3e8b237c be8dfea2 bd5c03c4 bd39ede8     |#.>......\...9.
   469e4:	3e2759dc 3db11c29 bd649f4c 3d0cf795     .Y'>)..=L.d....=
   469f4:	bddbdadb be0bfb21 bde0c96e be025bf1     ....!...n....[..
   46a04:	bd2bb8e6 3ce01361 bed197e7 3d949e34     ..+.a..<....4..=
   46a14:	be3d5d8f beff1d2e 3d3eaa9d be2e2c4e     .]=.......>=N,..
   46a24:	bd351810 3c2b32be bf065cd5 bb67fafc     ..5..2+<.\....g.
   46a34:	3e7ab01e be483773 3db26a3a 3e501031     ..z>s7H.:j.=1.P>
   46a44:	3cc3efff be1daa6b bd3312ac bd017e8b     ...<k.....3..~..
   46a54:	3ce07af5 3c87d303 be0ed6e7 3d863c6c     .z.<...<....l<.=
   46a64:	bca90c2e be5ce6c5 be8bb363 3bd9b075     ......\.c...u..;
   46a74:	be697c4e be6bea39 3e09666f be71c6f7     N|i.9.k.of.>..q.
   46a84:	be8ebb80 bde16949 bd9d0add bd1c61f6     ....Ii.......a..
   46a94:	3e0632c3 be00b64f beb24335 3d923e18     .2.>O...5C...>.=
   46aa4:	be3fcff9 be1af30f 3cc56885 bd2529bb     ..?......h.<.)%.
   46ab4:	be575ecf 3d74d2d3 be2764e2 be071cc5     .^W...t=.d'.....
   46ac4:	3c3982b8 bddb5dbf bea7e14f 3c3f4eca     ..9<.]..O....N?<
   46ad4:	3d8f38bd bce09734 bdc5728c bdc3f7f3     .8.=4....r......
   46ae4:	be20d708 bddb14d0 3cc054f5 3e4102b6     .. ......T.<..A>
   46af4:	be1bd0dd bdff121f 3e0e5198 3dd026c5     .........Q.>.&.=
   46b04:	bda903dd 3e6ba9b9 bdec82df bb4e98aa     ......k>......N.
   46b14:	be9d2d85 bdd1e301 bdc61b0e be0d7875     .-..........ux..
   46b24:	3e78a447 bd8e3065 be0e7502 3cac11b1     G.x>e0...u.....<
   46b34:	be901448 bde6c44b 3d9acf67 bea30f04     H...K...g..=....
   46b44:	3de071f8 bddb439a 3c09bf31 be05e8e9     .q.=.C..1..<....
   46b54:	3cb3b000 3e337ad5 3d6a8364 3ddcbdd8     ...<.z3>d.j=...=
   46b64:	bf048625 bd9e74fe 3d290e09 3ed68813     %....t....)=...>
   46b74:	bdfc8d81 be80a446 beef9156 3e0ee42d     ....F...V...-..>
   46b84:	bd05f58d bde5ca6d bd87d5cf 3e1f6f4a     ....m.......Jo.>
   46b94:	bed55279 3b4539b0 3e251bad bec6f79e     yR...9E;..%>....
   46ba4:	bed7e068 3df50e0f bb7a5922 3e9ae5a5     h......="Yz....>
   46bb4:	3dc34e02 3e460701 be5d78ae 3ed2ac17     .N.=..F>.x]....>
   46bc4:	bdd7f383 be243ad8 3e3d38fc bd3a43e9     .....:$..8=>.C:.
   46bd4:	3e70c74f bdc5addc 3cb7a437 3d7ac66a     O.p>....7..<j.z=
   46be4:	bcd33313 be1449b2 be95375d 3e80d626     .3...I..]7..&..>
   46bf4:	bdc875f0 be03d556 3dbf9273 bd8d403c     .u..V...s..=<@..
   46c04:	bc7f5d6e be649259 3d90a603 3d9c3286     n]..Y.d....=.2.=
   46c14:	3dec41af 3d308422 bc841497 bd277f02     .A.=".0=......'.
   46c24:	3e439afb 3dba6536 3e288083 3e218e5c     ..C>6e.=..(>\.!>
   46c34:	3b829b10 3e06084a 3d2ac711 3dd04b93     ...;J..>..*=.K.=
   46c44:	3c93ad11 bdd5fdf5 3ec20f2b bdb08367     ...<....+..>g...
   46c54:	bdefd50d 3db9e905 3dcfb4bc be39dac3     .......=...=..9.
   46c64:	bdefbb51 bdceb657 3e081e2e bcc0fc5a     Q...W......>Z...
   46c74:	3d3aab3f bcf4aec9 3e361f85 3e02efcb     ?.:=......6>...>
   46c84:	be092f03 3e19f2de bd786547 bdd2cf8b     ./.....>Gex.....
   46c94:	be873e66 bd73716c 3ded79ac bdc02793     f>..lqs..y.=.'..
   46ca4:	bc536c79 3dd53ec8 be95fc3e be62b64e     ylS..>.=>...N.b.
   46cb4:	be94a5de 3d017858 3dd82399 be4bb192     ....Xx.=.#.=..K.
   46cc4:	3de9bab8 3dcb7aa1 bd44e019 be436670     ...=.z.=..D.pfC.
   46cd4:	3e48e007 3d91f18e bd8b804c 3e7e1b39     ..H>...=L...9.~>
   46ce4:	3d8631a9 3c4722df 3dae93ce bd003408     .1.=."G<...=.4..
   46cf4:	be328643 bd106dd7 be106c69 bdf3adb2     C.2..m..il......
   46d04:	3d5b3caa 3d9f4329 b9a79d68 3d965843     .<[=)C.=h...CX.=
   46d14:	3dfe37e1 bef04058 bcaaa1ba be140b10     .7.=X@..........
   46d24:	bdf1a349 bdcf4d25 bc7e5cdd 3d7d0a0f     I...%M...\~...}=
   46d34:	bd9e5708 be99c1d3 be1498e9 3d16c509     .W.............=
   46d44:	be5917a8 3e4316bb 3daacada bddb477b     ..Y...C>...={G..
   46d54:	3a424dc3 bd0be0cc be2c0c01 bda7afba     .MB:......,.....
   46d64:	3d998dd8 3e807bea bec5006e bc7568e3     ...=.{.>n....hu.
   46d74:	3d688631 be3064be 3ccf8e78 3cf61b0a     1.h=.d0.x..<...<
   46d84:	bd7676f5 bebb4711 3cb7516b bdb44ad6     .vv..G..kQ.<.J..
   46d94:	3d92e2a9 3d4f630d 3b0397d0 3e3c4294     ...=.cO=...;.B<>
   46da4:	be379769 3e15b301 3d409206 bea3292c     i.7....>..@=,)..
   46db4:	3bdac573 3cc5b75a bd492ef3 bd965f8e     s..;Z..<..I.._..
   46dc4:	3ded7853 3d8368b7 3d10eeeb 3e15c196     Sx.=.h.=...=...>
   46dd4:	3e17e31d 3df7d877 3ce65c35 be7d5a72     ...>w..=5\.<rZ}.
   46de4:	3cf99ca4 bec9c58f bca26dde bd15075e     ...<.....m..^...
   46df4:	bdecc854 bebc2f91 bd6419f3 bdf64a7f     T..../....d..J..
   46e04:	3d947b6c bd9fe2bd 3dc6935c be84ad77     l{.=....\..=w...
   46e14:	3dfbc207 3e7e4d93 bda7bb2b 3d8510fa     ...=.M~>+......=
   46e24:	3d15a332 be1a4d1e 3d14d918 3e3bb0b7     2..=.M.....=..;>
   46e34:	bc8d7dac beb8a689 3cb3a9c6 be096ae9     .}.........<.j..
   46e44:	bebe83a2 be5df4ef bd55e80c bd2a9c08     ......]...U...*.
   46e54:	beb03a04 3cbaf5b5 3cfbfe48 be09d2eb     .:.....<H..<....
   46e64:	bda01058 3e03aaac be60ef38 3d1a197f     X......>8.`....=
   46e74:	bdbffdb5 be395fb8 be5a7164 3ce1f5c4     ....._9.dqZ....<
   46e84:	be2d0d01 3d8c7da3 bde6f510 be6568ca     ..-..}.=.....he.
   46e94:	be749ef8 bebcde7f 3ca6d52c bec02323     ..t.....,..<##..
   46ea4:	3ba82db1 bded7ca5 3c96d32b bd0403bb     .-.;.|..+..<....
   46eb4:	bc8589cd be805bea 3c094685 bd72dda8     .....[...F.<..r.
   46ec4:	3d54d473 3b2a66f1 bbe780c3 3d99c75f     s.T=.f*;...._..=
   46ed4:	bd1443ed 3d4101fe 3c9d4454 bea3f3d9     .C....A=TD.<....
   46ee4:	3e960d88 be4a4fd9 bda1524d 3d1449d4     ...>.OJ.MR...I.=
   46ef4:	bd0d949e bd3e66f3 bda92ce4 be0a916f     .....f>..,..o...
   46f04:	3c920bb6 3e20cb46 bd4b2ac1 be0e38ea     ...<F. >.*K..8..
   46f14:	bdbd0a4a 3cb7d3b7 be9fb38c be877876     J......<....vx..
   46f24:	bc7a1bba be4e2f8f bce3fd7b 3eaa68df     ..z../N.{....h.>
   46f34:	3df03516 bdf9fb5d 3e8fb11e bde6dc61     .5.=]......>a...
   46f44:	3e20cad2 bda7e9c2 bd9bd202 3a6bbe55     .. >........U.k:
   46f54:	3ca9d44a 3e500851 3e0946bb 3d2b3fa4     J..<Q.P>.F.>.?+=
   46f64:	3dcfcf18 3b3ca2de bdc032a3 3de39de2     ...=..<;.2.....=
   46f74:	3d413b49 3dc0fdf3 bd1c0366 bdb56419     I;A=...=f....d..
   46f84:	be1a0567 be8151cf 3c50965b be5e893d     g....Q..[.P<=.^.
   46f94:	3d682818 bc614636 be877e74 beaa6d6f     .(h=6Fa.t~..om..
   46fa4:	bdbcfe97 be2cc4b7 3c9ba9df 3e506e20     ......,....< nP>
   46fb4:	be930cac bdbb2f62 bd16ce30 3dd19aa5     ....b/..0......=
   46fc4:	bc278c4b bd6172bc be5d4da9 3d5258f3     K.'..ra..M]..XR=
   46fd4:	beb48007 3d829903 3bd2494e bdb83d0a     .......=NI.;.=..
   46fe4:	bcbb8b57 3c3b0189 bd13c351 be4d003f     W.....;<Q...?.M.
   46ff4:	3d4aaa20 bd7297bd bde70010 3a0bdc98      .J=..r........:
   47004:	3baad500 bdedd8da bde0ea6b be7e6e37     ...;....k...7n~.
   47014:	bd16e450 bcb414d5 be5b11cf bc053bea     P.........[..;..
   47024:	3d62f025 bd0b01a6 bd95d00b 3db94588     %.b=.........E.=
   47034:	beb0333a bf0123a0 be3b0cda be7a6982     :3...#....;..iz.
   47044:	3dcf933a 3d485571 bd9c8421 3e10e37f     :..=qUH=!......>
   47054:	bd75db3e be529727 3dce45a0 bd52417b     >.u.'.R..E.={AR.
   47064:	be76554b 3c0252cb 3e29abcc 3dbcfb3e     KUv..R.<..)>>..=
   47074:	be7fac35 3d312dba 3d27d640 3d5ba827     5....-1=@.'='.[=
   47084:	be06025f bd99ae5f bbd24eac 3d8737a3     _..._....N...7.=
   47094:	bd8843cc be6b26c6 bc372e8b 3e0212ba     .C...&k...7....>
   470a4:	bdf3764f bd55929c 3de14014 3e193b89     Ov....U..@.=.;.>
   470b4:	3dd18bc0 3e63d94d bec0b307 3dffe407     ...=M.c>.......=
   470c4:	be81b7bc bca85ab2 3d9bcef9 3eda1b1e     .....Z.....=...>
   470d4:	3e28010b bef9fb7c 3d967a03 3d70986e     ..(>|....z.=n.p=
   470e4:	3da99203 3d9e1d73 be2323d8 3e25e9ab     ...=s..=.##...%>
   470f4:	3c906ede bda1a59b 3e12d6e5 3d94f7fe     .n.<.......>...=
   47104:	3da5dbc2 bd6fdf46 bdfc3264 bcacbc3c     ...=F.o.d2..<...
   47114:	3e3e5801 be4d5eec bcf721cb bd8f7203     .X>>.^M..!...r..
   47124:	bda98e03 be215585 bd9a38f2 bd81d46e     .....U!..8..n...
   47134:	be889032 3d8439fd 3d247a00 bdeb6f17     2....9.=.z$=.o..
   47144:	bec009c3 be138b9f 3e0e43d8 bd79892b     .........C.>+.y.
   47154:	be50f424 bedeaee9 be8f22fa be037b31     $.P......"..1{..
   47164:	befe2121 3b057677 be71c01d 3b9e777a     !!..wv.;..q.zw.;
   47174:	be79dcf8 bd3587f5 3ce25cb1 3dc8aa63     ..y...5..\.<c..=
   47184:	be921cb4 bce46ee5 3df28a7b 3e4bd781     .....n..{..=..K>
   47194:	3dddedce be8a2f8d 3d9c2feb 3d4e4149     ...=./.../.=IAN=
   471a4:	bdf3627f 3d861b41 3d82b9e5 3dc5cfe0     .b..A..=...=...=
   471b4:	3cf4c1a9 3c642462 be33ffc2 be0f68ae     ...<b$d<..3..h..
   471c4:	bdd207cd bd678da6 3d5b20fb be7ffb8d     ......g.. [=....
   471d4:	3cc91adc 3db518ce 3de5f206 bdb5e7af     ...<...=...=....
   471e4:	bdf8569f 3e015260 3e2d6212 bec53517     .V..`R.>.b->.5..
   471f4:	be175e34 be894d63 be5855a3 3d41696f     4^..cM...UX.oiA=
   47204:	bd18776d bdc53667 bcbf6911 bdd37165     mw..g6...i..eq..
   47214:	bd599fec be8b3e78 3d3726d6 bdb22ffb     ..Y.x>...&7=./..
   47224:	bdcff77c be4795ba bedd23c9 3d999cde     |.....G..#.....=
   47234:	3d81e728 3e64bb83 be58df4d bed04c42     (..=..d>M.X.BL..
   47244:	beacf45f 3dc2cacc 3d0dffe5 beb7d00a     _......=...=....
   47254:	be0d57ed be92ca12 be86178d be755ae2     .W...........Zu.
   47264:	3c92eac4 3e34c818 be34be3c 3da60d12     ...<..4><.4....=
   47274:	bd05966a be1408b6 3d376f86 3cec4380     j........o7=.C.<
   47284:	bd301132 be865a2a bc8fe510 bdf158b9     2.0.*Z.......X..
   47294:	bcc65067 bd5de777 3e9534b3 3e1018a4     gP..w.]..4.>...>
   472a4:	be3ca8d9 bc9a6547 3c15c254 be2d1adc     ..<.Ge..T..<..-.
   472b4:	3d132071 be0eb8a7 bc28cf0c 3dab7a5f     q .=......(._z.=
   472c4:	bf0082be be6b7eed be963913 bde36e8b     .....~k..9...n..
   472d4:	3ddf2e11 bd273ece be9fa581 bc33b788     ...=.>'.......3.
   472e4:	3d68a8c3 be085ba3 3d766ac0 3e66087b     ..h=.[...jv={.f>
   472f4:	3da03c87 bca6d9f4 3d6f1199 3c25691b     .<.=......o=.i%<
   47304:	bd4aad53 3c16f4ae beeb1b23 3c78cae2     S.J....<#.....x<
   47314:	be7abd8a bed21d37 bcdcdb32 be75532a     ..z.7...2...*Su.
   47324:	be15b3cb 3db950cd be988065 3c7aa1dd     .....P.=e.....z<
   47334:	bc8ddc0c bbc9de30 3e1ef77e bcaf9fc0     ....0...~..>....
   47344:	be824b0f bdf24d2e 3dd72b9a bcc40efe     .K...M...+.=....
   47354:	bd05ca8a bdecf2ba be6ab91d be97a45f     ..........j._...
   47364:	be60a8ae be4ab0f3 bdc234db bd7e19e4     ..`...J..4....~.
   47374:	beac48e7 be95c525 bbefed63 bef4ed99     .H..%...c.......
   47384:	bf0b509b bdbd02b1 3d321043 be11167b     .P......C.2={...
   47394:	3def1332 bddf882b bef7cdda bd879cf4     2..=+...........
   473a4:	be264bfd be7126b6 bdab4d05 bd75a9f0     .K&..&q..M....u.
   473b4:	be4b4244 bd9f72d6 bcf3d708 3a55136d     DBK..r......m.U:
   473c4:	3d323013 bc8726f6 bdf04286 3dcfaf80     .02=.&...B.....=
   473d4:	bdc7881b bdba84d6 bdcc40db bd9a10cc     .........@......
   473e4:	be514bbe bd727a28 3e1165fd 3e5cf5fd     .KQ.(zr..e.>..\>
   473f4:	3d80eeaf 3e1248cf 3e396eed bdb8f6f1     ...=.H.>.n9>....
   47404:	be1f0deb bc6d77d3 bdbc953b 3ea87893     .....wm.;....x.>
   47414:	be8c638b bed03d1d bdc08613 bc8489e3     .c...=..........
   47424:	3d9fd59b 3de04731 bd6afd82 3d7579d7     ...=1G.=..j..yu=
   47434:	bbd8c2ba bdb8cd03 3ddcb97f bdc23690     ...........=.6..
   47444:	3d9e046c 3c22a8ed 3de86e70 3dce6784     l..=.."<pn.=.g.=
   47454:	bed7b4f3 3cc4c05e be817183 3d6ec192     ....^..<.q....n=
   47464:	bf098f48 be4add41 3c8a1131 3e81c759     H...A.J.1..<Y..>
   47474:	be318afb bdd88234 be828452 3d525eda     ..1.4...R....^R=
   47484:	3c731fe8 ba865d52 3d5e04de 3d2a21fd     ..s<R]....^=.!*=
   47494:	be96e141 bdce49f9 3e8e6447 3e8b3815     A....I..Gd.>.8.>
   474a4:	bda37554 3e31781d 3ccd5eee 3dfe198b     Tu...x1>.^.<...=
   474b4:	3e52baa0 be614e30 3c444224 3e347f6a     ..R>0Na.$BD<j.4>
   474c4:	be632e19 3dae85e8 3e5421f1 bde926eb     ..c....=.!T>.&..
   474d4:	3e07f4a5 bed1f123 3e1ffd36 bd1c7323     ...>#...6..>#s..
   474e4:	be6aa68c bd2503db 3eb04619 beb57d05     ..j...%..F.>.}..
   474f4:	bd6ae27f be6d19bb 3d18fb57 3d4395e2     ..j...m.W..=..C=
   47504:	3e04b93e 3d7e8a3c 3be04e34 3e24eb24     >..><.~=4N.;$.$>
   47514:	3c849daf 3ddd158d 3d43e6d8 3d04f314     ...<...=..C=...=
   47524:	3cb9d3d1 be18a634 3e889219 3e3deecf     ...<4......>..=>
   47534:	3e81e10c 3c58c5ff bdc2c551 be188af8     ...>..X<Q.......
   47544:	3dd224f7 bdd5d416 3e48ee4f be0bd295     .$.=....O.H>....
   47554:	be0e7aa9 3e6df024 3da4b734 be8ae492     .z..$.m>4..=....
   47564:	3de52d52 3c97f1df 3d5710b3 bd13ae6e     R-.=...<..W=n...
   47574:	bbc1d309 bd40873c bda8147f 3b81cf38     ....<.@.....8..;
   47584:	be15e21a be621754 be032550 3dcf14e1     ....T.b.P%.....=
   47594:	be067ffd 3e08ae92 be38033f bd1dfbf1     .......>?.8.....
   475a4:	3e46c4b3 3dbfe95b bd9cd8d5 bed38986     ..F>[..=........
   475b4:	bf146536 3d450c64 3df3c40d be2ff1af     6e..d.E=...=../.
   475c4:	3d7e01d3 3ce88311 bdafda04 bd975a10     ..~=...<.....Z..
   475d4:	3e1a2107 3e2b99f8 bd963fd5 be5e3a0e     .!.>..+>.?...:^.
   475e4:	be1fe9d3 be11b5a3 b99b5cbd bead73d2     .........\...s..
   475f4:	be8dc867 3d3c5e27 bd249aea 3cf7ffa1     g...'^<=..$....<
   47604:	3e60f360 3cde481f bd614009 bdeddd46     `.`>.H.<.@a.F...
   47614:	3ddea980 be113422 bd4408fc bd68e7f3     ...="4....D...h.
   47624:	3d914409 bd452dd7 3e7413b9 3e33f23b     .D.=.-E...t>;.3>
   47634:	be8dd282 bd8eec29 be3a3bc4 bd7a2ed0     ....)....;:...z.
   47644:	bd54e176 3d062261 3d9c33e6 3e47392c     v.T.a".=.3.=,9G>
   47654:	3e3ad00b 3e916509 be145aa7 3e741939     ..:>.e.>.Z..9.t>
   47664:	3d694eee 3e0af2bd beaf5e97 bd0f1183     .Ni=...>.^......
   47674:	bd9f7f7a bb9fa867 bc25e146 bdaa8b1c     z...g...F.%.....
   47684:	be196164 becea179 3d709780 bdc0babf     da..y.....p=....
   47694:	3e05c895 bda1f388 3dda6734 3dcd7d28     ...>....4g.=(}.=
   476a4:	bd539b35 3d8e776c bb9f842a bf0a16c4     5.S.lw.=*.......
   476b4:	3d79cfed 3e38ef61 be2f82ea bc67ee06     ..y=a.8>../...g.
   476c4:	3e2e3c73 3be8b409 3e3cd789 3d97c786     s<.>...;..<>...=
   476d4:	bcba951d 3d8b27ad bde7c25b bce36d48     .....'.=[...Hm..
   476e4:	ba7cfc15 be411f7f 3ddaf53c 3d57c3e7     ..|...A.<..=..W=
   476f4:	be1f7d96 be23d069 bd0b6452 be55d11b     .}..i.#.Rd....U.
   47704:	3d87dcac 3d8c3961 3e74224d bdaa3d6b     ...=a9.=M"t>k=..
   47714:	3e8f1d0f be941dd5 bec54993 bd20e2e7     ...>.....I.... .
   47724:	3ce147d9 bd6bd271 3ccc0760 3d64bfb8     .G.<q.k.`..<..d=
   47734:	3e8cf1da bebee0d7 3d6d5599 be34fa79     ...>.....Um=y.4.
   47744:	3d585696 be5dca40 bd42d8a8 be57159d     .VX=@.]...B...W.
   47754:	bdf85b16 bd8edcc9 3d1f36fa 3e2f2632     .[.......6.=2&/>
   47764:	bdb1382b 3c99efe0 bd6e885e be6bb00e     +8.....<^.n...k.
   47774:	bdde1aec 3cc081a0 3b92e8e6 bdf8230a     .......<...;.#..
   47784:	bd5d001e 3e0f3792 3df719c6 bea377cc     ..]..7.>...=.w..
   47794:	be8e4675 be8d4caf 3dadec75 be0d5815     uF...L..u..=.X..
   477a4:	be8aac6c bd769022 3d8d25fd bddb12d3     l...".v..%.=....
   477b4:	bd5dd66d be369837 3db367b5 bdfbc3f9     m.].7.6..g.=....
   477c4:	3e12342c 3dfcff0e be0abf65 3c522d5f     ,4.>...=e..._-R<
   477d4:	bd9e5f45 be56e39a be684f63 be4d14e0     E_....V.cOh...M.
   477e4:	3d0d4c7c 3e10594d bed0c421 3bb27431     |L.=MY.>!...1t.;
   477f4:	3d6316b8 3d1cbad9 be01c291 3d0291be     ..c=...=.......=
   47804:	3c28cc47 bc39eeb9 bd356af1 bdc88bf4     G.(<..9..j5.....
   47814:	bda18311 bd9e30fb bdb721f8 3e8fb7d4     .....0...!.....>
   47824:	be302b03 bdd5bd06 bd1d2c26 3d9d1c18     .+0.....&,.....=
   47834:	3e0c86bd be6230b6 be4a520f be0b144c     ...>.0b..RJ.L...
   47844:	be20911e be67f698 3e088cfe 3c4cd57b     .. ...g....>{.L<
   47854:	3da3749b 3db43094 bb852442 be602e3c     .t.=.0.=B$..<.`.
   47864:	3e68dfa4 3e17a4c6 be9f33d9 3e034ceb     ..h>...>.3...L.>
   47874:	3eb9d193 bc05cc7d bc622fcb bdfea856     ...>}..../b.V...
   47884:	be4121b7 3d61beaf be4068c0 be5d08ca     .!A...a=.h@...].
   47894:	be03a5f4 bed680a0 bd389639 be228f19     ........9.8...".
   478a4:	be54e620 bdf1945a be35b461 baf0eab9      .T.Z...a.5.....
   478b4:	be49b4a6 be43c77a bd0f32b6 bd673907     ..I.z.C..2...9g.
   478c4:	bd4678ad be4fbf62 bd2cac51 bda3b01a     .xF.b.O.Q.,.....
   478d4:	bd746a78 bce93b28 bd63e0c8 3db74445     xjt.(;....c.ED.=
   478e4:	3b2feabf 3e4476f7 be585dbf be5eeb91     ../;.vD>.]X...^.
   478f4:	bd1d6e2a be75be1c be6cd388 be045656     *n....u...l.VV..
   47904:	3d0b8ea7 bd9f06d8 be231f9c be05920e     ...=......#.....
   47914:	3a8b0fe9 3d140d43 be7475f7 3d9312e2     ...:C..=.ut....=
   47924:	3d8e7f15 3dd5bd02 3da68b90 3e035a86     ...=...=...=.Z.>
   47934:	be768e9e bf011df0 bd01f530 bea5d1b6     ..v.....0.......
   47944:	be502879 bcb33ee7 bc8b7a0c bceff2c7     y(P..>...z......
   47954:	be3add49 be34adbe 3cb15ae7 3e12cb3d     I.:...4..Z.<=..>
   47964:	be180ffb be420ab0 3e07021e 3dd3d326     ......B....>&..=
   47974:	beb31bc8 3e6eb409 3e1e15ab be8b5b6b     ......n>...>k[..
   47984:	3d492f11 bdc3070a 3c050bf9 3d1631e6     ./I=.......<.1.=
   47994:	3de73f4b 3e287a69 bd3cfc65 3d888640     K?.=iz(>e.<.@..=
   479a4:	be3b6640 3d3ae4b5 3c183099 3dfedc5d     @f;...:=.0.<]..=
   479b4:	3e90ecd5 3d805526 bea81ec8 3ea17308     ...>&U.=.....s.>
   479c4:	be0d7812 3d7d162e 3db55660 3ddb7887     .x....}=`V.=.x.=
   479d4:	3e76ac17 bf1e9a05 be1c0b75 3e272440     ..v>....u...@$'>
   479e4:	bed8203f 3e40ab75 be16d0a5 3e9890d9     ? ..u.@>.......>
   479f4:	3dc28134 bd3098fa 3e83e63d 395a4586     4..=..0.=..>.EZ9
   47a04:	bcada072 3e09746c be400a05 bdad1f2c     r...lt.>..@.,...
   47a14:	3c838317 be77e5fa 3d4ff1e0 bd178e82     ...<..w...O=....
   47a24:	bc804133 be645147 3cacd0e4 be1cbacd     3A..GQd....<....
   47a34:	be29bc99 be37f63d 3d0badae 3d8fc8e8     ..).=.7....=...=
   47a44:	be0bb72c bd2a5e60 3d33141c bc2e81f4     ,...`^*...3=....
   47a54:	bdd1047d be840452 be1df42b be486def     }...R...+....mH.
   47a64:	be91e7d5 bcddbd50 3d8312e9 bdc961d4     ....P......=.a..
   47a74:	be683412 3deed017 3decb3a2 be0b132d     .4h....=...=-...
   47a84:	bd5fb7bb bcf5c747 be8df7e4 be020dee     .._.G...........
   47a94:	3d99b1e9 be1b6f96 3db9e7fa be885dfa     ...=.o.....=.]..
   47aa4:	bcc06b45 bd3be3ec 3dc7704c bcc4cd1f     Ek....;.Lp.=....
   47ab4:	bd0ef655 bdf153db 3d88c1bd 3e71c8ed     U....S.....=..q>
   47ac4:	be983793 bd97cbcb 3e07312b be3047ea     .7......+1.>.G0.
   47ad4:	3e047b5b 3ba08069 bd1224d0 3da2fe28     [{.>i..;.$..(..=
   47ae4:	3d722323 3e03d636 3d76f03f beb73953     ##r=6..>?.v=S9..
   47af4:	be8ae037 befab216 bdfa5d90 3e9c8abd     7........].....>
   47b04:	bd4f6729 beca531e 3d01d5c8 be542a50     )gO..S.....=P*T.
   47b14:	bd763b05 3e545057 bd2687a1 3d965cde     .;v.WPT>..&..\.=
   47b24:	bf0ad7e2 bec0ecfa bf291470 bde68d3c     ........p.).<...
   47b34:	3e4cb266 bd4c4858 3e0ba7c7 3d9fb975     f.L>XHL....>u..=
   47b44:	bce2d8ad 3ca09968 ba8c8f1a befe53c4     ....h..<.....S..
   47b54:	be394e90 bd3727fa bd8c86bc bc84c562     .N9..'7.....b...
   47b64:	3e1d5cf5 bce0451f be2ba684 3a9784ec     .\.>.E....+....:
   47b74:	3c65fdeb 3e70fc17 bb327533 bd82b666     ..e<..p>3u2.f...
   47b84:	be94d459 3e0484a5 3bc91837 be5bebea     Y......>7..;..[.
   47b94:	3d2be6be 3dbb7d52 bdf25933 bde50a5a     ..+=R}.=3Y..Z...
   47ba4:	3d4c7f57 bd0d04be 3e5c8924 bd0f783b     W.L=....$.\>;x..
   47bb4:	3e36ab46 3e3d9b75 3dcc9580 3dedc8d6     F.6>u.=>...=...=
   47bc4:	bf23b4f2 be9f62ef be392976 bed5aa03     ..#..b..v)9.....
   47bd4:	bebee6ba 3dd8080e be74fef3 be1688ed     .......=..t.....
   47be4:	becd9ba0 3e116ffe 3e38440f bd8e273c     .....o.>.D8><'..
   47bf4:	3d977b5e 3da7b691 3c1cd604 bed1987f     ^{.=...=...<....
   47c04:	3d1b2578 be40ce23 bea32c02 3d9b2ab0     x%.=#.@..,...*.=
   47c14:	be0501fc be6c9cc9 be56e414 3e14c1c6     ......l...V....>
   47c24:	3d8a9cee be7d6faa 3de9debc be0051a2     ...=.o}....=.Q..
   47c34:	bea0ec9b bd6d55ec bd4c0a55 bd1e0993     .....Um.U.L.....
   47c44:	be2a305a bd3fb5fe bcd86c83 3d2418df     Z0*...?..l....$=
   47c54:	bcfa1fb1 be2fe857 bd75b633 be36161e     ....W./.3.u...6.
   47c64:	bd1fed1b bd05b561 be493bac bd2d8e61     ....a....;I.a.-.
   47c74:	bea95b1c be93936d bd85691c bdd6d82d     .[..m....i..-...
   47c84:	beb359d0 bcce6db7 bd5d8fe9 be89bb46     .Y...m....].F...
   47c94:	bc1c3dc4 be7f3b05 beaf08f6 bea3179f     .=...;..........
   47ca4:	bda1c4c8 beaa25bd 3c18ec4b be568b38     .....%..K..<8.V.
   47cb4:	bd228fe0 bd9c7955 be025e59 bda4e18a     ..".Uy..Y^......
   47cc4:	3d99768c bd3e2b34 bdb55631 3d150a81     .v.=4+>.1V.....=
   47cd4:	3c32ad92 bd1c0abb bc4a6656 bc11d6d8     ..2<....VfJ.....
   47ce4:	be8ba32f be223eb1 3da58e5b 3dddec6e     /....>".[..=n..=
   47cf4:	3dd87f4f 3ddb8e31 be3932c2 3e0177f5     O..=1..=.29..w.>
   47d04:	3dc2f824 bda92a48 3dc54247 bd926e92     $..=H*..GB.=.n..
   47d14:	be0655da 3e61ac1b bcfb7902 3d2bdd23     .U....a>.y..#.+=
   47d24:	be722d2d 3e137c1f 3d594584 be85fbee     --r..|.>.EY=....
   47d34:	3c219a19 3d4a99c2 3d7ca91e bdebd6ce     ..!<..J=..|=....
   47d44:	bd3c9cfc bd80a5a2 3dfce57e 3da4aff1     ..<.....~..=...=
   47d54:	3ddb2fc8 bd70860a bf07873d 3d49cb68     ./.=..p.=...h.I=
   47d64:	bf054711 bd88b92c 3e08fd9d 3e6df758     .G..,......>X.m>
   47d74:	be09d3da bd81c3b1 3e63840e bdcac707     ..........c>....
   47d84:	bdc0a49a 3d05cce9 3c1659c9 be5e1c6a     .......=.Y.<j.^.
   47d94:	3cef5289 3ded14ae 3dfaf912 bdc143af     .R.<...=...=.C..
   47da4:	be165233 3daabe0f 3dcfced2 3db4f850     3R.....=...=P..=
   47db4:	3d18c239 beaaeba0 3e8a3771 3dc8d7e6     9..=....q7.>...=
   47dc4:	bee3a0ae 3df2169b 3da5ba12 bebc21bb     .......=...=.!..
   47dd4:	3c4f17d6 be3c4909 be65af6c be9f738a     ..O<.I<.l.e..s..
   47de4:	be8cea52 3d3f6223 3d6023bf be85319f     R...#b?=.#`=.1..
   47df4:	be2ff311 be37afae bc299753 3de48052     ../...7.S.).R..=
   47e04:	bcf80dde 3e0fae5a 3d9b8726 bd070b6d     ....Z..>&..=m...
   47e14:	bdbbd045 3f0a4e62 bd4b2550 bcd6bd46     E...bN.?P%K.F...
   47e24:	3ca4a308 3dcb1555 3e338bfc bd3fe88b     ...<U..=..3>..?.
   47e34:	3e3e45e7 3dd47d9d bc6c91a4 bdb746ab     .E>>.}.=..l..F..
   47e44:	3dc0097d be0d1b86 3d738591 3d5b797e     }..=......s=~y[=
   47e54:	bd808f38 3ce9c08e bd044b87 bc9f3f7b     8......<.K..{?..
   47e64:	bd9e5214 be9d4608 bd8507e2 3cbed909     .R...F.........<
   47e74:	bdeab538 3c193627 bd0d3057 bdbe53ca     8...'6.<W0...S..
   47e84:	3cf870e5 be9ea0ab 3d50585d bcf8e75d     .p.<....]XP=]...
   47e94:	3d7fe5f7 be6ecedc 3e548224 3e5e98c2     ...=..n.$.T>..^>
   47ea4:	3e73115b 3e06bc95 3d80094a be3a1efc     [.s>...>J..=..:.
   47eb4:	bee858c6 3d76dbb2 bd1a5010 bf1381a7     .X....v=.P......
   47ec4:	be2dc7fb be365675 be1f3983 3e1aeb41     ..-.uV6..9..A..>
   47ed4:	be304880 be794177 beb50c65 bef9ebf3     .H0.wAy.e.......
   47ee4:	be115108 be4c794c bc652259 bdb6867f     .Q..LyL.Y"e.....
   47ef4:	be319ca5 3e08ef82 3dfc84ed bea40941     ..1....>...=A...
   47f04:	3e2a640a bc581b8a 3e230f48 3daf5a67     .d*>..X.H.#>gZ.=
   47f14:	3da811b5 be537f83 bdee0171 be94976c     ...=..S.q...l...
   47f24:	3b071be9 bdd0c2d5 3ea1f400 be773200     ...;.......>.2w.
   47f34:	bd8afe74 3e55c078 bd9a310e be999101     t...x.U>.1......
   47f44:	bed7ed87 3daf5fa7 3db117d5 3ddf971f     ....._.=...=...=
   47f54:	3e502bf9 3d62233b bdea4995 3e3da00a     .+P>;#b=.I....=>
   47f64:	3dac70dc 3d38e7bb be47e5d8 bd338393     .p.=..8=..G...3.
   47f74:	3dc49bea 3e59aa55 3dd538a1 3d28b0dc     ...=U.Y>.8.=..(=
   47f84:	bdc9ccbf bea22ce7 bda23080 3c53bdc2     .....,...0....S<
   47f94:	bdb4d1dd beb1c137 bcc88215 bdf7e436     ....7.......6...
   47fa4:	be586845 3dad438a be110e2b be67d6eb     EhX..C.=+.....g.
   47fb4:	3cea8e79 bd964d53 be97b526 be385d3c     y..<SM..&...<]8.
   47fc4:	3e301fd1 3da4d9bc bcc7f811 3a9821f5     ..0>...=.....!.:
   47fd4:	3e252fa1 3e00469f bdb3433c bea90d7c     ./%>.F.><C..|...
   47fe4:	bd19d6a9 bdd64c77 3b8ba1ca bceae04e     ....wL.....;N...
   47ff4:	bbdc12fb bda4f5b7 3d652ceb bbeb5564     .........,e=dU..
   48004:	3dbc26e4 3e9e2225 3e82f74b 3e8838e4     .&.=%".>K..>.8.>
   48014:	3def4f24 3a57c34b 3d9c5c83 be8ae68f     $O.=K.W:.\.=....
   48024:	be50f2fa bca33baf be0781c1 3c0dddb9     ..P..;.........<
   48034:	3e4c49ea bebf8fb5 3dd7bd7a be9ee027     .IL>....z..='...
   48044:	3e023cba be60330c bd6c6434 be7ab1d8     .<.>.3`.4dl...z.
   48054:	3e192de4 bd9578e6 3de17ee9 3e0eef9e     .-.>.x...~.=...>
   48064:	bdf0ff0a be87f587 3de40ce5 be287255     ...........=Ur(.
   48074:	3d87b44c bc9efc4f be5a14ee bc5ca2ae     L..=O.....Z...\.
   48084:	3cc737fd 3db42ba1 be4d2cd7 be0281ac     .7.<.+.=.,M.....
   48094:	be7010b0 bd589e34 3d6701e5 bd8be46d     ..p.4.X...g=m...
   480a4:	bdbb2d83 be0c6d69 3d8794f7 bd4f0346     .-..im.....=F.O.
   480b4:	bdcd3b9e be6b0a78 3e124d19 bc48bfa2     .;..x.k..M.>..H.
   480c4:	3e360076 3df4dfa1 bd064303 be27fd9e     v.6>...=.C....'.
   480d4:	be3dcccb 3e5853f5 3d7dc5d9 bd8babef     ..=..SX>..}=....
   480e4:	bef5627d 3e50900d be6f6748 3d501aaa     }b....P>Hgo...P=
   480f4:	3e3547ff bc566959 be58f68b 3e459d5c     .G5>YiV...X.\.E>
   48104:	3d52739b 3e053398 bd81a95c bd8c47a6     .sR=.3.>\....G..
   48114:	bd9bce99 3e321ae6 be832351 3e4fb3a6     ......2>Q#....O>
   48124:	bda7f83a bdd0ab2f 3deda520 3e9d327e     :.../... ..=~2.>
   48134:	3d533209 bd901122 3dd20ab3 be56ded3     .2S="......=..V.
   48144:	bf07ade4 bd5dde9d 3cac22b9 bcc265e1     ......]..".<.e..
   48154:	bca53d8c bd7b8636 3d0f7754 3cc6066a     .=..6.{.Tw.=j..<
   48164:	3e108d51 bd8e34a6 be021b4f 3c312160     Q..>.4..O...`!1<
   48174:	bc14f961 3ca11a7d 3dddb6a1 bcd988fe     a...}..<...=....
   48184:	beaae057 3d40cec7 be223bcf 3dd61e79     W.....@=.;".y..=
   48194:	be60fcb1 3d401704 be77e035 bd04419b     ..`...@=5.w..A..
   481a4:	be8abca4 bcbdd228 3d82f989 bde950ab     ....(......=.P..
   481b4:	bd8feeca bd86811f bd82b4c9 3b256bb5     .............k%;
   481c4:	be6da2f6 3db01373 3dcb4e33 be67d9e0     ..m.s..=3N.=..g.
   481d4:	3dcfe24e bc5148dd 3dc173af bc834509     N..=.HQ..s.=.E..
   481e4:	bd9e592c bd6d582d be3786b2 be303c4f     ,Y..-Xm...7.O<0.
   481f4:	be254da3 be19fcb9 bda2276b 3d7cc1e8     .M%.....k'....|=
   48204:	be8e36b6 bd1c6902 3d01a541 be251f7c     .6...i..A..=|.%.
   48214:	3d500630 3d3e3e64 be6e6dfa 3d16900d     0.P=d>>=.mn....=
   48224:	3d760184 3ddeabc7 3db5c4f1 3da179d7     ..v=...=...=.y.=
   48234:	be0a244b be764f28 bd8e4487 bd5bd4bd     K$..(Ov..D....[.
   48244:	be0758bd 3c19d10c 3da64807 bcf6735a     .X.....<.H.=Zs..
   48254:	bd62303c be9a7365 be0f4f1c be19708a     <0b.es...O...p..
   48264:	bb4435a4 be607cd8 3e22b7a5 be7f20e8     .5D..|`...">. ..
   48274:	be4193d9 3db2a682 3e101d87 be6c73a3     ..A....=...>.sl.
   48284:	bab1f937 3c6c4d10 bc9e3cd2 bbcc5706     7....Ml<.<...W..
   48294:	bdf35cc9 3ea231d2 be99bd55 3e175cc7     .\...1.>U....\.>
   482a4:	bf1251e3 3e59ebea bd27e118 3e0240ef     .Q....Y>..'..@.>
   482b4:	3e521fbd bdd214e8 b9505771 3ea15b85     ..R>....qWP..[.>
   482c4:	3b715fff bd02fb85 bdaf4ca3 bed8b1b9     ._q;.....L......
   482d4:	3bcabcbd bf264c83 bd631edc bdb852e1     ...;.L&...c..R..
   482e4:	bee9b87d 3bbab8b9 3d417ac2 bc3a7a65     }......;.zA=ez:.
   482f4:	3e1d932e 3e4a8b65 3e682444 3dce9802     ...>e.J>D$h>...=

00048304 <cnnx12_b_tensor>:
	...
   48318:	0004831c                                ....

0004831c <cnnx12_biases>:
   4831c:	3d9636e6 3d297a52 3e8574e0 bda50108     .6.=Rz)=.t.>....
   4832c:	be060513 3cea929b bf01c0a1 3d9527c8     .......<.....'.=
   4833c:	bd6c4058 be567ce1 3e95fad7 bda01df3     X@l..|V....>....
   4834c:	bd188433 3dcd23d0 be6a24b3 3dae94cf     3....#.=.$j....=
   4835c:	be7a850e 3bc1ee4c be1bb029 bdd3762e     ..z.L..;)....v..
   4836c:	beaaf936 be3eacf9 3d45852a bbacd891     6.....>.*.E=....

0004837c <cnnx12_k_tensor>:
	...
   48390:	00048394                                ....

00048394 <cnnx12_weights>:
   48394:	be269d44 bc53510b 3e2f43d1 bec5b765     D.&..QS..C/>e...
   483a4:	be876678 3f06f03d 3b503c99 3e3db347     xf..=..?.<P;G.=>
   483b4:	3db9b8c4 bd30c951 bdc58b45 bd9cb72e     ...=Q.0.E.......
   483c4:	3e9eb1d3 3e09f0d5 3da6b79b 3e656018     ...>...>...=.`e>
   483d4:	be6dd53b 3e4a51ff 3e327b9a bdae4231     ;.m..QJ>.{2>1B..
   483e4:	3e15cb20 3e76bdf9 3e700bdc bc64efe4      ..>..v>..p>..d.
   483f4:	bcf9768e 3a3b4c9d bd641866 bdcac20c     .v...L;:f.d.....
   48404:	bd43e609 be08e59f bd913ba6 3e5d18fa     ..C......;....]>
   48414:	3d8d86db bdc707db bc3f6afa 3d4b50a1     ...=.....j?..PK=
   48424:	3dbe0a7b 3cdb8adb 3e877962 3d11ea18     {..=...<by.>...=
   48434:	3dae6db9 bda65fc5 bd1fbba5 3ad0f1cb     .m.=._.........:
   48444:	be191d4c 3df83ccf 3e15cef6 bcb3cf40     L....<.=...>@...
   48454:	bdc13352 be52dd32 be0be664 3d7b3e7a     R3..2.R.d...z>{=
   48464:	3d93158f bd7edaaf 3e0fc022 be3f99cd     ...=..~."..>..?.
   48474:	be8179d3 be31e244 be23dde5 3bb9fa0c     .y..D.1...#....;
   48484:	3e0d7d6f 3d92b651 bc92fe3f be338e65     o}.>Q..=?...e.3.
   48494:	3e9031fe 3dd4e296 3d835e0a 3e418ce2     .1.>...=.^.=..A>
   484a4:	3e8f0f07 3d4fb908 3e4ca327 bca4da0a     ...>..O='.L>....
   484b4:	3de0e94e 3d94931b 3d8d57e3 bd10e642     N..=...=.W.=B...
   484c4:	bc97e407 3eaad7b1 3ec42839 3e43bf22     .......>9(.>".C>
   484d4:	be47a246 be997aa4 3d859ac3 bd18ca97     F.G..z.....=....
   484e4:	3d2511a5 3e97d04f 3e69e1df bdf43833     ..%=O..>..i>38..
   484f4:	bdbf12f1 bbe83c95 bd86afe4 3ebea8f6     .....<.........>
   48504:	3eb24761 3df710cf 3b0c1725 bdfcba1f     aG.>...=%..;....
   48514:	be3079fd bd6614f5 3e07dde3 be1164a6     .y0...f....>.d..
   48524:	be24ab70 3da5da0a bd7945cc bd7b8fc1     p.$....=.Ey...{.
   48534:	bcc6190f bcf1c66c 3db76a14 be48c256     ....l....j.=V.H.
   48544:	3e31cc05 bd5dc1c7 3ef89aff 3e4f00b7     ..1>..]....>..O>
   48554:	be66d156 be5f7da8 bc7381ad be0256de     V.f..}_...s..V..
   48564:	bdc379cd bdf31df2 beb47b24 3e0b7973     .y......${..sy.>
   48574:	bd4715a6 be6d2f2c 3dfcd315 3d11f553     ..G.,/m....=S..=
   48584:	bde5dcc0 be4d98a3 be86f1d8 3e8f1918     ......M........>
   48594:	bdbceca1 3e1b1577 3da368ef 3dc2f527     ....w..>.h.='..=
   485a4:	bde9ded6 3e064d4b 3e262d47 bd0a9862     ....KM.>G-&>b...
   485b4:	3cf13334 be9076fe bea6e22f 3e13ca50     43.<.v../...P..>
   485c4:	3da10dfe 3e0d7eaf bdc43224 3da47c11     ...=.~.>$2...|.=
   485d4:	3e8b9e2a be11b454 3de43ae5 3e107944     *..>T....:.=Dy.>
   485e4:	be1281e4 3e6a58da bd79bee9 be421566     .....Xj>..y.f.B.
   485f4:	bc3588ee be83435a 3d5fefaa bdbf029e     ..5.ZC...._=....
   48604:	bd1c0b9f 3ec0f7f5 3dec2c98 3e1cd1ec     .......>.,.=...>
   48614:	be7732a4 be39a811 be174448 bea94593     .2w...9.HD...E..
   48624:	3e29b9d6 3e16cd4d bdceb7d6 be05e9ae     ..)>M..>........
   48634:	3e1cbaa0 be48b0a1 bd2a3655 bdc5f086     ...>..H.U6*.....
   48644:	bda8685c be52372f 3da81bc8 bdeb4918     \h../7R....=.I..
   48654:	bda531e1 3bb20c42 3d66aafd bbad4736     .1..B..;..f=6G..
   48664:	be2cb513 bda42e58 3db47835 3dbe911e     ..,.X...5x.=...=
   48674:	3e16ec28 be43d7ad be4b36c3 3dfb6969     (..>..C..6K.ii.=
   48684:	be6585e6 bdd6521e 3c86982a 3db3cbc1     ..e..R..*..<...=
   48694:	3e1b3760 3ea0a5f7 bea7b916 3e6724e0     `7.>...>.....$g>
   486a4:	3dd658f1 bec1e5c4 bd1cd46c bd07a2b1     .X.=....l.......
   486b4:	beb4c465 3df55ce3 3df09d20 3e26a49a     e....\.= ..=..&>
   486c4:	be6bfa0e be35b960 bd28f2ad be53179b     ..k.`.5...(...S.
   486d4:	bdac87cc 3e540dac be346e36 bea98e8d     ......T>6n4.....
   486e4:	3d8a1855 be179f64 bdf54799 bec1a52c     U..=d....G..,...
   486f4:	3e834350 3d25bb73 bd942fd4 3de74fc5     PC.>s.%=./...O.=
   48704:	3dc133bc be9d7ae5 be889446 3d53dee2     .3.=.z..F.....S=
   48714:	beadb92d 3e8eef68 3dace222 3e87f3b7     -...h..>"..=...>
   48724:	be6f6c17 be83628b 3d87f84b bea09292     .lo..b..K..=....
   48734:	3e4655f7 bbc7dffe be117900 bec3ae55     .UF>.....y..U...
   48744:	3cc9a779 3e8036df bdcabdbe bcaecffd     y..<.6.>........
   48754:	3d55deff 3e3e39ae 3cd82302 3e0b1b49     ..U=.9>>.#.<I..>
   48764:	bda782f9 3e15158a be8ce4c7 3e483374     .......>....t3H>
   48774:	bd875880 be3141af bec501d4 beabf717     .X...A1.........
   48784:	3dc6ece3 bd8f448d 3ea7ef35 bdd60061     ...=.D..5..>a...
   48794:	be584df7 3d9a69a7 3e30c73b be078733     .MX..i.=;.0>3...
   487a4:	be0e9f2a bea8b24d 3e6110e0 3e649c2e     *...M.....a>..d>
   487b4:	be6ac2ae bd357377 be9bd0eb bdfa26a8     ..j.ws5......&..
   487c4:	3d25edd8 3d36eec4 bd243782 3d92f3e4     ..%=..6=.7$....=
   487d4:	3dbf5aa1 bc403cdc be339073 be73c767     .Z.=.<@.s.3.g.s.
   487e4:	3e8b658b 3e407b33 3e89d166 bcbc936f     .e.>3{@>f..>o...
   487f4:	bdd50df1 3dd4b751 3d2792a6 3e92d036     ....Q..=..'=6..>
   48804:	3e6ec805 3def3bc6 3b1400fe bde22c23     ..n>.;.=...;#,..
   48814:	be92e507 bd374016 be4783df be54c108     .....@7...G...T.
   48824:	be97e20d 3ea1ede8 3dc365ee 3d8d9168     .......>.e.=h..=
   48834:	3f006979 beac86b9 bea90fce 3cc8e190     yi.?...........<
   48844:	3f046497 3e186e5a be7f29bf 3e4b314e     .d.?Zn.>.)..N1K>
   48854:	3d9913aa 3e7d08c2 bdf50b25 3ea2bae7     ...=..}>%......>
   48864:	be545b5f bd6b21da 3e45c0a8 be601393     _[T..!k...E>..`.
   48874:	be91f421 3e78e20a 3ca49353 beceb27e     !.....x>S..<~...
   48884:	3e56d5e3 3f0bfe34 be29a03d be25a646     ..V>4..?=.).F.%.
   48894:	be795216 bd2811c7 3e6ad2c6 3e04666f     .Ry...(...j>of.>
   488a4:	3edccf72 3ed2b55e 3cb1af15 bd833bf9     r..>^..>...<.;..
   488b4:	be845194 3e132402 bd3cacff be2d052d     .Q...$.>..<.-.-.
   488c4:	3c62b87c bd205408 be49945f bdfdf2f2     |.b<.T ._.I.....
   488d4:	3d6ccc5f bce73390 3dc10749 bd15002a     _.l=.3..I..=*...
   488e4:	be93095a bb908102 3e37b479 be760263     Z.......y.7>c.v.
   488f4:	be03e21e 3e2b70a6 3dbd732b bdce9c26     .....p+>+s.=&...
   48904:	3dc54c6f be21d98e bd61e9f5 be0b145b     oL.=..!...a.[...
   48914:	3e984d1b bb653fb5 3e48b416 bd4e5471     .M.>.?e...H>qTN.
   48924:	3dcf2b71 3b69d16a bc34c3b7 bd1e9d31     q+.=j.i;..4.1...
   48934:	3e81e0e4 3e2251fd bdb0bd72 bce34026     ...>.Q">r...&@..
   48944:	be2a7f43 3efb2046 bc9408cc 3e1f8452     C.*.F .>....R..>
   48954:	3e816015 3caa1b52 bdcc8d54 be34e423     .`.>R..<T...#.4.
   48964:	3dc9b115 3e1850c0 be0ca7be 3e8bf8a1     ...=.P.>.......>
   48974:	be2b2ab1 be18d491 bde49eef bd0ccce8     .*+.............
   48984:	3e8f8167 3e831581 3e0722d2 3dcd192f     g..>...>.".>/..=
   48994:	3e4a1709 bcb37771 3d60b4bc 3d50fc24     ..J>qw....`=$.P=
   489a4:	3e80db76 3e7f861f bd93fbda 3e6a2968     v..>...>....h)j>
   489b4:	3d98a6b3 bc963261 be0ca9be 3e11731b     ...=a2.......s.>
   489c4:	bdc48138 3f08e219 be0b2602 3e21b461     8......?.&..a.!>
   489d4:	bc26244c 3d77a5c4 3c1aa528 3e843aca     L$&...w=(..<.:.>
   489e4:	3dbcbe9c 3e0f7de1 bd2f0752 be4cecbe     ...=.}.>R./...L.
   489f4:	3e1cfe7a be149dd9 be15ad4e 3c07daa0     z..>....N......<
   48a04:	3d94a226 3e680bf7 3cd9b2ea 3db808fc     &..=..h>...<...=
   48a14:	bdaac936 bd8cf993 bdb1cf70 3e1e23a2     6.......p....#.>
   48a24:	3e90646f 3e1eb8f3 3d0f43bd 3dfed320     od.>...>.C.= ..=
   48a34:	3e81d953 3d92912a 3db5b276 3de4a2c9     S..>*..=v..=...=
   48a44:	3db96089 bccff744 3df6e633 be88ec4c     .`.=D...3..=L...
   48a54:	bea8c074 3dae2d10 beb38e16 be280d96     t....-.=......(.
   48a64:	3cff4007 befb88a8 3d565999 bddea5dd     .@.<.....YV=....
   48a74:	3de5d59d bd76dd44 bb298f5b bd811272     ...=D.v.[.).r...
   48a84:	bdf766fb bce40c19 bd667b27 be7cb3fa     .f......'{f...|.
   48a94:	bdd7b232 be20842b 3e7d6621 3cc72d56     2...+. .!f}>V-.<
   48aa4:	be112dbe be9036f3 3dba889d be641652     .-...6.....=R.d.
   48ab4:	beaf5596 3e91f2b4 be1ed83f 3e787469     .U.....>?...itx>
   48ac4:	3db4594d beba92ee bc91ef0b be64286e     MY.=........n(d.
   48ad4:	3e111569 bd14c445 3de2fadf 3dc1f0b1     i..>E......=...=
   48ae4:	3c2a1552 bde7109e be03bb7e be382255     R.*<....~...U"8.
   48af4:	bd922197 3d9004db be1f2d16 bedd5df3     .!.....=.-...]..
   48b04:	bd24bbbf bd9bbc31 bdf1bc01 3b215377     ..$.1.......wS!;
   48b14:	bcf4c620 3cc8cfe3 bb94835a 3e1daaca      ......<Z......>
   48b24:	3dc95041 bc8470b3 3e4fd8c3 beada76f     AP.=.p....O>o...
   48b34:	be86b3e8 3c581cac 3ea84ec3 3e4b953b     ......X<.N.>;.K>
   48b44:	3d390a12 bd92ade9 3e1c9ad2 be8b2c39     ..9=.......>9,..
   48b54:	bde86aaf bc4c542c 3da511d3 3e840be6     .j..,TL....=...>
   48b64:	3e5e1c38 3c6eb84f 3cfd258a 3d976e04     8.^>O.n<.%.<.n.=
   48b74:	3eaa732b 3e91e05c bc19f3b2 be37984b     +s.>\..>....K.7.
   48b84:	3e8b4c5b 3eb41ad1 3cbba8a8 be2060f4     [L.>...>...<.` .
   48b94:	3e8e7f15 be98dd92 bc8755ca be0bdfaf     ...>.....U......
   48ba4:	3df24eeb 3ee787ee bb9d2efa bcd91dae     .N.=...>........
   48bb4:	bdd6a5aa 3d61ad4f bdfa6be2 bd4d125a     ....O.a=.k..Z.M.
   48bc4:	bd71dbb8 3d8c5b2d 3d75979c be31c4e0     ..q.-[.=..u=..1.
   48bd4:	3e6c811b 3e113d41 3e0e3d86 3e819fbd     ..l>A=.>.=.>...>
   48be4:	3e5a4453 bc5bc40c 3c86852a 3deaf20f     SDZ>..[.*..<...=
   48bf4:	3e9df8c1 be41df8a be7be72b 3df502c0     ...>..A.+.{....=
   48c04:	3d2080e9 3dc63c82 bca225ca 3e0a8e39     .. =.<.=.%..9..>
   48c14:	3ea064a0 bbbe6602 3d8c7de0 be457b20     .d.>.f...}.= {E.
   48c24:	3e3d8eb2 3b833905 be3543e2 3da02104     ..=>.9.;.C5..!.=
   48c34:	bdc46418 be156131 3c7291a3 3e804e88     .d..1a....r<.N.>
   48c44:	bd84c331 be8be55e bb7a6aeb 3bca0b67     1...^....jz.g..;
   48c54:	3d26edd0 3d776cce bdc5def9 3e83fc1c     ..&=.lw=.......>
   48c64:	3db9aa69 3b4b00c5 3d1229bb 3c9a3403     i..=..K;.).=.4.<
   48c74:	bd1fc5fb bc4fafcb 3e10c157 bd379032     ......O.W..>2.7.
   48c84:	3e7a4bc0 3d709a3c bda2d374 3ed31045     .Kz><.p=t...E..>
	...
   49594:	3f25b26b bdaf5380 bd2abac1 3e0f0f4b     k.%?.S....*.K..>
   495a4:	3d993755 3c2cc652 3e6305b6 3e2dc3b4     U7.=R.,<..c>..->
   495b4:	3eb40756 3e0de074 bba78ed0 3e571a2d     V..>t..>....-.W>
   495c4:	bdb15216 3e3c709d 3d50472b bd541815     .R...p<>+GP=..T.
   495d4:	bee9a0d2 3e36a129 3d9a75fb 3c35020b     ....).6>.u.=..5<
   495e4:	3e8c4dc5 3e3938e4 3d95792d be1ff6f4     .M.>.89>-y.=....
   495f4:	3e4eb97e 3ec6f67c 3dbae695 bcea7950     ~.N>|..>...=Py..
   49604:	3eb6b474 bbe076f9 bed55596 bd897139     t..>.v...U..9q..
   49614:	bc8d9f4b be63d57f 3e31185d 3ee78375     K.....c.].1>u..>
   49624:	bed5d836 3d928c54 3d1e0b10 3e9310f8     6...T..=...=...>
   49634:	3d60209a bdca13f3 3dee5195 bd40f9f3     . `=.....Q.=..@.
   49644:	3d7242ce 3c7dfa2c bd049650 bda5f5c7     .Br=,.}<P.......
   49654:	3e86910d 3e1d10b9 be32b775 3d1f508d     ...>...>u.2..P.=
   49664:	3dbb5c3c be4cf79e bde4a7d5 bd27f83a     <\.=..L.....:.'.
   49674:	bc2fb3e2 bd8fb92b be7a0b47 bc5e1d2c     ../.+...G.z.,.^.
   49684:	bde6cb05 be3cf74a bcb18497 bdb6c262     ....J.<.....b...
   49694:	3e45a091 3cc21000 3e8d3776 beaf13b1     ..E>...<v7.>....
   496a4:	3e90610e bbfce066 3e038303 be35fbfe     .a.>f......>..5.
   496b4:	be8f7c3b 3e653e6a 3dfe13fe bd816ffd     ;|..j>e>...=.o..
   496c4:	bcfe9d19 be13a831 3daead37 beaf6c5f     ....1...7..=_l..
   496d4:	3d59b77f 3ddf1989 3e96db8d 3d9689b5     ..Y=...=...>...=
   496e4:	be3c12cd bd970761 3d8e5aee 3e809912     ..<.a....Z.=...>
   496f4:	3e71e5e2 be59d2e9 bc65bc3d bd8b1d08     ..q>..Y.=.e.....
   49704:	bc9116ae badc6dd5 3e612911 3eb6f935     .....m...)a>5..>
   49714:	3d47d638 3eb7b388 bd2b9989 b845e324     8.G=...>..+.$.E.
   49724:	3df5d3b2 bcb35d8b bc036e8a 3e66e4e9     ...=.]...n....f>
   49734:	3d6a3510 be906159 be5eb961 3ee2223a     .5j=Ya..a.^.:".>
   49744:	3e0dc502 3e1b2301 be82126e bd234f4d     ...>.#.>n...MO#.
   49754:	be0a81f2 3e3bd6d6 3e5f5233 3e16a185     ......;>3R_>...>
   49764:	be893d01 3e6d02ee be2065ae bd98ef5a     .=....m>.e .Z...
   49774:	bf192817 beab79c6 be92bc40 3df07971     .(...y..@...qy.=
   49784:	3d8db95a bea031a3 3e4c4404 bd6c30b8     Z..=.1...DL>.0l.
   49794:	bdf11986 bdaa1e72 3e3bdec9 3e75135d     ....r.....;>].u>
   497a4:	3e083e54 bdce0159 bcfbe0fc 3dd05ad1     T>.>Y........Z.=
   497b4:	3eb50606 3e1701a4 be336609 bdbd2bab     ...>...>.f3..+..
   497c4:	be88dab8 3e57651b beb9602c bda6453a     .....eW>,`..:E..
   497d4:	bd3830e1 3d03a6f6 3d886649 bdec4a37     .08....=If.=7J..
   497e4:	bb7db29e 3e96a9ba bd1f4f49 3e81c3d2     ..}....>IO.....>
   497f4:	bdcaeea4 3ee9796f 3e5743e3 3ea7bf34     ....oy.>.CW>4..>
   49804:	3cf3dad3 3db31b27 3bfce213 bd2c5b15     ...<'..=...;.[,.
   49814:	be76663a 3e81e76b bcae951f 3db11790     :fv.k..>.......=
   49824:	3e275c85 bc8dd216 bcd86156 3df40a52     .\'>....Va..R..=
   49834:	be657ae1 be8fdfdf bbfd06d1 3daf5b18     .ze..........[.=
   49844:	3d1e6c2f be1269af bdfccc7e 3cc706ba     /l.=.i..~......<
   49854:	bd7d718d bb418a24 be02024d bb8e4238     .q}.$.A.M...8B..
   49864:	3e3edb41 bdb20809 bdac4f32 3e370ffe     A.>>....2O....7>
   49874:	3ddf6a7d bb88f2c3 3c9a477a 3db1f868     }j.=....zG.<h..=
   49884:	bd80b827 bc8b10db beaa2307 be36dd2f     '........#../.6.
   49894:	beb51b8c 3d39e42a bebf2e57 be72b3f0     ....*.9=W.....r.
   498a4:	be11e748 bdc340b9 3e733a81 3e104dbb     H....@...:s>.M.>
   498b4:	3e827373 bdeaa1a7 3e920232 3c4e51b2     ss.>....2..>.QN<
   498c4:	3e0baa44 3cd6d9d1 3e103229 be85c2dd     D..>...<)2.>....
   498d4:	be33fea6 3e1c1939 3dd4008e be8af1c3     ..3.9..>...=....
   498e4:	be7b1787 3e0991d4 be9b4a5b bf25ac68     ..{....>[J..h.%.
   498f4:	bf11bbff bdfbd06a bd8b971e bc56589c     ....j........XV.
   49904:	bb0acdfa bea0e591 3e3fbfaf be9887ef     ..........?>....
   49914:	be3ae137 3da212e4 3e4465b9 be838a91     7.:....=.eD>....
   49924:	be14bee6 bdcc3f18 3e457cac 3e3bd3bb     .....?...|E>..;>
   49934:	be3c2f25 3ecf5ccd bcfbc086 bb8c4f2e     %/<..\.>.....O..
   49944:	beaa7b04 3dc22769 bed26ef2 be092596     .{..i'.=.n...%..
   49954:	be901332 bda5fe3b bddf2847 bd8ef440     2...;...G(..@...
   49964:	bd30a53c 3cfaf605 be55ac91 bbe0d03a     <.0....<..U.:...
   49974:	beb06cca 3d986c99 3dc32142 3de33240     .l...l.=B!.=@2.=
   49984:	bdcff72a bb42d0cb be157522 be0f34c4     *.....B."u...4..
   49994:	bd40bd7a 3e3fdad7 3e011ce6 3e75a266     z.@...?>...>f.u>
   499a4:	3dc8ebcf bd70c981 3df83689 3d8f7c9a     ...=..p..6.=.|.=
   499b4:	3e833637 3e87b03b bc946d80 3e30551c     76.>;..>.m...U0>
   499c4:	3ebee818 3d58614b bc0bcef6 3e0a7160     ...>KaX=....`q.>
   499d4:	3eb48738 be35005a 3e126efd be04b07f     8..>Z.5..n.>....
   499e4:	3c9b2616 be8073e2 3e20500b 3c95fbd5     .&.<.s...P >...<
   499f4:	3dba1d29 bd115629 3dbdf621 be7dcf1c     )..=)V..!..=..}.
   49a04:	3dc8905d 3e8f91e2 3d97505a bd4a2065     ]..=...>ZP.=e J.
   49a14:	3dabae82 3dad4549 bddfc585 3e8bce28     ...=IE.=....(..>
   49a24:	3dfd52a9 3e848a69 bddc3d11 3e9efa20     .R.=i..>.=.. ..>
   49a34:	bb9ceb9e 3d465453 bd43a0f7 3e69bad5     ....STF=..C...i>
   49a44:	3d45cc85 3cf56923 be56d1d5 3dfb90df     ..E=#i.<..V....=
   49a54:	be964be3 beb1dfc1 3e877af5 3e943157     .K.......z.>W1.>
   49a64:	bc72ab59 bde61ac8 3e4a5c93 3d1b9d1f     Y.r......\J>...=
   49a74:	3de022af 3e611fff 3ea3124d 3d1517bd     .".=..a>M..>...=
   49a84:	bdeb1918 3edd05ae 3e819439 3e05ac21     .......>9..>!..>
   49a94:	3f0e797a bddb02d8 3ec1b427 3e92e823     zy.?....'..>#..>
   49aa4:	bea154c1 bc8ac0be 3d32e63f 3e83c05e     .T......?.2=^..>
   49ab4:	3d4bc802 bde5dab8 bdc1ebf7 3e03fee7     ..K=...........>
   49ac4:	bd69db59 be0338b0 3ecb2633 3b53d6ac     Y.i..8..3&.>..S;
   49ad4:	be0216b6 be4447bb 3ba29368 3dc96776     .....GD.h..;vg.=
   49ae4:	bde2d17c 3e686a57 3df4cb07 3e18623a     |...Wjh>...=:b.>
   49af4:	bdf1cd25 bd2ad92f 3d610cc5 be8a1e2f     %.../.*...a=/...
   49b04:	3d60188f bdd7a7d1 be47cea9 beae6778     ..`=......G.xg..
   49b14:	be03e12e bce85295 bdb28c1c be6c39e8     .....R.......9l.
   49b24:	3e22c5a4 bd182a18 be7731f5 bdda0af5     ..">.*...1w.....
   49b34:	bbc5e0f5 3d8b5867 bb9b88c8 be0fa4b2     ....gX.=........
   49b44:	be9ab6c9 3ef868a6 3e20daeb 3ea7e05e     .....h.>.. >^..>
   49b54:	3c5c4fa2 3d579187 bc365e4b 3e051b2e     .O\<..W=K^6....>
   49b64:	bdba2524 3ea9cda2 3e8e3160 3edb27a0     $%.....>`1.>.'.>
   49b74:	3e6ca23d bdab9a55 bd8909da 3d1ebbbd     =.l>U..........=
   49b84:	bd9e5185 bdcc0546 3e6d904c 3e907542     .Q..F...L.m>Bu.>
   49b94:	bd0263fe 3d888255 be44ce3c 3dce935c     .c..U..=<.D.\..=
   49ba4:	3e9bfe61 3e3e1e30 bd785963 bd1e5d46     a..>0.>>cYx.F]..
   49bb4:	3ddf340b be078ffa 3ec1de17 3d9a10ee     .4.=.......>...=
   49bc4:	be20963e 3e0bb0f3 be52ad42 3d67b57c     >. ....>B.R.|.g=
   49bd4:	bd55431b 3e055f26 bea833fa bda6cef1     .CU.&_.>.3......
   49be4:	3df0ed9b bd70e87b 3d4eb23d bdfebe0d     ...={.p.=.N=....
   49bf4:	bd0e70a1 bdb0240f 3d3cd3e9 beb9c1a4     .p...$....<=....
   49c04:	be6729fc 3e82f0f5 3cb1d113 3e98dc8e     .)g....>...<...>
   49c14:	be73c535 3e98a07b 3e5acc6e 3dd03860     5.s.{..>n.Z>`8.=
   49c24:	bed98126 3e157ed1 3d962c6d bd9a17ce     &....~.>m,.=....
   49c34:	bc9d212e 3e1fa095 3e1d7218 3af61114     .!.....>.r.>...:
   49c44:	3da414e7 bdc051d2 3ed09aa2 ba888dae     ...=.Q.....>....
   49c54:	bdca34c2 be5731ad bde41ccf 3d9701a4     .4...1W........=
   49c64:	be0cd53d 3e1add99 3e02cf59 3cced870     =......>Y..>p..<
   49c74:	bdbd3f0e 3e58a174 be75a56a bebebb2d     .?..t.X>j.u.-...
   49c84:	3da013ad 3c3972de 3e16f2fd be3eb618     ...=.r9<...>..>.
   49c94:	bee2ad3c 3daeace5 3d949b03 be44fa67     <......=...=g.D.
   49ca4:	3dfbf8c4 bee8c04d bd175435 bd9a3844     ...=M...5T..D8..
   49cb4:	be3f3771 be97e100 be5e47aa bda94a42     q7?......G^.BJ..
   49cc4:	bdcc53fc 3c5a3c21 3d03e601 befe6683     .S..!<Z<...=.f..
   49cd4:	3e15d1c7 bdfc535c bdba8f2a be809538     ...>\S..*...8...
   49ce4:	be697d28 bc864925 bc39cffb bd5a213c     (}i.%I....9.<!Z.
   49cf4:	be3ca46a bea972a8 bd8847c4 3e0e2273     j.<..r...G..s".>
   49d04:	be0ff743 be06c3ee bc49baca 3d385cfc     C.........I..\8=
   49d14:	3d0cdc4f be7dfb0a 3e86ee91 3cbc1489     O..=..}....>...<
   49d24:	be327185 3e24e132 3e057936 bcc94056     .q2.2.$>6y.>V@..
   49d34:	be9925f7 3dedbee4 3e26b4a1 bdf886ce     .%.....=..&>....
   49d44:	be411795 3e08282c 3dedb562 3d987743     ..A.,(.>b..=Cw.=
   49d54:	3e51e3fc 3dc7abec be84c13a 3d2a458e     ..Q>...=:....E*=
   49d64:	3e8ba5ae 3e7fd091 3e098811 be104388     ...>...>...>.C..
   49d74:	3d81705f be4b2345 3dfb0f73 bd0dbf3e     _p.=E#K.s..=>...
   49d84:	bd7afa24 3d3c666b 3e869039 3ea2aaf9     $.z.kf<=9..>...>
   49d94:	beb4c3d9 3df899bf 3d1c933e be375959     .......=>..=YY7.
   49da4:	bdb4b268 3e795bad 3eaae6ce bdcbd08e     h....[y>...>....
   49db4:	bcf6d626 3df72113 3ce4f802 3d397bf0     &....!.=...<.{9=
   49dc4:	be28405e 3d898fd9 3e718fff 3e233e51     ^@(....=..q>Q>#>
   49dd4:	bd3e6dc4 3e9aa409 3da420c1 3e47b96d     .m>....>. .=m.G>
   49de4:	3e224036 be6c4230 bded34f3 3ea2c167     6@">0Bl..4..g..>
   49df4:	3dd0950d 3da5156d bdfb8fda 3e92eda1     ...=m..=.......>
   49e04:	3e320fcf bed868f1 3e736db3 be945670     ..2>.h...ms>pV..
   49e14:	3e842bee 3d05a655 3e097162 3dbd7c08     .+.>U..=bq.>.|.=
   49e24:	3e969e60 bdf44483 3da3315f 3cd1136e     `..>.D.._1.=n..<
   49e34:	be002821 3d8b3419 3c51db8a 3d95a537     !(...4.=..Q<7..=
   49e44:	3c123bcd bdcc4d54 bdb4806c bbdfa847     .;.<TM..l...G...
   49e54:	be61f4c5 bd9a5631 3e2c9645 be8dfa44     ..a.1V..E.,>D...
   49e64:	be83d3df bdd966cf 3dab972f 3ddd8e22     .....f../..="..=
   49e74:	bda0d6af bc901de0 be1d927e 3e287739     ........~...9w(>
   49e84:	3deed8f4 3d2ef380 bd917082 3bad7935     ...=...=.p..5y.;
	...
   4a794:	3e2a3389 3eb50ec7 be20818b 3ea8908f     .3*>...>.. ....>
   4a7a4:	3d4d383a 3d25fcbf bd33d034 3d942960     :8M=..%=4.3.`).=
   4a7b4:	bde55389 3da2f104 bdbaea28 3e38e93d     .S.....=(...=.8>
   4a7c4:	be6771f5 bda32127 be30b961 3e6b25a7     .qg.'!..a.0..%k>
   4a7d4:	3da068d2 3e8d8060 be6b584e 3e4bad79     .h.=`..>NXk.y.K>
   4a7e4:	3c44e619 3de9d72d 3ea6c13e 3dce7071     ..D<-..=>..>qp.=
   4a7f4:	bdf5258c bc7332d3 3dd0de86 3e115edb     .%...2s....=.^.>
   4a804:	be0f51ca bee67da4 3be17088 bde61b8f     .Q...}...p.;....
   4a814:	bd938c30 3c7907de 3e830e29 bded1607     0.....y<)..>....
   4a824:	bda60297 bda82550 be8470ed 3e971220     ....P%...p.. ..>
   4a834:	3e15df8d 3e39a40f bd74a2ac bd78411a     ...>..9>..t..Ax.
   4a844:	3a804a68 3dc67dc6 be8752b1 3e00b2fc     hJ.:.}.=.R.....>
   4a854:	bc5fb9af 3ea6ccaf bce12620 3e19f108     .._....> &.....>
   4a864:	3da7b611 bcca6efa bed51ee0 be4749a8     ...=.n.......IG.
   4a874:	bd9e4af3 bbe3a541 bdc981b5 bdd142f7     .J..A........B..
   4a884:	3d92b898 3ec88d90 bea600a3 3db4335a     ...=...>....Z3.=
   4a894:	be5ce59c 3d905705 bdba1c26 3d3096d4     ..\..W.=&.....0=
   4a8a4:	be7888cd 3de735d8 bd8364c5 3d9172e8     ..x..5.=.d...r.=
   4a8b4:	bd9e2584 3f1236b3 3cf8e483 bb24a5e7     .%...6.?...<..$.
   4a8c4:	bce1fe9d bea1ef78 3db09f5b bd359571     ....x...[..=q.5.
   4a8d4:	3e1cacb2 3dc239df bd4c9a88 3e7e1ca2     ...>.9.=..L...~>
   4a8e4:	3e7f950a 3b811ece be4d345f 3e4e953b     ...>...;_4M.;.N>
   4a8f4:	bdb11ea1 3cd0d377 3e6dfdac bd09407e     ....w..<..m>~@..
   4a904:	be2c163c 3ed60922 be9ea0a1 3d0a16c2     <.,."..>.......=
   4a914:	3ea14104 bebdbeb0 bd37c4f6 3e761bf8     .A.>......7...v>
   4a924:	3eab4811 be682a7f 3e292dd3 bb163bec     .H.>.*h..-)>.;..
   4a934:	bd08dc42 be9edc39 be46a8f2 bde20dbc     B...9.....F.....
   4a944:	bda291be 3d7056d5 be887222 be48f6d6     .....Vp="r....H.
   4a954:	3d476fae 3e1353c9 bda6f0c4 3c89d57c     .oG=.S.>....|..<
   4a964:	3edcc84e bd585b2e 3df74f7c 3dd890b4     N..>.[X.|O.=...=
   4a974:	bc74e321 bef913be be2adc6c 3cdc4759     !.t.....l.*.YG.<
   4a984:	3eb45e22 3bbf90a4 3eedf1a3 3dd5c9bb     "^.>...;...>...=
   4a994:	3e7109e8 bec929f7 be6a5241 3e2361ba     ..q>.)..ARj..a#>
   4a9a4:	3c563a94 bea97edb bf00bddf be4d74e2     .:V<.~.......tM.
   4a9b4:	3dad089c bc42ae66 3e003f96 bec53ed8     ...=f.B..?.>.>..
   4a9c4:	3e6898e5 bd5f98fa 3ea257f5 bd668b9d     ..h>.._..W.>..f.
   4a9d4:	3eb010da 3da4f6ab 3d47026e 3dcb93a7     ...>...=n.G=...=
   4a9e4:	bcab16df 3ccbb1ca 3dde0224 3dd21e33     .......<$..=3..=
   4a9f4:	be18f080 3e3a3cf4 3e2d2937 3e2d7df2     .....<:>7)->.}->
   4aa04:	3e6c05be bcac8b59 3e6c84ba be163368     ..l>Y.....l>h3..
   4aa14:	3d378b0c 3d4dd444 3d224623 3e52f253     ..7=D.M=#F"=S.R>
   4aa24:	3dc666e5 bca9212c bdfdf16c bda057dc     .f.=,!..l....W..
   4aa34:	3e3c1494 3dd1945f 3e9eb189 3ea4edc8     ..<>_..=...>...>
   4aa44:	bde1415b bd8aad26 bd4f8c7a bdf18d74     [A..&...z.O.t...
   4aa54:	bdb3e320 bd5476f8 be23b2e1 bdc0a8c1      ....vT...#.....
   4aa64:	3da5f631 3d8620b6 be933121 be3859ef     1..=. .=!1...Y8.
   4aa74:	beaea53c 3eab5b23 be25cc5e bde553f6     <...#[.>^.%..S..
   4aa84:	bde93a4d 3d5b8eea 3e056e1a bd452025     M:....[=.n.>% E.
   4aa94:	bdadf430 3e1a37a5 becc4a60 3dfa35cc     0....7.>`J...5.=
   4aaa4:	bd25d872 3e783860 bd6bddf7 3e0151ac     r.%.`8x>..k..Q.>
   4aab4:	3e94a29b 3e04675d bed45a3a 3d868fd0     ...>]g.>:Z.....=
   4aac4:	bdfe2a4d 3d899ab7 bdb3abf2 3e711de0     M*.....=......q>
   4aad4:	be96cb14 befe80fd be895441 3e2e3de5     ........AT...=.>
   4aae4:	bd9984ba 3e89a566 3e9a8907 be9a84de     ....f..>...>....
   4aaf4:	3db7be4a 3d936179 bedde960 be2c0058     J..=ya.=`...X.,.
   4ab04:	bde72344 bcbaafbf bec2d840 3e763fed     D#......@....?v>
   4ab14:	3e9f1618 bec38604 3c9fc5b8 3e7ef57e     ...>.......<~.~>
   4ab24:	3ddf7733 3e1fff53 3e079dfd 3cd7fc3b     3w.=S..>...>;..<
   4ab34:	bd5bd411 3e1adbff 3e461a1b be62aaf7     ..[....>..F>..b.
   4ab44:	3cf98ccf be0c6586 3e54dbbc bdba365f     ...<.e....T>_6..
   4ab54:	bdc031bf bdde4c09 bd14bc8b be1098ea     .1...L..........
   4ab64:	3ca79114 3e6be5ad be1d34fe bdc62da9     ...<..k>.4...-..
   4ab74:	3e143686 bde60d06 3e81305f be0784cc     .6.>...._0.>....
   4ab84:	bdfa11b7 3e8751d7 bd07d3a9 bcf6439e     .....Q.>.....C..
   4ab94:	bd1d0584 3ebfb6ec be0d7f29 3cd3d4be     .......>)......<
   4aba4:	beac0198 be07fbd0 bd86f908 bcefc205     ................
   4abb4:	3a873d21 3e47c972 be936738 bc5dd04b     !=.:r.G>8g..K.].
   4abc4:	bea2ceed bd9a75ed be49f8f5 3d96a3d7     .....u....I....=
   4abd4:	be80f981 3d8e0a8a 3dd18ff3 3e0853fd     .......=...=.S.>
   4abe4:	3cb262b3 3dfd3e0c bd56ebc2 3e7d3cae     .b.<.>.=..V..<}>
   4abf4:	3ddf8f76 3e484cc4 be37a333 3e2be05b     v..=.LH>3.7.[.+>
   4ac04:	bb8a9631 3e2d60fc be013257 3ec6168e     1....`->W2.....>
   4ac14:	3e418e94 bc06aed1 3e1000c5 3e631c28     ..A>.......>(.c>
   4ac24:	bdac735a be0b2d40 3e996b9f bd019cb0     Zs..@-...k.>....
   4ac34:	3dda91b0 3e8b841f 3e97bb16 be03457d     ...=...>...>}E..
   4ac44:	bdfc342f be9d73c4 bdf2249d bd35fb62     /4...s...$..b.5.
   4ac54:	3e4c319e 3e0295bb 3e17fe1d 3e166553     .1L>...>...>Se.>
   4ac64:	bdfb7cac bef7e308 beb55a73 be07aeb6     .|......sZ......
   4ac74:	3d4c8c50 3eae8c24 bcd6d2f0 be24f390     P.L=$..>......$.
   4ac84:	bb9d8892 bea7ee03 bc186257 be6961b0     ........Wb...ai.
   4ac94:	3e515a6f 3ec1fea5 3da0d326 3d2bfe3b     oZQ>...>&..=;.+=
   4aca4:	be7c1df6 bd183b73 3e51e23f 3e89efb5     ..|.s;..?.Q>...>
   4acb4:	3de99f38 3d68d0af bdad2c3c 3e744ba2     8..=..h=<,...Kt>
   4acc4:	3b8a89f2 bd644d42 be17f63a 3c8ead07     ...;BMd.:......<
   4acd4:	bb259424 be21a3f8 3e4ab062 3d3e1f0d     $.%...!.b.J>..>=
   4ace4:	3e2d1270 be087364 3e2ee3de bee6e91b     p.->ds.....>....
   4acf4:	3e0b6e97 be791999 be0eea62 bacf5c1e     .n.>..y.b....\..
   4ad04:	bdcdd1a3 3c114969 bc1104e0 3e9acb6c     ....iI.<....l..>
   4ad14:	3c41254f beb6a981 be1284b7 3d6960c4     O%A<.........`i=
   4ad24:	bdb3bd45 3e3c473e 3e886b23 be769041     E...>G<>#k.>A.v.
   4ad34:	3da67026 be82f032 3c27076b bb2f05e7     &p.=2...k.'<../.
   4ad44:	be2387ce bec115d3 be0d272b bdbd00e7     ..#.....+'......
   4ad54:	bce9e89c 3dfe1686 3ed8c79c 3cc1f4a2     .......=...>...<
   4ad64:	bc6ebf91 beb3c05f 3cc7d08f bd0446da     ..n._......<.F..
   4ad74:	3e87d3dd be11be67 3e506d79 3dc6378b     ...>g...ymP>.7.=
   4ad84:	3ba207a7 be800a00 bebb8ad2 3e71e07d     ...;........}.q>
   4ad94:	bd166821 3e3404d2 3aab0222 be5571a3     !h....4>"..:.qU.
   4ada4:	3e00b3d0 be90800c bc0ee1c5 3e7cf7df     ...>..........|>
   4adb4:	bd46c9fc 3e7d3d74 3ea1cdb5 3e0569c0     ..F.t=}>...>.i.>
   4adc4:	bd04c910 be0d900a 3eacefbb bdec9bbd     ...........>....
   4add4:	bdc03e4e 3ef1ba72 3e6428b5 be36faea     N>..r..>.(d>..6.
   4ade4:	be777f42 be0ebdd5 bdd6fee4 3e80df1b     B.w............>
   4adf4:	bde88f5a 3ea2b3cc bd4bbac9 3dd7cd38     Z......>..K.8..=
   4ae04:	bdac51b7 bdc58704 be21462a bd30b8d5     .Q......*F!...0.
   4ae14:	be28029c 3e6a9e2f 3eb16cf2 be22128d     ..(./.j>.l.>..".
   4ae24:	3e8f48af 3ce20a67 3e897b07 be94eaaa     .H.>g..<.{.>....
   4ae34:	3e9c9b92 3e3f8185 3e3e0aed 3dcea60f     ...>..?>..>>...=
   4ae44:	3d6bbb8b be1c879e 3cbf1d27 bd666496     ..k=....'..<.df.
   4ae54:	be93c0e3 be6edfc2 3e59ee47 3d46308e     ......n.G.Y>.0F=
   4ae64:	be18501c 3e5ebeca 3e8b17c2 be77aa2d     .P....^>...>-.w.
   4ae74:	bd000d69 3e56c77d 3e3b4775 be0059f0     i...}.V>uG;>.Y..
   4ae84:	bdab65ef bd922dfb 3d608a7f bd744737     .e...-....`=7Gt.
   4ae94:	3cabda59 bece4836 bcd1a6f1 3e23d6e3     Y..<6H........#>
   4aea4:	be26918c bebfe6af be53e43c be9ef9b8     ..&.....<.S.....
   4aeb4:	beb27e7b be53e892 be8c0366 bdf1b779     {~....S.f...y...
   4aec4:	be93d95d 3e12af8c bd519d06 bdadd7e7     ]......>..Q.....
   4aed4:	be15f9cc 3d983404 3c8484da 3e730760     .....4.=...<`.s>
   4aee4:	3e5a83e3 bedcc721 be8c0e90 3e2a7ed0     ..Z>!........~*>
   4aef4:	3ea01b63 becb0517 be1297b9 3e3402c0     c..>..........4>
   4af04:	bdf7c4f8 3dad2852 be083381 3d9551e3     ....R(.=.3...Q.=
   4af14:	3eaa3024 be65c1aa be320cd7 bdbb7c19     $0.>..e...2..|..
   4af24:	3d8c97b6 3e0738cd 3d1a74bb be8a58dc     ...=.8.>.t.=.X..
   4af34:	3e6cee25 be0480f2 beb06d6f becb88cc     %.l>....om......
   4af44:	3de02296 be5d5011 3e1d60e2 bd4c8943     .".=.P]..`.>C.L.
   4af54:	3ea4fd41 3e531267 3e242e1c be49ed67     A..>g.S>..$>g.I.
   4af64:	bdcf1370 3e8d4d19 bd93a2b9 3e6ffcc5     p....M.>......o>
   4af74:	be2ecaae 3f026679 3e1e9f4a 3e5ed01a     ....yf.?J..>..^>
   4af84:	3e679951 bdf54aac bdc486ad 3cfdccf5     Q.g>.J.........<
   4af94:	3d634473 3df5e710 3e5e7dd8 3e8c62be     sDc=...=.}^>.b.>
   4afa4:	be16dedd bed4dad6 3af66e06 3ea69fb9     .........n.:...>
   4afb4:	3e45c010 bdfc9d3a 3ecc9739 3d9ec241     ..E>:...9..>A..=
   4afc4:	bdb3b178 bd590de3 3e114c0d 3ed4c3c1     x.....Y..L.>...>
   4afd4:	3e611a16 bde34bf1 be937e04 be76bf95     ..a>.K...~....v.
   4afe4:	bd8c9817 be311233 3e290c0a 3d8e48ef     ....3.1...)>.H.=
   4aff4:	3e64d235 3e98cf62 3e87da8c bdccc556     5.d>b..>...>V...
   4b004:	bbf3e799 be7322b3 3e3fd64c be49fbcd     ....."s.L.?>..I.
   4b014:	3d9a83f0 3e6558ad 3e53f3b7 bd82c019     ...=.Xe>..S>....
   4b024:	be1bb9e3 be4c8e39 bc85afe3 3e8426c8     ....9.L......&.>
   4b034:	3d73a1a8 bf1b6567 3de387a0 3e07b587     ..s=ge.....=...>
   4b044:	bdbe4445 be1fbd07 3e1f5618 3ea8538b     ED.......V.>.S.>
   4b054:	3ce8e023 3dc6094c 3ea11de8 3e20b3a3     #..<L..=...>.. >
   4b064:	3e05d943 bf19eeff 3d1dbf79 3e439c2a     C..>....y..=*.C>
   4b074:	be3e19e1 3d69feb4 3e3962de be1444ae     ..>...i=.b9>.D..
   4b084:	3d8df305 3c1ec5e9 bce7dc93 3dca9d19     ...=...<.......=

0004b094 <cnnx14_b_tensor>:
	...
   4b0a8:	0004b0ac                                ....

0004b0ac <cnnx14_biases>:
   4b0ac:	bd7159e2 bd718b8b be31502c be91bf0d     .Yq...q.,P1.....
   4b0bc:	3d11450f bd515637 3e0bb414 bf1dced1     .E.=7VQ....>....
   4b0cc:	3c7c7450 3d1bc337 bcc7c0c9 bd96dd37     Pt|<7..=....7...
   4b0dc:	3e7916b7 3e913738 3e71749c 3c0c06d4     ..y>87.>.tq>...<
   4b0ec:	3b7db77b beadbfff bde6c79c bd377f91     {.};..........7.
   4b0fc:	3e5f4403 bd7cc6a2 bf5b4571 3c877626     .D_>..|.qE[.&v.<

0004b10c <cnnx14_k_tensor>:
	...
   4b120:	0004b124                                $...

0004b124 <cnnx14_weights>:
   4b124:	be5c8cb5 bf03b24e 3ca21686 be4401f0     ..\.N......<..D.
   4b134:	bebacf50 3d65bd13 bcc52fb0 bb941bab     P.....e=./......
   4b144:	3ea1b384 bcc8b7da 3e343fc4 3e6a9fec     ...>.....?4>..j>
   4b154:	bd040a79 bebc273b 3d7fe6fe bdc2213a     y...;'.....=:!..
   4b164:	bf09f767 be190135 be32ef58 bd211eef     g...5...X.2...!.
   4b174:	be67f07b be8aee94 bf2a6220 3e3f9ed9     {.g..... b*...?>
   4b184:	3dbcb00a be8b6553 bddde3f0 3e2fa685     ...=Se......../>
   4b194:	be709527 3d403608 bd6d9cdc 3dc2ba30     '.p..6@=..m.0..=
   4b1a4:	bf0d1f09 be9dfa35 3bbf4072 be8c51b8     ....5...r@.;.Q..
   4b1b4:	3ea4d6c8 bdd07802 3e4d1ef5 be154e95     ...>.x....M>.N..
   4b1c4:	beacd420 3dd7cea3 3d12a1a3 be5e3ca6      ......=...=.<^.
   4b1d4:	bc420fd0 bd9df74c 3da64557 bdac2f52     ..B.L...WE.=R/..
   4b1e4:	3da1a7f9 3d4962ad bf0c785a be76e97e     ...=.bI=Zx..~.v.
   4b1f4:	3c3a2bf6 3d598181 bcf87b87 be45e792     .+:<..Y=.{....E.
   4b204:	3df83637 be33f298 bcc8cd0e bf08b46c     76.=..3.....l...
   4b214:	bd72f375 3d2e9f4a bcc9787a bec98fbb     u.r.J..=zx......
   4b224:	be9e9469 bebb78b7 3c9fc410 bd300968     i....x.....<h.0.
   4b234:	3c9c4088 3e18752f be7af829 bddd7c79     .@.</u.>).z.y|..
   4b244:	bd5437e3 be6b7e1b be8e31ac 3ed23043     .7T..~k..1..C0.>
   4b254:	bed28137 3e1b6768 be4b9569 bec0bf9b     7...hg.>i.K.....
   4b264:	3de51585 bd942f30 3ead9af8 3e27dc36     ...=0/.....>6.'>
   4b274:	3db87f64 bcf1dda3 bdc3edf6 3de49994     d..=...........=
   4b284:	bee3ea9f 3ea59d14 bed71cae 3e9994ff     .......>.......>
   4b294:	3e483df0 3e896478 bd64e78b 3e11b099     .=H>xd.>..d....>
   4b2a4:	3e2b95eb bdd1ddea 3e15c174 3dce27ec     ..+>....t..>.'.=
   4b2b4:	3bce7e68 3e18fc24 bdd20092 bde33406     h~.;$..>.....4..
   4b2c4:	3d7707b4 3e105e26 bc8c70d7 bd1922b4     ..w=&^.>.p..."..
   4b2d4:	3e983e12 bdedbc8c bdd74113 bdfd7977     .>.>.....A..wy..
   4b2e4:	bed7133f 3dd5cfad 3d3fa85f 3dc50cbe     ?......=_.?=...=
   4b2f4:	bd2f3738 bebfe767 3e7fd1e2 3e249e13     87/.g......>..$>
   4b304:	bb551977 3d33f4b4 be15bf17 be101eaf     w.U...3=........
   4b314:	3e29a559 be991e82 be015cc9 3e3342d0     Y.)>.....\...B3>
   4b324:	3e8caf77 3d76933d bf274ea7 bb6d4dcc     w..>=.v=.N'..Mm.
   4b334:	bf154ec0 3cef48ee be8f2a5f bf2b2817     .N...H.<_*...(+.
   4b344:	3e089cc6 be4e8fba bec3e9b2 3d02c7ee     ...>..N........=
   4b354:	beee1139 be51063b 3cf54881 be36ee32     9...;.Q..H.<2.6.
   4b364:	3b9f96b4 be4b583f bd84e61b be5699ff     ...;?XK.......V.
   4b374:	be9fac23 3d2db047 be5ce9f6 bdbee877     #...G.-=..\.w...
   4b384:	bd23abd7 be7f922d bdac85dc bd02fabc     ..#.-...........
   4b394:	bd9ffb62 bde5f7a9 3e0f299c 3d869f88     b........).>...=
   4b3a4:	3de82ed8 3e2dc207 be93b4b0 3e7ab199     ...=..->......z>
   4b3b4:	3e1d08f0 3da019f6 bd322add bdf58c17     ...>...=.*2.....
   4b3c4:	3dfa59cf 3e14dde1 bd2a57f3 be6453a8     .Y.=...>.W*..Sd.
   4b3d4:	bee32165 3d806c47 bd05eb41 3c5deb63     e!..Gl.=A...c.]<
   4b3e4:	3eb069dd 3e3a41f7 3bf1d32c 3e30468a     .i.>.A:>,..;.F0>
   4b3f4:	3c318b08 bd82c8c6 3e299de1 bd5417ea     ..1<......)>..T.
   4b404:	bf078eb1 3c35ca52 be058402 bcc50791     ....R.5<........
   4b414:	be8b2c6b 3e7dd102 be86bad7 3de4eedc     k,....}>.......=
   4b424:	3d87caa6 bd8807cf 3e0be337 3e031afc     ...=....7..>...>
   4b434:	3e62ffee be13ed2b 3a7b7023 be97b29e     ..b>+...#p{:....
   4b444:	3e248f81 3e682387 3ea6b603 3ea32b73     ..$>.#h>...>s+.>
   4b454:	3dcdeafc 3e6975b5 be861057 3dea3af4     ...=.ui>W....:.=
   4b464:	bda59b4e bea99522 3ed2c872 3eb303e4     N..."...r..>...>
   4b474:	be335cb4 be832e45 bd86ca62 be10e36b     .\3.E...b...k...
   4b484:	be860094 be806aa5 be34ad86 3db96d0e     .....j....4..m.=
   4b494:	3ea720ec be06d24d 3dae515a 3d764f35     . .>M...ZQ.=5Ov=
   4b4a4:	bd842e66 be88a047 3d9303da 3d8f074e     f...G......=N..=
   4b4b4:	3d88a636 3d9c1957 bf30e091 3e24388e     6..=W..=..0..8$>
   4b4c4:	3d7dfc4d be0eadec befed2fd bcee71e3     M.}=.........q..
   4b4d4:	bd50c807 bddcb55f 3d4febde 3e1c8e13     ..P._.....O=...>
   4b4e4:	bea802f6 3d94b05d bdcb6db1 be12949c     ....]..=.m......
   4b4f4:	be8e5509 3b0640a1 bd658464 be20ad42     .U...@.;d.e.B. .
   4b504:	3c731683 be2364b0 3e067649 3e0f793a     ..s<.d#.Iv.>:y.>
   4b514:	3d9e2133 3d5b8d98 beab42aa 3c1e66a8     3!.=..[=.B...f.<
   4b524:	bd774af0 beb7aeeb bb75c163 3eaf9c9c     .Jw.....c.u....>
   4b534:	3e4ddf04 be9fd75f 3dcdf151 3e9be6c1     ..M>_...Q..=...>
   4b544:	beed3cc3 bed983c8 bdef369b bec360ff     .<.......6...`..
   4b554:	bedaa0d7 3e9f861c 3ea04a76 bdd7e476     .......>vJ.>v...
   4b564:	be4e9d66 bdacf635 3d4cc362 3dae7dd9     f.N.5...b.L=.}.=
   4b574:	3e389301 be44f42e 3e85beb8 be2de93b     ..8>..D....>;.-.
   4b584:	bd97ad48 3e7e2bd5 be12488e bd16e1fc     H....+~>.H......
   4b594:	be76286a 3e356b68 be8ed585 3da9dc1a     j(v.hk5>.......=
   4b5a4:	3de7e416 be0e3d8f 3dfc1869 3e60e213     ...=.=..i..=..`>
   4b5b4:	3d8c271d bf05543b be0702f5 be4f9804     .'.=;T........O.
   4b5c4:	3cba8629 3eb357dd bd686a70 3e7256b7     )..<.W.>pjh..Vr>
   4b5d4:	beca27e7 bd2180df bdbbb45d beb90dd2     .'....!.].......
   4b5e4:	bda3332e be8bf5eb be2e8b59 bdd24fc6     .3......Y....O..
   4b5f4:	bedb6ce4 3e6773b8 bbdad9d6 bd8f524a     .l...sg>....JR..
   4b604:	3e45c909 be07d3b6 bc4cf0a9 bd91cccd     ..E>......L.....
   4b614:	3d8176bb be830cb4 beb9efb2 bca502cf     .v.=............
   4b624:	bd429ad5 3d0818f3 bf1f0f77 be778d48     ..B....=w...H.w.
   4b634:	be8aa25e 3d8d8b3f bd868ab9 bf255f29     ^...?..=....)_%.
   4b644:	be920b1c 3ce532e5 3e7d8053 bc9abacc     .....2.<S.}>....
   4b654:	be940a95 befaae08 bd1a2b62 be85b67c     ........b+..|...
   4b664:	be19136e bea5e2c0 be6c3f83 3e8daf9a     n........?l....>
   4b674:	bb5b5e60 bee01049 3e228f44 3db5af5a     `^[.I...D.">Z..=
   4b684:	be020a3c beb2e9cf 3e133e20 bf07ce2b     <....... >.>+...
   4b694:	bd7fc9d2 be10bfde 3a3638b7 bcde3a12     .........86:.:..
   4b6a4:	beaf3fa9 befefd07 3ca3d4d7 bd709183     .?.........<..p.
   4b6b4:	3d66033a bb405398 be2f9570 3e0cc268     :.f=.S@.p./.h..>
   4b6c4:	3ea94fbd be2596e9 39b31617 3e5f0c7d     .O.>..%....9}._>
   4b6d4:	be1951fd bec19034 3e620665 bc87c1db     .Q..4...e.b>....
   4b6e4:	be532b3f bea13719 3c447957 bda85c27     ?+S..7..WyD<'\..
   4b6f4:	beef669c bdd24062 3e896bc2 be8a442e     .f..b@...k.>.D..
   4b704:	bdc091ce bdf8f499 3e2fa032 3e2bf684     ........2./>..+>
   4b714:	be0410c8 3d810ab9 3dd4b3b8 be8f10ee     .......=...=....
   4b724:	beb47542 bdbfb493 be892dd9 3d9ed8e9     Bu.......-.....=
   4b734:	3e16264a be8a0343 3e2586ba bd3bad58     J&.>C.....%>X.;.
   4b744:	be84d926 3e22632c 3e612eea 3e5d66eb     &...,c">..a>.f]>
   4b754:	3e337215 be54c86b beb1f26b 3d3d8204     .r3>k.T.k.....==
   4b764:	bec90556 bda907ca 3d1cb3f3 3d1160eb     V..........=.`.=
   4b774:	bdbbbbc8 3e701896 bede98d9 3eb27a31     ......p>....1z.>
   4b784:	be9b985e 3dda3f05 3e5b380b bddc01b6     ^....?.=.8[>....
   4b794:	3e89420f bd73c64e be12f520 bed9c49c     .B.>N.s. .......
   4b7a4:	3e455c2d 3d794ab2 3d3e1562 3e5e1ebb     -\E>.Jy=b.>=..^>
   4b7b4:	3dd9eeb9 bd6d1d4a bde6b8ef 3e30af9c     ...=J.m.......0>
   4b7c4:	bf179165 be52694c be3630c7 3e1825be     e...LiR..06..%.>
   4b7d4:	beafc7e9 be9b729e 3d0f7810 be3ce736     .....r...x.=6.<.
   4b7e4:	3d93ab9c be631b93 becfdd90 be5f3856     ...=..c.....V8_.
   4b7f4:	bde3bd70 bdba146b 3e02f227 bd9fe3da     p...k...'..>....
   4b804:	3e524e36 3e5750ef 3e1bd257 3d01a0ea     6NR>.PW>W..>...=
   4b814:	be53b8c6 3c9e531d becb7f2a bd5de774     ..S..S.<*...t.].
   4b824:	3d13b813 bd295866 be2cee84 be34361c     ...=fX)...,..64.
   4b834:	3e4d9334 3e4ff7ea bd2dfc78 3e4b0ad9     4.M>..O>x.-...K>
   4b844:	bdd4930b bd07eeac 3e7f7afd bd7ae036     .........z.>6.z.
   4b854:	3d09af29 bea812ac be1ea32d be8aa6c4     )..=....-.......
   4b864:	be6b66e0 3de34d2f bedacfec 3e2c76a9     .fk./M.=.....v,>
   4b874:	be09f182 3d7cdf9a 3ded3d47 bd2fa123     ......|=G=.=#./.
   4b884:	be62380c bea3995b bde28817 3df34be2     .8b.[........K.=
   4b894:	3bcc0f22 3e21595a bd548439 bf00a03a     "..;ZY!>9.T.:...
   4b8a4:	3e32dc76 3d62fdc4 bf07cbe8 3db46e4d     v.2>..b=....Mn.=
   4b8b4:	be287779 be03098e bd24d148 3d550d15     yw(.....H.$...U=
   4b8c4:	bd3068d1 3dcc2af6 be57eef2 3e1ae062     .h0..*.=..W.b..>
   4b8d4:	be117e9c be8cd0cc bd33aef7 be0ab4f9     .~........3.....
   4b8e4:	be024723 3db1b965 3e7a1b7b 3e0b1d7d     #G..e..={.z>}..>
   4b8f4:	be19f6dc 3e306cf0 bcbe5abf 3cffd1a7     .....l0>.Z.....<
   4b904:	3dedb063 bdce525d be43c96f 3e080686     c..=]R..o.C....>
   4b914:	beaecf68 bc95ab18 3dadbbe3 be5c8c41     h..........=A.\.
   4b924:	be702dff be6330ee bd9e2ec3 be83e0f1     .-p..0c.........
   4b934:	ba170367 be5b636f be1fa8a7 be79eeb9     g...oc[.......y.
   4b944:	bea0ef9f 3d74df45 3dea8443 ba0946e6     ....E.t=C..=.F..
   4b954:	3db7b2ca bef26d10 be8905e4 3e95b05f     ...=.m......_..>
   4b964:	3c34e5c6 3df6cbfc be144e0b bd78a304     ..4<...=.N....x.
   4b974:	3e00f850 be166441 be17d4d0 be9961a2     P..>Ad.......a..
   4b984:	3d2d2758 3e093a59 be2b793a bc931c4d     X'-=Y:.>:y+.M...
   4b994:	3d605d55 3e157b9e be346688 3e6a2ac4     U]`=.{.>.f4..*j>
   4b9a4:	3e09fb58 be2ccabf bd3d7519 be3a68f2     X..>..,..u=..h:.
   4b9b4:	be8e5d67 bdaaa3bd bd6b3573 3b75e575     g]......s5k.u.u;
   4b9c4:	3b95e936 be1238c7 bd8ecace 3ed959b7     6..;.8.......Y.>
   4b9d4:	3c63eee8 beaa79a2 bd9ae780 be0b3bfe     ..c<.y.......;..
   4b9e4:	bea51747 3d130b25 bd1b7247 3ca9c3e9     G...%..=Gr.....<
   4b9f4:	be2b357e bea881f9 3eb7feb5 be8552b6     ~5+........>.R..
   4ba04:	3d458256 bd980826 bd330aac 3c98bf14     V.E=&.....3....<
   4ba14:	3d1b4f14 3de52638 be197663 be96c422     .O.=8&.=cv.."...
	...
   4c324:	3e0061fd 3e865dfd be5f5af5 bd6ed66d     .a.>.].>.Z_.m.n.
   4c334:	bf2285ff 3d55d48e bef56266 be845bae     .."...U=fb...[..
   4c344:	3dbca60b 3d9af995 3cfc785c 3e2e9e96     ...=...=\x.<...>
   4c354:	3da610a0 becdbbf1 bdb7a152 3de7da89     ...=....R......=
   4c364:	bea7976d be1fdf78 be277ee5 be9f7561     m...x....~'.au..
   4c374:	be80b4d1 3e084df8 3e5a6200 beeaa2f9     .....M.>.bZ>....
   4c384:	3d8c1fe6 be072f3d 3da4ea1c 3dbf1714     ...==/.....=...=
   4c394:	be171ad3 3e42c19e bd979e0b bd76391d     ......B>.....9v.
   4c3a4:	be195a7b 3cedaf56 3cf13a55 3e809935     {Z..V..<U:.<5..>
   4c3b4:	3e5bf0b7 3e8676b0 3d43ebd8 bd9b60c0     ..[>.v.>..C=.`..
   4c3c4:	3c890496 3c7d98d2 bd8da4f0 3b80119e     ...<..}<.......;
   4c3d4:	be6a8b79 be17d1b2 bd75b2f5 3eb38a24     y.j.......u.$..>
   4c3e4:	bd052734 bed5aefa 3d9aeb6f be2834d3     4'......o..=.4(.
   4c3f4:	bf117cef bec43169 bdba4d84 3e35a9cc     .|..i1...M....5>
   4c404:	bebb8252 be4aa6c7 3d44e0d5 3d0a322b     R.....J...D=+2.=
   4c414:	bd8522d7 be748408 3cb7912c 3e1d9652     ."....t.,..<R..>
   4c424:	be1d0919 bebb34d3 bd226283 3d050215     .....4...b"....=
   4c434:	3e416188 be6c0088 bf0bc0aa 3b6b300f     .aA>..l......0k;
   4c444:	be898f2b be7c258d bd9f823f bd621b81     +....%|.?.....b.
   4c454:	be5e7727 3e3e87dd bd82c1dd be0cba38     'w^...>>....8...
   4c464:	bddf64be 3ebe2773 3e0572bc 3c7ec421     .d..s'.>.r.>!.~<
   4c474:	3da56f5c bd8088b8 3de7c424 be1145e6     \o.=....$..=.E..
   4c484:	3e1a1917 bcabddfa bd949a02 bdfa3ee7     ...>.........>..
   4c494:	bdc1245a 3dfb6127 3d398af4 be9d85aa     Z$..'a.=..9=....
   4c4a4:	be04b81f be3a5460 be6f8851 3c41a5b2     ....`T:.Q.o...A<
   4c4b4:	bf172a9f 3e6dbcb6 bea555df be330215     .*....m>.U....3.
   4c4c4:	bc885d57 3d9ef0f9 3d1cce98 bda4deae     W].....=...=....
   4c4d4:	bd2e39ea be92a32a 3d594f27 bdfc080c     .9..*...'OY=....
   4c4e4:	3e1b3e37 3e012b21 bd08a210 bedf5922     7>.>!+.>...."Y..
   4c4f4:	bdd9b97f 3d8e311d 3d87f4d7 3e2321f6     .....1.=...=.!#>
   4c504:	bda6c4e8 3ec15871 bda3e940 3de8f9ea     ....qX.>@......=
   4c514:	3e3764db bec0330d bed6d056 bd5d2b9d     .d7>.3..V....+].
   4c524:	be517726 bd823ddf be42d230 be81c363     &wQ..=..0.B.c...
   4c534:	bdaa7073 3dc7217d be835492 be04de6b     sp..}!.=.T..k...
   4c544:	be27f984 bc7f1331 bea6da6d 3d7d5a81     ..'.1...m....Z}=
   4c554:	be12633d be9d154e bdf7c57b bd0b159d     =c..N...{.......
   4c564:	be7ffe1c bee6d3ba be93fd99 3dc54ebf     .............N.=
   4c574:	beb2f450 bdf195b8 be7b03ce 3e5b8dea     P.........{...[>
   4c584:	bd0ed195 3e58237c be45adf1 3e068249     ....|#X>..E.I..>
   4c594:	be391fc0 bd690773 be5262b8 bd40e672     ..9.s.i..bR.r.@.
   4c5a4:	3ea09a9c bd42fdef 3e1b5a54 3dab9096     ...>..B.TZ.>...=
   4c5b4:	be30776a be030822 bce4c7e0 3e0a7753     jw0.".......Sw.>
   4c5c4:	be2caf6d bed1514b 3e187bf0 bec3bcfb     m.,.KQ...{.>....
   4c5d4:	bd936325 3e0f390b be80857b bbc643c7     %c...9.>{....C..
   4c5e4:	3e6b34fb 3e9db3a9 bc843b8e 3cab26ca     .4k>...>.;...&.<
   4c5f4:	bd69ffbb bde1dba4 be9f46bd 3e23e632     ..i......F..2.#>
   4c604:	bea75d7e 3e144c0d be8bc92b be288674     ~]...L.>+...t.(.
   4c614:	becc2bc9 3ddc5773 3e25eb48 be7afe4b     .+..sW.=H.%>K.z.
   4c624:	3e045a55 bec2dfa1 3e4a737d 3de1501e     UZ.>....}sJ>.P.=
   4c634:	be12530d bece0a5e be6dc304 be86cfe4     .S..^.....m.....
   4c644:	bd9ee69d 3d7884df be47c725 bd32d9c4     ......x=%.G...2.
   4c654:	bc9e0ac8 3e5a4bfa be8b172f bbf49945     .....KZ>/...E...
   4c664:	be9dbad6 bec2c51c 3dea5e4b 3daed4fc     ........K^.=...=
   4c674:	bea43174 3d63ed78 bd8b2788 be9c35e5     t1..x.c=.'...5..
   4c684:	bebe6fda bd38c3fc bd604466 bd4332e8     .o....8.fD`..2C.
   4c694:	3e00706f bea25656 3e0dadbc 3d67bca0     op.>VV.....>..g=
   4c6a4:	be3931ec 3c89c3ee 3b17541a 3d8f2616     .19....<.T.;.&.=
   4c6b4:	3dbf30b6 bd4b9d07 bcbcb9e5 3d8c62d5     .0.=..K......b.=
   4c6c4:	bec0bf6c 3dcca42e be529404 3c2ffc5d     l......=..R.]./<
   4c6d4:	3d48d6ec 3de24736 be1301dc 3b865316     ..H=6G.=.....S.;
   4c6e4:	bdd82803 bf37d17b 3ddbfc89 be01ed1c     .(..{.7....=....
   4c6f4:	3e586b58 3ca5f807 bdb52782 be2c7a8c     XkX>...<.'...z,.
   4c704:	bf092fe3 bee3ab74 3dbf5831 3ddbd71e     ./..t...1X.=...=
   4c714:	3d54c7ab bd1f69bd 3e3644c4 bdd50ce8     ..T=.i...D6>....
   4c724:	3c9c1b24 3cc23bd5 3e67c2fe 3ddb2cf7     $..<.;.<..g>.,.=
   4c734:	be1f735a bea1cefb bc1ecbd3 be8c8c5d     Zs..........]...
   4c744:	bed87099 3cf93d28 bf07b802 bf2fc6d6     .p..(=.<....../.
   4c754:	bede7f2d 3e1311e1 be858efa be8c627d     -......>....}b..
   4c764:	3c238c6c bd380dee be5c9156 3e0424a4     l.#<..8.V.\..$.>
   4c774:	3dbf8e1b bd4eeeab bd84ac86 bc47702c     ...=..N.....,pG.
   4c784:	3ed9f141 3a5c52fd be070714 be36c2fd     A..>.R\:......6.
   4c794:	be902c4d 3e1f77b4 be0741c1 3b0dd9c8     M,...w.>.A.....;
   4c7a4:	baeede45 3e3f2d97 beb148d5 be1a073c     E....-?>.H..<...
   4c7b4:	beb4fc8a be0382d4 beae876a bdbadd6d     ........j...m...
   4c7c4:	3e03a0bf 3e5df09f bd871d0c bde7f1e2     ...>..]>........
   4c7d4:	be55c7ba 3df88a7b bedb8424 3dcc7947     ..U.{..=$...Gy.=
   4c7e4:	be9c117f 3dc7d452 bde47f80 bdec1060     ....R..=....`...
   4c7f4:	3dc7332c 3d86d586 beba4d0c 3cc3e471     ,3.=...=.M..q..<
   4c804:	3c6648ea becd3e32 3e5d255e bdb43524     .Hf<2>..^%]>$5..
   4c814:	be9a7403 bd891a1b bee76d91 3e8d3805     .t.......m...8.>
   4c824:	be4c4c77 bdca2a0d 3d85c75a bea5fd45     wLL..*..Z..=E...
   4c834:	be202561 bc112252 3e869b4c 3dad2dcf     a% .R"..L..>.-.=
   4c844:	be916623 be3cd2b9 bd052d00 3e1dfbc7     #f....<..-.....>
   4c854:	3e36958c bebbd608 be255d55 bd7111a0     ..6>....U]%...q.
   4c864:	be8daec8 be857063 be9cc890 3e06d455     ....cp......U..>
   4c874:	be518b79 3c988bdd 3a8b91c4 bca19678     y.Q....<...:x...
   4c884:	be87dbaa bcefe0fe bdd7c4a0 3d915f6d     ............m_.=
   4c894:	3d7e7e10 bdad204c 3c10a5d5 bded998c     .~~=L .....<....
   4c8a4:	bec63592 3eabe40b 3d5f07dd 39c49cfd     .5.....>.._=...9
   4c8b4:	bc251497 be547c2a be9f13be bc379187     ..%.*|T.......7.
   4c8c4:	3e09e0d7 bd4d8ac0 bddf4b08 3e24846c     ...>..M..K..l.$>
   4c8d4:	bd81823c 3c753b81 bda151fe bb513009     <....;u<.Q...0Q.
   4c8e4:	3ee9631d 3ed45245 be995cac 3d55355c     .c.>ER.>.\..\5U=
   4c8f4:	bd264b64 bea73bda 3d89bb3e be3ac820     dK&..;..>..= .:.
   4c904:	bd3d14d4 3e686e73 3e465dc0 bd310f8d     ..=.snh>.]F>..1.
   4c914:	bdf6aeae 3e38a7d7 3e2a0dc6 3d98332c     ......8>..*>,3.=
   4c924:	3dd2f4bc bbd1239f be1413d3 3e1879a9     ...=.#.......y.>
   4c934:	be6e5f5e be8fb938 3d956b83 bd056ee0     ^_n.8....k.=.n..
   4c944:	be17779d 3db425ce bd23a8f2 bc607b20     .w...%.=..#. {`.
   4c954:	bd207066 3df71b91 be1cbcce bd5b333f     fp ....=....?3[.
   4c964:	bcd8c8ea bd3ed77c be19ba0f bd155166     ....|.>.....fQ..
   4c974:	be733d8f bce86f0a be45d35e bd2c3abc     .=s..o..^.E..:,.
   4c984:	be8d3dd7 bed7805f bd373a87 beb00634     .=.._....:7.4...
   4c994:	3d87684b be24ea0c be0aa516 bec430f8     Kh.=..$......0..
   4c9a4:	3bc9ed49 be105701 3d64efbc 3e1d65ad     I..;.W....d=.e.>
   4c9b4:	bb56c950 bd144851 beb43fa6 3dd11381     P.V.QH...?.....=
   4c9c4:	3bd4971c be917730 bd16535c 3da045ed     ...;0w..\S...E.=
   4c9d4:	be9ca417 be7e5493 bd001b3b beabb83b     .....T~.;...;...
   4c9e4:	be927033 3d4746b1 3d29735e bd7da694     3p...FG=^s)=..}.
   4c9f4:	bd2e9c35 be4e4b14 be481d27 be9e9584     5....KN.'.H.....
   4ca04:	be0994a2 bd55ef63 be471852 bdbdf45d     ....c.U.R.G.]...
   4ca14:	bcb082af 3db0a6b4 bc0a455e bd55f606     .......=^E....U.
   4ca24:	bcbb3a2e bbe3ed0f bec90a5b be90e869     .:......[...i...
   4ca34:	3e20c690 be986dac bd054430 be05d15c     .. >.m..0D..\...
   4ca44:	3dd249fc 3c6ab6ad be2f4d45 bdaa6287     .I.=..j<EM/..b..
   4ca54:	be9e6f36 bdbe6732 3e4c54d9 3dc4c4ba     6o..2g...TL>...=
   4ca64:	bc95fc36 3e8c80af bdd1b453 3dcd5cbc     6......>S....\.=
   4ca74:	be1afb31 be83788d bea569ce 3bfcc87e     1....x...i..~..;
   4ca84:	bdd81fe0 3d2723d6 3e5462e0 3e0dcd9b     .....#'=.bT>...>
   4ca94:	befc071f bd043803 beb51221 3e2eacd6     .....8..!......>
   4caa4:	bd61d81a be973c53 bd911357 3e0fe2d8     ..a.S<..W......>
   4cab4:	be5f915c 3d6be2ba be2c0dd3 3de07761     \._...k=..,.aw.=
   4cac4:	3df2b5b6 3e683fd7 bc3c2971 be8faafc     ...=.?h>q)<.....
   4cad4:	bd8ffd60 3d814aa0 be81011f 3d117b58     `....J.=....X{.=
   4cae4:	3d0ad9a3 bec3bc7f 3dd9a7a3 3dae0169     ...=.......=i..=
   4caf4:	bdfa0260 bb6abac9 bc577bf3 3b5b6643     `.....j..{W.Cf[;
   4cb04:	bc480a5b bd8e5ff4 bca9b5fc 3e4ceb4d     [.H.._......M.L>
   4cb14:	be404ca4 3da25ecc bd72d13b bdf91273     .L@..^.=;.r.s...
   4cb24:	bda1ae3f be25bbf9 3e46ee84 bd69cb0d     ?.....%...F>..i.
   4cb34:	3dd54b80 be26afed 3e872ff2 bddf79ed     .K.=..&../.>.y..
   4cb44:	bec8b4ae 3c02cd04 3d61144d 3d070858     .......<M.a=X..=
   4cb54:	3d2bab88 3d3be251 3d8efed1 be95928e     ..+=Q.;=...=....
   4cb64:	bc7d4545 bd70cf96 bd506454 3cc48cbd     EE}...p.TdP....<
   4cb74:	3e53df87 bd00a8cf 3d896c0f be872620     ..S>.....l.= &..
   4cb84:	be592c7a 3cd44cd4 be262be0 be33533b     z,Y..L.<.+&.;S3.
   4cb94:	be0d609e be2944ea bc8129cc 3dde7221     .`...D)..)..!r.=
   4cba4:	be81b875 bd353810 be7b4eb0 bed2e7ef     u....85..N{.....
   4cbb4:	bd90571b bdf7afb3 be8bfe64 be827650     .W......d...Pv..
   4cbc4:	be69b01d be44cd02 be5ef8ab be69f8ff     ..i...D...^...i.
   4cbd4:	be78adf4 3e175e8d bce547be 3db3ea04     ..x..^.>.G.....=
   4cbe4:	3d86b842 be42f0c7 3da681cb bc8668f5     B..=..B....=.h..
   4cbf4:	bd195ef9 3d0a75c0 be6467ff bea3a21d     .^...u.=.gd.....
   4cc04:	3da21686 bd8e0df9 bd49e9a9 bec1d013     ...=......I.....
   4cc14:	3ce1784b 3e400cbe be500a51 bdf5720e     Kx.<..@>Q.P..r..
	...
   4d524:	3bc3d314 bec39c35 3e60aed5 3c37e346     ...;5.....`>F.7<
   4d534:	be57eef6 3da2af6c be1d4556 3db21e0a     ..W.l..=VE.....=
   4d544:	beb46b77 be79119e bdc5c0bb be696422     wk....y....."di.
   4d554:	3dfe9e45 bdff3916 be89cf2d 3e008163     E..=.9..-...c..>
   4d564:	be2e8519 3e18f1df bece9ea8 bf201071     .......>....q. .
   4d574:	beb727bd 3d930014 3d2a17f1 be5141e4     .'.....=..*=.AQ.
   4d584:	bb8b41e8 beaba0b7 be3d05a5 be4f8e80     .A........=...O.
   4d594:	bee62f70 3d7dae54 3d5628d4 bee06c06     p/..T.}=.(V=.l..
   4d5a4:	3ec99515 3e2af603 be834f9a bc9b4aea     ...>..*>.O...J..
   4d5b4:	be0b1cd7 bd0e053f 3cef692f be5811b2     ....?.../i.<..X.
   4d5c4:	3eef4723 bc7ec8fe be671b92 3d599cfa     #G.>..~...g...Y=
   4d5d4:	3e95267e 3d9446b3 3b5290b1 bdc1437a     ~&.>.F.=..R;zC..
   4d5e4:	3d87d520 befdd8b9 3e2b40aa bdfc234c      ..=.....@+>L#..
   4d5f4:	b968c5fd bf0541ad beea7324 3ce53bea     ..h..A..$s...;.<
   4d604:	bea8abf0 be84bf81 bdd51d10 3e36a9fe     ..............6>
   4d614:	3cb2b4f9 bf1c1762 bec9a7fb 3c63590b     ...<b........Yc<
   4d624:	be8bf5b1 3db8d34b 3d8f0682 3c9a7a0a     ....K..=...=.z.<
   4d634:	bdd7c802 bdce2eeb 3e1eedd2 3d931017     ...........>...=
   4d644:	bed02d67 bd98a797 3c2a6071 bd198535     g-......q`*<5...
   4d654:	be60c052 be24d030 bd7c360c 3c7794ed     R.`.0.$..6|...w<
   4d664:	be9c703e 3d10e9a7 bd95acbf bdd35301     >p.....=.....S..
   4d674:	3de58037 bd3e46e8 be94cd94 3e4ac3dd     7..=.F>.......J>
   4d684:	3bd643d9 bd993169 bee3bbfd be5d23ae     .C.;i1.......#].
   4d694:	bd261987 3bdeb502 3e32a31c 3e4ac8f4     ..&....;..2>..J>
   4d6a4:	be5f588a 3d9f57a0 3e1c0f70 bc228008     .X_..W.=p..>..".
   4d6b4:	bd639e35 bed25b64 3d600698 3d4acb88     5.c.d[....`=..J=
   4d6c4:	bdaf314d be753a52 be62e165 be32c0c3     M1..R:u.e.b...2.
   4d6d4:	3c86f796 bd0438c4 bdcfe7f3 3da8489c     ...<.8.......H.=
   4d6e4:	bcbc56b3 be0aa740 be91e4df be202a1b     .V..@........* .
   4d6f4:	3e42f3e4 3e41c955 3e089368 3e0121d8     ..B>U.A>h..>.!.>
   4d704:	3eba1cd2 beda3b7f be8c1bc6 3dfe1717     ...>.;.........=
   4d714:	bf115217 be894489 3d297966 3e263ed8     .R...D..fy)=.>&>
   4d724:	bf0f1278 bf0a8506 bcf92be6 3e168b21     x........+..!..>
   4d734:	be8f27a2 be8f3f58 be0cbadf bec54a97     .'..X?.......J..
   4d744:	be330cf3 bdfce2e6 3e66e15f bcb568f8     ..3....._.f>.h..
   4d754:	be3c90bb be38da7d bea3824d bd402e3e     ..<.}.8.M...>.@.
   4d764:	3d8341b4 3e6db031 bcb36354 3e02bb82     .A.=1.m>Tc.....>
   4d774:	3e98c84f be6df4b8 bd25e83a 3df0fe7b     O..>..m.:.%.{..=
   4d784:	bec66144 3e267486 3d615a60 3e1e2e43     Da...t&>`Za=C..>
   4d794:	be35a5aa be23f34d bdc721c6 bdb32df8     ..5.M.#..!...-..
   4d7a4:	bf0bec1a 3ea538d0 beb76d78 bdb4d35f     .....8.>xm.._...
   4d7b4:	bd57cc8b bd3dc248 bdb83233 3c88f6f5     ..W.H.=.32.....<
   4d7c4:	3de55699 3eb74dc3 be97348e bc9f31fa     .V.=.M.>.4...1..
   4d7d4:	befc34ab be2229dd be258f1f 3ead59c3     .4...)"...%..Y.>
   4d7e4:	3dc2e8be 3e31236e bd9c4314 be4b6620     ...=n#1>.C.. fK.
   4d7f4:	3e5fd277 be5213ce 3c82bc58 3e7621eb     w._>..R.X..<.!v>
   4d804:	bd7dd4ed 3d876d71 bdaf166a be3ac4b2     ..}.qm.=j.....:.
   4d814:	be90d7f9 be0cc71c 3e7e838c becb4a33     ..........~>3J..
   4d824:	3e45413d bdf0634b bdfda50a bed027f0     =AE>Kc.......'..
   4d834:	be83efe8 bee6ebf5 3ddd1187 bc09f93e     ...........=>...
   4d844:	beb5394e be42a8c8 bd3096c9 be8e8402     N9....B...0.....
   4d854:	be8291ee 3e554a49 be6c0329 3e7ab762     ....IJU>).l.b.z>
   4d864:	bef9dd77 bde02d61 be9180a4 3da63c16     w...a-.......<.=
   4d874:	3e5b55f6 be5ffcba be3cfc62 be8e4191     .U[>.._.b.<..A..
   4d884:	bed2c144 bf140e47 3e2b2246 3e23aab4     D...G...F"+>..#>
   4d894:	bc8b3fbf 3d32e4b1 be8c129d be10183c     .?....2=....<...
   4d8a4:	bf23b231 be2b17d5 3dd0356e 3e45d97b     1.#...+.n5.={.E>
   4d8b4:	be154342 3d3acfc5 beeb6e47 be5d6a26     BC....:=Gn..&j].
   4d8c4:	bd8f5e0f 3e20af7e bf33a215 3e3b32d1     .^..~. >..3..2;>
   4d8d4:	bdffb07b 3e1f8603 bf0267db bcb3601f     {......>.g...`..
   4d8e4:	be191b05 be85f07b bedfd43c 3da026fc     ....{...<....&.=
   4d8f4:	3cfe250f 3dd62f78 be62f0a0 beb752f7     .%.<x/.=..b..R..
   4d904:	3e0345f3 3d5ab662 bdc1c1c5 be520fda     .E.>b.Z=......R.
   4d914:	3ccc07fb bc1af646 bc8c399a 3d4c6531     ...<F....9..1eL=
   4d924:	3dcdd0ee 3bbe2ee5 3da72dde beb434f8     ...=...;.-.=.4..
   4d934:	3eaf9bce bd7576e5 bea35c89 bea643af     ...>.vu..\...C..
   4d944:	3d390939 3d30b817 be4b45ba be619e35     9.9=..0=.EK.5.a.
   4d954:	be4379c8 3e644cb9 bdd25fa6 3d26d1f7     .yC..Ld>._....&=
   4d964:	3e93d119 bdd9e481 bd996f2b bd2050a5     ...>....+o...P .
   4d974:	3d2f4d96 be4702a1 be308488 3dbe010b     .M/=..G...0....=
   4d984:	3d8d23e2 bd9bddb8 be837e37 bf6d73dd     .#.=....7~...sm.
   4d994:	be3628b9 bc678cac 3deb3f3a be0bc9a8     .(6...g.:?.=....
   4d9a4:	bd8e2a3e bda2d25f bd8214c1 be3555d2     >*.._........U5.
   4d9b4:	beadb29b bbf41363 3e2d280b 3e3454bf     ....c....(->.T4>
   4d9c4:	bd06e09d 3cdedc19 bdf0d163 be9302d7     .......<c.......
   4d9d4:	3d72e8c0 3e1c4866 bc2da1a4 bdcb699b     ..r=fH.>..-..i..
   4d9e4:	bee0c2b4 3e368e49 3d77b5e7 3cdcbd7b     ....I.6>..w={..<
   4d9f4:	bd0f87a5 be59811b 3a32f7e4 bdee8bdf     ......Y...2:....
   4da04:	3db49500 be894e9e bec75eed ba40a5a2     ...=.N...^....@.
   4da14:	bca7054d 3e4be52b bccf2c3d 3e12fa03     M...+.K>=,.....>
   4da24:	bd09a0c6 bdb4ade2 3dfd3cea 3d4a6f3d     .........<.==oJ=
   4da34:	bd75301e 3d10f038 3f0b5340 bdbb2967     .0u.8..=@S.?g)..
   4da44:	3db5b715 be06c9c3 3d6eb532 be29da4d     ...=....2.n=M.).
   4da54:	3d8b2cbe bd9b62d4 be9c3dbb 3e3a23ac     .,.=.b...=...#:>
   4da64:	bde5bd8c be950056 be2aae3c 3dd644d6     ....V...<.*..D.=
   4da74:	bde22289 3e201a88 be72b0ab bddd2dcc     .".... >..r..-..
   4da84:	bda0d070 bc6b3380 3d5bff14 beb64f7d     p....3k...[=}O..
   4da94:	3cfd403d 3dafe9fa be2730c0 bec50714     =@.<...=.0'.....
   4daa4:	be719e2f bd4c43ee be42ceb5 3dfbec4e     /.q..CL...B.N..=
   4dab4:	bedfa773 be5cd1b7 be5913b5 becbd92f     s.....\...Y./...
   4dac4:	bcf15827 beab0f97 bcb467f7 bec52c9f     'X.......g...,..
   4dad4:	3c153e96 3ec4d757 3e1f9bce 3e09ee32     .>.<W..>...>2..>
   4dae4:	3e65728f 3d1d065e 3d1d3b42 be85b4ef     .re>^..=B;.=....
   4daf4:	bcf10190 be9f882b bed2493c 3da575d7     ....+...<I...u.=
   4db04:	3b4a9ac3 3e89243a 3cb42d9f bcf5faa3     ..J;:$.>.-.<....
   4db14:	bd11a153 3cef7b12 3db5e7a7 beb00059     S....{.<...=Y...
   4db24:	be92efdb bf12acbc bd300db2 bd1d57bf     ..........0..W..
   4db34:	3ddf309d be95cc3e bf08d0c0 3d541b60     .0.=>.......`.T=
   4db44:	3e15ef3b be41418f 3d359ef6 bd42e1af     ;..>.AA...5=..B.
   4db54:	bd858a79 3cc51e1d bea8ce1e bd27f30b     y......<......'.
   4db64:	3d485046 bdc80bdb bf1578bc bee01ce7     FPH=.....x......
   4db74:	3d31d9f2 3e30e5cd beb048cc 3e2e9f5f     ..1=..0>.H.._..>
   4db84:	3dbd4bda beb16791 bd0da9b9 bdf1fd21     .K.=.g......!...
   4db94:	be26c7ed be7afa6f bee7ae4e bde65e10     ..&.o.z.N....^..
   4dba4:	bed3142f bd35f0c5 be877f00 bf10d155     /.....5.....U...
   4dbb4:	bc419434 3e2c3ebf bee19a43 3de23649     4.A..>,>C...I6.=
   4dbc4:	bebda361 be59bd27 bed39cf8 bdc0f552     a...'.Y.....R...
   4dbd4:	3df9db15 be96313e 3e6c6ecc bee25ba0     ...=>1...nl>.[..
   4dbe4:	3c01b15b 3e5cd0e4 be884c5b bdf2033e     [..<..\>[L..>...
   4dbf4:	bebfd2d2 3d7979c7 be4658ba 3dc10632     .....yy=.XF.2..=
   4dc04:	be5f2c3d be3199bd be3b7f08 bf08fd61     =,_...1...;.a...
   4dc14:	3da32aa5 bd06b995 3e96bea4 3dc86ab9     .*.=.......>.j.=
   4dc24:	bedc8a80 3d805d7a 3e747ac8 3e73b331     ....z].=.zt>1.s>
   4dc34:	3e2594f4 be6ccd48 3d00249e bd760fcc     ..%>H.l..$.=..v.
   4dc44:	bec71580 be54b9bc bd7e4df9 3da9ca4c     ......T..M~.L..=
   4dc54:	bf06a80a 3e6c65b9 3e5b55c9 3e53c0d4     .....el>.U[>..S>
   4dc64:	3dbf17d7 3e83920d 3ca02d87 be05d528     ...=...>.-.<(...
   4dc74:	3d578aec 3dadc23d 3e389b3c 3de3825b     ..W==..=<.8>[..=
   4dc84:	be97df2c be10bc6f be005a19 be03dc07     ,...o....Z......
   4dc94:	bd6896b0 bd3277c4 bd4bf839 3e187673     ..h..w2.9.K.sv.>
   4dca4:	bdb8d35d 3e2647d0 bd6520f4 3e77d4b6     ]....G&>. e...w>
   4dcb4:	be03af26 bef9847d beb0b51e 3ec17e6e     &...}.......n~.>
   4dcc4:	be2efd20 be6440b2 3c9c837e 3c4f78e4      ....@d.~..<.xO<
   4dcd4:	3d1baf13 be7bc81e 3e605d28 3cb9902a     ...=..{.(]`>*..<
   4dce4:	be995ef6 bec750ad 3dcf028f 3e2bd204     .^...P.....=..+>
   4dcf4:	bd9bcb60 bd9e95b1 3e08af9d 3e6597b9     `..........>..e>
   4dd04:	3d6feb38 bed3348c 3c1c8277 bef92065     8.o=.4..w..<e ..
   4dd14:	3dd41b7f 3b5e2235 3dbbabfb bd9d86d7     ...=5"^;...=....
   4dd24:	be5b385e 3e4723ed 3d26366b be2676a2     ^8[..#G>k6&=.v&.
   4dd34:	3e7f314d be3dcef6 bdf41016 be8d3e68     M1.>..=.....h>..
   4dd44:	3d897b6d 3e4c6cc1 bd9ea5c4 bee68c16     m{.=.lL>........
   4dd54:	bd8aa77e be155e6c be271dc4 bbe7ed90     ~...l^....'.....
   4dd64:	3e1e4e66 bc7b8364 beeaa588 3eb3b297     fN.>d.{........>
   4dd74:	bef20489 be9a9d21 3e63b142 3dfba247     ....!...B.c>G..=
   4dd84:	be8420bb beb722a8 3deb9c36 3d26f296     . ..."..6..=..&=
   4dd94:	3e155024 3ead0e0f 3e0def07 3dfb1ff3     $P.>...>...>...=
   4dda4:	be6c0d86 beff57d4 3e15b63c 3e0f4190     ..l..W..<..>.A.>
   4ddb4:	3d63abe4 be0e921e bd822a93 bd737124     ..c=.....*..$qs.
   4ddc4:	bf00b6d0 3c826b1f be5a96c2 bd9371e0     .....k.<..Z..q..
   4ddd4:	beb2e5b7 bef240d6 bea4c59d 3d7ea6b7     .....@........~=
   4dde4:	be4a408f be6020db 3d778a33 3e6ceeec     .@J.. `.3.w=..l>
   4ddf4:	bdbe4700 bda625ea bd1ad21b bdd678f7     .G...%.......x..
   4de04:	be5c8e4a 3de93226 bdb21fad be060ac0     J.\.&2.=........
   4de14:	3c8424f8 3d9b5c33 bed0bf60 3de11f57     .$.<3\.=`...W..=

0004de24 <cnnx18_b_tensor>:
	...
   4de38:	0004de3c                                <...

0004de3c <cnnx18_biases>:
   4de3c:	be258d0c beed390a bc8d5192 be0af28d     ..%..9...Q......
   4de4c:	bce5e466 bd88715f 3c0209db 3d181c9f     f..._q.....<...=
   4de5c:	3e8b8bc4 bf1fd224 bf2954c0 bf343b1a     ...>$....T)..;4.
   4de6c:	3d7eded8 bec27d7a 3d78759a bd711457     ..~=z}...ux=W.q.
   4de7c:	3e0d1754 3e177917 3eb271e8 3d461f97     T..>.y.>.q.>..F=
   4de8c:	bec93722 3d63b2aa 3dd47868 becf6f3a     "7....c=hx.=:o..

0004de9c <cnnx18_k_tensor>:
	...
   4deb0:	0004deb4                                ....

0004deb4 <cnnx18_weights>:
   4deb4:	3d90acbd 3b7fb6da 3e2ef075 be2c10d9     ...=...;u..>..,.
   4dec4:	bbbc0ccc 3de9c2f6 bec8a749 bdf73f6f     .......=I...o?..
   4ded4:	be860299 3da51f02 3e189914 bed55e6f     .......=...>o^..
   4dee4:	3d962357 be767ada bd99d861 3ea5d150     W#.=.zv.a...P..>
   4def4:	bbc73ad2 bec2f9d7 be4b8068 3decb297     .:......h.K....=
   4df04:	3de2f6bf beb34743 be637c92 3e814880     ...=CG...|c..H.>
   4df14:	bd8ee792 3cdb7968 bce22b8e be870aee     ....hy.<.+......
   4df24:	3e457bd9 bd056799 3dc1d474 3e69cc05     .{E>.g..t..=..i>
   4df34:	bcd46202 be380cdc 3dc29e08 3d0eeda1     .b....8....=...=
   4df44:	bd8dbe8f 3e8ca597 3e328c90 3e41d260     .......>..2>`.A>
   4df54:	be82bc3d 3bce0d29 3bc4dc68 bd3c3e2f     =...)..;h..;/><.
   4df64:	bea112d6 be32979e 3d2cf757 be131d89     ......2.W.,=....
   4df74:	be1170b0 3e5b5600 beb2b45f 3db2cf4d     .p...V[>_...M..=
   4df84:	bd7d9087 be83523d beb1be25 be352092     ..}.=R..%.... 5.
   4df94:	be5f0ccc beb0a1e5 be634ce3 be716beb     .._......Lc..kq.
   4dfa4:	3ed7fb5c bc2fd342 3e0349b3 3ebb9928     \..>B./..I.>(..>
   4dfb4:	3e837ad7 bedd3801 be3ea394 be3d0d4d     .z.>.8....>.M.=.
   4dfc4:	bd9014e5 bea8c686 3e6dea17 3e407af3     ..........m>.z@>
   4dfd4:	be909fb0 bd8e580a 3cd27411 3dc8f27a     .....X...t.<z..=
   4dfe4:	bdeb8e07 bd435921 bdb5efca 3d1fbd5d     ....!YC.....]..=
   4dff4:	bcab5cd5 bec2c420 3e3b8c05 be897026     .\.. .....;>&p..
   4e004:	bd49a842 be84b90d 3da70816 3ea59791     B.I........=...>
   4e014:	3dc637bc be4bb421 3e8d55f9 be020e77     .7.=!.K..U.>w...
   4e024:	bc4d4bad 3db3f491 be88a20f 3ebe8c69     .KM....=....i..>
   4e034:	3d829249 3d8e0332 bb0005ca 3dd9628d     I..=2..=.....b.=
   4e044:	3c8733fc bdbfa425 3dec6d5d 3e4a29f8     .3.<%...]m.=.)J>
   4e054:	bdb148d0 3ec8178e be0410cb 3e50595b     .H.....>....[YP>
   4e064:	bcadb484 3ec578e3 be50fb79 be1d9cea     .....x.>y.P.....
   4e074:	3d9c553f bd9ffe77 bb40e360 3e12c9ff     ?U.=w...`.@....>
   4e084:	be8e3e11 be699736 bdf2ee31 bdbbc028     .>..6.i.1...(...
   4e094:	3c1c1b49 3b2a5985 3c2d5a21 bd1a8a48     I..<.Y*;!Z-<H...
   4e0a4:	be385348 3e93d8d1 3c925502 bf06abb2     HS8....>.U.<....
   4e0b4:	3dc425d3 3e26d7aa be3f931d 3e12f66d     .%.=..&>..?.m..>
   4e0c4:	be9740d0 3ee9b744 bef0dd29 be46947f     .@..D..>).....F.
   4e0d4:	bd99ec5b bdb106fd bedd7ca4 3d417ada     [........|...zA=
   4e0e4:	3e2918b1 3e56e719 be30ce9e bd1d9991     ..)>..V>..0.....
   4e0f4:	be06cb08 3c2b8742 bd8fafae bd1f323a     ....B.+<....:2..
   4e104:	be5eac4d 3d609be4 3d7bd757 bd16bbb9     M.^...`=W.{=....
   4e114:	3cd6d549 3ce9905d 3d7984e9 3e302850     I..<]..<..y=P(0>
   4e124:	bd602ef7 bee9a1ca 3babda23 be0a2699     ..`.....#..;.&..
   4e134:	3dbb1a87 3df28cbd bc5534db baae9c35     ...=...=.4U.5...
   4e144:	bdf6f07e be88117f 3eaf690a be868a6c     ~........i.>l...
   4e154:	3e92b552 3d054ce1 3d95fcde 3e7b3c1c     R..>.L.=...=.<{>
   4e164:	bcf66e41 bda57244 be9c0da4 be6b0316     An..Dr........k.
   4e174:	be904091 bb7d9292 3e56eb28 bde3838d     .@....}.(.V>....
   4e184:	3e8dfeed be49fef1 bd4a5e88 3e919495     ...>..I..^J....>
   4e194:	be60f79d 3d6f19f9 be2a1b15 3dcb4811     ..`...o=..*..H.=
   4e1a4:	bdce245a becb0c80 3d9e1d91 be4a28c8     Z$.........=.(J.
   4e1b4:	bd2c225d 3d26818c bdf576ce be8dbf2b     ]",...&=.v..+...
   4e1c4:	be1c4194 3e363713 bd553180 3ccc97a8     .A...76>.1U....<
   4e1d4:	bdd65500 3d859b7d bd9c14bc 3e64f965     .U..}..=....e.d>
   4e1e4:	3cc42442 3e81495b 3ddbebbd bda0a421     B$.<[I.>...=!...
   4e1f4:	3dbdc86f bd3c56b8 bd4f5184 bea933bb     o..=.V<..QO..3..
   4e204:	3e19535a 3e6fc811 bc52112f bd2f4fa1     ZS.>..o>/.R..O/.
   4e214:	be8e0c79 bda75a22 be15cf64 390db9bc     y..."Z..d......9
   4e224:	be2d6ecc 3e738ba8 be4dc0e9 3dff8ed2     .n-...s>..M....=
   4e234:	be8340da 3d23ec06 bce0c81c 3dc2c026     .@....#=....&..=
   4e244:	3dd5e28c 3e22397e 3cbf9282 3d9c3bad     ...=~9">...<.;.=
   4e254:	3dbaafcc be9b8835 3d67690b be73df3f     ...=5....ig=?.s.
   4e264:	3da83e4e 3dcb6fe3 3d2768f0 3e878deb     N>.=.o.=.h'=...>
   4e274:	bea2dcb9 be31cadc 3cbe94a6 be303fd0     ......1....<.?0.
   4e284:	bceea433 3e07e8a6 3eae2b75 bb5c34ca     3......>u+.>.4\.
   4e294:	bec8e26f bef364f3 3d9a40ce 3e851b80     o....d...@.=...>
   4e2a4:	beb34731 be8012e8 bd280116 3e865d7e     1G........(.~].>
   4e2b4:	3f0285e6 be90af8e 3ef9743b beb3cec3     ...?....;t.>....
   4e2c4:	3ecffc26 3f243a22 bd425a45 3e41dca0     &..>":$?EZB...A>
   4e2d4:	bd646979 bcb5cc70 be8e97cc be473dea     yid.p........=G.
   4e2e4:	3ddc183a be752631 3d480317 3db364b1     :..=1&u...H=.d.=
   4e2f4:	bf07a1dd be97dc07 bd0330fd be018503     .........0......
   4e304:	3c2d9c50 bac8a21b 3dcd92c7 3e292706     P.-<.......=.')>
   4e314:	3eadcda8 be7067f8 3e135763 bd0b3bd6     ...>.gp.cW.>.;..
   4e324:	bebb33c4 be09bc21 3ee51405 3e5db238     .3..!......>8.]>
   4e334:	3d2b3b45 3dafef9c be1c3f82 be7f80ed     E;+=...=.?......
   4e344:	3e75528e 3e22f419 3e4c9023 bf072389     .Ru>..">#.L>.#..
   4e354:	bf3bd381 3d8b496f 3da1cf6c 3f264b39     ..;.oI.=l..=9K&?
   4e364:	be59e2a2 3ce281d5 be5014c7 3d570d15     ..Y....<..P...W=
   4e374:	3f009cb1 bf257cef bdff91a7 be9fdfb0     ...?.|%.........
   4e384:	3f027dd4 3edbdb30 3d021cbb 3e224c34     .}.?0..>...=4L">
   4e394:	bd85466d 3ea5db20 beb34864 be565a9b     mF.. ..>dH...ZV.
   4e3a4:	3d2a1857 3dc2a4da 3dd98b83 3d848c88     W.*=...=...=...=
   4e3b4:	3ec5da47 3da3ae8d 3e5f44a7 3e49d254     G..>...=.D_>T.I>
   4e3c4:	3e905823 bedb3657 3ec78ef9 3e1bb0b9     #X.>W6.....>...>
   4e3d4:	be7f38b3 3e404509 bcbc7fc3 be7b8066     .8...E@>....f.{.
   4e3e4:	be84d9ce bf1ea621 3e88b529 3d783e4a     ....!...)..>J>x=
   4e3f4:	3c1e6c3c be220ba6 3c4863bc bdb77685     <l.<.."..cH<.v..
   4e404:	3e29132f bd8ea39e bc854310 3d0c6096     /.)>.....C...`.=
   4e414:	bd4a716e bde45945 3db5401a be1f77f0     nqJ.EY...@.=.w..
   4e424:	bd647299 beab7dfd 3e071c62 3dfef9e2     .rd..}..b..>...=
   4e434:	3e39278e bde21fb2 3e20cd3d bd8cc789     .'9>....=. >....
   4e444:	be01b995 bddd074f bdbad3c6 3d2d289d     ....O........(-=
   4e454:	3ed27922 3e23e5c1 be8b6dbe be854f63     "y.>..#>.m..cO..
   4e464:	3ecc4898 bda88f69 3e8a7447 beab93b2     .H.>i...Gt.>....
   4e474:	beae567a be27998f 3e7e4fde 3e957920     zV....'..O~> y.>
   4e484:	3e48cafb 3d0e6d94 bddbb2f9 bec45643     ..H>.m.=....CV..
   4e494:	3e208a90 bf27445b bde189c3 bed684aa     .. >[D'.........
   4e4a4:	3ca073ee 3e90be33 3e66ea54 3e4999da     .s.<3..>T.f>..I>
   4e4b4:	be945467 bf8a8f38 bf2d143b bea3210c     gT..8...;.-..!..
   4e4c4:	3e533919 3eaeae4a 3ee70aa5 3e9fd15b     .9S>J..>...>[..>
   4e4d4:	bf2f00c3 bea0283d 3e443435 3f0383aa     ../.=(..54D>...?
   4e4e4:	bde61e1e 3ea5b096 3dc368b9 beb254d3     .......>.h.=.T..
   4e4f4:	bd9560b0 be030254 3e84fdc1 be78bee0     .`..T......>..x.
   4e504:	3ecdc3a5 3ec9e764 bde57241 be9b87b2     ...>d..>Ar......
   4e514:	be30ad18 3ea72ada bdc87406 3d27872e     ..0..*.>.t....'=
   4e524:	be9804b0 3e87dde8 bf13335b bf034cd2     .......>[3...L..
   4e534:	be9eaef6 bcee55a9 3e4d12fe 3e976e92     .....U....M>.n.>
   4e544:	be1a739c 3e33f2a6 bea1832c beafc4bc     .s....3>,.......
   4e554:	3d419762 3e62b80d be4a266c be4107c4     b.A=..b>l&J...A.
   4e564:	be28ca29 3ecce97f be7f4897 bda7b6ba     ).(....>.H......
   4e574:	3e2453b4 be57bcb6 3db87aef bde4ceb4     .S$>..W..z.=....
   4e584:	3d5f5c5f be5cc956 be14d5e0 3e986652     _\_=V.\.....Rf.>
   4e594:	be60b0a6 3e6f27b2 3e053b4c be34dddf     ..`..'o>L;.>..4.
   4e5a4:	be0bec46 be5dc4bb bde54a59 bef817ae     F.....].YJ......
   4e5b4:	bd889014 be306e55 bd1fa138 bf1ba83c     ....Un0.8...<...
   4e5c4:	3e5b6d6f be02ef3e bdccaa7a be1c860e     om[>>...z.......
   4e5d4:	bdf56299 bd38a14f be8247d2 3cdfbef8     .b..O.8..G.....<
   4e5e4:	bdaf0668 bccb36c5 3dcfd36e bc62e802     h....6..n..=..b.
   4e5f4:	3dcfa872 bd0cf36e 3c178c59 3d28e313     r..=n...Y..<..(=
   4e604:	3e146be9 be651291 bdd624ca 3df56a25     .k.>..e..$..%j.=
   4e614:	bd839800 3dccae9a 3dafce3b be7f3721     .......=;..=!7..
   4e624:	bd03830a bd8b56cf 3dfe3d34 3df8edcd     .....V..4=.=...=
   4e634:	bed9836b bec84a0d 3dd448f0 be0207b6     k....J...H.=....
   4e644:	3e916598 3ddbfc92 3e5026f3 3d4955b4     .e.>...=.&P>.UI=
   4e654:	be3e33ee be0a777b bd9dd2e8 bea99b0d     .3>.{w..........
   4e664:	3ad5e21f bede26c7 bd4298cc 3eb5927b     ...:.&....B.{..>
   4e674:	3e8ea030 be18eddd 3da91cb0 3ddb14c7     0..>.......=...=
   4e684:	be0d633e bdf2f4c5 3e9512cf 3e56487a     >c.........>zHV>
   4e694:	be9b4db9 bf06f345 bdcb28a7 3e06c0d3     .M..E....(.....>
   4e6a4:	be3c1b06 3d5bd09e 3d57814e 3e4cf842     ..<...[=N.W=B.L>
   4e6b4:	bd88e7b1 bf25f1bb 3f14ccc3 3d231338     ......%....?8.#=
   4e6c4:	bed224a6 beec9d71 be978813 3ea1e4db     .$..q..........>
   4e6d4:	3eadab7b 3e1dc5ba 3e798fab bf24253c     {..>...>..y><%$.
   4e6e4:	3dd7eb3e 3e8e6fbc be9bebe3 3e8e1750     >..=.o.>....P..>
   4e6f4:	3e511bc7 be10e46d 3c59f14e 3e8831bb     ..Q>m...N.Y<.1.>
   4e704:	3e7b752c bbdd7f8d bed052ea be8b467f     ,u{>.....R...F..
   4e714:	bebc3fbc 3cf3f439 3d91cc7a be492977     .?..9..<z..=w)I.
   4e724:	bd60067e bc7f2ba4 bdbb8e7f be0613f4     ~.`..+..........
   4e734:	be94b080 bdee0479 bd9dd57f bde12a34     ....y.......4*..
   4e744:	be99539d be9bc742 bd123981 be67b4ca     .S..B....9....g.
   4e754:	be2a4a01 bebd027d 3d3b17e9 be0b7a98     .J*.}.....;=.z..
   4e764:	be412752 be02b748 3dd651b9 3e1cc6a6     R'A.H....Q.=...>
   4e774:	3c27004a be22248d 3e1a2fda be484459     J.'<.$"../.>YDH.
   4e784:	bd394f27 bf0163b6 be244dc7 3eb27c4f     'O9..c...M$.O|.>
   4e794:	3db53d7a 3d282962 3da24eac be72d97a     z=.=b)(=.N.=z.r.
   4e7a4:	3de39956 3e710566 bd995296 3edf4f67     V..=f.q>.R..gO.>
	...
   4f9b4:	bcebcada be5e42be be528fba 3dad86c8     .....B^...R....=
   4f9c4:	3e2753f3 3e851047 bea7cdbd be896156     .S'>G..>....Va..
   4f9d4:	bda96884 beab3543 3cf7bbc9 bdeda61a     .h..C5.....<....
   4f9e4:	be838b4b 3cedffa8 beea88d5 3dae1632     K......<....2..=
   4f9f4:	3d518813 be3cbef3 be476874 3e1a6484     ..Q=..<.thG..d.>
   4fa04:	bd2de383 bd95a77a 3d986d75 3e289e50     ..-.z...um.=P.(>
   4fa14:	bdf58b46 3e07ac60 bed40c90 be2cecc0     F...`..>......,.
   4fa24:	bd3a28eb 3d66430b bddd9fd7 3dd11085     .(:..Cf=.......=
   4fa34:	bcbfd949 bc828464 bda75f1d 3e2b8cab     I...d...._....+>
   4fa44:	3dc7bd7e bdd0fbd3 be42ebe9 3a38b18d     ~..=......B...8:
   4fa54:	bae1bf22 bef180ce bda4bf1c 3d24ac1c     ".............$=
   4fa64:	be8832ff be2c6404 3e8dfea8 3d907e0b     .2...d,....>.~.=
   4fa74:	3dcb5b38 3e7b4fd0 be618c15 3e0cb729     8[.=.O{>..a.)..>
   4fa84:	bdda5082 beef613c 3d61ed78 be143cf5     .P..<a..x.a=.<..
   4fa94:	be59a18a bcab3d15 3e9ae8d8 3dfe2586     ..Y..=.....>.%.=
   4faa4:	bd164396 be62037d 3c86bfad be440b65     .C..}.b....<e.D.
   4fab4:	3e1c6cf1 bda330f5 bec16381 be38b7b3     .l.>.0...c....8.
   4fac4:	bd119709 bd79e5fa bd9632a4 be474568     ......y..2..hEG.
   4fad4:	bd5b4e0a be24d58f 3d33554f bd689580     .N[...$.OU3=..h.
   4fae4:	3e2f64ff bd45ddb2 bd2cb637 3e6d6741     .d/>..E.7.,.Agm>
   4faf4:	bec88391 be86e792 3e129574 3e23d16b     ........t..>k.#>
   4fb04:	3df65c99 3e536d01 be63bc86 3e93abef     .\.=.mS>..c....>
   4fb14:	bd28a890 3e877d1d 3e1de1d8 3e293ad2     ..(..}.>...>.:)>
   4fb24:	bdef5384 bd211a0c bd86a114 3cff761d     .S....!......v.<
   4fb34:	bd9a94ec 3e5572a8 be1857e5 be579bce     .....rU>.W....W.
   4fb44:	bef82e4c 3d225f20 bddf9e28 3dd83b26     L... _"=(...&;.=
   4fb54:	3e0130e1 bcfe19cc bda98bda 3db9a316     .0.>...........=
   4fb64:	3ce62f84 be7cbfb5 bdc102ef be7b77fb     ./.<..|......w{.
   4fb74:	3cf28543 be51b684 bd15c254 3dcbcaee     C..<..Q.T......=
   4fb84:	3e893d40 be74f9fb 3e1e5560 be4f819d     @=.>..t.`U.>..O.
   4fb94:	3d35977f 3deb072e 3d6f067b be5e4032     ..5=...={.o=2@^.
   4fba4:	bccdb04d 3d806364 bdfdf75c 3ded919b     M...dc.=\......=
   4fbb4:	bd24d54f be850915 be57ca3b bd8c5de8     O.$.....;.W..]..
   4fbc4:	bd1276e8 3e68fa18 3e291077 bf22c887     .v....h>w.)>..".
   4fbd4:	bd071d93 bc91255c be5dfb35 bdd6ee17     ....\%..5.].....
   4fbe4:	3ea268c4 be1ea907 bcf5c31b 3cb6008d     .h.>...........<
   4fbf4:	be9bfd22 be616e60 be6b4fd1 3d375b54     "...`na..Ok.T[7=
   4fc04:	be1687c2 3cd4bd77 3e760202 3e9fae79     ....w..<..v>y..>
   4fc14:	3e22b0ec bea2618f 3d859032 3edbf11b     ..">.a..2..=...>
   4fc24:	3c386288 be1ca9da be465dfe be056356     .b8<.....]F.Vc..
   4fc34:	be3de92a 3e271ce7 3dbae2ee 3d976acc     *.=...'>...=.j.=
   4fc44:	be9642b4 be80c2f7 bec82b7d bebf476e     .B......}+..nG..
   4fc54:	be2a288a be59fe13 3d700680 3e2d656d     .(*...Y...p=me->
   4fc64:	3e8bbebd 3e2f0671 bf044961 3e9b6e3e     ...>q./>aI..>n.>
   4fc74:	be61c684 bdd4ac51 bd7092e8 be745c6e     ..a.Q.....p.n\t.
   4fc84:	3e3e329a 3e795f48 be51c9d8 3dca30cd     .2>>H_y>..Q..0.=
   4fc94:	be0c4556 3e991335 3cf47fb9 3e0b71fb     VE..5..>...<.q.>
   4fca4:	3df99bbc be34d005 be3cd457 3e43e915     ...=..4.W.<...C>
   4fcb4:	3e9f97ce be570e41 3d0584da 3e660226     ...>A.W....=&.f>
   4fcc4:	bdee3552 bbc81a76 3cee434a bd939584     R5..v...JC.<....
   4fcd4:	bcd049ff bbe2db2c 3deb948b 3e53e4cf     .I..,......=..S>
   4fce4:	bd99e043 3ec1c2fa be426f63 be1aa2f4     C......>coB.....
   4fcf4:	bde5324b 3e389f2c bf15e475 be0039a4     K2..,.8>u....9..
   4fd04:	beb5ed15 bbc79500 bf05d4ea bd07ca92     ................
   4fd14:	be289141 bd22389c be59a7fe 3d7ad2d5     A.(..8"...Y...z=
   4fd24:	be23e802 3e052707 3e331b2b 3e080c6b     ..#..'.>+.3>k..>
   4fd34:	bdc875c9 be254e9f 3daa20c3 3dfaa8c0     .u...N%.. .=...=
   4fd44:	3d9e767e 3df4b780 bdd323be be09bbcb     ~v.=...=.#......
   4fd54:	3ddbb24f 3e33a0ce 3db54b08 be93b505     O..=..3>.K.=....
   4fd64:	be2b4427 3cff3dee 3b68c5a7 bc79d752     'D+..=.<..h;R.y.
   4fd74:	be4b01f1 3e0af5b7 be5959d0 be7e8bc8     ..K....>.YY...~.
   4fd84:	bd1bdc8a 3dd6fcdc 3dc33d19 3dafe4c2     .......=.=.=...=
   4fd94:	bd99d152 3e5b6609 3cf9c29f 3e1d6ae8     R....f[>...<.j.>
   4fda4:	bd62ed53 3ce0f665 bd479914 3db8fde2     S.b.e..<..G....=
   4fdb4:	3e9ee2f0 bdf72ad6 3eb44313 bc41ca3a     ...>.*...C.>:.A.
   4fdc4:	be28c9a0 3dc01e8a 3d82206a 3e38e35e     ..(....=j .=^.8>
   4fdd4:	bea05098 3cab3b7d bea7892f be1468db     .P..};.</....h..
   4fde4:	3e26d8d0 3e900430 3c5f652b bcdf0c8b     ..&>0..>+e_<....
   4fdf4:	bddf6734 3da8589d bd151896 bdd9c6a6     4g...X.=........
   4fe04:	be2dc112 bd2b3570 3db180ca 3de40c12     ..-.p5+....=...=
   4fe14:	3de8a55a be60884c 3e00b370 be0964e8     Z..=L.`.p..>.d..
   4fe24:	beedbcaa be0539fe bd9be07a 3d58b95d     .....9..z...].X=
   4fe34:	3d12eab6 3e4c42e6 bf4d9c90 be42ae36     ...=.BL>..M.6.B.
   4fe44:	3df79dd2 bdac24d1 3e56c344 be3cb50b     ...=.$..D.V>..<.
   4fe54:	be5cf952 3e8e814f 3dc769ae 3d93d413     R.\.O..>.i.=...=
   4fe64:	3e184837 bdc45fb1 3e1ad452 be1ba24a     7H.>._..R..>J...
   4fe74:	3d12c28d bf04bc5c bd24db47 be8d1b15     ...=\...G.$.....
   4fe84:	3e97a1d6 3dbcf957 3e885f71 3e20fc14     ...>W..=q_.>.. >
   4fe94:	3dcb438c bdaf5538 3e002a47 3e053aae     .C.=8U..G*.>.:.>
   4fea4:	3d1b34c7 bdbf6c33 3d187115 3e24feb0     .4.=3l...q.=..$>
   4feb4:	3de0a5e8 3df492ee 3ce0035b 3e3074f9     ...=...=[..<.t0>
   4fec4:	3ead3dcc be5f37e9 3e5a2d34 3de15ebd     .=.>.7_.4-Z>.^.=
   4fed4:	beb2f474 3d0899b7 3d3d9252 bc77fe8a     t......=R.==..w.
   4fee4:	bd95dff1 be1ded3d be95dfb5 bd45ad9f     ....=.........E.
   4fef4:	be8a33cf bdecf8a0 3db83659 3e2b6fd9     .3......Y6.=.o+>
   4ff04:	3e449bfa 3c8c787f be29d475 bd1c72b5     ..D>.x.<u.)..r..
   4ff14:	bd072048 be785080 3cd3fcfd be43c437     H ...Px....<7.C.
   4ff24:	3dac5dfe bd6f7d36 3e672c27 3dadd80e     .].=6}o.',g>...=
   4ff34:	3e391edc 3dbfa4c2 bd698811 3db12e56     ..9>...=..i.V..=
   4ff44:	be7e6e45 bd7c76a6 bda38919 3dc5eb45     En~..v|.....E..=
   4ff54:	3dc629c5 3ec9861b be7c9fa8 bda2ff6b     .).=...>..|.k...
   4ff64:	3e2f769b be8302e2 3d0e0592 3e00254f     .v/>.......=O%.>
   4ff74:	be2ca2d8 3e036b94 3d08dbcc 3dc08808     ..,..k.>...=...=
   4ff84:	3e9fac4f be0daed9 3e0f8ad1 be8cf133     O..>.......>3...
   4ff94:	be32148a be16ed07 bd666ab0 3d3761b9     ..2......jf..a7=
   4ffa4:	be4d7188 becc5aaa 3ee0fce9 bd9e9f09     .qM..Z.....>....
   4ffb4:	3e4da5c9 be88490f bec1578f be182d0d     ..M>.I...W...-..
   4ffc4:	3ec2accf be57e3d9 3d8936e2 3e69c3bb     ...>..W..6.=..i>
   4ffd4:	be45c178 3e4dacee 3e449100 3e4b38d1     x.E...M>..D>.8K>
   4ffe4:	3e6509e3 3e4a0f4a 3dc96128 3e9aebf3     ..e>J.J>(a.=...>
   4fff4:	3e98fc66 3e13d1af 3e781f26 bdb67073     f..>...>&.x>sp..
   50004:	bf02958e bf4c6e82 bd907ce0 beaa4bcc     .....nL..|...K..
   50014:	bc23d196 bd9928a8 3d1b8ac3 3d01497c     ..#..(.....=|I.=
   50024:	3e195406 3e0b579e bed1fac4 be3cf5a0     .T.>.W.>......<.
   50034:	bedb05c2 becc24c8 3e658f63 3e1627f1     .....$..c.e>.'.>
   50044:	be81115c 3e9ce6eb be9e06f8 3e6ddf0f     \......>......m>
   50054:	be09674e 3d021554 be540956 be5fc138     Ng..T..=V.T.8._.
   50064:	bd024eb4 3e23c5a0 bd3eb892 be06b9bb     .N....#>..>.....
   50074:	3e116442 391632b2 3de460d1 be00d85a     Bd.>.2.9.`.=Z...
   50084:	3d4565a5 bdc621dc 3db8e06b be621333     .eE=.!..k..=3.b.
   50094:	be24de0b 3d1a4914 3e89c78f bd22c42d     ..$..I.=...>-.".
   500a4:	bca57a02 3d29318d be99835b bc72f6f8     .z...1)=[.....r.
   500b4:	bd11af22 bdd3124d bdea9d38 3e0659d7     "...M...8....Y.>
   500c4:	be97dfbf bd5bc373 bf055247 bd5ec2e4     ....s.[.GR....^.
   500d4:	3deb1dd7 be5402fa 3df0ddea be18b843     ...=..T....=C...
   500e4:	bdb49b92 be86b568 3d83f30f 3d81d5e1     ....h......=...=
   500f4:	bd35f8f0 3d8c3ba5 3e3f6afa be12d914     ..5..;.=.j?>....
   50104:	bbfb455b 3d4ad5df bebd2bc7 3e07bce3     [E....J=.+.....>
   50114:	be47f59a 3d5c0689 bc6472a6 bdac20d1     ..G...\=.rd.. ..
   50124:	3d03b24f bcf3741b be00a1f8 3d223981     O..=.t.......9"=
   50134:	be57bb96 bd9fffad bc8ee5e1 3d510360     ..W.........`.Q=
   50144:	be01da0d 3e854067 3daed70f 3db215bb     ....g@.>...=...=
   50154:	bdf509e7 befeeee4 be42a6ea be2f6b60     ..........B.`k/.
   50164:	3e269142 be644a84 3e7aab0a 3e1cb359     B.&>.Jd...z>Y..>
   50174:	bc7e5bb0 be3e3718 3e819b67 3dfa0ab3     .[~..7>.g..>...=
   50184:	bdda67f3 bd222ec9 3e45b500 3c0e278b     .g...."...E>.'.<
   50194:	bdaece69 be54b6c3 bc08b109 be042dee     i.....T......-..
   501a4:	bd872726 bd1e590c 3c0ec49f 3d3bfd8a     &'...Y.....<..;=
   501b4:	bec06034 bef133ba be307b4a 3d3fe67d     4`...3..J{0.}.?=
   501c4:	be8d538f 3d962283 be9901ab 3d27a121     .S...".=....!.'=
   501d4:	3e42e7be 3db8f2d2 3e082808 3d5bea8a     ..B>...=.(.>..[=
   501e4:	bdefa58d 3b0fc98c be317300 3e71a6d3     .......;.s1...q>
   501f4:	3ea4aa48 be2091e3 bebd2a55 3eb96ec8     H..>.. .U*...n.>
   50204:	bd48264f be36e85b bbb37f33 be695d3b     O&H.[.6.3...;]i.
   50214:	be0d7732 3dda0bb3 bdadc538 3e4e31cd     2w.....=8....1N>
   50224:	3e7322cb 3e9f92a6 3dcf4c8d 3dd60b70     ."s>...>.L.=p..=
   50234:	bd4f7492 3df67d4e be804862 bdab33a5     .tO.N}.=bH...3..
   50244:	3e62f336 beafeecd be62881a bd8b44a3     6.b>......b..D..
   50254:	be687685 3d408e7b bbd25969 3c86cd29     .vh.{.@=iY..)..<
   50264:	bddb570a bc4470c8 beb299e5 3d50fe2f     .W...pD...../.P=
   50274:	be363506 be742c34 3d4ad1c8 bd931d68     .56.4,t...J=h...
   50284:	be12ff3e be64ea12 bed5b966 3d83f465     >.....d.f...e..=
   50294:	3db0508f 3d5a4c77 bda0e3b1 3de9e3f8     .P.=wLZ=.......=
   502a4:	bdb2e9d7 3e0bacaa 3dd525cb bdda8b41     .......>.%.=A...
	...
   514b4:	bcf0c8e6 3ef0803b 3d349f21 3e300175     ....;..>!.4=u.0>
   514c4:	bd808900 be2d6ffd 3dd64bb1 be108145     .....o-..K.=E...
   514d4:	be8d06e4 be173519 bcba0ac9 3e40a5af     .....5........@>
   514e4:	bebc4438 bccbeef1 be26c02b bdf6ef14     8D......+.&.....
   514f4:	bd901c92 3c74d6cc 3e25e9fd 3ee7e793     ......t<..%>...>
   51504:	3e538354 3e5c34c8 bd2989f2 bb530678     T.S>.4\>..).x.S.
   51514:	3edbd831 bdf34d0d 3ea4be66 3e1d2074     1..>.M..f..>t .>
   51524:	3e497246 be8a704e 3d5d7061 be104bde     FrI>Np..ap]=.K..
   51534:	3e2fb5ec 3e833809 3de879d3 3df6e798     ../>.8.>.y.=...=
   51544:	3e540f23 bd5aaa18 bea666c1 b83b3119     #.T>..Z..f...1;.
   51554:	3c4cba43 3dac0d44 beb3743e bd9e405c     C.L<D..=>t..\@..
   51564:	3e5133d9 be98c526 bdedf00b be2de545     .3Q>&.......E.-.
   51574:	3dfdcb16 bb75b34b bd2fbbd5 3da5b1fd     ...=K.u.../....=
   51584:	3e9495a9 bc1f6eb0 bc990df9 3c5d9959     ...>.n......Y.]<
   51594:	bdac3811 3d34222e 3debf701 3cb4a8d9     .8..."4=...=...<
   515a4:	be1dd8f2 be02dd15 bea052ac 3dc216f2     .........R.....=
   515b4:	bac6eb36 3b7139bf 3d95f220 be2d553d     6....9q; ..==U-.
   515c4:	3e66a827 be75b177 3e00235c bec70401     '.f>w.u.\#.>....
   515d4:	bd979be0 bdd480b8 bdb8620d bd99ff35     .........b..5...
   515e4:	be05a06c 3da52adb bec05ea0 be624ec8     l....*.=.^...Nb.
   515f4:	bebf2441 be6bc24a bca368d6 be6636f8     A$..J.k..h...6f.
   51604:	be51b6fd be5c7ca8 bd27a223 be5ed138     ..Q..|\.#.'.8.^.
   51614:	3e4cd9a0 be572043 be49c116 3eaddb33     ..L>C W...I.3..>
   51624:	be7f2d59 bd9160c2 3d975236 bd07df68     Y-...`..6R.=h...
   51634:	3e780115 3e4f743c 3e1698da 3c8df968     ..x><tO>...>h..<
   51644:	be47fa3e 3cefdd53 3e5ef0ad be800e55     >.G.S..<..^>U...
   51654:	bdada097 3df7de48 3ceb7498 3e59f0ce     ....H..=.t.<..Y>
   51664:	becaee0b be61b832 bea5e17d 3cf0c9e7     ....2.a.}......<
   51674:	3cfa2d78 3e457055 bddd60f5 be154082     x-.<UpE>.`...@..
   51684:	bcd03c4e be3e6db7 b9e47560 be168d08     N<...m>.`u......
   51694:	3e463034 3e1f4c2f 3df653b8 3ea11269     40F>/L.>.S.=i..>
   516a4:	bc68ad28 bef243c0 3ed44b86 bdc181a7     (.h..C...K.>....
   516b4:	3e2291d5 3e1bd9ab 3e56e93b 3e01d9e8     ..">...>;.V>...>
   516c4:	bd08dc7b bea26113 bea14db2 be79d27c     {....a...M..|.y.
   516d4:	be7c63ed bc8eb042 be4e7665 bd7d139a     .c|.B...evN...}.
   516e4:	3e57cc4f bf0ce4f4 bcc759ab 3cec2558     O.W>.....Y..X%.<
   516f4:	3ed168a8 be382a74 3f0bf735 be38b3d8     .h.>t*8.5..?..8.
   51704:	3db62a48 3e79c6e2 bdef4ff8 beb70de0     H*.=..y>.O......
   51714:	bf8b3c6a 3d75465e 3e538ca1 3d81b8c4     j<..^Fu=..S>...=
   51724:	bda6e6a9 bec80522 be249aa8 3ec4f96d     ....".....$.m..>
   51734:	3d2b89ec 3ccc75da 3e0e439f 3cf5227c     ..+=.u.<.C.>|".<
   51744:	3e5176c1 bc239a03 beab19b6 be40fd07     .vQ>..#.......@.
   51754:	bdbe9939 3e8cecac bf02208e 3d85d4f1     9......>. .....=
   51764:	bd27408e 3d2ad8a1 bf1c9926 3e1f3c90     .@'...*=&....<.>
   51774:	bdf9e944 be6a1c40 bd00bf0a beaefe9a     D...@.j.........
   51784:	be3722c7 3ef7ac07 3ef04fc2 bda5c8c4     ."7....>.O.>....
   51794:	3e87fcef bec12fed 3de70827 3deffbde     ...>./..'..=...=
   517a4:	3ea8f6d7 bd459015 3d8bcfec 3e156fce     ...>..E....=.o.>
   517b4:	3e0bec1c 3e5decec 3db99a9e 3e0b8bf0     ...>..]>...=...>
   517c4:	be00b779 be19c44e beb3ac7b bebf9dd7     y...N...{.......
   517d4:	3e6271c1 3dada66b 3d768f36 ba07dc83     .qb>k..=6.v=....
   517e4:	bf17dd19 3e4b34b4 3b073da1 bd11bfb6     .....4K>.=.;....
   517f4:	beac0b95 3e3562fa be2b7165 3c3c5ef6     .....b5>eq+..^<<
   51804:	3e490048 bed4461f 3e1f9a84 3e222874     H.I>.F.....>t(">
   51814:	3e9d637a 3e9819eb 3e58e8d4 3e0fd758     zc.>...>..X>X..>
   51824:	beda15e2 bf0252c6 bf035761 bf095212     .....R..aW...R..
   51834:	3cfdcb12 3d8a4c1d bd62ce00 bd8d9fa2     ...<.L.=..b.....
   51844:	bf043bde 3e4ab764 3bd1e590 bb5d5b90     .;..d.J>...;.[].
   51854:	bdadb4ef bd0d7ebc bec82a1b bd547f9c     .....~...*....T.
   51864:	bda44240 becbcdef 3c26c4db 3d133e89     @B........&<.>.=
   51874:	bd52eb85 be0ff5f4 be1f8c09 be574a9e     ..R..........JW.
   51884:	bd81f6b0 bc5fbb7c bdb4fc80 3d134eda     ....|._......N.=
   51894:	be80a83f 3ddc4774 be39afd9 be07d0c0     ?...tG.=..9.....
   518a4:	3d3c462c be2c4688 3e0ebbcd 3e908fe3     ,F<=.F,....>...>
   518b4:	be27a05e be5d4e38 3dc9e296 3dac1843     ^.'.8N]....=C..=
   518c4:	3e601875 3ca429c6 3eb57c6c 3d1baf0b     u.`>.).<l|.>...=
   518d4:	bed72fb0 be331119 bea0bbdc 3e378a90     ./....3.......7>
   518e4:	3d0b3e52 3eb19ac2 3e956245 3e6c0f88     R>.=...>Eb.>..l>
   518f4:	bc74a2b4 bdc101d6 3de1b42a bd69f43a     ..t.....*..=:.i.
   51904:	3eb502d0 bde48691 bcef75c4 bddbd365     ...>.....u..e...
   51914:	bcddef9f 3d7ee0ff 3e3b56fe 3c1b90c0     ......~=.V;>...<
   51924:	bc03c608 3e51cc8e bd3c008a bddc17cb     ......Q>..<.....
   51934:	bda7ade1 3e5f851c bf7e0d30 be01bfc5     ......_>0.~.....
   51944:	3e22f5b3 3c9c2733 3ea2431a bd66a5d4     ..">3'.<.C.>..f.
   51954:	3e022358 3e86bedb 3e24ddc0 3d739563     X#.>...>..$>c.s=
   51964:	3d8e798d 3d707533 3d1d2bf8 be0bc8d2     .y.=3up=.+.=....
   51974:	3e19993e beae9a4e 3e1ac883 bedeb8fb     >..>N......>....
   51984:	3df6489f bdd878d2 3e7f98e4 be50f666     .H.=.x.....>f.P.
   51994:	3ebf68d8 bea9cb9c 3e873057 be5bcbf8     .h.>....W0.>..[.
   519a4:	3e9901fc 3eb7b32e bd31f8ab 3dcc0928     ...>...>..1.(..=
   519b4:	be100122 3e8f4184 3d80c687 bd95fa44     "....A.>...=D...
   519c4:	bd539182 3d83ef1b bec9aacd 3df0082f     ..S....=..../..=
   519d4:	bd46adfa 3d95078f be8808cc 3ec24887     ..F....=.....H.>
   519e4:	3de6c80b 3d92decb befb9831 bd9eb0b6     ...=...=1.......
   519f4:	be395b4b 3de697a5 bcdd9806 3d567062     K[9....=....bpV=
   51a04:	3d84da04 3e0bdf35 bcf826f8 3c8bc89b     ...=5..>.&.....<
   51a14:	be819d6e be8b2c89 be2d6936 bedb9fdf     n....,..6i-.....
   51a24:	bd62f34d be8c98c5 3e628a86 3de399d3     M.b.......b>...=
   51a34:	3d867c18 bc103b37 b94fa646 3eacc142     .|.=7;..F.O.B..>
   51a44:	3e368fb1 bdb9cb20 bd93165f 3e08e0e2     ..6> ..._......>
   51a54:	bd13ec59 3ed17ffa bef94437 3e610ff8     Y......>7D....a>
   51a64:	3e5bdad2 3d1e200c be4e0b16 3daf84e3     ..[>. .=..N....=
   51a74:	3e17789d 3dd0f513 3e438fc2 3d5ef6c3     .x.>...=..C>..^=
   51a84:	3dfabc16 bf133f44 bd134872 bca84737     ...=D?..rH..7G..
   51a94:	bdf8c4f4 3e0fc6d3 beefbb46 3e1b3791     .......>F....7.>
   51aa4:	bd080552 3da849ff 3e712dc9 bebb91a7     R....I.=.-q>....
   51ab4:	3d69319a 3e8f37fa be953f78 be21d547     .1i=.7.>x?..G.!.
   51ac4:	3ea70916 3e512360 3e99bb99 3d47818f     ...>`#Q>...>..G=
   51ad4:	3e4b88d6 3ea35c01 3e9168c4 3ea22701     ..K>.\.>.h.>.'.>
   51ae4:	3ea7303f 3dc353f9 3eb01558 be57041c     ?0.>.S.=X..>..W.
   51af4:	3db687ac be96c287 3dcee50d be298b5e     ...=.......=^.).
   51b04:	bd8ac48e bf252140 bc5cf8f5 3e896c55     ....@!%...\.Ul.>
   51b14:	3d0b39fd be3296bc be20967f 3d383edb     .9.=..2... ..>8=
   51b24:	be9291e8 be027daa 3c8c75e0 3e1b2938     .....}...u.<8).>
   51b34:	bf0012e1 be6d8618 3e0c705e 3e427a92     ......m.^p.>.zB>
   51b44:	be346e5f 3ec47c7d bd9c0884 be892e8d     _n4.}|.>........
   51b54:	3dd46879 bcbae158 3e7cbe13 be496341     yh.=X.....|>AcI.
   51b64:	3e36efbe becc2271 bd923c70 3e58b12f     ..6>q"..p<../.X>
   51b74:	be521ae1 3d078ff7 be90d681 b8aebc16     ..R....=........
   51b84:	bebdb818 3e10f950 bee35713 be8fe8b6     ....P..>.W......
   51b94:	bedf9b95 3e441864 3ec1424d bec41246     ....d.D>MB.>F...
   51ba4:	3e281a31 3d5e994b 3db1de10 3d7b4759     1.(>K.^=...=YG{=
   51bb4:	beb2082c 3e4d0c0f be296c46 3e588cb8     ,.....M>Fl)...X>
   51bc4:	be958f88 3e91d94d becc7e13 3dc90862     ....M..>.~..b..=
   51bd4:	3d8f9c8e 3d5acf21 3e94b74b 3e2137fe     ...=!.Z=K..>.7!>
   51be4:	3d1dd4fd 3e2ad92f bed2383a 3e1cf62b     ...=/.*>:8..+..>
   51bf4:	bea2509d 3e0bbcf9 3dca58bd be835586     .P.....>.X.=.U..
   51c04:	bc65f01f 3dd83b20 3dcc8e74 bdbd5bec     ..e. ;.=t..=.[..
   51c14:	bef00541 be5bf50c bd8b2249 3ebd0c0a     A.....[.I".....>
   51c24:	be379bec be8161ce be8e2130 3dd508d3     ..7..a..0!.....=
   51c34:	3ded6a46 be9bc0ee 3e530e39 3de50934     Fj.=....9.S>4..=
   51c44:	3e852b71 3e910a67 be7c513e be13b345     q+.>g..>>Q|.E...
   51c54:	bf36a689 bc62d9ea bd61a90d 3e709590     ..6...b...a...p>
   51c64:	3daa4318 be3204ac 3d96b907 3db3ba5d     .C.=..2....=]..=
   51c74:	bd31a5ba bdbba2d2 bd05741b 3c4f6187     ..1......t...aO<
   51c84:	bdc5c5d0 bd92c70f 3d359e4a 3e3d5d32     ........J.5=2]=>
   51c94:	bd374fa8 be2f0332 be0c44b7 bdd30299     .O7.2./..D......
   51ca4:	3e67a25d be800683 3d9aa639 bd9fb277     ].g>....9..=w...
   51cb4:	be7bd121 bc0c6675 3ec97faf be93d53a     !.{.uf.....>:...
   51cc4:	3ddb1c6f 3dd8e299 bc6384bf be537cca     o..=...=..c..|S.
   51cd4:	3e02af00 3da4af9c 3da832b8 3e497900     ...>...=.2.=.yI>
   51ce4:	3ded7b95 be98fd59 be0d07f7 3dfa5ace     .{.=Y........Z.=
   51cf4:	3ecff14f 3f2ce6f9 becd285a 3f06ffdf     O..>..,?Z(.....?
   51d04:	3e936fc1 3ef2a61f 3d3efe86 3ebdc51b     .o.>...>..>=...>
   51d14:	bf29be69 3ecbb83e 3ed19942 3e86869e     i.).>..>B..>...>
   51d24:	be7f0920 bd55694b 3d8a804c bd8f8ff2      ...KiU.L..=....
   51d34:	3e998b5a 3dcaceca bee4eeb2 3ea31ea0     Z..>...=.......>
   51d44:	3e5540cd beface6c bea053b7 3e901f70     .@U>l....S..p..>
   51d54:	bdf1e6f5 bd94d691 bd35b030 be864560     ........0.5.`E..
   51d64:	3c155da0 3c5e0de8 bd90174b bd551ea6     .].<..^<K.....U.
   51d74:	3e4092fe 3e0cb81b be102816 be2efc5a     ..@>...>.(..Z...
   51d84:	be0ecac9 be6c41ad 3cfad0e1 3e644f8a     .....Al....<.Od>
   51d94:	3cd5cf95 be02335e 3e00a3ea 3e04feed     ...<^3.....>...>
   51da4:	3e8ab6ff 3dbf9aee bdbf5078 bd772d5e     ...>...=xP..^-w.

00051db4 <cnnx20_b_tensor>:
	...
   51dc8:	00051dcc                                ....

00051dcc <cnnx20_biases>:
   51dcc:	3d8b729b be1f7d50 3d84862c bcddf8af     .r.=P}..,..=....
   51ddc:	bde76cff bd164359 3e36a520 bf2b54d5     .l..YC.. .6>.T+.
   51dec:	ba528fda bf1a0ec5 be62507e bb443c05     ..R.....~Pb..<D.
   51dfc:	be2a0a3f 3eaddb98 3e4c761d bd8a9c1c     ?.*....>.vL>....
   51e0c:	3e82781f bd9904d3 3da67129 be362929     .x.>....)q.=))6.
   51e1c:	3e8b319b 3e2d2ae7 3cf53b71 3d076aa0     .1.>.*->q;.<.j.=

00051e2c <cnnx20_k_tensor>:
	...
   51e40:	00051e44                                D...

00051e44 <cnnx20_weights>:
   51e44:	3e8d4637 bec42a22 bd5e80a1 bf622cb9     7F.>"*....^..,b.
   51e54:	bf36be8b 3e442630 3e34b9a3 be40b9f6     ..6.0&D>..4>..@.
   51e64:	bb848bab bec984f7 3cfaa6fb be478c21     ...........<!.G.
   51e74:	3e78b83c 3c9edd96 bee8bed8 bd9afc19     <.x>...<........
   51e84:	3d401bc1 bf37bc5a bf2f3df4 bea6c6c5     ..@=Z.7..=/.....
   51e94:	be12cb74 be3fec57 beb8ac9f bee1a315     t...W.?.........
   51ea4:	bded5c5b bef1e7b2 be7cf6f0 bea9ca3f     [\........|.?...
   51eb4:	bf325009 beda6965 be704a34 be0b21bb     .P2.ei..4Jp..!..
   51ec4:	bea7b9e3 bd9fa3ae beb00cd5 be503e03     .............>P.
   51ed4:	bec9ab88 be9abbd7 3dfa666f 3df96fe7     ........of.=.o.=
   51ee4:	becf95fd bece4810 3db43a29 bd93ea68     .....H..):.=h...
   51ef4:	bd2c262e bdbae37f bdf3cb5f bc8e5883     .&,....._....X..
   51f04:	3e8bdb5a bee9ce34 be2f1eef be8889c7     Z..>4...../.....
   51f14:	be31369e 3e5f5892 be3a4ee7 ba8e251c     .61..X_>.N:..%..
   51f24:	3e1081ac bf1a217b 3ea1e890 bf0dcf52     ...>{!.....>R...
   51f34:	3e102707 3e3265c3 be9bdbaf bddedcbd     .'.>.e2>........
   51f44:	3d226367 bf1b34bc bf01bab9 bf15f809     gc"=.4..........
   51f54:	3c837662 bd6de546 beac0ef0 beceee14     bv.<F.m.........
   51f64:	3dc8254a be4d3eb8 bdb3e8d6 be08107b     J%.=.>M.....{...
   51f74:	be1f1728 3e3edf9d bd8c6e4c bcb44c4d     (.....>>Ln..ML..
   51f84:	3de3027d bec41226 3d17fddb bde03b66     }..=&......=f;..
   51f94:	be7fae1b 3dcee4e8 bd078548 be2e76ca     .......=H....v..
   51fa4:	3d5b6086 bd6e3db6 be08fed6 3ce73529     .`[=.=n.....)5.<
   51fb4:	3e5a3e45 3d4aef0c bdc55ef3 3e178335     E>Z>..J=.^..5..>
   51fc4:	be80a16e beb927ad 3d90246f 3c8ddcc2     n....'..o$.=...<
   51fd4:	beb41c0b be8d893f 3d5678f3 be25e2ae     ....?....xV=..%.
   51fe4:	be91d4ca be12409b 3cfaee08 bed07b87     .....@.....<.{..
   51ff4:	3e781a7c bd95f7ba be7ee49b 3e6f6d83     |.x>......~..mo>
   52004:	bd3c11fc 3e76ab23 beb07594 bf2bbb1c     ..<.#.v>.u....+.
   52014:	be1dc937 be2a621e 3d6fc8ee bd8dc515     7....b*...o=....
   52024:	bea11585 3d73174c 3ddd9be2 3da8233a     ....L.s=...=:#.=
   52034:	be028e08 3eada7cf be0ed50e 3c98f428     .......>....(..<
   52044:	3e52fe81 be69fc2d 3d14f8c3 3e95077e     ..R>-.i....=~..>
   52054:	be04fbb5 bd60ec9f beac53be be628af2     ......`..S....b.
   52064:	bdabe358 3b91c006 bd210912 bd4b2347     X......;..!.G#K.
   52074:	be7c88e2 bc0c6b5e bce247b3 3e5342e4     ..|.^k...G...BS>
   52084:	beb515d8 bdb39405 3d353b84 3e014f53     .........;5=SO.>
   52094:	be902359 3e64d9ae 3e3b6d93 3e290b05     Y#....d>.m;>..)>
   520a4:	3c62853b 3dd441e6 3ddcb992 be613083     ;.b<.A.=...=.0a.
   520b4:	bc794902 bda19115 be8b16f2 3e715df9     .Iy..........]q>
   520c4:	bea512ce bde63daf 3e1f41ec bdb19bb2     .....=...A.>....
   520d4:	be1f5b34 bd7d4d86 be9df81e bee2f944     4[...M}.....D...
   520e4:	3dce3ca7 bdda43d3 be9a1b87 3ded1a2d     .<.=.C......-..=
   520f4:	be4bf0fd 3d4bed6f 3e622775 bdf21017     ..K.o.K=u'b>....
   52104:	3ea89219 bdb83b7f 3ddc0fba 3e250796     ...>.;.....=..%>
   52114:	bdf38b6d 3e1af0bf 3d84b42e bd209d47     m......>...=G. .
   52124:	3cb13511 bde24c11 be48f784 3d4898f6     .5.<.L....H...H=
   52134:	be4cd63b 3e12e7f6 bf25af0a be6bada6     ;.L....>..%...k.
   52144:	3ed5bb64 3d77b77f bd8cc2ed bdac3ce1     d..>..w=.....<..
   52154:	bde70771 3db7e32d 3dbbe629 3ca590c3     q...-..=)..=...<
   52164:	3e5ba6bb 3ea16216 bda58afb be107f9d     ..[>.b.>........
   52174:	bdab7355 3e0e1585 bc179fa4 be992065     Us.....>....e ..
   52184:	3d9891e3 3e76cfdd bdf1bdc0 3d19d399     ...=..v>.......=
   52194:	3e2f20bb bbf1991f bd60526e 3e025b1c     . />....nR`..[.>
   521a4:	bd8ddacb be90ca2d bcd68588 be8805af     ....-...........
   521b4:	be8a32df 3d5e3489 bea9c153 3e698247     .2...4^=S...G.i>
   521c4:	bd32263b 3eeaeef9 3dceff00 3e035c41     ;&2....>...=A\.>
   521d4:	bdc59965 3d9310a4 bed3b7cf bda03714     e......=.....7..
   521e4:	bde0cdfd be1d52b9 3e06fe24 bdc0d9c1     .....R..$..>....
   521f4:	bee1d820 3e0d2d73 bd1252d9 bf0bc11d      ...s-.>.R......
   52204:	bde8669a be473cbb bed542a0 bc89bced     .f...<G..B......
   52214:	be860c93 bde664e1 be352873 bd852a0d     .....d..s(5..*..
   52224:	be4be3b8 3cb2cec4 3b9ce594 bd7d1346     ..K....<...;F.}.
   52234:	be3aa332 bd1e3ead bd32a92a 3f0fe0e2     2.:..>..*.2....?
   52244:	be45012e beeda359 bf046c74 be028e02     ..E.Y...tl......
   52254:	be07f47b 3dad265f 3cb48caf bdf7ac2f     {..._&.=...</...
   52264:	3e01a651 be535716 be3e8200 3e149da8     Q..>.WS...>....>
   52274:	bf2f5c43 bef527af 3c6a403b 3e760233     C\/..'..;@j<3.v>
   52284:	bdd0819f bdc25b44 bb240fbf be8c444b     ....D[....$.KD..
   52294:	beaf25b2 beb7ef3a bf0b72be bc5c2c1b     .%..:....r...,\.
   522a4:	bed13c06 bda76937 be38312c be6a7f6b     .<..7i..,18.k.j.
   522b4:	be9e73c8 beb7a383 3df40c48 bd01c473     .s......H..=s...
   522c4:	3cd5ac24 be55f55d be80a98f be7eb9e7     $..<].U.......~.
   522d4:	bdf7c494 3e3bfb2e bd3d6a81 3d4b281a     ......;>.j=..(K=
   522e4:	3e9173fe bdedfb69 bf023221 3e458761     .s.>i...!2..a.E>
   522f4:	bebd1f83 be06375a bd6d51ad bdd1099b     ....Z7...Qm.....
   52304:	3c8bdaba bea2d457 3d8aa7a5 be74c994     ...<W......=..t.
   52314:	bea4ef87 3e717c77 bb810d5c 3ed0122d     ....w|q>\...-..>
   52324:	be5ed5b4 bda45bd1 be4c3756 be3c49d6     ..^..[..V7L..I<.
   52334:	be83d529 bf0adab3 bf0bade2 3e015d7a     )...........z].>
   52344:	bf1659c8 be85a1da bdfec507 bebb4c77     .Y..........wL..
   52354:	bec82241 bdb972a1 be117b2d bedff00c     A"...r..-{......
   52364:	bdfcaf48 bd994602 3dc9bc86 3e1d1aa3     H....F.....=...>
   52374:	be11dcba be11acb3 3db5a398 bf12f6d3     ...........=....
   52384:	be1e4b47 bec2e282 3c944715 bdd51136     GK.......G.<6...
   52394:	bcfeef39 bef1b414 3e6878bd bdb29bf5     9........xh>....
   523a4:	bced9d7d be6fa1e5 be49952c 3c8d93e2     }.....o.,.I....<
   523b4:	bf2f096f 3db2dcbb bee11fa9 be12979e     o./....=........
   523c4:	bdd3a5bb 3da9b160 bdc2b8ed bdcdaab0     ....`..=........
   523d4:	3c306f94 3e2cd476 bdb6181c 3ef40e1d     .o0<v.,>.......>
   523e4:	be7f4152 bd04ed3a be9417b6 3e02d7d6     RA..:..........>
   523f4:	3dc25c97 bd323cb1 bdae41b6 be33b11d     .\.=.<2..A....3.
   52404:	3e5aa7dc bd1aa733 3e0a5fa0 3e18c64c     ..Z>3...._.>L..>
   52414:	be5b8825 3d3e3ca9 be1fca29 be0e6d0a     %.[..<>=)....m..
   52424:	be549e82 3c34f845 bc4a22f9 bed3e129     ..T.E.4<."J.)...
   52434:	3e67bfe5 3ea0ca80 3d06ef4d 3d689fdf     ..g>...>M..=..h=
   52444:	bf47e60e 3da87bd5 3e110e0d 3e9f15bf     ..G..{.=...>...>
   52454:	be67f91e bf294227 3c9d64e5 3d406a59     ..g.'B)..d.<Yj@=
   52464:	be490dfa 3cc4a75f 3e3fa7d3 be9902e2     ..I._..<..?>....
   52474:	bf313597 be08a502 3d2d304f bdccd8fc     .51.....O0-=....
   52484:	bf3af6c6 3e821f67 be7907d2 3d232081     ..:.g..>..y.. #=
   52494:	bd9135fe 3e2ad926 bda8f5ee 3d7566a7     .5..&.*>.....fu=
   524a4:	3ec3f811 becee529 bc0567de bda528b2     ...>)....g...(..
   524b4:	be300424 3e3f7389 3e20ca0c bda1f9fe     $.0..s?>.. >....
   524c4:	3e83bcda be5aa8ae be494ff5 be82854a     ...>..Z..OI.J...
   524d4:	3c89c6ae 3d90a62c 3d98c2a0 beb7f204     ...<,..=...=....
   524e4:	3e9b4589 bee7cd27 bed6baeb bd09aec5     .E.>'...........
   524f4:	3d9b1832 be1208a2 3d4ba48e be70d609     2..=......K=..p.
   52504:	bee31d67 bc4905c3 3ca86a4d 3e0d7b12     g.....I.Mj.<.{.>
   52514:	3e10ac67 bd970497 b980029a bf429adf     g..>..........B.
   52524:	3e62e455 bed01f67 be40628b be70697f     U.b>g....b@..ip.
   52534:	bf06a6ad bd7c14dc be5f4b86 3def7b89     ......|..K_..{.=
   52544:	beab0057 bec5cba9 3d37134d bf1919c4     W.......M.7=....
   52554:	bdc5e976 3e320e9c bdd7b8a0 bdf42665     v.....2>....e&..
   52564:	3e412823 bf3a6d51 bdca7219 bea047d6     #(A>Qm:..r...G..
   52574:	be12630e 3d9d9a4a bdf656af 3e242759     .c..J..=.V..Y'$>
   52584:	3cbbab11 beb4f6a8 be8b8bad be5d0d1b     ...<..........].
   52594:	3c1e0a77 be554c4d be2cf62a bec15141     w..<MLU.*.,.AQ..
   525a4:	3cae8fa0 3df17024 3d303d9b becc192e     ...<$p.=.=0=....
   525b4:	3e63d486 be7cce1e 3e156632 bf067e7b     ..c>..|.2f.>{~..
   525c4:	3dab8316 3d7902fc bcb75adb 3de9e3e4     ...=..y=.Z.....=
   525d4:	be86a896 bf06d107 be7652a4 3de54cd3     .........Rv..L.=
   525e4:	beb2582e be28238a be2fee45 be9dd1ac     .X...#(.E./.....
   525f4:	3ec85f6b be1d20b0 bed8025d 3e873238     k_.>. ..]...82.>
   52604:	bd252818 3e22b865 bf0e6b8c bdf8b809     .(%.e.">.k......
   52614:	3cc430a1 be41643d 3c99b680 bb47b78f     .0.<=dA....<..G.
   52624:	bca14280 3d829578 3dd3d454 3ed4ffc9     .B..x..=T..=...>
   52634:	bf0b6cb2 befceae0 bed9d338 3e01ba45     .l......8...E..>
   52644:	bf5df988 be36d8b9 3e032ec3 bd484ec1     ..]...6....>.NH.
   52654:	befb6c29 bf067b08 bebae5ac bd8b0ac3     )l...{..........
   52664:	bdf650a0 bcf06ed3 beaab707 bd7e402d     .P...n......-@~.
   52674:	3e5d331d be1e627a 3daf7e2e bd83f7f8     .3]>zb...~.=....
   52684:	be344d0b be7e4aac be376f9a bba6abfc     .M4..J~..o7.....
   52694:	be738bff bf22b6dc 3e08d1bc bea3feed     ..s..."....>....
   526a4:	3e1d9acb bea31f3d bed157ac be87392d     ...>=....W..-9..
   526b4:	bf6014e2 be987f82 3d50899b bca92cca     ..`.......P=.,..
   526c4:	bf6e75d6 3dbeccbc 3dee7009 3e2dbb65     .un....=.p.=e.->
   526d4:	be6527b7 3d412f2d be9b0e29 bebf91e1     .'e.-/A=).......
   526e4:	bedb34b0 3d0c41ad be7163d3 bd77a22b     .4...A.=.cq.+.w.
   526f4:	3da441f1 bef371f3 be8cea52 be233ede     .A.=.q..R....>#.
   52704:	bf1e91b2 3cf3c25a 3d26099f be6b2e08     ....Z..<..&=..k.
   52714:	be94cba9 be81bbff be14cb0a 3ecf86ad     ...............>
   52724:	bd82c317 3e41b99a be937400 bdc5645c     ......A>.t..\d..
   52734:	bde1b397 3eba9cc4 bd62b750 3d4bcf8c     .......>P.b...K=
	...
   53944:	3cd58ecd bed71978 3c97cd06 be957ccf     ...<x......<.|..
   53954:	be3d5091 bdd653d4 befa47dd 3da66b84     .P=..S...G...k.=
   53964:	bd144f5b bf7c96d8 be54d73a be63708a     [O....|.:.T..pc.
   53974:	bd8830b8 bd515290 be4cde1a be3433d3     .0...RQ...L..34.
   53984:	3d8fc253 be52316b be883266 bf0d012f     S..=k1R.f2../...
   53994:	bddc465f be1675b6 be29a197 bed850f8     _F...u....)..P..
   539a4:	be09811c be9fed58 bddc28da 3d874960     ....X....(..`I.=
   539b4:	be52d906 3b5ce0ec bde5acf4 3c798e8c     ..R...\;......y<
   539c4:	3d83238f bf0503a3 bf28ae0e be21f23c     .#.=......(.<.!.
   539d4:	bdd3688d bebabdaf be65cb67 bd794353     .h......g.e.SCy.
   539e4:	3d06d7ad 3dc918f5 bf0fb6ef 3e67406c     ...=...=....l@g>
   539f4:	3d85b837 bd65e728 becd17f2 be5f021c     7..=(.e......._.
   53a04:	3df518b9 beb9d92b bcda90e5 beb1b6ed     ...=+...........
   53a14:	3e5c0638 3d028cc5 bca67aa9 3dfee9dd     8.\>...=.z.....=
   53a24:	3d97d2a1 bedcf398 bd97d03f bed66d9e     ...=....?....m..
   53a34:	3da5b99e be4715e2 bdb2e47e bd4f9366     ...=..G.~...f.O.
   53a44:	3e29aac2 bde5f78b 3e2c9972 bf4bf257     ..)>....r.,>W.K.
   53a54:	3e0099ea bdb68717 3d9790b8 be0187b4     ...>.......=....
   53a64:	3e0d4dd0 bed856ce be8f55d4 3d9e2b8e     .M.>.V...U...+.=
   53a74:	bd8de235 be2aede4 be818956 bd74f007     5.....*.V.....t.
   53a84:	3dd9f985 beeb7348 bd5cc2b1 bd767b44     ...=Hs....\.D{v.
   53a94:	3df76059 be3a358f 3cf674f7 bca4ffff     Y`.=.5:..t.<....
   53aa4:	bbc26429 3de7193d be59f5a3 be71aeab     )d..=..=..Y...q.
   53ab4:	3e1dbd54 3ba3350e bd2024bb bd309935     T..>.5.;.$ .5.0.
   53ac4:	be412716 bd9bcad6 bed53e16 be391278     .'A......>..x.9.
   53ad4:	bbcab9f8 bdfebc9a 3d5b9a0f bd3a8054     ..........[=T.:.
   53ae4:	be4514d2 be98d670 3d48f53a bdee3719     ..E.p...:.H=.7..
   53af4:	bf15390d 3e601c53 bf40c133 bcee27cb     .9..S.`>3.@..'..
   53b04:	bc97a812 be425482 3cc4687a bdf308f8     .....TB.zh.<....
   53b14:	bec9321e 3e5f08f6 3e3b3fda bea73ad4     .2...._>.?;>.:..
   53b24:	bd9fb326 bd881b1a bec6ba63 bdbb669a     &.......c....f..
   53b34:	3e3840a6 be5e0f8c bdabf96e 3d84474c     .@8>..^.n...LG.=
   53b44:	be9edc78 befb1141 3dcd019d beec81ba     x...A......=....
   53b54:	be2cc7a0 be254af3 bddff67f bb91182b     ..,..J%.....+...
   53b64:	3ba5c231 be485e9b bdd997d3 be574edf     1..;.^H......NW.
   53b74:	bdc96beb be668244 3d053165 be69ca6b     .k..D.f.e1.=k.i.
   53b84:	be209e17 bc3eead7 bdc5b760 bde00901     .. ...>.`.......
   53b94:	bed13ce3 be15e95d 3e651cbb bdc6b807     .<..].....e>....
   53ba4:	3af51ed0 bdc08f77 bdfc0fb9 bc984dc5     ...:w........M..
   53bb4:	3e126f43 be234e97 be977f13 3e03fe9a     Co.>.N#........>
   53bc4:	3d8b11e2 3d07d816 be50e14b bd24deda     ...=...=K.P...$.
   53bd4:	bddb2b2b 3bf4801a bc72eb90 be7f826c     ++.....;..r.l...
   53be4:	3d26fa78 bbb2beda be94c023 3da27261     x.&=....#...ar.=
   53bf4:	3e26ba6e bdc1cf8a bd2fad01 399656ef     n.&>....../..V.9
   53c04:	bcfb2d53 3cd0683d 3e0159be be041926     S-..=h.<.Y.>&...
   53c14:	3d977175 3e508c73 bea79c01 be672e70     uq.=s.P>....p.g.
   53c24:	3d097d90 bd05ec20 3e7f6382 bee37f1b     .}.= ....c.>....
   53c34:	3e0c3fe3 3c5f1c5b bc36fad3 becf809f     .?.>[._<..6.....
   53c44:	3dde2f4c 3d9e6c27 3e9d44b6 3d93d0e9     L/.='l.=.D.>...=
   53c54:	3b5de01b 3ec33b72 3d9d4879 3e525240     ..];r;.>yH.=@RR>
   53c64:	3e17324d 3ee7f564 3e9bd3e5 3ea9ca03     M2.>d..>...>...>
   53c74:	3d602d8d 3e2fc7ed bdbb8a8b be99cfdb     .-`=../>........
   53c84:	3eb4f002 bdbf94cb 3d4e6d79 3ccb326e     ...>....ymN=n2.<
   53c94:	3da1e1cf be363ed9 3da8d8c2 be1b05b1     ...=.>6....=....
   53ca4:	3e29b4a7 be3f32cf bdac60aa 3e938056     ..)>.2?..`..V..>
   53cb4:	bec76856 bce4b71f 3e4b802f 3de6690a     Vh....../.K>.i.=
   53cc4:	3e661355 bdc56ad6 bd823c09 be8f49d8     U.f>.j...<...I..
   53cd4:	bd216d99 3e449512 bea0efad 3c040eee     .m!...D>.......<
   53ce4:	be8a9abc be436e46 be897151 bd8eb35e     ....FnC.Qq..^...
   53cf4:	bd915aaf be26d1dd be97f71b 3d97981f     .Z....&........=
   53d04:	3bdae757 bea6ea91 3d652d11 bd9c2621     W..;.....-e=!&..
   53d14:	3c9f7ae5 be63b128 3ce748ff be4517bc     .z.<(.c..H.<..E.
   53d24:	be27aadf bea5f696 3d49d983 3ce71101     ..'.......I=...<
   53d34:	be339bf4 bdf51bbb bdc23063 3db80bd1     ..3.....c0.....=
   53d44:	bd2314fe be049483 bf0795ef 3e0a1605     ..#............>
   53d54:	3db605b3 3ca67484 bc0a46e1 3e10924a     ...=.t.<.F..J..>
   53d64:	be9f54cf beeb80c6 3cf19b9e bee2ddd4     .T.........<....
   53d74:	bedf4193 be9070de 3bb4bc60 bdf8c488     .A...p..`..;....
   53d84:	be196a13 be8d75e4 be82a871 be8ddf63     .j...u..q...c...
   53d94:	bd95a82f be231e6e bee1ce75 3e2c3d84     /...n.#.u....=,>
   53da4:	bea5e6b6 be8a5331 bb88b607 3d7d81c6     ....1S........}=
   53db4:	bf4b8be5 3b134064 be837249 bda64672     ..K.d@.;Ir..rF..
   53dc4:	3d9cc56e 3df20c3a 3c07d287 3d2e8907     n..=:..=...<...=
   53dd4:	bd6a4af2 bd6a2cd5 3e2262fe bd778c0e     .Jj..,j..b">..w.
   53de4:	3e535f04 3ea3df3d 3c1befcb 3e984aa4     ._S>=..>...<.J.>
   53df4:	be0edbee bc705365 bea08c2d 3dc2b632     ....eSp.-...2..=
   53e04:	3e518557 be4fef56 3e08eca3 be9db073     W.Q>V.O....>s...
   53e14:	bdfc29a4 bd04c47b bd29301a 3d90fae2     .)..{....0)....=
   53e24:	bd17e745 be31f7c1 bdc1d094 beacf01a     E.....1.........
   53e34:	bec4ab8f be9a3695 beb832af bdd029df     .....6...2...)..
   53e44:	bf0ba90d bebafa52 be106eb9 bf0fc8e4     ....R....n......
   53e54:	be89a933 3e26f763 bd7beeec be0db994     3...c.&>..{.....
   53e64:	bee6e3b1 3b5d53d9 3e49912d 3e1a6f5d     .....S];-.I>]o.>
   53e74:	be1befe2 be0e181a 3d612d4f be9e8452     ........O-a=R...
   53e84:	bcb73277 bd7ec017 bdb5dc28 be104b2d     w2....~.(...-K..
   53e94:	3c2691d0 3e5a1d31 3d63553d bdec7790     ..&<1.Z>=Uc=.w..
   53ea4:	3dfb8df8 bea89e30 be26e297 3cb52774     ...=0.....&.t'.<
   53eb4:	bd8b47df 3ce98499 be6c506b be0df1a4     .G.....<kPl.....
   53ec4:	bd8e59b5 bddabd36 be885896 3ea526b4     .Y..6....X...&.>
   53ed4:	bcaffa94 bbfede6d be1cd580 be04dc3d     ....m.......=...
   53ee4:	be875919 3ded8613 be21ae98 bdc901c3     .Y.....=..!.....
   53ef4:	3d8576b7 baa1a8b2 bd03e2d9 bed40642     .v.=........B...
   53f04:	3db098a5 be2fc017 bdf1a762 3e9abed8     ...=../.b......>
   53f14:	be59b0d1 3dfb44dc be539729 ba5fe050     ..Y..D.=).S.P._.
   53f24:	3c66640d bcf5da2d be01155c bed50777     .df<-...\...w...
   53f34:	beda19c8 be3742cd bdac5d86 be6f8edb     .....B7..]....o.
   53f44:	bec42942 bd206512 be1aff93 3d69c038     B)...e .....8.i=
   53f54:	bf679854 be6f5eeb bd702d17 3d54865a     T.g..^o..-p.Z.T=
   53f64:	bdb74132 be08944e bdf413b7 3d942a5f     2A..N......._*.=
   53f74:	bed7debf bd81026d bea4d140 3de14663     ....m...@...cF.=
   53f84:	3d34ac2c 3de52034 be116611 bd9202a9     ,.4=4 .=.f......
   53f94:	3e9b060b be26e37c 3d421313 bdeabd5f     ...>|.&...B=_...
   53fa4:	3e34265e 3c129aed 3f057f47 be9a2747     ^&4>...<G..?G'..
   53fb4:	3d25d587 3eb28509 be2a3d66 be39235e     ..%=...>f=*.^#9.
   53fc4:	3e5a570d 3eba75d3 3e01ab63 bd489f56     .WZ>.u.>c..>V.H.
   53fd4:	bd1eabf5 be0b64a6 be8d85c8 be901ef8     .....d..........
   53fe4:	3e04e547 be902163 be8e3dc7 bf28565a     G..>c!...=..ZV(.
   53ff4:	3d0240a7 bd2c776d bd0091a6 bed90d1d     .@.=mw,.........
   54004:	3d006e93 bce3df53 be7c7357 bc3954eb     .n.=S...Ws|..T9.
   54014:	be8313e0 3d3fc824 be0f045b be04a4b2     ....$.?=[.......
   54024:	be4c607d beb0e53f 3defd505 be465737     }`L.?......=7WF.
   54034:	bcaa62e5 bded7790 3d82f83e be1283fe     .b...w..>..=....
   54044:	bb41069b beb6a756 3dcdb8a7 bee8edfc     ..A.V......=....
   54054:	be21d6f8 3e4c1f35 bcd6232d bf0220ca     ..!.5.L>-#... ..
   54064:	be4c1629 bcf2eba5 3d008fc5 be9b147a     ).L........=z...
   54074:	3e2bb0c3 3e160e4e 3e197b35 be1ab13b     ..+>N..>5{.>;...
   54084:	be86734b be146f9d bc9c1ac3 bcdc77c5     Ks...o.......w..
   54094:	bef01192 bd145418 bd87f329 3dafd4e5     .....T..)......=
   540a4:	be9cd5b4 3e3bcdba be580f66 bed86b3e     ......;>f.X.>k..
   540b4:	bd9c1456 bd80fe4c bd309053 be46052f     V...L...S.0./.F.
   540c4:	be3fa398 bd89256a be5ad26b 3c58a939     ..?.j%..k.Z.9.X<
   540d4:	bea85bf6 bea04f31 bd9a2fe6 3dfd4c06     .[..1O.../...L.=
   540e4:	bebc9810 3d6a07d1 3d4f400c beedb9a6     ......j=.@O=....
   540f4:	3eaaccd1 be1ef25c bdb7dee5 bd801ea9     ...>\...........
   54104:	bd8d9402 3d2fa43d be9ad2ee 3e101c7a     ....=./=....z..>
   54114:	bf0631d5 bc22dd0f be82c983 bdb9d0fa     .1....".........
   54124:	be8b65d4 3d586463 bd6cf57c 3b815428     .e..cdX=|.l.(T.;
   54134:	bdd8622f bea84c7a be20c37f 3d3c3e47     /b..zL.... .G><=
   54144:	be58fed0 be9b63e0 3cbc42dc bed83cfd     ..X..c...B.<.<..
   54154:	3e185df4 bf139a4e bdccb6fd 3e2748d3     .].>N........H'>
   54164:	bee09f7b bd924dfd bec1ff02 be513b32     {....M......2;Q.
   54174:	be9cf079 3d12e51d bde8fda1 bec0ffe2     y......=........
   54184:	bdf5a332 3dab82d6 be2a4013 3d8873aa     2......=.@*..s.=
   54194:	bf73b10a 3e908158 3e1a566d bd0ef35e     ..s.X..>mV.>^...
   541a4:	3d213abe 3dd94322 bf154a26 bdfb8119     .:!="C.=&J......
   541b4:	bd9c0a14 bdb6401b bcbbbbd3 3d65dcbc     .....@........e=
   541c4:	3dc32bd7 be14a96d bd9cd9ea bd11e0e9     .+.=m...........
   541d4:	be96902f 3deb8af1 bed8c641 bb2e7b28     /......=A...({..
   541e4:	bde35db7 bdd1ea3f be4293fb be189df1     .]..?.....B.....
   541f4:	3e59ed74 be3978ef be09c85f bdbc5600     t.Y>.x9._....V..
   54204:	be41d6a9 be56a27d bddb211a 3dc1f9c4     ..A.}.V..!.....=
   54214:	be63a3ae 3dc60d3c bd232e83 bcff625b     ..c.<..=..#.[b..
   54224:	be0f02bf be1a363f be9f51d0 3d9a2713     ....?6...Q...'.=
   54234:	bc90d9c7 bdb8a36d 3d77d5a2 3dd728b8     ....m.....w=.(.=
	...
   55444:	3e1ba2a5 3d9f4e08 be616bfa bda0826d     ...>.N.=.ka.m...
   55454:	3a78c853 be2a3b86 bed3c6ab 3e5b1d3d     S.x:.;*.....=.[>
   55464:	bdf063fb bf5aa4e7 bf0284a7 bedc1b39     .c....Z.....9...
   55474:	bdaadf43 be53565d be8f700a be16daa2     C...]VS..p......
   55484:	be907732 be4c14eb 3dba2919 be4f8fcf     2w....L..).=..O.
   55494:	bf026afc becc713e 3e104b02 bf0039b1     .j..>q...K.>.9..
   554a4:	bf0a4faa bea477d5 becf09ca 3d95ddf0     .O...w.........=
   554b4:	bdd55af6 bdb270c1 beac8525 3ac25525     .Z...p..%...%U.:
   554c4:	3d95481f bf66fca3 3d8f2862 bea16879     .H.=..f.b(.=yh..
   554d4:	bc817c97 bebed99b bee0e0e9 be880bb6     .|..............
   554e4:	be0fa0ac becc04ec beca4706 beb1c1f0     .........G......
   554f4:	bf042cf2 becadcf9 be110559 be05789f     .,......Y....x..
   55504:	3c8b525e 3bfe48db 3d01576e be97166c     ^R.<.H.;nW.=l...
   55514:	3cedc347 bebaabd5 beb6a38b 3e550a1f     G..<..........U>
   55524:	be94a3d3 bf0ec0fe be92176d bd008046     ........m...F...
   55534:	bf16e9ea be7c8285 bee46e70 be1dcade     ......|.pn......
   55544:	bf1ca93e be3f48a0 3e2bed2c bf65d79e     >....H?.,.+>..e.
   55554:	bf0d4877 be75abbb 3d909d2d bf0232e9     wH....u.-..=.2..
   55564:	bc51089c beebf6b8 bd8aee1c 3de8e7af     ..Q............=
   55574:	3d889323 be9062ff bf245588 3db39e3a     #..=.b...U$.:..=
   55584:	be9e21da bf715d72 bdb7a814 bef165df     .!..r]q......e..
   55594:	bb19aae1 be17b0f7 be23a7ea 3e0d6e40     ..........#.@n.>
   555a4:	3c923efd bdd15018 bdd06b79 bf38edd9     .>.<.P..yk....8.
   555b4:	bd141375 be870422 be8dedd8 3d774274     u...".......tBw=
   555c4:	3d19eebc 3de8545e bdfbe488 3d7c5048     ...=^T.=....HP|=
   555d4:	3eefcc48 bed39473 3ea1666f be4796f9     H..>s...of.>..G.
   555e4:	bed0bd35 3edd7080 bdc26326 be13bbda     5....p.>&c......
   555f4:	be8b61fb 3dac858b beff42bc bcf44cc3     .a.....=.B...L..
   55604:	bea4fcb7 3e7bfc27 bc049709 be722048     ....'.{>....H r.
   55614:	beaa1ba4 bd100cde bd462a41 3e6c8565     ........A*F.e.l>
   55624:	3e84db95 bdc312bf 3d3ad26f bed7c702     ...>....o.:=....
   55634:	beac2794 bf22d517 bdf3847e be788d11     .'....".~.....x.
   55644:	bfa16c1c 3dabc57d bdf75568 3dabf016     .l..}..=hU.....=
   55654:	3d4b776a bd5a96a2 be80a595 3e083f28     jwK=..Z.....(?.>
   55664:	bf596301 bd3bfec9 bd69235d bdfea05f     .cY...;.]#i._...
   55674:	3ce2b86c bdd7d80d bdf5dbf9 bed867df     l..<.........g..
   55684:	bf0b2de6 3dd5d0ee bdbc866b 3dcb5b6c     .-.....=k...l[.=
   55694:	3eb9c6b8 3e86c2b0 3e938de6 3e1d377f     ...>...>...>.7.>
   556a4:	beacde0d 3d9dea0a beba4db9 3e170a43     .......=.M..C..>
   556b4:	3e7337f2 be3b9cba 3be2dec7 bd772711     .7s>..;....;.'w.
   556c4:	be94dd3d be6c831d be832f81 bd7a9f0b     =.....l../....z.
   556d4:	bef9585d 3e7bc183 bc83d578 3ea0e419     ]X....{>x......>
   556e4:	3d34194a 3d893af7 3db2bc84 bef9bf03     J.4=.:.=...=....
   556f4:	3e57a203 3e58af0a bcca2ad7 bf256244     ..W>..X>.*..Db%.
   55704:	bf24822a 3f069bc0 be77e79d bdb75478     *.$....?..w.xT..
   55714:	3e03c21c 3d944061 be9a4708 be059b8f     ...>a@.=.G......
   55724:	bf215820 3cd8aa56 be012ce1 bf0e9a4f      X!.V..<.,..O...
   55734:	3d93df9b 3d309081 bd9adde9 be63ccf7     ...=..0=......c.
   55744:	bd1d8b33 bdc719fd 3dccf837 3da8753c     3.......7..=<u.=
   55754:	3e973dfa 3e917513 3dac0597 3eaae3ff     .=.>.u.>...=...>
   55764:	3d5408dc 3eb1e6b9 3ef5ec61 3d33b4f3     ..T=...>a..>..3=
   55774:	3f6c6763 bd9a7901 bd4e9138 3dea066a     cgl?.y..8.N.j..=
   55784:	3ebe25a8 be1ed871 be460ca6 3e16c0a8     .%.>q.....F....>
   55794:	3e036d2b 3e79fc7c bcaf0c9d be9908f9     +m.>|.y>........
   557a4:	3deb4038 be5c1250 be75a32d 3c89a7bf     8@.=P.\.-.u....<
   557b4:	bea2c92c be1c9230 bd63aaf5 3e4ed2c7     ,...0.....c...N>
   557c4:	bea71e5b 3c3b5d64 3d5a376f bdf34507     [...d];<o7Z=.E..
   557d4:	be33e648 be4b20d1 be984a34 be78dcd7     H.3.. K.4J....x.
   557e4:	bef69fda bef56aae be8a5aee bf3f4307     .....j...Z...C?.
   557f4:	bdbeaa6e be40f178 3dc7abf5 be11648a     n...x.@....=.d..
   55804:	bd4a438b bec287c0 3e2dbd6b bee45be5     .CJ.....k.->.[..
   55814:	3d0ca034 be6cf277 bda3f631 bde01c0a     4..=w.l.1.......
   55824:	beaedea7 bed04526 be29412b be92f45b     ....&E..+A).[...
   55834:	beab77c9 bd9ae876 bd0e67dd bdb616e6     .w..v....g......
   55844:	be4d4cc6 bed8fac5 bf1ddfc8 be8200fd     .LM.............
   55854:	be0aaf30 bea59d08 bd4dc77e bda6481e     0.......~.M..H..
   55864:	be8d418c beffbf49 be1cbde8 bd534f0a     .A..I........OS.
   55874:	be625083 bea05cfe be2a22b8 bbf22a6a     .Pb..\..."*.j*..
   55884:	bef2df5a be80e505 be39cf4b 3de4f288     Z.......K.9....=
   55894:	3cbab62f bcb93e7b be68d0f3 be3eca62     /..<{>....h.b.>.
   558a4:	bee94e2a be4581c8 bea407d4 bdf14663     *N....E.....cF..
   558b4:	bf23dddc 3d656578 bcfe63a3 bde37011     ..#.xee=.c...p..
   558c4:	3e7df44a 3d9311bf 3d9e02b8 3dc16230     J.}>...=...=0b.=
   558d4:	3f088fd5 be4afac9 3ea24c5f be60c666     ...?..J._L.>f.`.
   558e4:	bdc9daae 3f485c07 3c80e44c 3ec3c700     .....\H?L..<...>
   558f4:	bec9aee8 3e8487c8 bed5219e 3d489bb8     .......>.!....H=
   55904:	be5a75e9 be3b6958 bec34086 be56b63f     .uZ.Xi;..@..?.V.
   55914:	3decbe27 3d23185b be26bc2c 3e5f4591     '..=[.#=,.&..E_>
   55924:	bd26217d bec855d2 bdb712f5 3de4b6da     }!&..U.........=
   55934:	bf5d3525 3e9fc425 bed83170 bdd9abc6     %5].%..>p1......
   55944:	be14607e bf25dace bc7c55e7 bc1b73af     ~`....%..U|..s..
   55954:	3ce95645 be789d5e 3df83d4f be0aa702     EV.<^.x.O=.=....
   55964:	3d634d5a bea16f37 beba58d2 be4f5441     ZMc=7o...X..ATO.
   55974:	3e782a09 bec6ba3c bed5b999 be6b9c6a     .*x><.......j.k.
   55984:	bdc8be35 3d7d4a26 be6e7553 bdffe197     5...&J}=Sun.....
   55994:	beeddae4 3da6b45b 3d806afa beece166     ....[..=.j.=f...
   559a4:	3c3b1da3 be87810c be250f8f bd94140a     ..;<......%.....
   559b4:	bed7ef37 3d5d4cd2 bf0c7716 bc2880e8     7....L]=.w....(.
   559c4:	3defeeff bd17c51b 3e208efb be812f20     ...=...... > /..
   559d4:	be160f35 bd6dd281 be066c6a beaf0ae4     5.....m.jl......
   559e4:	3c81a359 3dc4ae3b bed544a2 bd2ea66e     Y..<;..=.D..n...
   559f4:	3df4f89f beae0693 bd7be81e be34c103     ...=......{...4.
   55a04:	bee5a015 be160dba bea713db be6a189c     ..............j.
   55a14:	be21f44e 3d9a7814 beb1c60e 3e0f2e46     N.!..x.=....F..>
   55a24:	be8c3a46 bf1dd938 3d919542 be430ad6     F:..8...B..=..C.
   55a34:	3d5f9c63 3d31007b 3e3a8da5 bea55215     c._={.1=..:>.R..
   55a44:	becc0ca1 bd0deaef bce8f30e bef0a287     ................
   55a54:	be5aa016 bd4086de 3dcedd25 bdf39e97     ..Z...@.%..=....
   55a64:	3e3e9f24 be9ac556 beb24680 3b10ab33     $.>>V....F..3..;
   55a74:	3cb53f12 bdb678e2 3cf1abea 3d72a7db     .?.<.x.....<..r=
   55a84:	be1b445b 3de32a91 be1440cd beca4a6d     [D...*.=.@..mJ..
   55a94:	bdbd8ba3 bd2528a4 bf0d06da bdac7c2b     .....(%.....+|..
   55aa4:	3e89555a be8f2850 3e95c3cf 3ddd184c     ZU.>P(.....>L..=
   55ab4:	bd04a69b bdc8dc6f bb2de805 3ed05b8f     ....o.....-..[.>
   55ac4:	bf54ff8b be0b679c bd7e5385 be07d117     ..T..g...S~.....
   55ad4:	3ed8bda3 3c4a8b7f bd874f92 3e08a761     ...>..J<.O..a..>
   55ae4:	bee61309 bc3f8c32 be92be65 3cda7659     ....2.?.e...Yv.<
   55af4:	bce6090e be90be6f bd4bfea4 bef66bc5     ....o.....K..k..
   55b04:	be72d772 3db9bfb1 be2f05b1 bdd892dc     r.r....=../.....
   55b14:	bf062980 bf070540 3d640f5f be11d339     .)..@..._.d=9...
   55b24:	bf84bd3d 3dd8d46e bd94230a be63a785     =...n..=.#....c.
   55b34:	3ddd6885 3e20e770 be5884ea be3ba52c     .h.=p. >..X.,.;.
   55b44:	bf2de041 be747743 3d6d7bc4 be948b41     A.-.Cwt..{m=A...
   55b54:	3e0c5f1c bd9b054f bed3d799 3d3d1d27     ._.>O.......'.==
   55b64:	bda05be0 be3d3a1b 3d1a5e5b bebf96ed     .[...:=.[^.=....
   55b74:	be614384 be9fa91c 3de3c7f7 be500147     .Ca........=G.P.
   55b84:	bea66f0b be604073 be44fe53 3baf3ff4     .o..s@`.S.D..?.;
   55b94:	bf164bd3 3dbf22ff bea30721 bdaabe3a     .K...".=!...:...
   55ba4:	bed4b03d be6b88ee be5a9e22 bf85e417     =.....k.".Z.....
   55bb4:	be7aea9b bed0d532 bdbfea26 beeaa4e5     ..z.2...&.......
   55bc4:	beec5218 bee1b6b4 beb3bae0 3e07c822     .R.........."..>
   55bd4:	bea8623a bd4bfca3 bdc9a19b 3ddd5e29     :b....K.....)^.=
   55be4:	be803331 be15f0a4 be984d28 bd4f04d3     13......(M....O.
   55bf4:	3d3bfa62 bef7de95 bde6a646 3d69d010     b.;=....F.....i=
   55c04:	3cf81596 3d84d860 3e39da2a 3ede0060     ...<`..=*.9>`..>
   55c14:	bd2be14a 3cc889fd bdc10291 bc9a4429     J.+....<....)D..
   55c24:	b9f3de09 3e1e408b bedba70d be753aaf     .....@.>.....:u.
   55c34:	bf17c98a be9ba95e 3d2266c0 3e5e7811     ....^....f"=.x^>
   55c44:	bf01523b be9c1cd7 3e050076 bedbc21f     ;R......v..>....
   55c54:	3e0d1503 be5f8acd be3be579 be4a291f     ...>.._.y.;..)J.
   55c64:	bec0bb30 beaa2d20 bea8304b be7bc276     0... -..K0..v.{.
   55c74:	be944999 be435a6f bee6a360 be27b07a     .I..oZC.`...z.'.
   55c84:	bf347d5a be8387d8 bde95c90 3d7fd2bc     Z}4......\.....=
   55c94:	bbe35f76 3d59bda1 be8950f9 3ad98496     v_....Y=.P.....:
   55ca4:	3d492dd6 bf1399d9 beb64c04 3ec687b0     .-I=.....L.....>
   55cb4:	b88bbbb5 bb6a5447 bee97e26 be9872de     ....GTj.&~...r..
   55cc4:	3daa9f00 bcfe1ccc beb7ea13 bed5ff8e     ...=............
   55cd4:	be64f656 3df21374 bf1502f3 3ded8b6d     V.d.t..=....m..=
   55ce4:	3d9b2bbc bd6a6f02 bc67447d 3d3b9e03     .+.=.oj.}Dg...;=
   55cf4:	be0476fb be8f313f bdcd616e 3e58b7c0     .v..?1..na....X>
   55d04:	3e1336e9 becc1423 bdc77aa0 be8d2080     .6.>#....z... ..
   55d14:	bdc650ae bdea7368 be6d7efd 3b2026fc     .P..hs...~m..& ;
   55d24:	3de643c9 bea190b7 3d496b74 3df3a29e     .C.=....tkI=...=
   55d34:	3de09e5b be7dfdbe be27ac5a bdf255c2     [..=..}.Z.'..U..

00055d44 <cnnx24_b_tensor>:
	...
   55d58:	00055d5c                                \]..

00055d5c <cnnx24_biases>:
   55d5c:	3e2cf489 be2cf487                       ..,>..,.

00055d64 <cnnx24_k_tensor>:
	...
   55d78:	00055d7c                                |]..

00055d7c <cnnx24_weights>:
   55d7c:	bd27bb2d ba3662fe 3d59f9c9 b9181890     -.'..b6...Y=....
   55d8c:	3d745c6e 3bdd62dd 3d0fff7f bd9b19ca     n\t=.b.;...=....
   55d9c:	3d259398 3c4bd2a7 bb8da71d 3d12c6fd     ..%=..K<.......=
   55dac:	bbde273d 3cf39985 bb8ca2e6 3bbe6efc     ='.....<.....n.;
   55dbc:	3c8ad642 bc5eb2b3 3d403834 3cb23c12     B..<..^.48@=.<.<
   55dcc:	3d3c9b82 bc076bf0 3d8a9921 3de6c31d     ..<=.k..!..=...=
   55ddc:	3dcfaa1a bd4e3ead bd86464e bd1814af     ...=.>N.NF......
   55dec:	3d82cc11 3da89b66 3dd1a13a bd922625     ...=f..=:..=%&..
   55dfc:	3d0032bb 3d849559 bc8ada09 3d2fbb34     .2.=Y..=....4./=
   55e0c:	bd11b3ac 3d92a04d bd154c6b bd1e4459     ....M..=kL..YD..
   55e1c:	b967233a bbbcfab2 bc633f1f bd055100     :#g......?c..Q..
   55e2c:	3e0b935f bdf53ab4 3bc9d891 3a36f098     _..>.:.....;..6:
   55e3c:	3c605bc0 3be0011d 3df9b67e 3d290684     .[`<...;~..=..)=
   55e4c:	3d8e4bcc bbc7e8cd bd8d4bed be02fa9d     .K.=.....K......
   55e5c:	bda3e1e1 bd35e507 bcc1c81c bc0b0a6a     ......5.....j...
   55e6c:	bbc255fb 3d1103a3 bd5d419f bca360fe     .U.....=.A]..`..
   55e7c:	3d3e1dd5 bca1222f 3ca9a692 3cd273db     ..>=/".....<.s.<
   55e8c:	3dad7004 3d15c54f bdb63d45 bd6668c5     .p.=O..=E=...hf.
   55e9c:	3d661137 bd7fa298 3a943455 bc653b03     7.f=....U4.:.;e.
   55eac:	3cae7310 3bd63744 3d9b50d8 bd8ac7e2     .s.<D7.;.P.=....
   55ebc:	bcef9b64 3ca50b9d bc0c1c58 3ce03ba5     d......<X....;.<
   55ecc:	3bb44ed2 3d8efe63 3cd06a81 3cda2cb7     .N.;c..=.j.<.,.<
   55edc:	3ccc4812 3cb325d2 3c6c91ae bc33bb84     .H.<.%.<..l<..3.
   55eec:	3e611b78 bdef0709 3a0c43f1 bc5f831d     x.a>.....C.:.._.
   55efc:	bc927797 bcb06c24 3d80bab2 3bdc5124     .w..$l.....=$Q.;
   55f0c:	3de1dd40 3d482f94 bc800422 bda7da87     @..=./H=".......
   55f1c:	bbf5989e 3c6f5a8c bd8e68fd bd4e7b6b     .....Zo<.h..k{N.
   55f2c:	3da529ba 3dc76e3d 3ca84107 bd7f7e6b     .).==n.=.A.<k~..
   55f3c:	bb41640e bba2021e 3d27eb97 3d19866c     .dA.......'=l..=
   55f4c:	3d5e32d9 3d00db3c bd255425 bc0f32e3     .2^=<..=%T%..2..
   55f5c:	bd1e799b be2725c6 bda9829c bda55474     .y...%'.....tT..
   55f6c:	3d097473 3cf1fb7b 3cf8d138 bde00c68     st.={..<8..<h...
   55f7c:	3d0def47 3d524eaf 3bea0603 3ce1c7c6     G..=.NR=...;...<
   55f8c:	3c0e049b 3d34ee5c 3d1a6912 3d07d3ff     ...<\.4=.i.=...=
   55f9c:	bd0aaa46 bd3840f4 3d63801a 3c4a4b73     F....@8...c=sKJ<
   55fac:	3e85ec31 be59edef bd01c54a bd3fa56f     1..>..Y.J...o.?.
   55fbc:	3cebd063 3bb25b72 bc83461b 3d13a6e9     c..<r[.;.F.....=
   55fcc:	bc8f081b bc51f1a5 3b5c9aa0 bd6c5117     ......Q...\;.Ql.
   55fdc:	bbef0d94 3b8b9001 bd421053 3b8314b2     .......;S.B....;
   55fec:	3c614da3 bd0f57e2 bc2d6f8f 3cbd65dc     .Ma<.W...o-..e.<
   55ffc:	3c88f959 3c827911 3d4841f3 3d83c65f     Y..<.y.<.AH=_..=
   5600c:	3c997d34 bc83041c 3d14c623 3da0c4b8     4}.<....#..=...=
   5601c:	3d58d912 bda44232 bce01e03 3ccf3075     ..X=2B......u0.<
   5602c:	3d3044d7 3d4f00b7 3d82abb3 bd7fe6c0     .D0=..O=...=....
   5603c:	bc971276 bd14e705 3cb7ad8c 3ce3e1e7     v..........<...<
   5604c:	bc8e2d75 3c171337 bd3c54f8 bd4b432a     u-..7..<.T<.*CK.
   5605c:	3cc435a4 3cd30c0c bced7ce0 bd9991c0     .5.<...<.|......
   5606c:	3de1a176 be37dbdb 3d2e8c70 3d06b1d8     v..=..7.p..=...=
   5607c:	3d3eeda9 3d54ad36 bc8a3b07 3dad4ecc     ..>=6.T=.;...N.=
   5608c:	baa5c6a4 bae7cb00 3d814fe8 bb1f0696     .........O.=....
   5609c:	bc727f9a 3cb7951d bd281245 3c67c2e8     ..r....<E.(...g<
   560ac:	bc09fb16 bd0509ba 3d8d0956 3cca577d     ........V..=}W.<
   560bc:	bd022836 3ccdb6a2 bc997775 bcd98659     6(.....<uw..Y...
   560cc:	bd2733b6 bdcbbdda bd6f89c3 bc5389eb     .3'.......o...S.
   560dc:	3d69a58e bd9174c7 bdbfd97b bd531dcf     ..i=.t..{.....S.
   560ec:	3bdbfc40 ba0d78a4 3cc3e283 bdfac749     @..;.x.....<I...
   560fc:	3d8ea183 bc1201b5 bd105045 bc99bba8     ...=....EP......
   5610c:	3cc1c120 3d6810b0 3b571b2f 3cf7259c      ..<..h=/.W;.%.<
   5611c:	bc9f051e bca819f0 bd97b153 bde3dfc0     ........S.......
   5612c:	3da2c68f bd1caa7e bd000c90 bd2dfdea     ...=~.........-.
   5613c:	3cbb1139 3ca5cd24 bd3ac220 3d2abdd4     9..<$..< .:...*=
   5614c:	bc96c849 bd1784a9 3bd4ded5 bd660b78     I..........;x.f.
   5615c:	3c826de9 3d63efa9 3c3c20b8 3d32be28     .m.<..c=. <<(.2=
   5616c:	3d79bc39 3c9e6c98 3d3bddd2 3bcd964b     9.y=.l.<..;=K..;
   5617c:	bd825e38 bc368f53 3d5c510f 3d4f6a6c     8^..S.6..Q\=ljO=
   5618c:	bc4d4b22 bd77092e bd902127 bda00156     "KM...w.'!..V...
   5619c:	3e199302 bda2ccb0 bcd6519b 3ce31401     ...>.....Q.....<
   561ac:	bdb6d027 bdd98e1c 3d670c6c bdcd4993     '.......l.g=.I..
   561bc:	bd72814a bd649ba1 3cbdbb17 3d48198c     J.r...d....<..H=
   561cc:	bd985095 bd1102f8 3d41fa9f 3d6680e3     .P........A=..f=
   561dc:	bcb354d1 bd4e5e37 3b4c5dbc bd3ecce5     .T..7^N..]L;..>.
   561ec:	3d84a82e 3d2579d5 bc0ea6cc 39b6477a     ...=.y%=....zG.9
   561fc:	bd0de932 bd84ab5f bd2ac4b7 3cd7d4b3     2..._.....*....<
   5620c:	3dc7369f 3dec523b 3d1591e5 bb6826c5     .6.=;R.=...=.&h.
   5621c:	bc190931 3d114116 bd990b13 bd77cb15     1....A.=......w.
   5622c:	bd62a31b bd20fbfe 3c22fb22 bd4183e1     ..b... ."."<..A.
   5623c:	bd41bdcd 3b864859 3c87f09f 3bf16c7f     ..A.YH.;...<.l.;
   5624c:	3d5b8baf 3d3c69bb bd470c21 bd7d2852     ..[=.i<=!.G.R(}.
   5625c:	3e117b92 bdc07111 bcfa3aa9 b8006dfa     .{.>.q...:...m..
   5626c:	3d9b3912 3d3c3a38 3be6628b be1b8d46     .9.=8:<=.b.;F...
   5627c:	3d4e30b0 3dc33b70 3c76e92b bc3739be     .0N=p;.=+.v<.97.
   5628c:	bd9fcb6e bd30e05a bcba22f7 ba12c0e2     n...Z.0.."......
   5629c:	bb699ab9 bd025316 3d5dc111 bc50a966     ..i..S....]=f.P.
   562ac:	3d4d4c7f 3d9b2a11 3cc63d8c 3c91d6fd     .LM=.*.=.=.<...<
   562bc:	bd393aac bcbb43c9 3b026d02 3d82b144     .:9..C...m.;D..=
   562cc:	bd031053 bcd02c4d bc8b1cbf bd808e62     S...M,......b...
   562dc:	3cbb16ed 3d8f04d0 bced553e bc203413     ...<...=>U...4 .
   562ec:	3d3856cc 3d6def7f 3d7933eb bce81aa6     .V8=..m=.3y=....
   562fc:	bd8dad61 bd112745 bc50472b bc848439     a...E'..+GP.9...
   5630c:	3c5abb37 bd220594 bc810cdb bcf86b0b     7.Z<.."......k..
   5631c:	3d5d3c54 bd605535 bba2f289 3cea05f8     T<]=5U`........<
   5632c:	3d624bed 3cb5f7ff 3d0bb43e bc7d0a42     .Kb=...<>..=B.}.
   5633c:	bafb8eac 3d3f9470 bd2560b8 bd61d700     ....p.?=.`%...a.
   5634c:	3d82fe49 3db4a84d 3cfc86ff 3d3eea51     I..=M..=...<Q.>=
   5635c:	bd8a7023 bddb52d7 3db3669d 3c5e8648     #p...R...f.=H.^<
   5636c:	bd7ad20b bc837a69 3d23f924 3d81d185     ..z.iz..$.#=...=
   5637c:	bd00710f bc907b48 bc160f41 3c83f25e     .q..H{..A...^..<
   5638c:	3c998dc6 3d2b8a82 3cedd4f0 bc961e35     ...<..+=...<5...
   5639c:	bd0c1095 3c4cf45a bbad121c 3c0dfa09     ....Z.L<.......<
   563ac:	3bf045f9 3c673955 bd1515b6 bdd7f637     .E.;U9g<....7...
   563bc:	3c1627d5 3d0a0c8e 3bf1405f bba5aa1e     .'.<...=_@.;....
   563cc:	3d88021e 3d26a2bc bbf00891 bc38bbe9     ...=..&=......8.
   563dc:	3d3e82e0 3c9d0eea 3bc82e58 3be1b653     ..>=...<X..;S..;
   563ec:	3c8d460f 3b27d572 3d047682 b9cf632a     .F.<r.';.v.=*c..
   563fc:	bd0a9ca4 3d0cf618 3c929940 3d00e69a     .......=@..<...=
   5640c:	bd002ffe bc43afa2 bce2572d bcb1638a     ./....C.-W...c..
   5641c:	3d85d42d 3c491959 bbd163cb bdab7fb7     -..=Y.I<.c......
   5642c:	bdccefc2 bc8ceae0 bc891c29 bc9c89ce     ........).......
   5643c:	3ab3d2ab bb8ddf7c 3c166b31 3c9b80b5     ...:|...1k.<...<
   5644c:	bd90189e bd6f7581 bd6d9a9d bde731ee     .....uo...m..1..
   5645c:	bdb46ddd bd666943 3d8ac30f 3da17f94     .m..Cif....=...=
   5646c:	bd95ea02 bd7f5a20 bc8533e7 bc9c1194     .... Z...3......
   5647c:	39a9ab8b 3cac02e8 3aa728a3 3b80eb78     ...9...<.(.:x..;
   5648c:	bbac80d2 bc80dc19 bc5ed1d2 3bb41a4e     ..........^.N..;
   5649c:	bcde2a12 bcf2556d 3cc3c445 3cc0405d     .*..mU..E..<]@.<
   564ac:	bb65dd3f bca10355 bc2aa7ff bd35149d     ?.e.U.....*...5.
   564bc:	bda47f8f 3ca920bb 3b5034e1 3da4893c     ..... .<.4P;<..=
   564cc:	bdb9a2db bd93f7e8 bd14c623 bd138c47     ........#...G...
   564dc:	3d4a162c bc9d8b26 3d6f8d39 bc333b97     ,.J=&...9.o=.;3.
   564ec:	bd1ad983 3d2174d2 3da0ff7a 3d7b43c9     .....t!=z..=.C{=
   564fc:	b99c6526 bc68a424 bd57a7d5 bd1c9392     &e..$.h...W.....
   5650c:	bcd54272 3c2e4aa1 3c72c01c bd180cf2     rB...J.<..r<....
   5651c:	bd2c1b59 baeeadf3 bb8ab86b 3c9180d1     Y.,.....k......<
   5652c:	bd59e165 bd4366f8 bd33aa6c bd3063b3     e.Y..fC.l.3..c0.
   5653c:	3c95cfe0 3d26b07e bc8dadc3 bca3e151     ...<~.&=....Q...
   5654c:	3c49aaef 3c58849c bd62614c bd749563     ..I<..X<Lab.c.t.
   5655c:	bd062101 bc86e29d 3b4cfcc8 3c2defbd     .!........L;..-<
   5656c:	3da2937a 3d3d22be 3ce608ce bbb33993     z..=."==...<.9..
   5657c:	bda7bc9d 3c98d57f bd79fd4c bb6c9c76     .......<L.y.v.l.
   5658c:	bd0d8c5d bbe53249 bd412f9b bd4c0efa     ]...I2.../A...L.
   5659c:	bd706451 bdf3fb84 bbf00b40 bda2120f     Qdp.....@.......
   565ac:	be03c9c6 bd3135fe bd318520 bd2192a5     .....51. .1...!.
   565bc:	bc88be05 bd8b8c4b bd089f2e bcd94c4d     ....K.......ML..
   565cc:	bcd7784c 3c1440df 3d9dd75e 3c8f23c5     Lx...@.<^..=.#.<
   565dc:	bd50d065 bcdf51bf 3cec99a7 3d3c5543     e.P..Q.....<CU<=
   565ec:	3cdaf798 3c905a25 bc45232a 3c6f8391     ...<%Z.<*#E...o<
   565fc:	bd51c87f bcf8b635 3cb420b4 3cf20cf8     ..Q.5.... .<...<
   5660c:	bd761d43 bd7304d8 3b26e938 3c412483     C.v...s.8.&;.$A<
   5661c:	bd2d5ea8 bcc3a55c bd0cd31d bd37db99     .^-.\.........7.
   5662c:	3ce9252d bc8068cb 3c873305 bc4c7aa2     -%.<.h...3.<.zL.
   5663c:	bdb86fac 3c1bd330 bdc6bc69 bd856b06     .o..0..<i....k..
   5664c:	3c92d1cf 3d17794e 3cb0fe8b 3caa1471     ...<Ny.=...<q..<
   5665c:	3dc4be7d 3caa8f3b 3d7b2730 bca809a4     }..=;..<0'{=....
   5666c:	bd9a5c3d bcbbf9a1 bb848779 3c89b886     =\......y......<
   5667c:	3bce0afb bd5dcf74 bd514136 bd2c0b4c     ...;t.].6AQ.L.,.
   5668c:	3d5aed5f 3da4a153 3dc3e7d3 3d3236a4     _.Z=S..=...=.62=
   5669c:	bd12a71c bb9cede2 bc40a6ef 3b05f929     ..........@.)..;
   566ac:	3c51ef81 bc8b7ec9 3d6a32dc 3d388694     ..Q<.~...2j=..8=
   566bc:	bc921379 3b8a1807 bc63d2c3 bcdb40d4     y......;..c..@..
   566cc:	3cf538d2 b94bba53 bd8abec9 bda103f5     .8.<S.K.........
   566dc:	3cf95d2e 3db2ee6e 3d3ebc20 3aea60b1     .].<n..= .>=.`.:
   566ec:	bd8df7c9 bdeaf9cd bcaa6c85 bd5df5e5     .........l....].
   566fc:	bd6272b9 3d8c8521 bc448a3e 3d1f7955     .rb.!..=>.D.Uy.=
   5670c:	bcbc2dc9 3c8720b6 bb3b06d2 bb56df1f     .-... .<..;...V.
   5671c:	3d4f800e bc879e09 3c391387 bd6f6617     ..O=......9<.fo.
   5672c:	3d0ef6be 3dd9fa2b 3c380b8a 3c7c9242     ...=+..=..8<B.|<
   5673c:	3d820f2d bc96d254 3b01ec29 3c82d222     -..=T...)..;"..<
   5674c:	3ab98242 3cea872d bc8ddd83 bd960bda     B..:-..<........
   5675c:	badcf610 3cde3ba0 bc69e08f 3ca269ed     .....;.<..i..i.<
   5676c:	bd3c9b03 bda495cc 3d8a50e8 3d4e5617     ..<......P.=.VN=
   5677c:	bc7794ed 3c92657e 3d8122a0 3d91fd85     ..w.~e.<.".=...=
   5678c:	3c7984f1 bd16fd8d 3d61c6e2 3ce5020d     ..y<......a=...<
   5679c:	bd034d3f 3d32457a bcc80ea2 bd8c3a17     ?M..zE2=.....:..
   567ac:	3c5340da bcaf32ee 3d865f25 3d43093c     .@S<.2..%_.=<.C=
   567bc:	bd3da0ba 3dddc5f1 3d845706 3dcb3359     ..=....=.W.=Y3.=
   567cc:	bceb115b 3cb9d7ad bd36db9c bd3d087c     [......<..6.|.=.
   567dc:	3db9e6be 3cf87577 3b3b7435 bd539a31     ...=wu.<5t;;1.S.
   567ec:	be10064a bd63e0b0 bc4f6746 bcb84a4f     J.....c.FgO.OJ..
   567fc:	bccf1033 bdf69dd0 bc749d0b bbc625bf     3.........t..%..
   5680c:	bdae0f35 bd2c5bb1 3d335205 bc9cfea4     5....[,..R3=....
   5681c:	bcbb8b11 3c0d2fb4 bdb30d1b bd04fda3     ...../.<........
   5682c:	3db97618 3d54694e 3a2a3878 bcfef213     .v.=NiT=x8*:....
   5683c:	bda2bb17 bce30b48 bd92bcbd bd86e20a     ....H...........
   5684c:	bd30f0b9 bdbe555e bd68f278 bd84ae4c     ..0.^U..x.h.L...
   5685c:	bd2de4f5 3cd327a0 bd4d7f95 bda3844d     ..-..'.<..M.M...
   5686c:	3dcb7e07 3d68002f bd4cf973 bd4ccf6c     .~.=/.h=s.L.l.L.
   5687c:	bd348015 3dfbaeff 3b086d77 3bc504ed     ..4....=wm.;...;
   5688c:	bbabde40 3d2496ab bc9eaed2 bcb939d3     @.....$=.....9..
   5689c:	3d5f0df0 bbfb3be1 3b9c3799 bd845b54     .._=.;...7.;T[..
   568ac:	3bc7ab0f 3dc3e418 bc87e2fe bcb8c88e     ...;...=........
   568bc:	3dbd7659 3b83e802 3ccedd28 3cbae5af     Yv.=...;(..<...<
   568cc:	3cd2b809 3d61b120 3dcb0088 3d11e466     ...< .a=...=f..=
   568dc:	3d0b1ead 3d95aaf8 bd3c1a98 3cac05c8     ...=...=..<....<
   568ec:	3d839625 bbff8aa5 bcd9c4dd bd337048     %..=........Hp3.
   568fc:	bd35a030 3c04550f bd4845ca bd1963dc     0.5..U.<.EH..c..
   5690c:	3d503961 bb69c3fe 3db3688d 3d9b0ed5     a9P=..i..h.=...=
   5691c:	bd712809 3bfb81ec 3d10481a 3b505542     .(q....;.H.=BUP;
   5692c:	3d4b9334 bb88429a 3d25aeec 3d3b0567     4.K=.B....%=g.;=
   5693c:	bcc99570 3e075d34 3cc81e87 3d0bcf77     p...4].>...<w..=
   5694c:	bc4db199 3cbdd5a4 3bfe5eeb ba580667     ..M....<.^.;g.X.
   5695c:	bc6c0354 bdaff79d 3c98af94 bd8225bd     T.l........<.%..
   5696c:	bcca0847 3d5ef907 bd0a4078 bd09cfe5     G.....^=x@......
   5697c:	3d836201 bd29d6f4 3ab336a4 ba693e1d     .b.=..)..6.:.>i.
   5698c:	bc849ba1 3c03ad69 3d60a2eb bc921da4     ....i..<..`=....
   5699c:	bd09fff6 3c089129 bd67bfbd 3c0aeb41     ....)..<..g.A..<
   569ac:	3dac4005 bbea4066 3dac3a10 3d4183f1     .@.=f@...:.=..A=
   569bc:	bc4757b8 3d1a82f6 3cd3310a 3ca8f389     .WG....=.1.<...<
   569cc:	3c56a818 3b4e62a4 3d168f89 bb935014     ..V<.bN;...=.P..
   569dc:	bd095782 3ce3187e 3ceca9e2 bbf5c3a7     .W..~..<...<....
   569ec:	3c3c332c bca048b0 3caa92a6 3d3a471e     ,3<<.H.....<.G:=
   569fc:	bd886a0e 3da7e249 bb0e820e bcfd1c4b     .j..I..=....K...
   56a0c:	bd6a78f2 bd1156a7 bd0040a5 bce090b4     .xj..V...@......
   56a1c:	3b1cafa4 bd8f7679 3d458cb5 bd3a9a55     ...;yv....E=U.:.
   56a2c:	bccb50f7 3d0d4791 bcb7fe94 bd2ce24c     .P...G.=....L.,.
   56a3c:	bc875c96 be0f31b1 bd4ee6e0 bd08d064     .\...1....N.d...
   56a4c:	3d9efbeb 3dc71cbd 3db7311a 3d1419ad     ...=...=.1.=...=
   56a5c:	bd60d807 3aaaf308 bd707332 3ce27058     ..`....:2sp.Xp.<
   56a6c:	3d88ff49 bd098a02 3b625a28 bd8599c7     I..=....(Zb;....
   56a7c:	bceec169 3c59df5a 3d72d232 3d62a777     i...Z.Y<2.r=w.b=
   56a8c:	bd369b90 bd734d2f 3d159032 3c3129e4     ..6./Ms.2..=.)1<
   56a9c:	3c7b3c77 3d6edcf8 bc51b199 bd3e7005     w<{<..n=..Q..p>.
   56aac:	3c064e2e bd1656ac bd7e956a bc9a33d8     .N.<.V..j.~..3..
   56abc:	bd50879d 3dcd920c 3dbe8053 3d6e93b7     ..P....=S..=..n=
   56acc:	3cc45c46 3d37c6b3 bd888f44 bd9de2a1     F\.<..7=D.......
   56adc:	3d6472a9 bd071ec8 3d8dcd33 bd2ea85c     .rd=....3..=\...
   56aec:	3b98b4ad 3cf8730e 3c314b67 bd1dc103     ...;.s.<gK1<....
   56afc:	3d429d54 bd62e2d6 bcd5a219 bccac4c0     T.B=..b.........
   56b0c:	3c923ab0 3cfb53c9 3c1760af bc468307     .:.<.S.<.`.<..F.
   56b1c:	3cfa82a8 3db1a57e bd97f619 3b940586     ...<~..=.......;
   56b2c:	3da48d8b bcefd052 3d05c2f3 bd1e4703     ...=R......=.G..
   56b3c:	bdc3d44b bd4a0582 3cc71e27 3cea2ccf     K.....J.'..<.,.<
   56b4c:	3cfc2e7a 3c887225 3cc201bd ba525420     z..<%r.<...< TR.
   56b5c:	bc86f50c 3d23445b bc80dcbf bd448ede     ....[D#=......D.
   56b6c:	3d07f4b1 bc5cb421 bb0bebb1 3cc09cf3     ...=!.\........<
   56b7c:	bd607246 3dcf9f75 bcf6f7b9 bd925fff     Fr`.u..=....._..
   56b8c:	ba7244ac 3c67ab55 3d7b1760 3d3a7168     .Dr.U.g<`.{=hq:=
   56b9c:	3d49d046 bd560f13 3d4e4324 bd7e2753     F.I=..V.$CN=S'~.
   56bac:	3c82b5a2 3d3b5fad 3d1d080b bacef820     ...<._;=...= ...
   56bbc:	bc8014f3 bdf3cd9c 3c9712b6 3cbf74a5     ...........<.t.<
   56bcc:	3c866af3 3d2dc58b bc6de66d bc97acf0     .j.<..-=m.m.....
   56bdc:	bd4399fb 3c70a9b6 bd55d399 3d0b3b4a     ..C...p<..U.J;.=
   56bec:	3d5dd995 bd69a6a0 3daa2606 3cbdc848     ..]=..i..&.=H..<
   56bfc:	3d2dedcc 3dca6d6c bd26ee71 bcfa8b06     ..-=lm.=q.&.....
   56c0c:	bbddd65f bcd9e2ca 3d94f2ca 3d4841ce     _..........=.AH=
   56c1c:	bd8d650e bc794068 3d41ddf4 3c1bc477     .e..h@y...A=w..<
   56c2c:	3d20a765 bcd87882 3d00159f 3d153efc     e. =.x.....=.>.=
   56c3c:	bdff0ec2 3cf50d1d 3d83c7aa 3ca4eea2     .......<...=...<
   56c4c:	3cdbb878 3d572883 3b8d48e9 bc72b64b     x..<.(W=.H.;K.r.
   56c5c:	3dcaf6b8 3a9ce701 3d07466b bda3886f     ...=...:kF.=o...
   56c6c:	bd43ed0a 3caedc7c bd206759 bda9e02f     ..C.|..<Yg ./...
   56c7c:	3d0119b9 bdb7ba05 3d2f3b41 3d9c62dd     ...=....A;/=.b.=
   56c8c:	bd8c8db6 bd0e870f 3d52817f 3d3ad294     ..........R=..:=
   56c9c:	3c82f6f0 3db60f56 bd9b3f7b 3ca62b4d     ...<V..={?..M+.<
   56cac:	3cb411b0 bd9c3ed3 bca71c29 bd713a5d     ...<.>..)...]:q.
   56cbc:	bd7aeb7c bb2cb601 bc9286c0 3bc2b0bf     |.z...,........;
   56ccc:	bcc1a8ed bd04608a 3d61b557 3c99a9f0     .....`..W.a=...<
   56cdc:	bcefad72 3c5a3a89 3c81eaf7 baec9514     r....:Z<...<....
   56cec:	3d943957 bb882a31 3ce22ba4 3d1931e5     W9.=1*...+.<.1.=
   56cfc:	bd27b581 3df070ff 3d53449b 3b27e790     ..'..p.=.DS=..';
   56d0c:	3c0b69e1 3c439def 3bf57852 bb0074da     .i.<..C<Rx.;.t..
   56d1c:	3d10955c bd9aa10a 3c94bf3f bdde18ed     \..=....?..<....
   56d2c:	3d09e7b0 3df0cc12 3d667265 3b001a6d     ...=...=erf=m..;
   56d3c:	3d2ba111 bd83b178 bce0ae3b 3d2d80bc     ..+=x...;.....-=
   56d4c:	3d732571 3d9f9a8e 3bc7e59d 3c87c77f     q%s=...=...;...<
   56d5c:	bce1b851 3d2a9479 bcd8568e 3d9684be     Q...y.*=.V.....=
   56d6c:	3d4eeb70 bd1a8011 3c1c8eb7 bc801ec4     p.N=.......<....
   56d7c:	bd9d15dd bb762866 3cef72f5 3d2830fc     ....f(v..r.<.0(=
   56d8c:	bcf1a8b4 bd0be808 3da3858e 3cc19912     ...........=...<
   56d9c:	bda9a761 bd47ce96 3bace40f bc5eedf7     a.....G....;..^.
   56dac:	3d954706 bcb731c5 bd06f3a2 bd6fbce4     .G.=.1........o.
   56dbc:	bd6112bd 3dd0d31c 3de83a89 3d6055db     ..a....=.:.=.U`=
   56dcc:	3da538b7 3d6888c8 bcd93a03 bd349627     .8.=..h=.:..'.4.
   56ddc:	3dd6b7bc b9f3c9e7 3e009d07 3c1e2113     ...=.......>.!.<
   56dec:	bdcdf996 bc82e29e bbf45d8a bd90b1c3     .........]......
   56dfc:	bd34cea1 bdecab81 bd872bf9 3cbbf204     ..4......+.....<
   56e0c:	3cba09cc bc0801cc bcc8c3be bc62e761     ...<........a.b.
   56e1c:	bd54a492 3c9e7a2e bd15841e 3d8621b1     ..T..z.<.....!.=
   56e2c:	3ceb43d1 bd84a11c 3b8d4c6f bd4e93a4     .C.<....oL.;..N.
   56e3c:	bdaa81bf bc7acf8a bcf4db8f bc9a97c1     ......z.........
   56e4c:	3d654170 3d2fe7d7 bc4b1e21 bd96426f     pAe=../=!.K.oB..
   56e5c:	bc20927c 3be68773 3c19897e bc5335c8     |. .s..;~..<.5S.
   56e6c:	3daa01d0 3a9c5409 bd0f3b0c bd402e7c     ...=.T.:.;..|.@.
   56e7c:	bd87f1f8 3dbcb189 3e0c138e 3db4b4d4     .......=...>...=
   56e8c:	3bbe2351 3b75efdc 3d87de91 3d80b456     Q#.;..u;...=V..=
   56e9c:	3d3d3e27 bd3fea56 3d5d849b bd4fc951     '>==V.?...]=Q.O.
   56eac:	3bf61114 3d86e057 bc575bd2 bd69a858     ...;W..=.[W.X.i.
   56ebc:	bd4fac58 bdee390b bd899d7d 3c5b62e8     X.O..9..}....b[<
   56ecc:	3da471df 3d62ca68 3b154b81 3cb9b218     .q.=h.b=.K.;...<
   56edc:	bd3530f2 3d258b7a 3c0ad2cd 3ddbf77c     .05.z.%=...<|..=
   56eec:	3cc4116d bdc9826a 3d717444 bc348a76     m..<j...Dtq=v.4.
   56efc:	bcc3d03f 3d18a502 bc42dc7e 3bd0bc30     ?......=~.B.0..;
   56f0c:	bd6b25c1 bd5df632 3c33c3b2 bd02f7cc     .%k.2.]...3<....
   56f1c:	bc15a711 bb934329 3d50d33c 3c60eb5d     ....)C..<.P=].`<
   56f2c:	3d7d092b bc3db17c bc1bdcf6 bc90b758     +.}=|.=.....X...
   56f3c:	bd8dbebd 3de43be0 3de163d8 3d6abf67     .....;.=.c.=g.j=
   56f4c:	bca19ed6 bcb4c91b 3a280ccf bc2673e8     ..........(:.s&.
   56f5c:	3dac532e 388205ff bd2d0158 be0b8e2e     .S.=...8X.-.....
   56f6c:	bd14ade2 3d05032f 3d71f393 3bf3d072     ..../..=..q=r..;
   56f7c:	3dbe4ce9 3d0a74f1 bdafaccc bcc9bf51     .L.=.t.=....Q...
   56f8c:	bc1906d7 bd12add2 bd2bb80f bcaf4bd8     ..........+..K..
   56f9c:	bc873dc7 3d987f57 bd3e7190 3d3e18c5     .=..W..=.q>...>=
   56fac:	3d286a47 bdf12eac 3d97ceb5 bb76fc4b     Gj(=.......=K.v.
   56fbc:	bcfda2ce 3d6c4d1b 3d28895c 3d58fef7     .....Ml=\.(=..X=
   56fcc:	bd579893 bd7be0a4 bd347caa bdc332c1     ..W...{..|4..2..
   56fdc:	bdcf48d8 bdb744ac 3d151200 3c053ba9     .H...D.....=.;.<
   56fec:	3b78df24 bdc4c8de 3c746684 3c34fa89     $.x;.....ft<..4<
   56ffc:	bdef8570 3d850a18 3a913f02 bd2ab0e6     p......=.?.:..*.
   5700c:	3c0e0155 bd03f73b 3b103699 bcee1acb     U..<;....6.;....
   5701c:	3cc8c6a3 bd691a9e 3d7c2d70 bb0867ee     ...<..i.p-|=.g..
   5702c:	3caa2caf 3d836edd 3dc6e590 3d6f389a     .,.<.n.=...=.8o=
   5703c:	3c513ee2 bd304fb6 bd5dd92c bbd07274     .>Q<.O0.,.].tr..
   5704c:	bc8e1d95 bd081070 3c757aa1 3c371ced     ....p....zu<..7<
   5705c:	bd90fb07 3c8eb149 bdd91d43 3b536ccf     ....I..<C....lS;
   5706c:	3d600ab2 bdb169ab 3d8d79f8 3bcc466a     ..`=.i...y.=jF.;
   5707c:	bd2fffa7 3d36b465 3a28b698 3c890959     ../.e.6=..(:Y..<
   5708c:	bbe5062a baaeb306 bb8360b3 bd51a3b7     *........`....Q.
   5709c:	bc53a4ad bbb03999 3d1c0689 bd93b68a     ..S..9.....=....
   570ac:	bd040706 be0147cd 3c790667 3baa873d     .....G..g.y<=..;
   570bc:	bd7b42e4 3e0fbc05 bd18118f bd9bc3a6     .B{....>........
   570cc:	3cdae06c bda2e6b8 bcf1970c bd8e811d     l..<............
   570dc:	bc96baa7 bdb5cf70 bb3e035b bd42aac0     ....p...[.>...B.
   570ec:	3c829f6d 3c9c0443 3c52c346 bd243465     m..<C..<F.R<e4$.
   570fc:	3ccf560f bccbb708 bd994576 3cffebf4     .V.<....vE.....<
   5710c:	3e006d08 3d5e34cc bca10bbe bd0f5cb5     .m.>.4^=.....\..
   5711c:	bcaaa144 3d96df87 bd8b26b2 3ca01af3     D......=.&.....<
   5712c:	3da74239 bd2938d9 bbbba218 bd9b9149     9B.=.8).....I...
   5713c:	bd2d3146 3d49f490 3a313cf9 3c361bd1     F1-...I=.<1:..6<
   5714c:	bc0b4c64 3c5b17a9 3db010b4 bc485976     dL....[<...=vYH.
   5715c:	bd503cc1 bd1185a1 3dc55dfa be2aa39f     .<P......].=..*.
   5716c:	3d092a69 bd94fadf 3c6b09cf bb2151f5     i*.=......k<.Q!.
   5717c:	be108290 3dbd411e bcf8c5b4 bda88f44     .....A.=....D...
   5718c:	3db1d6cd bd2382ea 3d7d15b0 bd08f8f8     ...=..#...}=....
   5719c:	3b390d52 bdb547ad 3c3d8485 bd29ebda     R.9;.G....=<..).
   571ac:	3cd46228 bca5f4f2 3c9d67fb bd1a4520     (b.<.....g.< E..
   571bc:	3cc90207 bd5130b7 bdd5921b 3c989121     ...<.0Q.....!..<
   571cc:	3e05e1ca bd68a596 bd04f91c bd300e91     ...>..h.......0.
   571dc:	bd4f1666 3d88ee30 bd587351 3c8a3045     f.O.0..=QsX.E0.<
   571ec:	3d6b1882 bd2d61d8 bb30ed73 bd9234f1     ..k=.a-.s.0..4..
   571fc:	3b2c66a6 3e06fdde 3b9c21ca 3caa8687     .f,;...>.!.;...<
   5720c:	bc844046 3b8f82ea 3d1fd624 bdd3029d     F@.....;$..=....
   5721c:	3d06c7e6 3ce40d46 3e3cf7c7 be075a49     ...=F..<..<>IZ..
   5722c:	3d67f26d bd60c598 3c7c772a 3acf32d9     m.g=..`.*w|<.2.:
   5723c:	bdf28a0e 3e0e144e 3d259380 3bdc6a7a     ....N..>..%=zj.;
   5724c:	3d9d2a20 bd3fe25b 3c426062 bda488fa      *.=[.?.b`B<....
   5725c:	3cdd9166 bd5d12ce 3d9a34e2 3ce7d541     f..<..]..4.=A..<
   5726c:	3d2a20d3 bb8911e2 bd63be81 bdb534a0     . *=......c..4..
   5727c:	3da1ba8f bce1fc54 3c883cdb 3ceeea19     ...=T....<.<...<
   5728c:	3e102797 bdd858fb 3d4d0efa 3d0c7c2a     .'.>.X....M=*|.=
   5729c:	bc433d97 bd184432 bd3cb502 3bda180f     .=C.2D....<....;
   572ac:	3d59c7e2 bd785b1e 3c3dc8f9 bd45d26d     ..Y=.[x...=<m.E.
   572bc:	bcf639f3 3db8afac bdb89bb9 bd9f5adc     .9.....=.....Z..
   572cc:	3d3feaec 3dbf6e5e 3d3916ad bdb41e05     ..?=^n.=..9=....
   572dc:	3a946451 bcbb30de 3da8efc8 be68c638     Qd.:.0.....=8.h.
   572ec:	3db2b57c bd330ed9 3d3ebc2b bca3ef0d     |..=..3.+.>=....
   572fc:	bd7153d5 3dc729f2 bd555de6 bda049c8     .Sq..).=.]U..I..
   5730c:	3d9d4333 bdb2e58a 3c16ccd6 bda730a5     3C.=.......<.0..
   5731c:	bb00efaa bdd031cc bc429a4f bd90b9ad     .....1..O.B.....
   5732c:	3deafcaa bd8b6c6e 3db1f727 3d2aed5c     ...=nl..'..=\.*=

0005733c <cnnx2_b_tensor>:
	...
   57350:	00057354                                Ts..

00057354 <cnnx2_biases>:
   57354:	3e356ab2 bcd7cf6a bd4b3739 3eb090c5     .j5>j...97K....>
   57364:	bea0cbbb bf0ba12c bdc1c817 bdc6f959     ....,.......Y...
   57374:	bf058942 beed6f45 be1aed14 3ce15bc0     B...Eo.......[.<
   57384:	3f0b0d28 3e9e641d be26f1cf 3e8960de     (..?.d.>..&..`.>
   57394:	3e4ba744 be914cdd 3e3ba107 beaa48ef     D.K>.L....;>.H..
   573a4:	bdc60cc7 3eb1d8bf be057eee bdde3a47     .......>.~..G:..

000573b4 <cnnx2_k_tensor>:
	...
   573c8:	000573cc                                .s..

000573cc <cnnx2_weights>:
   573cc:	bebc1e30 3e6d123c be53bb94 3e365609     0...<.m>..S..V6>
   573dc:	bcb2d81a bde62b2f 3e31fb10 3e2b86ac     ..../+....1>..+>
   573ec:	3eb8cf05 bd060fcf bef0d46b bea27042     ...>....k...Bp..
   573fc:	be5f2ede bd42635d bdc1b262 be92725d     .._.]cB.b...]r..
   5740c:	3ded5bf4 be0d5c58 3d815b88 3d37dea9     .[.=X\...[.=..7=
   5741c:	3ed35a78 3e42b4f4 3e5c2026 3e1ed948     xZ.>..B>& \>H..>
   5742c:	be918df0 bd8bf433 3e8c84d6 3dd25c18     ....3......>.\.=
   5743c:	3e3ad67c 3e1b1705 be4f1fad bda9d0e6     |.:>...>..O.....
   5744c:	be8fdf05 bdb022d5 bec494f3 3c82c73a     ....."......:..<
   5745c:	3d931b0c 3d8c9698 3e78173d 3e293255     ...=...==.x>U2)>
   5746c:	be8afff0 badd5ec0 be27221c bdfac631     .....^..."'.1...
   5747c:	be5c6bd7 3d7f4ee0 be428127 be72ddce     .k\..N.='.B...r.
   5748c:	3d8025ae 3e7bc17d bede9b10 be002338     .%.=}.{>....8#..
   5749c:	bcd6bdb7 be8aa590 3d94328d 3dfa01bf     .........2.=...=
   574ac:	beb024f3 be9f6a37 be4d7424 3de640f7     .$..7j..$tM..@.=
   574bc:	be595be9 bd120dbc be025fff bec4fea5     .[Y......_......
   574cc:	3d3f41b7 3c9b7841 bd7e6594 3c3d1306     .A?=Ax.<.e~...=<
   574dc:	3d097fbe bc6bab3f be40a44a 3e226e8a     ...=?.k.J.@..n">
   574ec:	be2cbcf1 3e6780bf be581e65 3d165341     ..,...g>e.X.AS.=
   574fc:	be12b4ce 3e849854 bcc932b9 3e1d2472     ....T..>.2..r$.>
   5750c:	bd8b011b be99efba be652752 3dd93a72     ........R'e.r:.=
   5751c:	3e8aed0a be9bc9e8 3dff41d3 bdb9c768     ...>.....A.=h...
   5752c:	3e958681 bd64ec00 be980ce1 be825bcf     ...>..d......[..
   5753c:	3cdb176e bdc1c920 bc01db2c 3ec7520d     n..< ...,....R.>
   5754c:	bebd7823 bdc7cd93 be2da254 bccdf03e     #x......T.-.>...
   5755c:	be8201da 3e57d27c bd33570d bb3e51e0     ....|.W>.W3..Q>.
   5756c:	bdaf8c18 bc26c359 be808803 bd60094a     ....Y.&.....J.`.
   5757c:	be826f06 3e2ec22c 3eb766b4 bcf3e7d4     .o..,..>.f.>....
   5758c:	bde5b511 3d035a70 be42b48d 3cee3fae     ....pZ.=..B..?.<
   5759c:	be250ee1 3d721fcd 3c9bc263 bea225fc     ..%...r=c..<.%..
   575ac:	3e0dec6b 3d7bb6f3 be4b37b3 3e4bef18     k..>..{=.7K...K>
   575bc:	3d5b1568 be17c45d 3e81e2d3 bd5cbbd3     h.[=]......>..\.
   575cc:	3dd81a2f bed12cb9 be03a821 be56ca69     /..=.,..!...i.V.
   575dc:	bc014321 3d63322c bbbd160b bea69e9d     !C..,2c=........
   575ec:	be02e191 bd65ac1c 3d3c4962 be077162     ......e.bI<=bq..
   575fc:	3de9b4ab 3d440d46 beabc73f 3dc034c2     ...=F.D=?....4.=
   5760c:	bdf2310a 3e7a756c 3d3041af 3d67d27a     .1..luz>.A0=z.g=
   5761c:	bdeec36b 3d1fb821 bd970194 3e8de23c     k...!..=....<..>
   5762c:	3c1e849b 3e3afae2 be0bc7f9 bed03803     ...<..:>.....8..
   5763c:	bd82a9c5 be2d2543 3e0e897d 3dc47c87     ....C%-.}..>.|.=
   5764c:	be99d46d 3e25e2d2 3e69fbfe bc826acf     m.....%>..i>.j..
   5765c:	3d9d3a7e bd1e848d bcb230df bd4b6417     ~:.=.....0...dK.
   5766c:	bd8197e1 be815af3 bdf29b66 3d1c5599     .....Z..f....U.=
   5767c:	bed0e039 3dd66664 be56d07a 3e26e12f     9...df.=z.V./.&>
   5768c:	be469abe 3e4a0e46 3c9ad71c 3e52fa50     ..F.F.J>...<P.R>
   5769c:	bcc0d578 3da3ebb9 be64a60a bd00db78     x......=..d.x...
   576ac:	be08eb25 bdc885d0 be070807 bebc0e05     %...............
   576bc:	bcee4548 3db48b49 bde3a83e 3e9dc42a     HE..I..=>...*..>
   576cc:	be077898 bddd5ca3 bd946997 be0a13be     .x...\...i......
   576dc:	3e80792b 3e86e0d8 be03fd89 3e7cbe45     +y.>...>....E.|>
   576ec:	3c0dbd38 be6d897e 3e80a305 3d4f6f5c     8..<~.m....>\oO=
   576fc:	be58fdce 3db74b9e bdc3149d be7ad2d7     ..X..K.=......z.
   5770c:	bd95056f 3e80496d 3e0d2773 bc79c0f7     o...mI.>s'.>..y.
   5771c:	3e09a84e beefb219 3e2ffa87 3d195676     N..>....../>vV.=
   5772c:	3dac3dd0 3e98e9dc 3d22c1f4 be17dde4     .=.=...>.."=....
   5773c:	3eac1287 be0b0617 3d3a6d1e 3dfa6e8a     ...>.....m:=.n.=
   5774c:	3e871386 be255968 3bc8aaff 3e70858c     ...>hY%....;..p>
   5775c:	3e67eebb bed59995 bead405a be4afc2e     ..g>....Z@....J.
   5776c:	be42d7ba bd9e5bfb bec1b83c bcc8874e     ..B..[..<...N...
   5777c:	be09982c be12de95 3d6ca26b 3ea67a1d     ,.......k.l=.z.>
   5778c:	3e612e0d 3e62e5d9 be7bea4a 3d6a3a43     ..a>..b>J.{.C:j=
   5779c:	3e827340 3e4dcc8b bdce8aa8 3d3879a9     @s.>..M>.....y8=
   577ac:	3e1911a3 3e2c5235 bdc7ca49 3e0f3107     ...>5R,>I....1.>
   577bc:	3e68163c be5f8079 be7e7bc0 be40591c     <.h>y._..{~..Y@.
   577cc:	3e69bd59 bdc0c08d 3e8ff1d5 bdc802fa     Y.i>.......>....
   577dc:	bebc050f bc8fa900 bdbae4c2 be905a87     .............Z..
   577ec:	3d0fb331 3e6c6cfa be5a3080 bebf1c9e     1..=.ll>.0Z.....
   577fc:	3e8395cf 3dc23187 3e6fc565 bdb4bdfd     ...>.1.=e.o>....
   5780c:	3d9d7635 3e4cee9e be6333ac 3daf8ff6     5v.=..L>.3c....=
   5781c:	3d8b2ce2 be35599d 3e65b0d0 bd7d898b     .,.=.Y5...e>..}.
   5782c:	be001db3 be6f11d5 be5091cc 3e635bd1     ......o...P..[c>
   5783c:	bda94de5 3eb80130 bd4f8f65 beddac43     .M..0..>e.O.C...
   5784c:	be9366a2 3e21d2f9 bd2b0d7d 3c2c1d80     .f....!>}.+...,<
   5785c:	bddc2b13 3e0e6e76 bd9f1508 bdaab492     .+..vn.>........
   5786c:	bdc3a989 bcd003ce 3da18dc0 3cf1929f     ...........=...<
   5787c:	be8a98c4 bdae80e0 bd69c83b 3c033f65     ........;.i.e?.<
   5788c:	bdb8eecf 3d8b9e78 be39005a bd99801d     ....x..=Z.9.....
   5789c:	3caecc56 3e45d38b be0cbed6 3e6fdd0f     V..<..E>......o>
   578ac:	3cba2a79 bdd9d89f 3df6622a 3d020972     y*.<....*b.=r..=
   578bc:	3d35463e 3d2501d2 be4b618b be65acc0     >F5=..%=.aK...e.
   578cc:	bcdc5a59 bdfc48e1 3e7017cf bd22b303     YZ...H....p>..".
   578dc:	bde413f0 3d80a9a3 bdca78f2 3e110338     .......=.x..8..>
   578ec:	be3385d6 3db75d10 beb64f9b 3e0c0802     ..3..].=.O.....>
   578fc:	bdca6ecb bdf64875 be11cf71 bd96e575     .n..uH..q...u...
   5790c:	be62cbec 3e98806b 3e2a522a be720fae     ..b.k..>*R*>..r.
   5791c:	3e1241b0 3d8f39d6 be91797a 3d30662a     .A.>.9.=zy..*f0=
   5792c:	bd86cc91 3e9bf9d1 3d71dbfe be361f12     .......>..q=..6.
   5793c:	3ce21427 bdc5067b be12c605 bdc485d8     '..<{...........
   5794c:	3cb11daa bd22bd57 bf06a245 3d8a88bd     ...<W.".E......=
   5795c:	3e7b037e 3c316adc 3ca2ca90 3d2be764     ~.{>.j1<...<d.+=
   5796c:	3e1a171f bd8678cc be1d2044 bc9dfa6c     ...>.x..D ..l...
   5797c:	bec25ea8 be3f96f4 3d93a36d bdcc25f5     .^....?.m..=.%..
   5798c:	3e11c8f3 3e009def bdc64d70 bed89e24     ...>...>pM..$...
   5799c:	bcc35fe1 3e579880 bc496b64 be0bb048     ._....W>dkI.H...
   579ac:	3db0b4ff 3ec2c81e 3dba7caf be938a3b     ...=...>.|.=;...
   579bc:	bdf48ef4 bedb3a12 be228532 be6c1df1     .....:..2."...l.
   579cc:	be08d50c 3e0a6a38 3cea2ea8 3e1b417c     ....8j.>...<|A.>
   579dc:	bdba17e3 3da48a67 3e7c82ac 3d9c472d     ....g..=..|>-G.=
   579ec:	bd73c453 3ddb9ce7 3eb70202 bd8b996a     S.s....=...>j...
   579fc:	be6c79b0 3e9b9319 3e28d8a4 3d3ebd93     .yl....>..(>..>=
   57a0c:	be48bb4c 3dfda250 3e1c31d0 be0a766b     L.H.P..=.1.>kv..
   57a1c:	3e29694d bde493b9 beb576aa 3cd2cf4b     Mi)>.....v..K..<
   57a2c:	be683e5b be01044b 3d2eba76 3ea0121b     [>h.K...v..=...>
   57a3c:	bc3fc218 3e342e8f be4d7191 bda6f541     ..?...4>.qM.A...
   57a4c:	be14d647 be638ea9 bc35fee0 be818fe7     G.....c...5.....
   57a5c:	3e51da71 bdc99868 bd27008d 3eb3338d     q.Q>h.....'..3.>
   57a6c:	be7fdf16 3e3051d1 bd5a8814 beb2b92e     .....Q0>..Z.....
   57a7c:	3d96b613 beaa37e6 be2cd940 3e284247     ...=.7..@.,.GB(>
   57a8c:	bd986184 3c7236bf bd0fea03 3d5b49c0     .a...6r<.....I[=
   57a9c:	3e9f8978 bebcfe0f bea72b11 be3942ce     x..>.....+...B9.
   57aac:	bee93e59 3dfdc7f6 be2416cc be7b5a8f     Y>.....=..$..Z{.
   57abc:	be989807 bd190ae6 bca94b12 be3295e3     .........K....2.
   57acc:	bcaf1857 3e58b4f6 3e4d1c79 3d2e4f1b     W.....X>y.M>.O.=
   57adc:	3d84ec08 3c865193 be8778ed bebd537f     ...=.Q.<.x...S..
   57aec:	bdac1af7 3d45db4c bb780d42 be2ea64c     ....L.E=B.x.L...
   57afc:	b9bc7df5 3d25e9ef 3d9c1b67 3c58ca92     .}....%=g..=..X<
   57b0c:	bca017bd bd23730f 3e2eda50 bd08b328     .....s#.P..>(...
   57b1c:	bd071f69 3dda35d4 3e586e99 3e6d8fea     i....5.=.nX>..m>
   57b2c:	3ea4260b bcacb169 bea2e28c 3d8dbcfe     .&.>i..........=
   57b3c:	3e002c7e becc7c82 bdbd9d03 be7238fd     ~,.>.|.......8r.
   57b4c:	be3b59d5 3e256531 3ea43f03 3e25ccc8     .Y;.1e%>.?.>..%>
   57b5c:	3df1f2f6 bd0fbb87 bdd380c7 bdf21b34     ...=........4...
   57b6c:	bd85e7f2 3e551582 3e9b2ce0 be5157a2     ......U>.,.>.WQ.
   57b7c:	3c85f8f8 3e013734 3ec2c4e7 bdd63682     ...<47.>...>.6..
   57b8c:	be51f646 bd57ff0a bda46506 bedc58bf     F.Q...W..e...X..
   57b9c:	bcf6af2f bd87cfdc 3dffdd1a be61849a     /..........=..a.
   57bac:	3dfe8181 3c261a26 bd0b8ac6 bda675ff     ...=&.&<.....u..
   57bbc:	3e29caef be351445 bcfa1e84 bde7f9ad     ..)>E.5.........
   57bcc:	bd5306eb bed25f14 becfdb9f bd4a7e08     ..S.._.......~J.
   57bdc:	3c61ef3e 3e47887c be83f800 3d85d6b3     >.a<|.G>.......=
   57bec:	3d8121d0 bdc3c09c bd7f7731 be0ad071     .!.=....1w..q...
   57bfc:	bdfc9d30 bcd76fa9 3e3b9073 be77fcd5     0....o..s.;>..w.
   57c0c:	be08675d 3e7ec17a 3df75896 3e897460     ]g..z.~>.X.=`t.>
   57c1c:	3da5f32d be189077 3e4a04da 3e68c044     -..=w.....J>D.h>
   57c2c:	3b0c3be3 3e191541 3db46c65 be0365c3     .;.;A..>el.=.e..
   57c3c:	bc143806 bd9e9cf6 be1772c1 bb3d4f56     .8.......r..VO=.
   57c4c:	be8e1b36 3e4d1839 3e37b1f8 bcab8565     6...9.M>..7>e...
   57c5c:	be4aa5d2 be25198e bf05f7ea 3ddfd02d     ..J...%.....-..=
   57c6c:	3ea4e0c7 be3207b2 3d2a6a44 bd4f09b9     ...>..2.Dj*=..O.
   57c7c:	bd17bffd be3a3f0e be373f6f bdfa78f4     .....?:.o?7..x..
   57c8c:	be56e146 bdc2e340 3eaab661 3da0a927     F.V.@...a..>'..=
   57c9c:	bca65620 bc7746f4 3d6e2a02 be8240ae      V...Fw..*n=.@..
   57cac:	3e9ee06e 3c12416b 3d971855 bdab26f4     n..>kA.<U..=.&..
   57cbc:	ba8d1450 be98c3ed bd85a667 3e66971d     P.......g.....f>
   57ccc:	be739e41 3e60972b 3d2ad3c1 bc569ce5     A.s.+.`>..*=..V.
   57cdc:	3e606a03 3d239093 3b8c9235 3db694a8     .j`>..#=5..;...=
   57cec:	3daf6c66 be24e8c1 3e8ae2bf bb67e75a     fl.=..$....>Z.g.
   57cfc:	bdfa207c be9c1a59 bedec44d bc7481bd     | ..Y...M.....t.
   57d0c:	3c83d1f7 3d08110e be4d47fe bce7c942     ...<...=.GM.B...
   57d1c:	be10d537 becb1cca 3e650bbf 391401aa     7.........e>...9
   57d2c:	be2151e8 be5f0fc4 bd9effe3 bec14bd3     .Q!..._......K..
   57d3c:	be936e0b 3e7dd255 3d2b7d4c 3ebde80d     .n..U.}>L}+=...>
   57d4c:	3d5283ec bd08a535 3e2cc770 bdffeda0     ..R=5...p.,>....
   57d5c:	3daec0e0 3e1f78c5 3e35e69e bdb7be36     ...=.x.>..5>6...
   57d6c:	3de1d9f2 3e2a10f8 bb91ba52 3dfef7f8     ...=..*>R......=
   57d7c:	3e063f80 be60ceab be8dd4b8 be6844d1     .?.>..`......Dh.
   57d8c:	3dbc97d9 bdde367b be313ade bec250d3     ...={6...:1..P..
   57d9c:	3e951425 3e36cd47 bd80a83e be0a85aa     %..>G.6>>.......
   57dac:	be82cd0e bcb79ecd 3e52b5f7 3d147e77     ..........R>w~.=
   57dbc:	3e013960 3e3a63f4 bdcb929d be516859     `9.>.c:>....YhQ.
   57dcc:	3d57d94b be63677b bab40b0a 3e2f03da     K.W={gc......./>
   57ddc:	be0cd812 bd342ca5 bd2ac695 be8a34d3     .....,4...*..4..
   57dec:	3df3c370 bea135d1 be6da7eb be959f66     p..=.5....m.f...
   57dfc:	be490c0b 3e999da3 3ed73d35 becb533e     ..I....>5=.>>S..
   57e0c:	3e35b99c 3e4c5f27 3dff41e1 3db810d0     ..5>'_L>.A.=...=
   57e1c:	3d5da9a4 be084e3f 3c88cf87 be0222d1     ..]=?N.....<."..
   57e2c:	bec2cebb 3d4d206f be507c16 3dc4bd2a     ....o M=.|P.*..=
   57e3c:	bebe7daf 3dc8cebe 3d8dfdb7 bdc4fca8     .}.....=...=....
   57e4c:	3e3ddf47 be874a22 bec2a9b3 bb19745b     G.=>"J......[t..
   57e5c:	3d8f34ac bd122d31 3c648362 be8bc7b1     .4.=1-..b.d<....
   57e6c:	3dd06e06 3df057b8 3d0a600e 3dc7ae00     .n.=.W.=.`.=...=
   57e7c:	3cd5ede8 3c846748 be5aeff7 bdf8e3bc     ...<Hg.<..Z.....
   57e8c:	3ec786aa 3ec6aee9 bccc12fe be2dc8ee     ...>...>......-.
   57e9c:	be2d4609 be178822 3bdc93d5 3ea9cbd1     .F-."......;...>
   57eac:	be2fae3b bea4770d be10e5f8 be4badc1     ;./..w........K.
   57ebc:	bd8bf941 3cd43c0d bdba69c2 3d8aed4c     A....<.<.i..L..=
   57ecc:	be3d256a 3dd69403 3e944469 3da77082     j%=....=iD.>.p.=
   57edc:	3e8b0efb 3e68220a 3e451934 3e467a23     ...>."h>4.E>#zF>
   57eec:	bdfc1d60 be1ee243 bec8bb11 bcc475a6     `...C........u..
   57efc:	bd49ca8c be113507 3e83ef5d be4870d9     ..I..5..]..>.pH.
   57f0c:	bda3044d bdd2b821 be007219 be5deacc     M...!....r....].
   57f1c:	3ea30066 3d9e36b1 bc3b5c57 3d8610d1     f..>.6.=W\;....=
   57f2c:	3e4bbcca 3eaeb0a8 3e890435 3e2a2d54     ..K>...>5..>T-*>
   57f3c:	3d05dc5b be35cbf1 3cf26868 bec33c2e     [..=..5.hh.<.<..
   57f4c:	bcd8f4de 3ddee1fc bd969a70 3d6ba9f5     .......=p.....k=
   57f5c:	3dc7ec1a beada147 be86c978 bd11234e     ...=G...x...N#..
   57f6c:	bc18c990 be7d0a25 bb905187 3c685da2     ....%.}..Q...]h<
   57f7c:	3d80f858 bea1df36 bec89cec 3e56c32b     X..=6.......+.V>
   57f8c:	3e1ca960 b914cdad 3bc279a2 beaeb107     `..>.....y.;....
   57f9c:	3c1df2a4 beb27c08 be374ae4 bdc0b3e3     ...<.|...J7.....
   57fac:	bd261a69 3dd7cb2f be121086 3d3324cb     i.&./..=.....$3=
   57fbc:	be04d0b6 be122027 bbe4eb3c be795df7     ....' ..<....]y.
   57fcc:	bb297f96 be886020 3e98d2fa 3e0105c7     ..). `.....>...>
   57fdc:	3defc6a2 3e6208ad bdd95e63 be516ec7     ...=..b>c^...nQ.
   57fec:	be4138f1 bca8f034 3ed323d3 be105fb7     .8A.4....#.>._..
   57ffc:	bdc05aec 3ed3ac82 3ea12a5b 3e490fba     .Z.....>[*.>..I>
   5800c:	3c505de6 3edb1c09 3e446952 bda7a3b0     .]P<...>RiD>....
   5801c:	bcc74468 be9f2341 be157258 bdc40e53     hD..A#..Xr..S...
   5802c:	bdb5963d bb8d1c48 3e816ea9 3da5daf5     =...H....n.>...=
   5803c:	3daf6947 bda4fb40 3e2af90a 3d3fd491     Gi.=@.....*>..?=
   5804c:	bd83e5e5 be7d62c7 bcaa4ddc 3ded6d7c     .....b}..M..|m.=
   5805c:	3e1b5e29 bd41bab0 be979e12 be854e4c     )^.>..A.....LN..
   5806c:	be219813 bdaead10 beadbbeb beaba4e6     ..!.............
   5807c:	3df6dd31 be1c6f35 bbbf6a0e 3eb4eda3     1..=5o...j.....>
   5808c:	bd741010 3e0c788a 3e555645 3d116441     ..t..x.>EVU>Ad.=
   5809c:	be124d52 be89f985 bdbe0010 bdb934d1     RM...........4..
   580ac:	3c4d1ae6 3c1877c6 3d560103 bebe9604     ..M<.w.<..V=....
   580bc:	be23ae90 be2c3610 3e1a4324 3e16a000     ..#..6,.$C.>...>
   580cc:	bdfe3fc3 3e349121 bce332a0 3e02d6d8     .?..!.4>.2.....>
   580dc:	bd384a04 be4fe30e be5f4ea9 bd957772     .J8...O..N_.rw..
   580ec:	3dd07cd1 3ca96a6d 3e265e18 be3e3ee2     .|.=mj.<.^&>.>>.
   580fc:	bea5e074 3d430d10 be16265a bb09f2b3     t.....C=Z&......
   5810c:	3dc43d8c 3e87fb67 bd06f708 3d87ea66     .=.=g..>....f..=
   5811c:	3e363155 3d83a1b0 3e47a0ab 3c61f060     U16>...=..G>`.a<
   5812c:	bd0b079e bb89626a beb326f5 3e7eb8dc     ....jb...&....~>
   5813c:	ba267a28 bbe62233 bdd3ca17 be6ce8bc     (z&.3"........l.
   5814c:	3ca18165 3e6f1a25 3de41604 3e652c68     e..<%.o>...=h,e>
   5815c:	be551371 bd0dd81a 3e9a61fa be525d0a     q.U......a.>.]R.
   5816c:	3b71b768 3b05dfd3 bea081c7 bd0427f3     h.q;...;.....'..
   5817c:	3e0c04ff be60f106 be220061 3e1bb641     ...>..`.a.".A..>
   5818c:	be823de4 3e040246 bde1451e 3e2397a8     .=..F..>.E....#>
   5819c:	3d8e89be be50e3c1 3e9ab061 3e2d2a85     ...=..P.a..>.*->
   581ac:	3e529d9b 3dcd7c3a 3bdeb07a bd9b2b1e     ..R>:|.=z..;.+..
   581bc:	be576419 be28d83c be2ad33e be5694e9     .dW.<.(.>.*...V.
   581cc:	3e64c45b be8d45fa be3bd570 3db4affc     [.d>.E..p.;....=
   581dc:	3da3a8d3 bc8cd835 be0bf767 be1ebc5a     ...=5...g...Z...
   581ec:	3cf14ac6 bb88aca2 bd8f9901 3e3bf6b4     .J.<..........;>
   581fc:	bdf92ac8 be3701dc be2dd5a8 be0cfa1f     .*....7...-.....
   5820c:	bd753a1f bbe19fad 3d29ecd9 3e1ebd86     .:u.......)=...>
   5821c:	3e88a1f6 3d6c56f3 be2dc16c bd5c6db2     ...>.Vl=l.-..m\.
   5822c:	bddb5a2a 3ea659b9 3e64a7cb bdc68705     *Z...Y.>..d>....
   5823c:	bd8f9d7c 3e121d61 3df4ebbd 3d907c13     |...a..>...=.|.=
   5824c:	3d0f0524 3dcfdbaf 3dc7a0c6 3e84307c     $..=...=...=|0.>
   5825c:	3d8ffdd7 3db378c1 3e11f722 bd1ce803     ...=.x.="..>....
   5826c:	3ea8a1f6 3d0248b2 be60b31d bca43f35     ...>.H.=..`.5?..
   5827c:	bde90d8f 3ea5f96b be7d92b3 bdc663a0     ....k..>..}..c..
   5828c:	bdb91eb4 bea23756 3de30146 bd2f0c2a     ....V7..F..=*./.
   5829c:	bd93f1f4 3d37b1d0 bdc9d2e5 bd541adf     ......7=......T.
   582ac:	3ec1b983 bc6787c4 3db4d1e5 3e57eaba     ...>..g....=..W>
   582bc:	bda006e8 be5e0d4f bd354c60 bd844685     ....O.^.`L5..F..
   582cc:	bdc8c2d6 3e9a6bc0 3dd0976b be278a2f     .....k.>k..=/.'.
   582dc:	3d60a9c1 3b9e13e7 bd562584 3d2664b6     ..`=...;.%V..d&=
   582ec:	3d83df1b 3e2c1e34 be402cab 3e6bf226     ...=4.,>.,@.&.k>
   582fc:	3da85462 be1caf7e 3dd2914e be55f29b     bT.=~...N..=..U.
   5830c:	bdeccde4 3cabdb00 bdff7fd6 3cee6ce0     .......<.....l.<
   5831c:	3d0fc740 be48009d 3e272347 3d7f7bd1     @..=..H.G#'>.{.=
   5832c:	bdc092d9 3c6560a2 3e5c49f1 bda5a9bd     .....`e<.I\>....
   5833c:	3e306706 3d86a701 bc2e7284 be6597e3     .g0>...=.r....e.
   5834c:	3e09e8e5 3e9f7f8f 3b59e539 3e007758     ...>...>9.Y;Xw.>
   5835c:	be48b639 bdb0d68a bdd14aab bdb52581     9.H......J...%..
   5836c:	3e630dca 3db00847 3e33d68d bc7c7f57     ..c>G..=..3>W.|.
   5837c:	be46e817 be8d2fe1 beac8156 bed23a7a     ..F../..V...z:..
   5838c:	bdbf714d bdedcc7d be76a403 be9454ca     Mq..}.....v..T..
   5839c:	be1a78ec bd0e0d97 be18173f bee5ad3b     .x......?...;...
   583ac:	3d933636 bec1906d be0bf1bb bdc4e07f     66.=m...........
   583bc:	be8383e6 bd3364e4 3e835e33 3e0d1860     .....d3.3^.>`..>
   583cc:	bb9f678f 3ca8c922 be8d8054 3d60d944     .g.."..<T...D.`=
   583dc:	beaef762 bca87077 3dbca157 3e4c8ed6     b...wp..W..=..L>
   583ec:	3e3d9bb0 be14af96 3d9dcd77 bd124532     ..=>....w..=2E..
   583fc:	bd6b7da2 3d9d6750 3dabbbfb 3bfa4ffd     .}k.Pg.=...=.O.;
   5840c:	3d83b976 3dfab16c 3e2284f7 3e0a3104     v..=l..=..">.1.>
   5841c:	3cb606e8 be95e053 be1eb075 3d356b04     ...<S...u....k5=
   5842c:	bde8d909 3e295817 bd985f26 3e260e63     .....X)>&_..c.&>
   5843c:	bdfdaf58 bd1d2b6c 3ebe70e1 3e415e80     X...l+...p.>.^A>
   5844c:	3ea9ae54 be8be983 3d7d3d02 be9081ed     T..>.....=}=....
   5845c:	3d0aef4a 3e035392 3d76bd6c bd208e7b     J..=.S.>l.v={. .
   5846c:	3d9ee938 3c796506 3d9c3b49 3e878ece     8..=.ey<I;.=...>
   5847c:	3e438626 be8e5d34 bdf02847 3e43ca09     &.C>4]..G(....C>
   5848c:	3e9e36e9 bdfd976f beb9c865 bced8ad3     .6.>o...e.......
   5849c:	3c0cdbfc bdc80ec0 3e79da85 bf1b6a47     ...<......y>Gj..
   584ac:	3cba0bd0 3dfef11c bc21d3d0 be3069f0     ...<...=..!..i0.
   584bc:	3e7995b3 3e516e29 3e252502 3da2f138     ..y>)nQ>.%%>8..=
   584cc:	3e16698a 3db5d051 beb458e4 3e877a5f     .i.>Q..=.X.._z.>
   584dc:	3e9975d3 be5ca681 be92e790 be8add1c     .u.>..\.........
   584ec:	be9ad848 beb9a94c bec1b6b8 bc14aed9     H...L...........
   584fc:	bd9e9ddb beaca1c4 3e31f803 3d046dd3     ..........1>.m.=
   5850c:	bdb0b625 be942db8 3e395767 be83b55f     %....-..gW9>_...
   5851c:	3e2b4693 3e52af91 3dabb076 be6181a4     .F+>..R>v..=..a.
   5852c:	3d20c0f8 3de99d20 3ca77b34 bd5bb7af     .. = ..=4{.<..[.
   5853c:	3cf8f311 be2b76ee 3ddfa779 be9e5025     ...<.v+.y..=%P..
   5854c:	bd7ca49c 3c9a33de 3dfca45f 3e45605e     ..|..3.<_..=^`E>
   5855c:	bcc6c36e be700362 3e73a290 bee5cfaf     n...b.p...s>....
   5856c:	be048959 be5bac49 bda0446a 3d1ee1c8     Y...I.[.jD.....=
   5857c:	bec3e3e6 bda2548a be361f3d 3e1736ac     .....T..=.6..6.>
   5858c:	3cc3ced2 bec7cadc 3dded23e 3e91e1ff     ...<....>..=...>
   5859c:	bd87711a becba9ed 3d8ed35c be9cdf62     .q......\..=b...
   585ac:	be336d8d be139065 bd269512 bde34eb0     .m3.e.....&..N..
   585bc:	bea5de44 3e81e0eb bd3c7241 3dfa3d03     D......>Ar<..=.=

000585cc <cnnx4_b_tensor>:
	...
   585e0:	000585e4                                ....

000585e4 <cnnx4_biases>:
   585e4:	bdd822aa bded9d01 beb23b3b be1e9749     ."......;;..I...
   585f4:	bdc379c0 bea12317 be2c0353 be86f1e6     .y...#..S.,.....
   58604:	be76821c bdade248 3d5733e6 be68fc3a     ..v.H....3W=:.h.
   58614:	be782ae0 bdf7ccd8 bc649b40 bda700da     .*x.....@.d.....
   58624:	beb81329 3d8d32f2 3c599c29 bf189ad8     )....2.=).Y<....
   58634:	3edc4d67 bcc83a2b beb8e4b2 bea12880     gM.>+:.......(..

00058644 <cnnx4_k_tensor>:
	...
   58658:	0005865c                                \...

0005865c <cnnx4_weights>:
   5865c:	bd23789b be8e29e3 bdff6988 bdc0ae49     .x#..)...i..I...
   5866c:	3e71a519 3e1d77fc 3e0f7fa4 bf103ff7     ..q>.w.>...>.?..
   5867c:	be56d3de bea07ad1 be4f4fa2 bd844be2     ..V..z...OO..K..
   5868c:	3eb4fa7d 3d32d2b0 3e750b92 bd7b85f0     }..>..2=..u>..{.
   5869c:	bed749f7 beb95ff0 bec1c947 bc88681e     .I..._..G....h..
   586ac:	bd574ebe bef8d3e2 3e86193d 3d4874b9     .NW.....=..>.tH=
   586bc:	3dbdfaec 3b8c51f3 3e4c4bd4 3ee751ee     ...=.Q.;.KL>.Q.>
   586cc:	bde6610c 3b829632 3d1b3b27 bde6f08f     .a..2..;';.=....
   586dc:	be023e1f 3e1cd7c6 3dbaa2f9 be131a0d     .>.....>...=....
   586ec:	be1fddf6 3e0eb4a6 be260e23 be4d0f98     .......>#.&...M.
   586fc:	3d4ab294 3d302d1f 3d8ff8bc be60e677     ..J=.-0=...=w.`.
   5870c:	be07f9f7 3e72b822 bd17361d bde36cad     ....".r>.6...l..
   5871c:	bc8e66d0 be3e2d4a 3d549bee be981a25     .f..J->...T=%...
   5872c:	3d4e41f2 be05e476 befac014 bdc3ca14     .AN=v...........
   5873c:	be063a1c 3ce2d7f1 3e7cd9bf bc855e6e     .:.....<..|>n^..
   5874c:	3e4c428c 3a936750 be5edbfd bc628f8c     .BL>Pg.:..^...b.
   5875c:	3e30417e 3b560e95 3e87a171 3d2af336     ~A0>..V;q..>6.*=
   5876c:	3cf38a6c 3d61fa76 3c2384ea 3e1654a3     l..<v.a=..#<.T.>
   5877c:	bda240d1 bde645af 3daecdfe be53933c     .@...E.....=<.S.
   5878c:	be479639 3ec56982 3c52c3c7 3e4d3181     9.G..i.>..R<.1M>
   5879c:	be360963 bde23680 3d24e3f0 bd326a10     c.6..6....$=.j2.
   587ac:	3de34cca bec47850 be890032 bd680df1     .L.=Px..2.....h.
   587bc:	3d25f42e 3d294863 3dfada09 be0d2d3c     ..%=cH)=...=<-..
   587cc:	3eedfaa9 3ea7e854 3e9ddcf1 3dec3146     ...>T..>...>F1.=
   587dc:	3e89120e 3c279a18 be44ee34 beef482d     ...>..'<4.D.-H..
   587ec:	bd3f7373 3cc715a9 bc4455c5 bd242ef1     ss?....<.UD...$.
   587fc:	3e711db0 be4d9c5e 3e6aef6a bd994c92     ..q>^.M.j.j>.L..
   5880c:	be7182c1 be89ff3f 3e09767e be07fc5a     ..q.?...~v.>Z...
   5881c:	bdffb1fc 3e1d819c be4528f9 3d93d3b9     .......>.(E....=
   5882c:	bd78b685 3c84e54d 3df78451 3d897074     ..x.M..<Q..=tp.=
   5883c:	3d458e75 3e5d5195 3eacdf13 bcc2f8c9     u.E=.Q]>...>....
   5884c:	be232241 3e08ebe0 be28e23f 3e1309ee     A"#....>?.(....>
   5885c:	3ebb62d7 3d98c1c2 3e5dfb97 bdb7fa17     .b.>...=..]>....
   5886c:	be83f92e bd1e0b08 bea57fdb be8e5cd0     .............\..
   5887c:	bda78b3e 3d23d08f 3da659f7 3e6b560f     >.....#=.Y.=.Vk>
   5888c:	bdbd57c1 3e180955 bd949486 bcc21c9b     .W..U..>........
   5889c:	3a13dabe 3ea57f3a 3ece4167 bd396bea     ...::..>gA.>.k9.
   588ac:	be634fb0 3e71e87d be4cbe19 bd58bd7e     .Oc.}.q>..L.~.X.
   588bc:	bcf8417a be66a662 3e6f5d01 bd38a3de     zA..b.f..]o>..8.
   588cc:	be4b4fbd bcc61e4d be321caa be0a2b19     .OK.M.....2..+..
   588dc:	bd2f6d8c 3ee683b7 3dabf8f3 3e566de6     .m/....>...=.mV>
   588ec:	3e3bb315 bede7ab3 3e8a5d31 3eab3d00     ..;>.z..1].>.=.>
   588fc:	be16f07d be8795d0 bc310c9d bdefb842     }.........1.B...
   5890c:	bd538a03 3e22a4c9 be3322de 3e105c8b     ..S...">."3..\.>
   5891c:	beb827e2 3d743a52 be0241d8 3d3884ea     .'..R:t=.A....8=
   5892c:	3e7200b3 be4eb744 3e8c3a95 3e0f2ba6     ..r>D.N..:.>.+.>
   5893c:	bd8a3bfc 3dac894a beb2ea37 3d5f229d     .;..J..=7...."_=
   5894c:	be525ccb bc9ac97a bdebe573 beb3ce9e     .\R.z...s.......
   5895c:	bdd8941b be76c8b1 be23d8aa 3dc7755e     ......v...#.^u.=
   5896c:	bb709c8b 3e59100d bd3e6cd8 be30d23e     ..p...Y>.l>.>.0.
   5897c:	beae67e4 be97d649 beb22f7f be6cae45     .g..I..../..E.l.
   5898c:	3dc50409 bce37bc6 3e8221ae 3dd471d3     ...=.{...!.>.q.=
   5899c:	3d8f660c 3e9764b5 bdd740dc 3f0a4beb     .f.=.d.>.@...K.?
   589ac:	be61e739 bc66a378 3c162eb6 bb0b898c     9.a.x.f....<....
   589bc:	3e2502d6 bc033ae8 3e0ca90d 3dd52d4e     ..%>.:.....>N-.=
   589cc:	3d8fb5d3 3edbcc3f be81378b bd836869     ...=?..>.7..ih..
   589dc:	bd6a85a5 3cd19d36 3e48fa54 be20e3a1     ..j.6..<T.H>.. .
   589ec:	bc349b32 3deef02d 3e263ad6 3ecbd38a     2.4.-..=.:&>...>
   589fc:	3e43991c be9d0b80 3da02577 3efef99b     ..C>....w%.=...>
   58a0c:	3eb35708 be85228d 3e6a8a27 3d4a4096     .W.>."..'.j>.@J=
   58a1c:	3e1cd4e9 be25a2a3 3d30e589 3e1c0e2c     ...>..%...0=,..>
   58a2c:	3e88f6de bb642026 bea5e1d1 bce5188e     ...>& d.........
   58a3c:	bdfd709c 3d92bab7 bd909965 3d702915     .p.....=e....)p=
   58a4c:	3e07ed4d be3fe55e bdf28e81 be3c63f6     M..>^.?......c<.
   58a5c:	bdd455c0 be35b682 be51e608 3c141dcf     .U....5...Q....<
   58a6c:	3df0eafb bedd1719 bd63584c bd328472     ...=....LXc.r.2.
   58a7c:	3e81272f 3e80f75b bd679be8 3e751486     /'.>[..>..g...u>
   58a8c:	3ddb4e59 3dd16d17 be037dcb bea4f1d4     YN.=.m.=.}......
   58a9c:	399c032b bd49284d 3e579d4e 3eb6526e     +..9M(I.N.W>nR.>
   58aac:	be2ad5a5 be021ea4 bd97ab3a 3daf893e     ..*.....:...>..=
   58abc:	be831465 3dfe0d2d 3d3af011 bd90ec01     e...-..=..:=....
   58acc:	3eba14c8 be921063 3d4219f9 3e2e7f06     ...>c.....B=...>
   58adc:	bdadb668 3ccd4b83 bd948c5d be0ff6c0     h....K.<].......
   58aec:	bee3a8f3 bda07cc2 bdfab82a bce8ee86     .....|..*.......
   58afc:	3d5ce35b 3cba70f5 be0f305f 3ccdf806     [.\=.p.<_0.....<
   58b0c:	bec9acd8 be9a3d8b 3d9b5f1c 3cc22087     .....=..._.=. .<
   58b1c:	3c1b322b be8efb1f bbb9960e 3da3417d     +2.<........}A.=
   58b2c:	3cb0d3b2 3e6eb6b6 bec09034 bddb10f8     ...<..n>4.......
   58b3c:	bcdc7571 bcd26161 3e77fc36 3ce631ad     qu..aa..6.w>.1.<
   58b4c:	3aae5513 3bea75eb bdc92881 bdd60506     .U.:.u.;.(......
   58b5c:	3da66956 bd9a26c9 3eb2d4ad 3bb4004d     Vi.=.&.....>M..;
   58b6c:	bd266872 bdd0ad75 3e6eeeaf be296ef8     rh&.u.....n>.n).
   58b7c:	3e7a0ea5 3daf324e be7a6184 be9b7c4a     ..z>N2.=.az.J|..
   58b8c:	3e74b8b6 3e0c2dca bde4e1d6 3d139bdc     ..t>.-.>.......=
   58b9c:	3d829808 be272727 bc3ddd7b 3e45409c     ...='''.{.=..@E>
   58bac:	be38f3f5 3e276c7d 3c16121b bddac552     ..8.}l'>...<R...
   58bbc:	be56b821 3cba0e8a be1082f8 be7bfe3c     !.V....<....<.{.
   58bcc:	3dad067f be1e8b78 bec10dd3 be7b1200     ...=x.........{.
   58bdc:	be3d1178 be7880bc 3e126037 bd1c580b     x.=...x.7`.>.X..
   58bec:	bdd5d0f5 3d1036a1 3da4b8b0 be2c6884     .....6.=...=.h,.
   58bfc:	be4695a3 be2bccdb 3b83b658 bec7b717     ..F...+.X..;....
   58c0c:	be4dce0b 3e8ecdc3 3c1e188f be505d92     ..M....>...<.]P.
   58c1c:	3db77331 bdd19f56 3dd2d625 3c41a338     1s.=V...%..=8.A<
   58c2c:	be298ac7 be8956b7 be48a04b 3bd23329     ..)..V..K.H.)3.;
   58c3c:	3e5ed0ca 3d304e24 3e65cd53 be3cc790     ..^>$N0=S.e>..<.
   58c4c:	bd2efa21 3e9fcbba bdfef6e7 3e331899     !......>......3>
   58c5c:	3d9fe63e 3dcd007d bee372f0 3e3d4ca5     >..=}..=.r...L=>
   58c6c:	bd5a6ab8 bee1ccb5 be7fa313 3d2adb2d     .jZ.........-.*=
   58c7c:	beaf1ffd 3dd60516 3e788f1d bd80c82e     .......=..x>....
   58c8c:	bde030d0 bdddcfef be26aee4 3e276ed5     .0........&..n'>
   58c9c:	bf0c2aa6 bc484dcd 3dc174c2 bbdfe5ef     .*...MH..t.=....
   58cac:	3a396363 beab1182 3dbea7fe bc3c2c41     cc9:.......=A,<.
   58cbc:	be4fabfe bdc5487f bdf8dac9 bbfe7c9d     ..O..H.......|..
   58ccc:	bea11e91 be463283 bd926623 be9d4a39     .....2F.#f..9J..
   58cdc:	be411fe0 bdb66f48 bd97926f be946aeb     ..A.Ho..o....j..
   58cec:	3ea89f0a 3eafdad3 be3df019 bc8b35ee     ...>...>..=..5..
   58cfc:	3eb4c381 bedf1c26 3e3b2d88 3d965029     ...>&....-;>)P.=
   58d0c:	3d2988b0 bd0001ce bd960784 3c9a68c7     ..)=.........h.<
   58d1c:	bdad0679 3e8c8690 3b6bec4d be9341bc     y......>M.k;.A..
   58d2c:	3ea25ffd be88d9e9 bdcc8393 bd2c1b74     ._.>........t.,.
   58d3c:	be871320 3d1bf772 3af18b1d 3e50ea2e      ...r..=...:..P>
   58d4c:	3d39ffae 3e6ce0aa be0c2c32 be19c2d4     ..9=..l>2,......
   58d5c:	3e417bf9 3c99e442 3e03eda9 3e074147     .{A>B..<...>GA.>
   58d6c:	3d437426 be13fcc2 3e38ed38 3cf3185b     &tC=....8.8>[..<
   58d7c:	3e0949bd 3db4a744 3e146ae1 bd203443     .I.>D..=.j.>C4 .
   58d8c:	3ea0d35b 3e4aff8a be44da89 bd909e8b     [..>..J>..D.....
   58d9c:	3dc7501b bdd1d52b be5c43d7 3d5cbb78     .P.=+....C\.x.\=
   58dac:	bedcc3de be2480b9 be58381b bea5d575     ......$..8X.u...
   58dbc:	3e03ab53 be1fd673 be047005 3e1613f3     S..>s....p.....>
   58dcc:	bd4e2e5f be6461f5 3e7a1b2d 3e7fa66c     _.N..ad.-.z>l..>
   58ddc:	3e879cac bdb54a20 bdedde2a 3e95273f     ...> J..*...?'.>
   58dec:	bcae891a bdc60422 bdb25201 bea61756     ...."....R..V...
   58dfc:	beb3d57a bd4957eb 3ea2b67c 3e5880e2     z....WI.|..>..X>
   58e0c:	3e16f828 bc289ae9 be64b5a5 bd0d8ded     (..>..(...d.....
   58e1c:	be433757 3e069b7d 3d0e78af 3d42700d     W7C.}..>.x.=.pB=
   58e2c:	3e342ae6 bbf0d469 3e8479e4 3e2820ee     .*4>i....y.>. (>
   58e3c:	3d93b491 3e804dba bd35e9ff 3efd4778     ...=.M.>..5.xG.>
   58e4c:	3e6f346a 3e0329cc be84a7c3 3cd40c1c     j4o>.).>.......<
   58e5c:	3d83b9af beefabe6 bd7dce5d bebcedce     ...=....].}.....
   58e6c:	3e5d85bd 3d03d40d be2db096 bdfa8054     ..]>...=..-.T...
   58e7c:	3e2b6fe4 bdaa4875 3da5d498 3dfa0452     .o+>uH.....=R..=
   58e8c:	3edb7f6f be8a599a 3ed1ee0f 3e9438b0     o..>.Y.....>.8.>
   58e9c:	bcde9618 bedc9ea0 3e37baf5 3dd92b99     ..........7>.+.=
   58eac:	bdd9d717 3ea9ce95 be37c2f1 3ea3e244     .......>..7.D..>
   58ebc:	be3c410e 3e919b8c bdd45979 3d81e076     .A<....>yY..v..=
   58ecc:	3e81061d bd0cf6d9 3dbc783e be0d8001     ...>....>x.=....
   58edc:	3d02ec39 3e5965f1 be151cd9 3da8afdf     9..=.eY>.......=
   58eec:	be839fd1 3e05fca3 be59bf1f 3cf6b472     .......>..Y.r..<
   58efc:	3e90fdca 3ecc709a 3e3f6313 be15c195     ...>.p.>.c?>....
   58f0c:	3e38c868 3e81b342 3c80ee17 3c57d757     h.8>B..>...<W.W<
   58f1c:	3d8d7a2c 3e455c26 3ceea5e0 3dd3ac5c     ,z.=&\E>...<\..=
   58f2c:	bd019340 bc74f347 be225f4a 3ef38e4c     @...G.t.J_".L..>
   58f3c:	bea80c9f 3e8572a1 be157a91 bd5120cc     .....r.>.z... Q.
   58f4c:	3e5e88de bcb76303 3eb388a3 3e80d4c3     ..^>.c.....>...>
   58f5c:	bdae4726 be68a6ef bba9b4af bdc8ce10     &G....h.........
   58f6c:	bd8ce36c bd63f695 3cd0fffd bed6fcbc     l.....c....<....
   58f7c:	be388c41 3db8367f 3d8c4cbf 3e4c531e     A.8..6.=.L.=.SL>
   58f8c:	bda273fd bdf8fd22 3d49d75f be39c9bf     .s.."..._.I=..9.
   58f9c:	3d9f65d3 bc4a80a2 3e0c1f16 be8e1f40     .e.=..J....>@...
   58fac:	3d7ccde1 3e5c708b bdf9a7b0 3e3dd941     ..|=.p\>....A.=>
   58fbc:	bdcff747 bd36ffc9 bcdec07a bd97174b     G.....6.z...K...
   58fcc:	bea5d1e0 3e587b84 bb888286 3e1b8b5d     .....{X>....]..>
   58fdc:	3cf577bc beaff8c0 3e12d373 be635f47     .w.<....s..>G_c.
   58fec:	be2ff99f 3dc9b7c2 3d47c33e bc26fc4e     ../....=>.G=N.&.
   58ffc:	be0eb44d be19c8af be40cb7b 3dc15a24     M.......{.@.$Z.=
   5900c:	3cb21073 3d9054b7 3e9ecafa 3e819b5d     s..<.T.=...>]..>
   5901c:	3cb72297 3ddba2f9 3e6304dc bed1cc53     .".<...=..c>S...
   5902c:	3d96a14f be0046e2 beda2df7 bdfb7dab     O..=.F...-...}..
   5903c:	be280800 3ba498bc be738fd6 bea5acae     ..(....;..s.....
   5904c:	be8949ac 3e544690 be91d1c1 3dc0c42f     .I...FT>..../..=
   5905c:	bd35e77b 3d6c643f be180da5 bd9d08d9     {.5.?dl=........
   5906c:	bcc12463 3db7cb69 be1f757d be123329     c$..i..=}u..)3..
   5907c:	be289dee bc69334a 3e47f78b beb0a58a     ..(.J3i...G>....
   5908c:	be5d586f 3e1f5d1d 3dcb8581 be6a0c9b     oX]..].>...=..j.
   5909c:	bdac1e1b 3ed36309 3dc1fd9e bea1a658     .....c.>...=X...
   590ac:	3ddf3067 bd5992bb bef7f297 3da1cf4e     g0.=..Y.....N..=
   590bc:	3df57088 3e05ec49 be5e0737 bcbdc3a5     .p.=I..>7.^.....
   590cc:	3e4cf32e bda34076 bdecc6c3 be2680a0     ..L>v@........&.
   590dc:	3d877da4 be63c200 3d0dc213 be1480c7     .}.=..c....=....
   590ec:	be093b60 bcc0d685 3d47a1a2 bd89062a     `;........G=*...
   590fc:	3ddb336d becd7c02 3e8525e7 3e622260     m3.=.|...%.>`"b>
   5910c:	beaa9cac 3de6a59e 3d4cc56e bdd19150     .......=n.L=P...
   5911c:	be41abb5 bd62f4ed b9ed5b0d be17341a     ..A...b..[...4..
   5912c:	bd455ad8 3de1b8e2 bd123f35 3dd9a391     .ZE....=5?.....=
   5913c:	3e06c359 be72f56d be6cdf20 3dba8ff2     Y..>m.r. .l....=
   5914c:	bddcfd19 bdcf14eb be3e787d bddad74e     ........}x>.N...
   5915c:	3e0684de 3e826cab 3e8a7eb9 3e2c65dd     ...>.l.>.~.>.e,>
   5916c:	3d69c73f 3e01dc7e bd901bd3 3d1fcdcb     ?.i=~..>.......=
   5917c:	bd837eee be1299a6 3c9d9100 bdb7739e     .~.........<.s..
   5918c:	bcc46d6d bb0c22e4 bcb962cd 3dd5f028     mm..."...b..(..=
   5919c:	bbcfcfb7 bdb213f5 be5dcb84 bdd4193a     ..........].:...
   591ac:	be17ea99 bc5f4001 be74a988 bdfa08f1     .....@_...t.....
   591bc:	bd9c9aa6 be605d43 3e5d01f7 3ccc12ae     ....C]`...]>...<
   591cc:	3da310d9 3e3a57d5 3c1f1066 be79354d     ...=.W:>f..<M5y.
   591dc:	bc76262d bcf0e91c bd6fe1b2 3d796867     -&v.......o.ghy=
   591ec:	3e27ccb4 3dac5023 3d5d9a35 bce4d2d3     ..'>#P.=5.]=....
   591fc:	be666289 3eced1cf bda3aae5 3d56a955     .bf....>....U.V=
   5920c:	be6a84d2 beb0c241 bce978ea bdeb681e     ..j.A....x...h..
   5921c:	3d137f00 3e3f87ef be2e8883 3e1d8bf2     ...=..?>.......>
   5922c:	be3c0006 3dbd7e0a bdf7e8f2 bdbc066b     ..<..~.=....k...
   5923c:	bd3aafec 3d3fe2b1 be5649b8 3d9af963     ..:...?=.IV.c..=
   5924c:	be017814 3e959e17 bd9dfa4c be1406b2     .x.....>L.......
   5925c:	3d25cd44 3e9af31f bbe95f55 3ea723b0     D.%=...>U_...#.>
   5926c:	bd4ad343 bd68f4d9 bab03694 be87da89     C.J...h..6......
   5927c:	3e68b3a7 3e0144a3 bec21a64 be4b2c58     ..h>.D.>d...X,K.
   5928c:	3c23ca2a be4c7104 bcf5e78e be867d0d     *.#<.qL......}..
   5929c:	bd20fbd6 beae07ff bdc91755 be001c00     .. .....U.......
   592ac:	3dcbc05f 3d8dede2 3e0bb549 3e3bfe1a     _..=...=I..>..;>
   592bc:	3c32a1be 3d761eb8 3e5c1729 3cbdd94f     ..2<..v=).\>O..<
   592cc:	be017bc0 be78faf8 be29cb79 be24cda4     .{....x.y.)...$.
   592dc:	3d9f4958 3d2cd9f6 3e0ae02a bcb65a0f     XI.=..,=*..>.Z..
   592ec:	3d8d79bf be065d33 bdb89eb1 be8081b3     .y.=3]..........
   592fc:	3d73c217 bc80c8c8 3dc9ef5c bcecf445     ..s=....\..=E...
   5930c:	bdd4eb0f 3e52ea15 3e003973 3e637072     ......R>s9.>rpc>
   5931c:	3ea093ac bdaaa681 be139e68 3c530414     ...>....h.....S<
   5932c:	3de50713 3ee18013 bd0f18b2 3decedd7     ...=...>.......=
   5933c:	3db406d6 3ccfe291 3dbc46de bd8efc6a     ...=...<.F.=j...
   5934c:	bcac6625 3d7ab15f bd4630fc be6e7b76     %f.._.z=.0F.v{n.
   5935c:	be09bc50 be4b71bb 3e9294e2 3da235c5     P....qK....>.5.=
   5936c:	be712cb3 3dd3dc0c beba5691 3e1f7b07     .,q....=.V...{.>
   5937c:	3eb61146 bda4ef75 be619fc2 be25b752     F..>u.....a.R.%.
   5938c:	3e3910ad 3e3cf61f bd3ae953 3e8b3f38     ..9>..<>S.:.8?.>
   5939c:	3d63104b 3ea7e7f9 3e39e0f4 bd921368     K.c=...>..9>h...
   593ac:	be41b257 3ca9f3f5 be11b862 be9b7607     W.A....<b....v..
   593bc:	bd8cc446 be733555 3dc3ea1c 3c8e022c     F...U5s....=,..<
   593cc:	3d225d05 be148515 bbc919ba 3de6f65c     .]"=........\..=
   593dc:	bdc7fc1d bd7f6263 be4b021a 3d3dc20a     ....cb....K...==
   593ec:	3e0c4db7 3e73f741 be041562 3d97d05a     .M.>A.s>b...Z..=
   593fc:	3e48f177 beba38af 3e5a405a bda00a31     w.H>.8..Z@Z>1...
   5940c:	be04be5e bcd159e5 3e764308 3d6fde9d     ^....Y...Cv>..o=
   5941c:	bdc32732 be8fe0f0 bf0483c4 bebdc4a1     2'..............
   5942c:	3d4173b0 be5d6b4c be0457d7 bcfa2276     .sA=Lk]..W..v"..
   5943c:	3d38db51 be429abf be290bf8 bd5e6810     Q.8=..B...)..h^.
   5944c:	bd5f0096 3d16d572 3dc7137a bd8b40de     .._.r..=z..=.@..
   5945c:	3d1029df 3d5c38a0 3e15844c be404a7e     .).=.8\=L..>~J@.
   5946c:	3e92841d 3e5ba221 3d8d3036 bd9cf8d8     ...>!.[>60.=....
   5947c:	bddf8b19 beeae6e0 bd6d24ae bde78a68     .........$m.h...
   5948c:	3e09d22f 3d6b6c6d bea03544 3e969647     /..>mlk=D5..G..>
   5949c:	3d5fbbcd beb4e1c2 3d77cf6d 3e668de0     .._=....m.w=..f>
   594ac:	3d92722b 3e506bf0 3e826fee 3e5d3f8c     +r.=.kP>.o.>.?]>
   594bc:	3dae0f4f 3e053eb6 bdd04985 bddd0675     O..=.>.>.I..u...
   594cc:	3dbd219b bceb9d88 be7a5a64 3e1826ed     .!.=....dZz..&.>
   594dc:	3e6d1dcd bcfebb97 bcb83ec1 bd38642d     ..m>.....>..-d8.
   594ec:	3e0333c9 3d6e8f4f bdc1796f bdaf9c8a     .3.>O.n=oy......
   594fc:	beaa77b9 3db0c580 be1526ac ba5cc919     .w.....=.&....\.
   5950c:	bdf4ac88 3d6841f3 3d12ead4 bebf2937     .....Ah=...=7)..
   5951c:	3e613196 3de22121 3dc7ff2b 3e364295     .1a>!!.=+..=.B6>
   5952c:	3e5e52d7 bd26f39a 3df0bd4d 3e8b331c     .R^>..&.M..=.3.>
   5953c:	be3955ce 3d79f5f5 3d5e8427 be5b4197     .U9...y='.^=.A[.
   5954c:	3e70f3c5 3ea36925 beab7c80 bc91c8c5     ..p>%i.>.|......
   5955c:	3dbae1dd 3e35389b 3e447cfd bdc6782a     ...=.85>.|D>*x..
   5956c:	3ec55876 be96dd40 be4fdb36 3d4825ec     vX.>@...6.O..%H=
   5957c:	be24df9a bcbf2f76 3d30db6f 3e2571aa     ..$.v/..o.0=.q%>
   5958c:	be5a6eb3 3e91adb5 3d0e3791 3dfbd858     .nZ....>.7.=X..=
   5959c:	be3133f9 be9ff8be 3b4ef820 3e84785a     .31..... .N;Zx.>
   595ac:	3dc6a3d5 bc79bd3b be9edc32 bdcdafa3     ...=;.y.2.......
   595bc:	be2c69f9 be2d05c4 bcb5a569 be42d552     .i,...-.i...R.B.
   595cc:	be7b22a6 be5754c2 bd99def3 bef387b5     ."{..TW.........
   595dc:	3e493e6d be882cd4 be80b0f4 3e440118     m>I>.,........D>
   595ec:	3e087eab be799809 bd9d2789 bd19b1b8     .~.>..y..'......
   595fc:	be1c663a bd42996d be886fac 3d10012a     :f..m.B..o..*..=
   5960c:	be1e7c35 3d13ce89 be35e061 3d869586     5|.....=a.5....=
   5961c:	3def05c2 3d391e8d bcaa0262 be7ebf5d     ...=..9=b...].~.
   5962c:	3e0867f8 bea83343 3e61d98d 3d45d2c8     .g.>C3....a>..E=
   5963c:	be23b082 3ef76034 bdb52f91 bdce3dc0     ..#.4`.>./...=..
   5964c:	bd759291 3e2c08e7 3d87c95d bd7fcec5     ..u...,>]..=....
   5965c:	3d696f45 3e0966d5 3e37ac0d 3d592e0f     Eoi=.f.>..7>..Y=
   5966c:	bd90273c 3e142182 3e19bc6b bdb5990c     <'...!.>k..>....
   5967c:	3f11506f 3cfd903e 3e18150d 3e4f81be     oP.?>..<...>..O>
   5968c:	3d31db1f 3de30a9d be9fd22b 3db3a46a     ..1=...=+...j..=
   5969c:	3eb022a0 3e45a37a be6c3825 3d9b91bd     .".>z.E>%8l....=
   596ac:	bbdeaa04 bd1bbabc be15076f bebec155     ........o...U...
   596bc:	3da81e98 be60f70c 3eab7ed3 3ccebfdc     ...=..`..~.>...<
   596cc:	be90123d be66cb7e 3e14bc68 3c93bc2a     =...~.f.h..>*..<
   596dc:	bec09967 3cff5bf6 3c765b06 bec2881c     g....[.<.[v<....
   596ec:	3e012784 3d63f022 bda8dd24 3e99259b     .'.>".c=$....%.>
   596fc:	be9c3893 be11bbce 3dcec8d0 3e874a6e     .8.........=nJ.>
   5970c:	be496f86 3e819e96 bdc70197 bd8cd6cf     .oI....>........
   5971c:	bdb88e5f be0ba919 bd5a60b7 bd69eafb     _........`Z...i.
   5972c:	3d9f6f4b bd875ed1 3e59c0bd 3cf410ff     Ko.=.^....Y>...<
   5973c:	bd2647e3 bd57fb8c bca83a6c 3e0340fc     .G&...W.l:...@.>
   5974c:	3dd8e5b3 3e82c013 be1523b8 3d6f0e20     ...=...>.#.. .o=
   5975c:	bbe744b3 be3bb88e be00cbd5 3daf066c     .D....;.....l..=
   5976c:	be6469f4 3e1e2589 bc91a2fb be5dadd8     .id..%.>......].
   5977c:	3e94cc07 3db3e172 3e111ede bda9f572     ...>r..=...>r...
   5978c:	3eaca147 bea8ced2 bc7b8532 bdfa76d0     G..>....2.{..v..
   5979c:	bb50d499 3d3b406b be835578 be49b143     ..P.k@;=xU..C.I.
   597ac:	3cad7990 3e397934 bd9b6209 3e6e7101     .y.<4y9>.b...qn>
   597bc:	3cdecebd be2d3827 bd96ebc6 3d73ccce     ...<'8-.......s=
   597cc:	3bc4a74f be10460f 3c7b25fc 3d430d2e     O..;.F...%{<..C=
   597dc:	bd9b2ed5 be2caca7 be19a04c be3ef2d9     ......,.L.....>.
   597ec:	bdea7cee bdf753ce 3de1528a 3ceb67fe     .|...S...R.=.g.<
   597fc:	bd6779e4 be37c87a 3e4b4540 be1827c3     .yg.z.7.@EK>.'..
   5980c:	bd492bf3 3daca3d0 bdbf3014 3dca846f     .+I....=.0..o..=
   5981c:	be31c4ac 3e36c603 3e14ddf3 3e170e7a     ..1...6>...>z..>
   5982c:	3c5ec568 bdb6f015 bd757012 bda4c530     h.^<.....pu.0...
   5983c:	be854600 3e766ec3 be078e84 be5b4974     .F...nv>....tI[.
   5984c:	bb5db629 3e817132 39f1a7a3 be696191     ).].2q.>...9.ai.
   5985c:	3e845862 3e60703d bcaea32c be6b9d03     bX.>=p`>,.....k.
   5986c:	be86a53c bd5e1819 be2e6267 be71d7b8     <.....^.gb....q.
   5987c:	3e06a981 3e087216 3e846ea5 be2c51da     ...>.r.>.n.>.Q,.
   5988c:	bdda4670 be7a0ad2 3ce7c628 be104fcb     pF....z.(..<.O..
   5989c:	b7ff99d4 bcb1605a 3e71ea52 3cf447f1     ....Z`..R.q>.G.<
   598ac:	becf1239 3d9112b5 be8b3b20 be4e1eed     9......= ;....N.
   598bc:	be86446a 3c437fe7 3d9fdff2 be4227f2     jD....C<...=.'B.
   598cc:	bf005de0 3c7e3ee0 3dc574fb bdb3009d     .]...>~<.t.=....
   598dc:	3e2f1f51 bcb3120b be8cc29d 3e0a6a42     Q./>........Bj.>
   598ec:	3db3c5cc bea4114b be15edac 3ef7b080     ...=K..........>
   598fc:	be062483 bc237b25 bdbd612c bd944300     .$..%{#.,a...C..
   5990c:	bd6d4508 3d51e7b9 bc926df6 bde90d23     .Em...Q=.m..#...
   5991c:	be7bd5c6 bd9c8d9a 3e44dd27 be57f8aa     ..{.....'.D>..W.
   5992c:	bde3d435 bc393a29 bc0008cf be3f0313     5...):9.......?.
   5993c:	bda3f239 3d13ff36 be64a7a6 be4f30d3     9...6..=..d..0O.
   5994c:	3dfd08d3 3c983df5 bba58230 be82cfe5     ...=.=.<0.......
   5995c:	bd7369c7 beb7da7a bd670bbb 3c87491a     .is.z.....g..I.<
   5996c:	be69c611 be902a6d be71c526 be18110a     ..i.m*..&.q.....
   5997c:	be3f1989 bf01a2a1 3ef8da45 bed63355     ..?.....E..>U3..
   5998c:	bdb363e9 3e5613cc bdee3d1a bebdccbf     .c....V>.=......
   5999c:	3e68fc42 3e0fb4a0 3e8e4782 3e34b706     B.h>...>.G.>..4>
   599ac:	bd665108 3e79fb94 3e3e387a be7dfee2     .Qf...y>z8>>..}.
   599bc:	bea0c748 be3d9809 bc3169fb bd182a69     H.....=..i1.i*..
   599cc:	3c96fff7 3dc78750 bf244bae bd822780     ...<P..=.K$..'..
   599dc:	bb88cc01 bd1f8620 be33a8c1 3e6e4129     .... .....3.)An>
   599ec:	3e3a9f9f 3e82ac30 3d9c9402 be35142e     ..:>0..>...=..5.
   599fc:	be11bbd6 3d9adaf9 be2d78b5 be2f80b8     .......=.x-.../.
   59a0c:	bd9b331b bd3f4067 bbf5d26a 3ddeb21f     .3..g@?.j......=
   59a1c:	be9d7acd 3e9630aa 3e96a21b 3ddac540     .z...0.>...>@..=
   59a2c:	be335252 3b9548bd 3d82893a bd5ce259     RR3..H.;:..=Y.\.
   59a3c:	bde64cf5 be8768f6 be8095d0 3ccadbf7     .L...h.........<
   59a4c:	3e1c26d3 be686eba bda87358 bda29962     .&.>.nh.Xs..b...
   59a5c:	bdc144a9 3ca33aa8 3bf1ac40 3c9cda31     .D...:.<@..;1..<
   59a6c:	3ee91de9 3e281a59 bed9208e be079770     ...>Y.(>. ..p...
   59a7c:	bd950ef2 bebaf893 bdddc506 3e22b0f1     ..............">
   59a8c:	be635b0b be2ba118 be22ca08 3d9c5493     .[c...+..."..T.=
   59a9c:	be82ae29 3ddf0c72 bec60375 be2d2f19     )...r..=u..../-.
   59aac:	3d11a4cb 3e321320 3e370b87 3c4e40d6     ...= .2>..7>.@N<
   59abc:	3da025a1 3e8c95df bef0ce08 bdb7cc46     .%.=...>....F...
   59acc:	3ea7eaf8 bd34d93e 3de3f8ef 3ea00702     ...>>.4....=...>
   59adc:	3db6fdb3 3d173429 be21a9a0 be66e8b4     ...=)4.=..!...f.
   59aec:	bcf814ea 3e682872 3e229603 3e02fba4     ....r(h>..">...>
   59afc:	3de73fad be7419e4 3e26d184 3e90bbe7     .?.=..t...&>...>
   59b0c:	3dd77726 3d88140b beb2a90d 3eaa9815     &w.=...=.......>
   59b1c:	3dbe2561 bec5dba5 3e2ad7cb bdfb8d10     a%.=......*>....
   59b2c:	be4e8f43 b95a1a93 be695bde bca7e928     C.N...Z..[i.(...
   59b3c:	3dfe77e4 be7a2b59 3e6aced0 be84036b     .w.=Y+z...j>k...
   59b4c:	bdb6d122 3e0a4ebd 3e82dfec 3e20f499     "....N.>...>.. >
   59b5c:	bc3bd503 bb92c600 be750393 3e7e9488     ..;.......u...~>
   59b6c:	3d2ddea3 3db2e9d3 3c8d74e3 3c7035a8     ..-=...=.t.<.5p<
   59b7c:	3ecdb664 3dca0148 bcefef0b 3dc4ef53     d..>H..=....S..=
   59b8c:	3d733506 3e875178 3df0e9f3 be7de422     .5s=xQ.>...=".}.
   59b9c:	3cad4b47 be825468 3e1cb622 be22dc05     GK.<hT.."..>..".
   59bac:	3e8bef62 3e651952 bcfbe91a bddfbb70     b..>R.e>....p...
   59bbc:	3e5d0e5a 3e658a67 3eb03299 3e53dd63     Z.]>g.e>.2.>c.S>
   59bcc:	be58d9c8 bdae06e1 be76c55e 3dfe18ba     ..X.....^.v....=
   59bdc:	bd8007cc 3cb5915c be8ddcb8 3eabeb92     ....\..<.......>
   59bec:	3e26dad4 3dbcf4d2 be3ca05c 3c89a870     ..&>...=\.<.p..<
   59bfc:	bbd829a2 bece4a2c 3df1b27e be3b7597     .)..,J..~..=.u;.
   59c0c:	3c061a97 3e4bab9e 3e027026 bd02adca     ...<..K>&p.>....
   59c1c:	3e81a192 be568323 3dbd4cfe 3cbe0fb5     ...>#.V..L.=...<
   59c2c:	bdee2bf0 3e2a27f3 be000514 3de9e286     .+...'*>.......=
   59c3c:	be830e60 3d9c40d6 3e048c9f bd9fcd05     `....@.=...>....
   59c4c:	bd42a81b be533274 be8e03e1 bd809d08     ..B.t2S.........
   59c5c:	bc8027e3 3dc5bfd1 3e8b98d8 bd3f639b     .'.....=...>.c?.
   59c6c:	3d9623f0 3e03f16e be5ca580 3da502d9     .#.=n..>..\....=
   59c7c:	bd9bfda5 be5f920c 3e33a661 3d93f95d     ......_.a.3>]..=
   59c8c:	3e4763de 3e76485e bdf14101 3d2e009c     .cG>^Hv>.A.....=
   59c9c:	be90650a 3eb6c71a 3e342782 bc2c6f4a     .e.....>.'4>Jo,.
   59cac:	be424210 be6d7e55 3ea26e14 3e0650f3     .BB.U~m..n.>.P.>
   59cbc:	3e203557 bd964a48 bd102eda beca1a36     W5 >HJ......6...
   59ccc:	be8cc41b babeb304 bea1c52d 3e6e05af     ........-.....n>
   59cdc:	be04cc69 3e3bfe35 3e1817d3 be2cb8df     i...5.;>...>..,.
   59cec:	3ba6f4f7 bea15da7 be02ade2 3e1b113f     ...;.]......?..>
   59cfc:	be96206e be8a2611 bde8b06e be075884     n ...&..n....X..
   59d0c:	bda56403 3e36d87e bd8d3cd4 beb64607     .d..~.6>.<...F..
   59d1c:	bdb70695 bdf9cba3 bd38af9f be755c88     ..........8..\u.
   59d2c:	3e150200 be970eac 3e893e3f 3d5d1339     ...>....?>.>9.]=
   59d3c:	bdfd5e9d 3dee3358 bd86040c be35cb8e     .^..X3.=......5.
   59d4c:	bed3345c bd9caa6b 3c48a799 bdab381b     \4..k.....H<.8..
   59d5c:	be5c6a5e 3a14a970 bea3ecc6 be0962dc     ^j\.p..:.....b..
   59d6c:	3e7c2bef 3e45e8ae bdd2ac9b 3e9da5e3     .+|>..E>.......>
   59d7c:	3db7c707 be9b7e6d 3df1157b bdc1b73a     ...=m~..{..=:...
   59d8c:	be5e643e 3e059e94 3e52a37f 3d5aae9d     >d^....>..R>..Z=
   59d9c:	3db4ca92 bdd21a4d 3dcbcb5b 3cc7d9ee     ...=M...[..=...<
   59dac:	bdc708da bdc3a25f bea7ca93 bd740e72     ...._.......r.t.
   59dbc:	3e0c9a80 3d0d7eae 3e9cc25a be82e94e     ...>.~.=Z..>N...
   59dcc:	bcec2db6 bd1d4720 3d055baf be535ebc     .-.. G...[.=.^S.
   59ddc:	3deceab5 3db4bb85 be2b1ae2 3c9b66f4     ...=...=..+..f.<
   59dec:	3ee10f64 3cd469cf bd98c7b6 be966311     d..>.i.<.....c..
   59dfc:	bce54ea9 be33575d bd77da17 bd2f8c12     .N..]W3...w.../.
   59e0c:	3e33932c be80950c be46068a be0e5c1d     ,.3>......F..\..
   59e1c:	be654d86 3ebb5dbf bde6b0ed be4fa2e4     .Me..].>......O.
   59e2c:	bca9781e 3e855a37 3e9bd589 be2be5a7     .x..7Z.>...>..+.
   59e3c:	3e2963fb 3d536598 be6d73ba be219dfa     .c)>.eS=.sm...!.
   59e4c:	bab8625d 3c1214b5 beb057cb bec751c4     ]b.....<.W...Q..
   59e5c:	3e210aee bdcd576c 3e38d5fd 3da8a8ae     ..!>lW....8>...=
   59e6c:	bcb3487c 3dbf636f bed010e4 bd58f138     |H..oc.=....8.X.
   59e7c:	bd6d205a 3d3e4a66 3cd7afbf 3e763a1e     Z m.fJ>=...<.:v>
   59e8c:	be73687c 3e024f5c 3e9f39c7 bdae8c13     |hs.\O.>.9.>....
   59e9c:	be24cdc5 bdbe22f6 bebd6034 3e46752a     ..$.."..4`..*uF>
   59eac:	bd0b7d5f bdf785d1 bdedf40f 3caa36e6     _}...........6.<
   59ebc:	bda1db5e 3dc46888 3d2c7958 be324c12     ^....h.=Xy,=.L2.
   59ecc:	3db97723 bd278d30 3e39b759 be0a00a1     #w.=0.'.Y.9>....
   59edc:	3e8c382b bde7b8f3 3dde06fd 3e4b7f8e     +8.>.......=..K>
   59eec:	3c4ec0b8 bcaca590 bd825f61 bd9b7a19     ..N<....a_...z..
   59efc:	3d351291 bdb10384 be3e231e bea2ca17     ..5=.....#>.....
   59f0c:	be18e96e be02794c 3d3c5254 3e829c89     n...Ly..TR<=...>
   59f1c:	3d620195 be5548f7 3d31c2de bd9532a5     ..b=.HU...1=.2..
   59f2c:	be229a9b bc06adfa bdac7bf0 3cd1d7d9     .."......{.....<
   59f3c:	bcf959a3 be53f7ad 3ecce5d1 be433cb7     .Y....S....>.<C.
   59f4c:	be3a90cc be83c0c5 3dc8d9c1 3edf453b     ..:........=;E.>
   59f5c:	bd8c1010 3d9656a6 3e532784 3db211d0     .....V.=.'S>...=
   59f6c:	3e8ce722 3e9aefa7 bec7a55b bdb09668     "..>...>[...h...
   59f7c:	3e569097 bd932fe2 bdf1260c 3dc81196     ..V>./...&.....=
   59f8c:	be8be2aa 3e356315 3e4d2238 beb3f9ef     .....c5>8"M>....
   59f9c:	beb6ebfe bdb1e1be 3c414921 3e434742     ........!IA<BGC>
   59fac:	3be0c7c1 beacd9e4 3e971d96 bde69f4a     ...;.......>J...
   59fbc:	3ce7b866 3e22a461 3e522b8f bcd4b006     f..<a.">.+R>....
   59fcc:	be2d83c1 bd85d740 bd9b6b6a 3e503961     ..-.@...jk..a9P>
   59fdc:	bc942241 3c109767 bd2d04f1 3e11521b     A"..g..<..-..R.>
   59fec:	be10626a be3e3b7e be79d49d 3e0e9b78     jb..~;>...y.x..>
   59ffc:	bdf32b5d be02fc5f be4bf3de 3d384638     ]+.._.....K.8F8=
   5a00c:	3db702c8 3ec6d4cf 3ea022c4 3e801be0     ...=...>.".>...>
   5a01c:	3e04baa1 3e22837e 3d3fe273 3e868b83     ...>~.">s.?=...>
   5a02c:	be3517d2 3df58d5a 3d99396e 3e7227a0     ..5.Z..=n9.=.'r>
   5a03c:	3d98504e 3e1548fc be916e2a bcc0fc1f     NP.=.H.>*n......
   5a04c:	be241fe2 3d9de530 bd063a7f bec27eb0     ..$.0..=.:...~..
   5a05c:	3ca49fbd 3cc2415e 3eb240ec 3df3932a     ...<^A.<.@.>*..=
   5a06c:	39ec2253 be87eb90 3deef0df be54b432     S".9.......=2.T.
   5a07c:	3d06d9a1 3e4a4550 3da5495e beb12722     ...=PEJ>^I.="'..
   5a08c:	3d77c32d 3e40c69b be939faa be6f3592     -.w=..@>.....5o.
   5a09c:	be33507c 3ea91cb5 3cdcca81 3ddf0755     |P3....>...<U..=
   5a0ac:	3e48803f bcb818e6 bd556bf8 bd65244a     ?.H>.....kU.J$e.
   5a0bc:	bed0eef6 3ebb433f bef27530 be150de9     ....?C.>0u......
   5a0cc:	be62f6a8 be8d15f5 bcdafbef be6090c3     ..b...........`.
   5a0dc:	3b7e2c6b bc727b48 beb90663 3e9b3b01     k,~;H{r.c....;.>
   5a0ec:	be1b37df be156bfb bd5816eb be1ce9f8     .7...k....X.....
   5a0fc:	bd92cd5a bddac6a8 3e8babc1 be4800b7     Z..........>..H.
   5a10c:	3e854be0 be3883ca 3a977984 3d965067     .K.>..8..y.:gP.=
   5a11c:	be675a83 3e31cebc 3d249198 bdbe29d2     .Zg...1>..$=.)..
   5a12c:	be3c9c73 3cc17942 3e30d4ba bcdaee13     s.<.By.<..0>....
   5a13c:	be8d33d9 bd89d5ff 3e15a765 3dd95095     .3......e..>.P.=
   5a14c:	bd5c9821 bd7663bf 3b0d45f9 ba4f48fe     !.\..cv..E.;.HO.

0005a15c <cnnx6_b_tensor>:
	...
   5a170:	0005a174                                t...

0005a174 <cnnx6_biases>:
   5a174:	3d2d54da beb3c612 3b1b916b 3e49bd26     .T-=....k..;&.I>
   5a184:	3e373691 be83ba98 be984495 be9657f2     .67>.....D...W..
   5a194:	bc90afe1 be8ae32a 3d20a079 be3b1613     ....*...y. =..;.
   5a1a4:	3dc1504b 3ea42f25 3e7897a1 3d4cea4f     KP.=%/.>..x>O.L=
   5a1b4:	bcf17147 bd26fb31 bea80b6e bda74c78     Gq..1.&.n...xL..
   5a1c4:	3ee20753 3e1da976 3d9624fd be871bdd     S..>v..>.$.=....

0005a1d4 <cnnx6_k_tensor>:
	...
   5a1e8:	0005a1ec                                ....

0005a1ec <cnnx6_weights>:
   5a1ec:	3db1279f be1b83aa 3e4460c2 3e04024b     .'.=.....`D>K..>
   5a1fc:	beba039e be85ac5c bd1e18a5 bcf8263c     ....\.......<&..
   5a20c:	bd66ee61 be5b9723 be524297 be6528f0     a.f.#.[..BR..(e.
   5a21c:	3c011427 3db4c266 3e339f84 3e3238e5     '..<f..=..3>.82>
   5a22c:	beb1376e 3e0e7690 bdf9e9a2 bdfcef25     n7...v.>....%...
   5a23c:	bec109c1 bed32793 be0c6bb3 3eb181f5     .....'...k.....>
   5a24c:	bb18c965 3d957c17 be1bde1c bf0ef56d     e....|.=....m...
   5a25c:	bef752cc be0f4167 bccae75f bd9e081e     .R..gA.._.......
   5a26c:	be8fcb8f 3e18b00f 3d0e40bb bddc9eb0     .......>.@.=....
   5a27c:	bc07dba1 3e5ef7c6 bce0ac22 3e147693     ......^>"....v.>
   5a28c:	3c8b48f9 3c7f480a 3de01326 bce9bee6     .H.<.H.<&..=....
   5a29c:	be5bef88 3e084181 bd398e39 becb665b     ..[..A.>9.9.[f..
   5a2ac:	bea00cc3 bf0330ce be5d25a6 bcdd65e2     .....0...%]..e..
   5a2bc:	bde33f93 3df59a76 bd4084ee be159b55     .?..v..=..@.U...
   5a2cc:	bd725926 be8cd573 be62ff3b bd892dbc     &Yr.s...;.b..-..
   5a2dc:	3c41eee3 bdbf62cc ba9a4cf3 bdbd4553     ..A<.b...L..SE..
   5a2ec:	becbabad bd43b4f1 bb89b2b1 bd347944     ......C.....Dy4.
   5a2fc:	bd8a6769 be4523ff be97d537 bea73a33     ig...#E.7...3:..
   5a30c:	be5765a9 3cb4d9e7 bded8d06 3e592d4e     .eW....<....N-Y>
   5a31c:	3dc7cdba beb595a6 bea9ee81 3e1df9c4     ...=...........>
   5a32c:	be89a8fe bdbaf8d3 be95fca8 bc1c9d0f     ................
   5a33c:	be49e97b 3e6d07e9 be82c2c8 be07a1f5     {.I...m>........
   5a34c:	3d0d9f5b 3edd1b97 3b119818 3d420695     [..=...>...;..B=
   5a35c:	bec38143 bc20e28e be29b2a8 3d929541     C..... ...).A..=
   5a36c:	bdf12d4e 3d8c69a7 3b0393c9 be89fc39     N-...i.=...;9...
   5a37c:	3c8f0cbe be25350e 3c31267e be9bf657     ...<.5%.~&1<W...
   5a38c:	3e126751 bb83e4a7 be8a5f0d bbb4d7e4     Qg.>....._......
   5a39c:	3e031be9 3cb0faf5 3dee18b5 be5af26c     ...>...<...=l.Z.
   5a3ac:	3ced3750 bc5c87b6 bda43d0a bdd9129d     P7.<..\..=......
   5a3bc:	bebd3225 bee3ad85 be098db2 bdf25b4f     %2..........O[..
   5a3cc:	bd67ef0f be801c8a bcf40b8b bec13c40     ..g.........@<..
   5a3dc:	be4d5067 be24afc9 be33e989 be914973     gPM...$...3.sI..
   5a3ec:	bd47c434 be73c9a5 be02d59e 3daac1fc     4.G...s........=
   5a3fc:	bcad4375 beb08888 be9efbd4 3d872b83     uC...........+.=
   5a40c:	3e688ac9 3d9789b8 3dd49d7a be8ae01d     ..h>...=z..=....
   5a41c:	bbe12d17 be48566b bec294af 3ccdf17b     .-..kVH.....{..<
   5a42c:	3ea4e74b 3e7054f6 3b8c986a be4abb0f     K..>.Tp>j..;..J.
   5a43c:	3e9357e3 beb97e47 3e51111c bdb34bc1     .W.>G~....Q>.K..
   5a44c:	bdeaab1c 3d012613 bc0d0b36 bd143871     .....&.=6...q8..
   5a45c:	bd176d65 3b8bc1eb be4bc7e1 3d02ceb4     em.....;..K....=
   5a46c:	3dc51a37 3e858603 3dd7023d 3eb937b8     7..=...>=..=.7.>
   5a47c:	bd80bfe0 be0a86c6 3c8e28e8 3e1a0b3a     .........(.<:..>
   5a48c:	bdfe7b27 be1de75d be54b79f 3d9b7470     '{..].....T.pt.=
   5a49c:	be3457db 3e038785 bca7eb87 bdbf574f     .W4....>....OW..
   5a4ac:	be415a20 bd776c38 bea8b189 be2213b5      ZA.8lw.......".
   5a4bc:	be85c84c bc975a3f bcfe0041 bd220cba     L...?Z..A.....".
   5a4cc:	bee8f492 3d197f0d be05eb11 3e47d7a3     .......=......G>
   5a4dc:	bd01edff 3e2ad87b 3d973305 bea9bb14     ....{.*>.3.=....
   5a4ec:	3da1db3a 3e22a61e bf01f9c9 3dd4b9b1     :..=..">.......=
   5a4fc:	be77477b 3d0b585e be5aab65 3e1aa228     {Gw.^X.=e.Z.(..>
   5a50c:	bee1a55e bf09bef8 3e586293 3d38be25     ^........bX>%.8=
   5a51c:	bee2cd5d 3ba1fead bec731b6 bea1f17f     ]......;.1......
   5a52c:	3ccb7d62 3daa53f3 beb2e3b9 be5084f6     b}.<.S.=......P.
   5a53c:	3ee8a6ad be5c1fb6 bdc31752 be93782c     ...>..\.R...,x..
   5a54c:	beaf0c07 3dda8e60 bdcbf718 beeae022     ....`..=...."...
   5a55c:	bdc1d4d6 3d864be8 3e9075fb bdd5d4e1     .....K.=.u.>....
   5a56c:	bea5307a be028dd9 bdce09f9 3e9d269a     z0...........&.>
   5a57c:	bd7d7f82 3d858502 bea932e6 3a5a3d79     ..}....=.2..y=Z:
   5a58c:	3e213cf8 bdef199e 3e7a4be4 bd44731c     .<!>.....Kz>.sD.
   5a59c:	3da1f174 be97ceb6 be3a086e be119b97     t..=....n.:.....
   5a5ac:	bdba5618 be9763f8 3dd1c964 3deeeff8     .V...c..d..=...=
   5a5bc:	be3b7158 be8cba7c be95c8da 3e052589     Xq;.|........%.>
   5a5cc:	3c91b859 3ec20051 be4d565d bdf282c6     Y..<Q..>]VM.....
   5a5dc:	bd2439d4 beb5db94 bd026035 bd2cec9a     .9$.....5`....,.
   5a5ec:	bf0749cd bd4d06a9 3bbccb22 3e1776c5     .I....M."..;.v.>
   5a5fc:	bdaa7b38 3d09079b bb8f0699 beabd5de     8{.....=........
   5a60c:	be733887 3e433fad 3d3d5261 bd0e9092     .8s..?C>aR==....
   5a61c:	3e2c96e2 bdc43db3 3c1d5fd8 3dcf40e0     ..,>.=..._.<.@.=
   5a62c:	3cb2a976 be56aa91 bdff3bfb be7c34ea     v..<..V..;...4|.
   5a63c:	beb08947 bbe74dad 3b415449 bb8083b3     G....M..ITA;....
   5a64c:	bec5e5d4 be370a7d bd879ecf be4c1563     ....}.7.....c.L.
   5a65c:	be6b8b12 be251e91 3e14dc19 be76433c     ..k...%....><Cv.
   5a66c:	be9de29c 3d52a483 39493e22 bec8eb8b     ......R=">I9....
   5a67c:	3e105403 3e4acfcc 3da8ce9e 3e8d9988     .T.>..J>...=...>
   5a68c:	3e4978c0 3d8d88ac bf04e9b2 3cea3bc9     .xI>...=.....;.<
   5a69c:	be1feb10 be7fc7a0 bda22f25 3d46767f     ........%/...vF=
   5a6ac:	3e747b73 bec1c915 3cb0965b 3e48e0dc     s{t>....[..<..H>
   5a6bc:	3d2515b1 3e611f8d 3dfd03ad bcdf4fc1     ..%=..a>...=.O..
   5a6cc:	be966402 be47aa90 bd89b4d8 3a721257     .d....G.....W.r:
   5a6dc:	3d712db8 3e754414 bdb4d43b 3eacc7b3     .-q=.Du>;......>
   5a6ec:	bd325cdc 3d540f24 bdd7e910 bdf745a2     .\2.$.T=.....E..
   5a6fc:	bd020836 3d04284e 3e3d6fe4 bd499997     6...N(.=.o=>..I.
   5a70c:	be9c7901 be31352b becb74d4 3e84976c     .y..+51..t..l..>
   5a71c:	be3cf2ad 3d3ef102 beb7dbad be78c5a7     ..<...>=......x.
   5a72c:	be5d2bbc 3e61d1c4 3dc5e405 3d754e4e     .+]...a>...=NNu=
   5a73c:	3e645b43 bed5573c 3e05c993 be102869     C[d><W.....>i(..
   5a74c:	be04d0b6 3c42aee7 bdfbe88e 3c287e44     ......B<....D~(<
   5a75c:	bea74471 3cd2666f 3e36f744 bf1e017f     qD..of.<D.6>....
   5a76c:	3de38e49 3e28bb89 3cab6635 bd7f8f6f     I..=..(>5f.<o...
   5a77c:	be897fa0 3e0ee65f 3b7b6b1b bd057bf0     ...._..>.k{;.{..
   5a78c:	be0bfdfd 3e83bb27 be985e20 3d832cf9     ....'..> ^...,.=
   5a79c:	3da1c09e 3dd76620 38c17bb6 be739648     ...= f.=.{.8H.s.
   5a7ac:	3de11e4e 3ea44010 bd54ca5f 3e9b0a4b     N..=.@.>_.T.K..>
   5a7bc:	bdf1445b bc3d5a7e bcb893c0 3e8eeae0     [D..~Z=........>
   5a7cc:	3dd77c8a be2bd327 3e0d14a7 3d954237     .|.='.+....>7B.=
   5a7dc:	beb3d609 3e6f5568 bd019eb1 3e21e07a     ....hUo>....z.!>
   5a7ec:	bc6b5a01 3d515763 3d1f8973 be2c9dad     .Zk.cWQ=s..=..,.
   5a7fc:	bd901201 be182dc9 3e55d3fc be389fab     .....-....U>..8.
   5a80c:	be35439f be32a9c3 bbf47a3b 3d29ce9b     .C5...2.;z....)=
   5a81c:	3d9cd24b bdadb21e 3d8f7556 bca864a8     K..=....Vu.=.d..
   5a82c:	be89ab15 bdc660ab 3e380bd8 be2904f9     .....`....8>..).
   5a83c:	bde39f06 3bd2ea5e 3dc4b2e0 bd8a079b     ....^..;...=....
   5a84c:	3d84b311 3e2e7911 bdf8ba7c be50fd31     ...=.y.>|...1.P.
   5a85c:	be5988c7 3bbbf173 be9e17f3 3e0a187d     ..Y.s..;....}..>
   5a86c:	3ec62cc0 bd73f94f bdb391cb be095b0d     .,.>O.s......[..
   5a87c:	3dc0a1c8 bf00fd5b 3e86cd6e 3eb950bd     ...=[...n..>.P.>
   5a88c:	be1ae058 bd9c6f3a 3e1b96d1 3cc531de     X...:o.....>.1.<
   5a89c:	3e0b148a be05a67a 3d9569b5 3e7c6bdb     ...>z....i.=.k|>
   5a8ac:	bdc8792c 3d8c45e7 3dac76c6 bc8b8ae8     ,y...E.=.v.=....
   5a8bc:	be9d94bf beb677ad 3e402492 bebb691d     .....w...$@>.i..
   5a8cc:	bd7c93ed be86dbc4 be2c4a08 bdce0af8     ..|......J,.....
   5a8dc:	3d661b4a 3eb80e96 3c1f52c1 3d5ebfcc     J.f=...>.R.<..^=
   5a8ec:	3c4d3964 bd81fa70 bd94c6a5 be0c3827     d9M<p.......'8..
   5a8fc:	bde20fce beb2e643 be66b8f0 be0ad513     ....C.....f.....
   5a90c:	bd0b138a 3e175c25 bdaef94d bc998440     ....%\.>M...@...
   5a91c:	3e182621 3d85af5c 3e4019c5 be4bee73     !&.>\..=..@>s.K.
   5a92c:	3df87559 3e0ceef7 be9dc8ed 3c2bfd09     Yu.=...>......+<
   5a93c:	bd7f9318 3e802666 be1468f8 bd3a3ed0     ....f&.>.h...>:.
   5a94c:	bd58714b 3e3eeaaa be60e205 be56a66d     KqX...>>..`.m.V.
   5a95c:	beff3ba5 3dc4eb97 bdaca448 bd28e4ce     .;.....=H.....(.
   5a96c:	bdd6473c bebb5237 bdce7bf5 be5d2f9f     <G..7R...{.../].
   5a97c:	bedcfe78 3d8d889c bcd9e48d 3c4276fe     x......=.....vB<
   5a98c:	3e6679b9 be9a1ebe be156e24 be4793ba     .yf>....$n....G.
   5a99c:	bdd816c2 be0fcb61 bb981098 3e38404b     ....a.......K@8>
   5a9ac:	beb5744e bdd13253 bebaebeb 3e0beb9a     Nt..S2.........>
   5a9bc:	3d7b2fb9 3e30ce95 bdfbf9d9 beb98d8f     ./{=..0>........
   5a9cc:	be49bdb1 bda943e8 bedb98d6 bea53a6f     ..I..C......o:..
   5a9dc:	bcd9a00a 3e05a144 3d4bd2e5 be063d3f     ....D..>..K=?=..
   5a9ec:	be948cb8 be147a94 3dd1b274 be79031b     .....z..t..=..y.
   5a9fc:	3c6165e1 bde2124b bebe149c bdcc9962     .ea<K.......b...
   5aa0c:	be3ad247 be6d364e bd6bb791 bdb012e7     G.:.N6m...k.....
   5aa1c:	3d5b6ca0 3da3d38a bf12e353 be7f78ed     .l[=...=S....x..
   5aa2c:	be49f6ea 3d537838 bc1dadc6 be29f1ed     ..I.8xS=......).
   5aa3c:	be6985e4 3dbfa333 bd9285bb bd94e19b     ..i.3..=........
   5aa4c:	be7ec56d be887e50 bec3e1f2 bef0ee68     m.~.P~......h...
   5aa5c:	3e56486d bda166e8 bd62cd5d be1ddf5b     mHV>.f..].b.[...
   5aa6c:	be08d533 3bae2fa9 be24f8e6 3e50bf0b     3..../.;..$...P>
   5aa7c:	bec2a27c be709811 be830174 bd96f1f2     |.....p.t.......
   5aa8c:	bda44789 bc8ff982 be99ce10 3cf35598     .G...........U.<
   5aa9c:	3d53af5d be4eb9ab be805a5f 3e054203     ].S=..N._Z...B.>
   5aaac:	3dd2d6db bdf7ead6 be5430e2 bebafeed     ...=.....0T.....
   5aabc:	3df73d6a bd8aec78 3d5efa31 3e85d029     j=.=x...1.^=)..>
   5aacc:	bf232702 be9efeaf bdf6f217 be0826fc     .'#..........&..
   5aadc:	be02b76e 3dbd2ba5 be794f3d be263730     n....+.==Oy.07&.
   5aaec:	3e0fc4d2 be979213 be33493c bd299191     ...>....<I3...).
   5aafc:	be7ed964 be3d8304 3e1403e5 be152806     d.~...=....>.(..
   5ab0c:	3d7f051e 3dd64855 beabd4e5 bdee6ec6     ...=UH.=.....n..
   5ab1c:	3dd207ea be05047f be935e16 3e38fbf3     ...=.....^....8>
   5ab2c:	bd8ac523 3e975d6a 3e974109 bd57ae0a     #...j].>.A.>..W.
   5ab3c:	bd8455ab bd0e52ea bcc6b7c0 bd064493     .U...R.......D..
   5ab4c:	3ea210f7 3eb2ebf2 be3d53d3 bf12b498     ...>...>.S=.....
   5ab5c:	bec14e5f bf173f7f 3b8d42f4 3eb1cf84     _N...?...B.;...>
   5ab6c:	3e3b3dc2 3e238a69 3da1fe0c 3daca6b9     .=;>i.#>...=...=
   5ab7c:	bd3aa5e1 3e88562f be8930b6 3d796cc3     ..:./V.>.0...ly=
   5ab8c:	be0a5628 bdb2a28f bc997c23 3dcac736     (V......#|..6..=
   5ab9c:	be854c46 bd82d895 be1adb6b bea93224     FL......k...$2..
   5abac:	bea672c3 be1ced9d 3e573949 3daac53c     .r......I9W><..=
   5abbc:	be7f5ee9 3df76aca be03bd0f 3de1b49f     .^...j.=.......=
   5abcc:	bdee07e2 be0f9288 bdefa2b9 bc470e92     ..............G.
   5abdc:	bda18b63 bdb56bb6 3d396c07 bd7f6449     c....k...l9=Id..
   5abec:	beb74c45 3d616949 bd379e5f bc5bc0e6     EL..Iia=_.7...[.
   5abfc:	be05f4df bce9724f be1ea8e2 3e65152b     ....Or......+.e>
   5ac0c:	bd269c29 bd908dc7 be3df50e 3d4402c7     ).&.......=...D=
   5ac1c:	3dc7ee58 be4e99f0 3d32aa5c be6e07e0     X..=..N.\.2=..n.
   5ac2c:	bec86960 3dd5858f bdb33ea2 bc9b0bba     `i.....=.>......
   5ac3c:	bdeb4eb3 bc9218f2 bdc28f8c be3873fe     .N...........s8.
   5ac4c:	be24b616 3e4088d5 be833e1c be55e062     ..$...@>.>..b.U.
   5ac5c:	bef12af3 be16a253 bb806be1 3e595ecc     .*..S....k...^Y>
   5ac6c:	be03f78b be41ef77 bdf54551 3e03c267     ....w.A.QE..g..>
   5ac7c:	bc23f817 bdcec0cc 3d8bf7a7 be05f180     ..#........=....
   5ac8c:	be0959dd 3dba5911 bec13f33 3c08a886     .Y...Y.=3?.....<
   5ac9c:	3e8529b5 be88cebd 3e5976a0 bdaccb08     .).>.....vY>....
   5acac:	bead0b66 3d4e8f60 bcdfec04 bf0fea94     f...`.N=........
   5acbc:	bec5fc13 be592f87 3d8f2acc bb70d845     ...../Y..*.=E.p.
   5accc:	3e100ebd bc45aef6 bdb5ee01 bf098efd     ...>..E.........
   5acdc:	be9748bf 3e3fef35 3e8da44d bdcb34ca     .H..5.?>M..>.4..
   5acec:	3d37acb2 be1c0d92 be06e31c 3eb483d6     ..7=...........>
   5acfc:	3d74c272 be81d2da bec0ea9b bdebff4d     r.t=........M...
   5ad0c:	3bf2befa 3d160753 be2e4d86 3d666649     ...;S..=.M..Iff=
   5ad1c:	be731b6a 3b6ced7f be95c34f be8462fb     j.s...l;O....b..
   5ad2c:	3c9a074d 3d2d04f1 3dfcd02a bdf66c79     M..<..-=*..=yl..
   5ad3c:	3ebb1ef1 bdbf514f bd89f80c be790841     ...>OQ......A.y.
   5ad4c:	bdbeb42b 3e9940b6 3c3e9592 bba0b08f     +....@.>..><....
   5ad5c:	3e2f8ec5 be03aacb be4bf5fd bc6912de     ../>......K...i.
   5ad6c:	3e1b6430 3cf4dfd6 bdc2c1c8 bd0a39ed     0d.>...<.....9..
   5ad7c:	3de63867 3cc1902e 3e8204de be122dd5     g8.=...<...>.-..
   5ad8c:	3d95f4fc bce5cd0e 3e3fba08 3e74d5ce     ...=......?>..t>
   5ad9c:	3e858c75 bcc3aefc 3de363dd bc7352d3     u..>.....c.=.Rs.
   5adac:	3e1a28d0 bde59887 bea3f4a4 be6bf8ab     .(.>..........k.
   5adbc:	3d334e81 ba78934f be40a55f 3dbd963a     .N3=O.x._.@.:..=
   5adcc:	bee35d7b bcdd079d be2a7e4f 3d416647     {]......O~*.GfA=
   5addc:	3ddd0596 bd8457ca be4b1607 bcf24fe4     ...=.W....K..O..
   5adec:	bd017246 be017cf5 be769355 3d0e30c0     Fr...|..U.v..0.=
   5adfc:	be0614eb be9ca6a8 be21f7da 3cd78cca     ..........!....<
   5ae0c:	bc1c1e64 3c9b648a 3de23005 3d40ef13     d....d.<.0.=..@=
   5ae1c:	be83edbf be080ddb bdc0489a bde40f8a     .........H......
   5ae2c:	be111c3a 3e246801 bd785488 be433f65     :....h$>.Tx.e?C.
   5ae3c:	bdea7609 be6a9326 bdcc494a bee15280     .v..&.j.JI...R..
   5ae4c:	3dd886be 3d805023 be8b5bfd be098c08     ...=#P.=.[......
   5ae5c:	be3c0f5b 3e28dea3 3e8b9372 3dcdb802     [.<...(>r..>...=
   5ae6c:	be2520c3 3ddaf563 3e1e871f bc5ad853     . %.c..=...>S.Z.
   5ae7c:	bd72c55a bcbe8612 be748e02 be5beb6f     Z.r.......t.o.[.
   5ae8c:	3d650151 be6e2a76 bdf2ca2b bd048838     Q.e=v*n.+...8...
   5ae9c:	bdee3236 bd2b2b11 3de88c82 be4650f9     62...++....=.PF.
   5aeac:	3e298901 beca9de8 3d02d9d4 3e2b6ee7     ..)>.......=.n+>
   5aebc:	be02983d bd465eff be8b69d9 3e050bed     =....^F..i.....>
   5aecc:	3e1dc7fc bca43d41 be881071 be3aae32     ...>A=..q...2.:.
   5aedc:	bd3fe7b7 befdaf17 be04cf00 3dd54149     ..?.........IA.=
   5aeec:	be7b85d1 be6a2fa2 bc0f9386 3da9b70f     ..{../j........=
   5aefc:	3d39dedc 3cead353 bee3ce2a be91c03d     ..9=S..<*...=...
   5af0c:	be13a424 3d895c22 3c8b6e4e 3ddecbc8     $..."\.=Nn.<...=
   5af1c:	3db3fdef be4a8652 bd46c8bf bd960646     ...=R.J...F.F...
   5af2c:	bd915ff6 be0b9055 bde76c5e be3b107e     ._..U...^l..~.;.
   5af3c:	3e243c94 3e0e64ab 3d641589 bda46df5     .<$>.d.>..d=.m..
   5af4c:	becf0690 be38be0e 3d1c3ee0 3e075a5d     ......8..>.=]Z.>
   5af5c:	be668386 be8abb14 3e62a3be bd4592f4     ..f.......b>..E.
   5af6c:	be83c957 3e04e2fb becefd93 3d5d4c84     W......>.....L]=
   5af7c:	3cfe553b bc4c3a36 3e03f526 be1d47b1     ;U.<6:L.&..>.G..
   5af8c:	3cf6e7e9 3e413f15 be9065c7 be1603ae     ...<.?A>.e......
   5af9c:	bdbaab70 3d9410a7 bd604430 be78ae16     p......=0D`...x.
   5afac:	be84493e be085cdd be8e217e 3d15e708     >I...\..~!.....=
   5afbc:	bdb30efb 3cf4638a 3e961993 be05e13d     .....c.<...>=...
   5afcc:	be47a72e 3e0460b3 3e14f8ce 3e41b97d     ..G..`.>...>}.A>
   5afdc:	bdc5e347 3d0668b8 bdcb52b2 3b5701da     G....h.=.R....W;
   5afec:	3d43ea6b 3de9b3c7 be6a50d7 be015cac     k.C=...=.Pj..\..
   5affc:	be807890 be90a23b 3db9370e bcc0778a     .x..;....7.=.w..
   5b00c:	bf312cb1 be06b30d be25445b bd91b6a0     .,1.....[D%.....
   5b01c:	bdbc9a2a bd347fa9 3da50967 be3dc713     *.....4.g..=..=.
   5b02c:	bd4a3995 3dc1d77a 3e75e26b bdef5737     .9J.z..=k.u>7W..
   5b03c:	bd3c5a29 bebb7436 3df0fe50 bcb48e7d     )Z<.6t..P..=}...
   5b04c:	bee89a9b bc5ca3d0 bb98f255 bdf656e4     ......\.U....V..
   5b05c:	be257c11 bd22c15b 3c305d76 bedbd199     .|%.[.".v]0<....
   5b06c:	be8b7fd2 3d859583 bddcb8cb be824beb     .......=.....K..
   5b07c:	bdd600e9 3e093db5 bdb4012f be96b109     .....=.>/.......
   5b08c:	bdffccc0 3ed26c91 beb8f4e5 be8c0669     .....l.>....i...
   5b09c:	bdaaf765 3e8a6e2e bdb826a7 be3409f9     e....n.>.&....4.
   5b0ac:	3ee9d518 be390b19 bcd2ed22 be38da8a     ...>..9.".....8.
   5b0bc:	bdc25f05 bd25f5e6 be98ea1f be9c98c8     ._....%.........
   5b0cc:	3de61e20 3df42cfa 3ce07aef be5ac713      ..=.,.=.z.<..Z.
   5b0dc:	bd9d307d 3e693904 3e35b2eb be18e8e5     }0...9i>..5>....
   5b0ec:	3dcfc4e3 bdaea6db bdc40f4c bedcaf65     ...=....L...e...
   5b0fc:	3e0cbf55 bd2a65f2 3db662cf be429bcf     U..>.e*..b.=..B.
   5b10c:	bdd3320d be46552b 3e647a40 3e28afd3     .2..+UF.@zd>..(>
   5b11c:	be6b358f 3df803c1 be24f34f 3d1366fb     .5k....=O.$..f.=
   5b12c:	3da12b59 bc27936d 3c767e16 bdd1250e     Y+.=m.'..~v<.%..
   5b13c:	bd9bc6d6 3d4b94d9 3cb2341a 3c8962d0     ......K=.4.<.b.<
   5b14c:	3e46bf52 bda6602b 3e0372cc be291289     R.F>+`...r.>..).
   5b15c:	be0dfeca bcf1bfe1 bd40dd22 3ef58ec5     ........".@....>
   5b16c:	3d5d9d6f bc156ac1 baafd9a2 3ebf03fe     o.]=.j.........>
   5b17c:	bd7d46c8 bead709e be3ffb23 bd285183     .F}..p..#.?..Q(.
   5b18c:	bdff4df4 be645a55 3ecf9e88 3e832852     .M..UZd....>R(.>
   5b19c:	bda2b210 3e1baffb 3ed53ddb 3d39beee     .......>.=.>..9=
   5b1ac:	3e073f0d 3df108c3 bde90fa8 be0709a0     .?.>...=........
   5b1bc:	beceb25e be73c929 bdb8eee3 be50ab97     ^...).s.......P.
   5b1cc:	bd19f28a bb965ee7 bd97d32e bd928a79     .....^......y...
   5b1dc:	be52abff bed327c1 3cbeb954 3dec170d     ..R..'..T..<...=
   5b1ec:	3d0686e5 be40719e bc487e1e be0ad513     ...=.q@..~H.....
   5b1fc:	bce7a342 be961afe be20fadc 3e855187     B......... ..Q.>
   5b20c:	3df65e98 3e906437 bead525e bef8fea4     .^.=7d.>^R......
   5b21c:	3e6afb7b bd228f74 3e51b3fa 3e0ad9e2     {.j>t."...Q>...>
   5b22c:	3d09b9a5 beb2847b bdcee466 bece40e8     ...={...f....@..
   5b23c:	be292a06 3e89a526 be4a989d bd919abd     .*).&..>..J.....
   5b24c:	b93a2759 3e3bf0ae 3e1bb0a7 be2428ff     Y':...;>...>.($.
   5b25c:	be6a264f bddc56ef 3e1d9116 be47f56c     O&j..V.....>l.G.
   5b26c:	3d137423 be9fb981 be20a96b 3d978e89     #t.=....k. ....=
   5b27c:	3e1449a1 bdafa097 bdc6ee6b 3ba5d4d1     .I.>....k......;
   5b28c:	3df0d616 3d67b38b 3e43a183 3dd44525     ...=..g=..C>%E.=
   5b29c:	bda96a5a bead545c bdde538b 3e2b4d96     Zj..\T...S...M+>
   5b2ac:	bdc011c9 bdaa1a84 be3c5d68 bd342122     ........h]<."!4.
   5b2bc:	3e1f60c9 bdada668 bd6a72c0 be463c7f     .`.>h....rj..<F.
   5b2cc:	bea99ad6 be4971eb be38ce04 be30d708     .....qI...8...0.
   5b2dc:	3c7f4981 bd863a09 bda29f69 bbcb64ee     .I.<.:..i....d..
   5b2ec:	be3c04be bd8e8065 3d03bf37 3bb3e74e     ..<.e...7..=N..;
   5b2fc:	3d1653d2 be0f3523 bf0761fc bd691568     .S.=#5...a..h.i.
   5b30c:	3d5c2786 bcaedd79 be86fb90 be3927ea     .'\=y........'9.
   5b31c:	be141bca 3d6a4813 be8629c0 be332dd3     .....Hj=.)...-3.
   5b32c:	be330b95 3e88ad9a 3debff60 be5bba01     ..3....>`..=..[.
   5b33c:	be2a30bb be0df305 bd881a29 bdee37dd     .0*.....)....7..
   5b34c:	bdb4e987 bd8c03be bccb1a20 3ddf8fe6     ........ ......=
   5b35c:	3dffbdc8 be3a8c1e 3d2d6990 3da24675     ...=..:..i-=uF.=
   5b36c:	be3b0939 3db58459 bd8f3a19 be9ad82d     9.;.Y..=.:..-...
   5b37c:	bea00916 be975240 be90dc12 3e11a0af     ....@R.........>
   5b38c:	3d060da6 be6bd04c be7192a2 3daa2db3     ...=L.k...q..-.=
   5b39c:	be0add7f bdec30b0 3e58d26c bddfbbd4     .....0..l.X>....
   5b3ac:	bda7f2b7 be59832d becb7ff9 3ce8da39     ....-.Y.....9..<
   5b3bc:	bd263711 be33e5b1 bdcedf12 bd00e10e     .7&...3.........
   5b3cc:	3d3a3bc9 be825910 bda86130 be2c9f55     .;:=.Y..0a..U.,.
   5b3dc:	3cc046f2 3c34d844 be0138d3 bcdab00f     .F.<D.4<.8......
   5b3ec:	3dd5e184 be1a2df8 be896f25 beca09e8     ...=.-..%o......
   5b3fc:	bb2b32c9 be3a5ab2 3e9de143 3dcf3664     .2+..Z:.C..>d6.=
   5b40c:	bb74dde3 bc3f9c0d bcc602df bde33741     ..t...?.....A7..
   5b41c:	3dbbf1ea be46e044 becc23d4 3d1b3f4c     ...=D.F..#..L?.=
   5b42c:	bdc27e2d be6ffff8 becd368c 3de54775     -~....o..6..uG.=
   5b43c:	be756423 be42b27e 3d454ca3 3c173f6c     #du.~.B..LE=l?.<
   5b44c:	bc934a35 bd922f7a be0af43e be0632d5     5J..z/..>....2..
   5b45c:	bdd43f52 3da68c70 beed07d8 3cdd0b54     R?..p..=....T..<
   5b46c:	3ea671b1 beb39507 3d5b434a bed24050     .q.>....JC[=P@..
   5b47c:	bd24d8bd bded654b be96f8dc 3e7a9611     ..$.Ke........z>
   5b48c:	bdc2f7f9 3ce0d89d beb915f4 bda4f903     .......<........
   5b49c:	be3096a7 bea7ab7e 3de59f71 be2bf4b5     ..0.~...q..=..+.
   5b4ac:	be86b888 3dd74127 be16cb8e be8454d0     ....'A.=.....T..
   5b4bc:	be064b40 3e5c5ce6 3d7482c4 3d8acc3e     @K...\\>..t=>..=
   5b4cc:	3cdce990 3d1ce028 3d927d5c 3da13e3b     ...<(..=\}.=;>.=
   5b4dc:	bda12916 3c1b6e5b be1a91a3 3d80ce10     .)..[n.<.......=
   5b4ec:	3e8a9a90 be32b5bd be8b4b2a be59238e     ...>..2.*K...#Y.
   5b4fc:	3e8ac599 3e4ca116 be7c3045 be6e1e0b     ...>..L>E0|...n.
   5b50c:	3ddd0dd0 bd6db1e2 bebc1183 bda52e18     ...=..m.........
   5b51c:	bdc4ff89 3d52b9b6 3ce2adfa bea6b07b     ......R=...<{...
   5b52c:	bedad0b5 bdb05e8b 3dbf5ad5 3dd8373c     .....^...Z.=<7.=
   5b53c:	bd79a283 be302869 bd9696f6 3e623b34     ..y.i(0.....4;b>
   5b54c:	3d788fb9 bdeb644a bdea5b9d bd6c3beb     ..x=Jd...[...;l.
   5b55c:	bdd25b0b bedc0894 3e456e4e 3e506f8a     .[......NnE>.oP>
   5b56c:	3e2140df bbb737d0 bdb338ec bec60972     .@!>.7...8..r...
   5b57c:	bdcad3d4 bc90754e bb8d9c0a be78f4b1     ....Nu........x.
   5b58c:	be103b14 bde3e1a3 be3c4c58 3ce98c4b     .;......XL<.K..<
   5b59c:	bd69724a be8f2909 3da59359 3e13015c     Jri..)..Y..=\..>
   5b5ac:	3e37aabd 3ce0503d 3e1d9e7c be223155     ..7>=P.<|..>U1".
   5b5bc:	be4c32f1 be13d9c8 3e43d0dc baebcb15     .2L.......C>....
   5b5cc:	bd811a38 be3fdcf5 becb5bf5 be0e47b9     8.....?..[...G..
   5b5dc:	be836d57 3e1e01f7 bc88efee 3e26f9af     Wm.....>......&>
   5b5ec:	beaeed0e 3c6c405b bbe8492a be9316a6     ....[@l<*I......
   5b5fc:	3e621601 3e254073 3e3b54fe beaa73e3     ..b>s@%>.T;>.s..
   5b60c:	bd6f0849 3d77cd44 3e7e2818 be37b778     I.o.D.w=.(~>x.7.
   5b61c:	bd355e5e bdac85d6 be4acba7 bec57952     ^^5.......J.Ry..
   5b62c:	bd2a618b 3d27ea4f be5e376f 3d608fa2     .a*.O.'=o7^...`=
   5b63c:	bbf0e8cb 3e20fd66 bd8a03c3 3ea28b6e     ....f. >....n..>
   5b64c:	3edb1c30 be1b9627 be09bc75 be789fee     0..>'...u.....x.
   5b65c:	3ea3de00 bef71f5d 3e8520e6 3de6018e     ...>].... .>...=
   5b66c:	bd157e57 bd783dd4 3e0e9dbe 3e13cddd     W~...=x....>...>
   5b67c:	3dccf5ba beb0c0a2 3d5730c9 be838e73     ...=.....0W=s...
   5b68c:	3ec5a0dd bdb41644 3e0659c3 3ddc4bfa     ...>D....Y.>.K.=
   5b69c:	3d458454 3e89bd45 3c169f94 3d8add21     T.E=E..>...<!..=
   5b6ac:	3e4f57cb bd19deb6 3da2ebda be7b8f53     .WO>.......=S.{.
   5b6bc:	beafc6ca bd484294 be51613e 3dc334cd     .....BH.>aQ..4.=
   5b6cc:	be3a8b24 bc7d9c99 be96ee33 3dae2464     $.:...}.3...d$.=
   5b6dc:	3d2f7648 be3c5705 3e82c74f bd9bd5bf     Hv/=.W<.O..>....
   5b6ec:	3e05ca8f bda51380 bd08d1ee bc754e6b     ...>........kNu.
   5b6fc:	3d132150 be507ffa bd0b1f43 bd9851ae     P!.=..P.C....Q..
   5b70c:	3d854b8f 3e440745 be2739cf be2101d6     .K.=E.D>.9'...!.
   5b71c:	3dc32996 3c889fbc 3d8e9ebf bd9c2165     .).=...<...=e!..
   5b72c:	bf027f8d bcd2e2ab bd7b79a6 bd11a405     .........y{.....
   5b73c:	3e371c20 be870286 bd7166cb 3e6d907e      .7>.....fq.~.m>
   5b74c:	beff9c3d 3d41df00 bde5fd07 3c45585a     =.....A=....ZXE<
   5b75c:	3dec3e0b bdea1f38 bd991f01 3dd76381     .>.=8........c.=
   5b76c:	be89c702 bc76da9d be96e649 bdc97f1e     ......v.I.......
   5b77c:	bdbf9c31 be309949 be0eb54a be34ee52     1...I.0.J...R.4.
   5b78c:	be8d87f2 bdbd10d0 be7cd1f2 bd8d9e71     ..........|.q...
   5b79c:	be591c17 bc7ee25e be405c93 3cdd75fd     ..Y.^.~..\@..u.<
   5b7ac:	3d1ca5ab 3d9ee0c1 bdbfde59 3d6f1983     ...=...=Y.....o=
   5b7bc:	be89a3d4 bdbc6240 be75a7f3 3d68d2c2     ....@b....u...h=
   5b7cc:	3bdc6e55 bca11234 3c6f6447 beff3d6f     Un.;4...Gdo<o=..
   5b7dc:	be82912c 3c5d6dcf be9671d5 befe07dc     ,....m]<.q......
   5b7ec:	bd49b18d 3dfccd02 bdda6859 3ce3da55     ..I....=Yh..U..<
   5b7fc:	3db95c04 bc8d03b9 bb61546e 3e170370     .\.=....nTa.p..>
   5b80c:	3d9b91a8 be8bd7b6 be6c1b64 be188ed0     ...=....d.l.....
   5b81c:	bedb9102 bbcbccdd 3e6b7118 bd852a32     .........qk>2*..
   5b82c:	3e035731 3e3ecf37 bee1442a bd9ef201     1W.>7.>>*D......
   5b83c:	3c9ca4f2 baee17a0 3e21b52d bdc0a1bb     ...<....-.!>....
   5b84c:	be3e53f1 3d7ff668 3deae03b bdfbbe9d     .S>.h..=;..=....
   5b85c:	3cbf85bc bd82dfb6 bf0a8e9c be7fbd53     ...<........S...
   5b86c:	bea0cec8 3e1ce437 bdbe0822 3e4094e5     ....7..>".....@>
   5b87c:	bdcba385 bebdff24 3d85af02 bec11e56     ....$......=V...
   5b88c:	bf1d7360 3d26b0b4 3e923d8c 3d82ea4f     `s....&=.=.>O..=
   5b89c:	be3719c2 bde8f7bd 3dc19faa bd237439     ..7........=9t#.
   5b8ac:	bb12585d 3a2a5554 bcaaa1ea bdb6a165     ]X..TU*:....e...
   5b8bc:	bdf2aa29 be76488c bd8aa047 bdf92ce1     )....Hv.G....,..
   5b8cc:	3e003177 3e353748 3c9b75c8 bd8e1135     w1.>H75>.u.<5...
   5b8dc:	3bd41414 bdb8ca88 3dea4eb3 be21dac3     ...;.....N.=..!.
   5b8ec:	bece6755 bec90a75 3deda3bd 3d036055     Ug..u......=U`.=
   5b8fc:	bea3bc4e 3db80430 3d2fda6e 3e716ff2     N...0..=n./=.oq>
   5b90c:	be4b1ce2 bdbd9ffe be027f14 bd705bad     ..K..........[p.
   5b91c:	bde4869a 3eb3d63a 3de2b47c 3e958c2b     ....:..>|..=+..>
   5b92c:	bd43f0f9 bcd2f342 bd844822 bf04d302     ..C.B..."H......
   5b93c:	3a53bb29 3e19c923 be1aef70 3e16c737     ).S:#..>p...7..>
   5b94c:	bf020534 3e19f625 3d8774fe 3eb9d308     4...%..>.t.=...>
   5b95c:	3cf3e57b 3d84d896 bddfeeb4 3e84563e     {..<...=....>V.>
   5b96c:	bdf5ee87 3e275dfe 3d6486e0 bec49615     .....]'>..d=....
   5b97c:	3df13195 be83d30e bee5818b bdc05a00     .1.=.........Z..
   5b98c:	bdc9e7d4 bcc8264a 3ea276bb 3f1d44af     ....J&...v.>.D.?
   5b99c:	bd888e9a 3d53b217 3d42f215 bd565f65     ......S=..B=e_V.
   5b9ac:	3dd64e65 bea1a8f6 bccd8376 bdbde17c     eN.=....v...|...
   5b9bc:	bddb785b 3c0302ea 3e842520 be011858     [x.....< %.>X...
   5b9cc:	bf03c302 3eb7448f be3dd43f 3c9d5ee6     .....D.>?.=..^.<
   5b9dc:	bebfd551 bc5e10cd 3c64a0be be141ac3     Q.....^...d<....
   5b9ec:	be11b5c4 bc95636f bec29b36 bba91929     ....oc..6...)...
   5b9fc:	bdb3e067 3c9e1df8 3e30d8a6 bd84ab29     g......<..0>)...
   5ba0c:	3d03dc30 bde4a1dc be58bb95 bd21b5ca     0..=......X...!.
   5ba1c:	3d823867 beaf65ff be9440a9 bd8a8bc2     g8.=.e...@......
   5ba2c:	3d9d828d be8596b9 be7aeceb bdf54048     ...=......z.H@..
   5ba3c:	be16084f be4b8d31 bdecbb49 3d3f913d     O...1.K.I...=.?=
   5ba4c:	bdc93b5f 3dfc9f37 3e617386 bdfad1d6     _;..7..=.sa>....
   5ba5c:	be96ecb1 3d69ae80 be508836 3ed2e56d     ......i=6.P.m..>
   5ba6c:	3e0b203f 3de96a4e 3e1e3c8b bea36780     ? .>Nj.=.<.>.g..
   5ba7c:	3c9fc57d be457531 3e3d4615 bca00234     }..<1uE..F=>4...
   5ba8c:	3dd426f6 3dacb208 3e2dc33f 3eabcf7d     .&.=...=?.->}..>
   5ba9c:	3db21009 3ed9c879 3d8b70cf 3dd0cff8     ...=y..>.p.=...=
   5baac:	3de2b2bf bcfce7f8 be9180c2 bded638e     ...=.........c..
   5babc:	bd5b0b7c be2e60ca 3d3e91a6 bbb30cdd     |.[..`....>=....
   5bacc:	bd0b0cf9 bebf05ad bcab90f3 bdc6bdaa     ................
   5badc:	3e1023b8 bd917ef7 bed9a240 3cdff858     .#.>.~..@...X..<
   5baec:	3da9f48c bd8fcd8a be4665ee be10ffec     ...=.....eF.....
   5bafc:	be808036 3c448fc7 bd0d3f76 3dc6123e     6.....D<v?..>..=
   5bb0c:	bdf30b01 bdf9bac7 bee5fc3f bf07b4f3     ........?.......
   5bb1c:	be19d429 bc5d9aa5 3eb06325 3ec5f653     ).....].%c.>S..>
   5bb2c:	bdce91e8 bdc5ceae bd64c1e4 be97e150     ..........d.P...
   5bb3c:	bd9178a7 3c04dd5f bf223182 be4daebb     .x.._..<.1"...M.
   5bb4c:	bd83fec3 be4010e4 bde8ea63 3e84b0b5     ......@.c......>
   5bb5c:	be724908 bdc2ebd1 bf1491da 3d12e9b5     .Ir............=
   5bb6c:	3ea64c5d bba4afcd bd12a0ff 3e0d0b67     ]L.>........g..>
   5bb7c:	bd3d7ac8 bdb6eb55 be16aba3 bc150f1b     .z=.U...........
   5bb8c:	bdb3985d be779816 3d74a576 bd64f95f     ].....w.v.t=_.d.
   5bb9c:	be6ce40d 3dc823a8 3e41497c be09a098     ..l..#.=|IA>....
   5bbac:	bdc87210 bea0574d be603bdd bdea2b18     .r..MW...;`..+..
   5bbbc:	3eba4340 3e2c7ea0 3ccc857a bd1303b0     @C.>.~,>z..<....
   5bbcc:	be0ba3c2 bebd3618 bf06d582 3ddfa137     .....6......7..=
   5bbdc:	be3b9a27 3b71d6c7 bdfef47b be23aa3a     '.;...q;{...:.#.
   5bbec:	bc3fcd60 3d18a139 be96eaa7 bf0d6f0d     `.?.9..=.....o..
   5bbfc:	beb5fd2b bd98c87c beb610bf beeefe98     +...|...........
   5bc0c:	bdfc6efc 3e27458a be87539a be49fdaf     .n...E'>.S....I.
   5bc1c:	be43ea8e be0df9cc bec754d8 3d9f37b9     ..C......T...7.=
   5bc2c:	bdef1144 3e525e5f bd4dd848 3e686ae0     D..._^R>H.M..jh>
   5bc3c:	bd773a2e be5ebbcf bd20842c bca966d7     .:w...^.,. ..f..
   5bc4c:	3e040b42 be3e4a49 be4f5b9b be6d5fd0     B..>IJ>..[O.._m.
   5bc5c:	3cd7659d bef2e0f5 3e111dc9 3db67e80     .e.<.......>.~.=
   5bc6c:	bd5ef907 3eaae42a 3cd00b7b be456441     ..^.*..>{..<AdE.
   5bc7c:	bee87b9c beb58466 3c8f0af5 bebe95b9     .{..f......<....
   5bc8c:	3c09a7df bcc7ccce be0de9f5 be46aea6     ...<..........F.
   5bc9c:	bdb05af5 bdb5d749 3e2569e7 be4099d6     .Z..I....i%>..@.
   5bcac:	3e8f2c26 be1d5611 be254c59 bd1c3e09     &,.>.V..YL%..>..
   5bcbc:	bdc81c81 bd6a36a8 bc1e7846 be11defa     .....6j.Fx......
   5bccc:	bddb4e4c be00d9c1 bd95ed3f bd505ca7     LN......?....\P.
   5bcdc:	be4b522c be59d500 be2947c5 3ca7bb35     ,RK...Y..G).5..<

0005bcec <prelu11_weights>:
   5bcec:	3e1994ba 3e4e6372 3de27b40 3db2d372     ...>rcN>@{.=r..=
   5bcfc:	3ed5b417 3d95f29c 3d067309 bcf4ea1d     ...>...=.s.=....
   5bd0c:	3e4844cb 3ed17d7a bcc7fa0a 3dadf568     .DH>z}.>....h..=
   5bd1c:	3de34860 3e193404 3ea92bcc 3d8e5c2e     `H.=.4.>.+.>.\.=
   5bd2c:	3d54c2ad 3cc34884 3e028485 3e280a60     ..T=.H.<...>`.(>
   5bd3c:	3d6e9351 3e1e41f6 3e154fcb 3d6461b1     Q.n=.A.>.O.>.ad=

0005bd4c <prelu13_weights>:
   5bd4c:	bca59662 3ca551f4 3da5283c 3e66dfdc     b....Q.<<(.=..f>
   5bd5c:	3de81239 3d7bb02a 3df2d6f5 bba3ef89     9..=*.{=...=....
   5bd6c:	bc76a909 3e4ece83 3da6c96d bd0d6617     ..v...N>m..=.f..
   5bd7c:	3dd8a609 3dc8c68a 3d95967e 3d7199e6     ...=...=~..=..q=
   5bd8c:	3e12f908 bc950be6 bdd87c7e 3cc56189     ...>....~|...a.<
   5bd9c:	3dde2abc 3d483be1 3d2463a7 3cc55707     .*.=.;H=.c$=.W.<

0005bdac <prelu15_weights>:
   5bdac:	3ec796a9 3f3c1e5a 3ecf5eca 3eee313c     ...>Z.<?.^.><1.>
   5bdbc:	3f4fe291 3df3a9df 3eca4460 3dfbbfcc     ..O?...=`D.>...=
   5bdcc:	3f4f105f 3eff5e20 3e73aa03 3e8a9c19     _.O? ^.>..s>...>
   5bddc:	3ec39007 3f37fe3c 3e9f35f4 3e8ce971     ...><.7?.5.>q..>
   5bdec:	3ede9ae0 3ef6fd7c 3eba06dc 3f0969ab     ...>|..>...>.i.?
   5bdfc:	3e2dc9f2 be1e7b25 3f290a34 3f1da425     ..->%{..4.)?%..?

0005be0c <prelu19_weights>:
   5be0c:	bcf2a402 3d8c35fd bd389f0e 3e09ad88     .....5.=..8....>
   5be1c:	3dca09a8 3d5f57b7 3e140724 3d94db82     ...=.W_=$..>...=
   5be2c:	3e122acf 3dc966c8 3e1e09c5 3cdc2834     .*.>.f.=...>4(.<
   5be3c:	3df6f4f8 3d816bf6 3e0a5131 3e27feca     ...=.k.=1Q.>..'>
   5be4c:	bd2d27c9 3def5c25 bcc5aa6f 3d8ca5df     .'-.%\.=o......=
   5be5c:	3d9dbcdf bcbd419f 3ce2b2b2 3ebaab6f     ...=.A.....<o..>

0005be6c <prelu1_weights>:
   5be6c:	3ec89cc0 3eda1610 3ea12348 3dff1a15     ...>...>H#.>...=
   5be7c:	3c6445da bc2206c6 3ecf1399 bbe5c66e     .Ed<.."....>n...
   5be8c:	3dd5fd17 3e744cf6 3e2fac40 3e8a8335     ...=.Lt>@./>5..>
   5be9c:	3e9a6b49 3e26bb80 3caad4e5 3ea8e55b     Ik.>..&>...<[..>

0005beac <prelu21_weights>:
   5beac:	3e8a1c9e 3efc7b0a 3e80184c 3f02b00e     ...>.{.>L..>...?
   5bebc:	3f21b5c3 3ed1c3d8 3e23f88b 3f0749d4     ..!?...>..#>.I.?
   5becc:	3ee22e91 3f85d270 3f3104ed 3e9b2785     ...>p..?..1?.'.>
   5bedc:	3f0cf03a 3e66a3e2 3ea462e3 3e13bff6     :..?..f>.b.>...>
   5beec:	3f0093b1 3ec9acff 3f2c15d2 3f03169d     ...?...>..,?...?
   5befc:	3eab6b11 3f2fea95 3daa7ac8 3eb50cf6     .k.>../?.z.=...>

0005bf0c <prelu3_weights>:
   5bf0c:	3dc1fd4b 3e2c4e71 3de085c4 3e8f5f6d     K..=qN,>...=m_.>
   5bf1c:	bd4c2946 3df8074a 3d57e05f 3eb5f25a     F)L.J..=_.W=Z..>
   5bf2c:	3e93dc6a 3e52ef04 3d33416e 3e703ac2     j..>..R>nA3=.:p>
   5bf3c:	3ecee906 3eafe929 3ddf1d6a 3e245c27     ...>)..>j..='\$>
   5bf4c:	3e5baeac 3d286ba4 3e362d62 3d6939a5     ..[>.k(=b-6>.9i=
   5bf5c:	3dd01944 3e9b0b61 3e4d2da8 3e477703     D..=a..>.-M>.wG>

0005bf6c <prelu5_weights>:
   5bf6c:	3dcce069 bc3433a4 3dbc1fcc 3cce0f58     i..=.34....=X..<
   5bf7c:	3dca9f63 3e93bb27 3e18573e 3bd88801     c..='..>>W.>...;
   5bf8c:	3daf57b9 bd5cf4a3 3dce790a 3df4eba6     .W.=..\..y.=...=
   5bf9c:	3e6350d4 3e13100e 3da6c5c1 3e37bf33     .Pc>...>...=3.7>
   5bfac:	3dab3b17 3dc359c2 bc9ee95a 3d49631b     .;.=.Y.=Z....cI=
   5bfbc:	3de7c549 3c991a58 3db4f6ba 3d757491     I..=X..<...=.tu=

0005bfcc <prelu7_weights>:
   5bfcc:	3d587377 3e863735 3e973a50 3daa2491     wsX=57.>P:.>.$.=
   5bfdc:	3eb41180 3e6b0cbc 3edfb4ed 3e1ace71     ...>..k>...>q..>
   5bfec:	3e51f65a 3e73f8b5 3e63192c 3e72fb7f     Z.Q>..s>,.c>..r>
   5bffc:	3d7b2f81 3f1715bb 3e4bb7fc 3e177f65     ./{=...?..K>e..>
   5c00c:	3e31cc9b 3e72622c bc82bf12 3e360194     ..1>,br>......6>
   5c01c:	bbcb834c 3e4a377b 3e85e5c2 3e03fa77     L...{7J>...>w..>

0005c02c <mcu_op_prelu>:
   5c02c:	b538      	push	{r3, r4, r5, lr}
   5c02e:	6804      	ldr	r4, [r0, #0]
   5c030:	4615      	mov	r5, r2
   5c032:	4620      	mov	r0, r4
   5c034:	f000 f864 	bl	5c100 <prelu_forward>
   5c038:	6963      	ldr	r3, [r4, #20]
   5c03a:	602b      	str	r3, [r5, #0]
   5c03c:	2000      	movs	r0, #0
   5c03e:	bd38      	pop	{r3, r4, r5, pc}

0005c040 <mcu_op_conv2d>:
   5c040:	b538      	push	{r3, r4, r5, lr}
   5c042:	6804      	ldr	r4, [r0, #0]
   5c044:	4615      	mov	r5, r2
   5c046:	4620      	mov	r0, r4
   5c048:	f7e7 f8c2 	bl	431d0 <conv_forward>
   5c04c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   5c04e:	602b      	str	r3, [r5, #0]
   5c050:	2000      	movs	r0, #0
   5c052:	bd38      	pop	{r3, r4, r5, pc}

0005c054 <mcu_op_add>:
   5c054:	b538      	push	{r3, r4, r5, lr}
   5c056:	68c3      	ldr	r3, [r0, #12]
   5c058:	6804      	ldr	r4, [r0, #0]
   5c05a:	685b      	ldr	r3, [r3, #4]
   5c05c:	4615      	mov	r5, r2
   5c05e:	e9d3 2000 	ldrd	r2, r0, [r3]
   5c062:	4b05      	ldr	r3, [pc, #20]	; (5c078 <mcu_op_add+0x24>)
   5c064:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   5c068:	4620      	mov	r0, r4
   5c06a:	58d2      	ldr	r2, [r2, r3]
   5c06c:	f7e6 fe1e 	bl	42cac <add_forward>
   5c070:	6923      	ldr	r3, [r4, #16]
   5c072:	602b      	str	r3, [r5, #0]
   5c074:	2000      	movs	r0, #0
   5c076:	bd38      	pop	{r3, r4, r5, pc}
   5c078:	0005c0e4 	.word	0x0005c0e4

0005c07c <mcu_op_cmvn>:
   5c07c:	b538      	push	{r3, r4, r5, lr}
   5c07e:	6804      	ldr	r4, [r0, #0]
   5c080:	4615      	mov	r5, r2
   5c082:	4620      	mov	r0, r4
   5c084:	f7e6 fe2c 	bl	42ce0 <cmvn_forward>
   5c088:	69a3      	ldr	r3, [r4, #24]
   5c08a:	602b      	str	r3, [r5, #0]
   5c08c:	2000      	movs	r0, #0
   5c08e:	bd38      	pop	{r3, r4, r5, pc}

0005c090 <mcu_network_forward>:
   5c090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   5c092:	2400      	movs	r4, #0
   5c094:	4f0b      	ldr	r7, [pc, #44]	; (5c0c4 <mcu_network_forward+0x34>)
   5c096:	9401      	str	r4, [sp, #4]
   5c098:	460e      	mov	r6, r1
   5c09a:	4605      	mov	r5, r0
   5c09c:	4611      	mov	r1, r2
   5c09e:	42ac      	cmp	r4, r5
   5c0a0:	db02      	blt.n	5c0a8 <mcu_network_forward+0x18>
   5c0a2:	9801      	ldr	r0, [sp, #4]
   5c0a4:	b003      	add	sp, #12
   5c0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   5c0a8:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   5c0ac:	6843      	ldr	r3, [r0, #4]
   5c0ae:	aa01      	add	r2, sp, #4
   5c0b0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   5c0b4:	4798      	blx	r3
   5c0b6:	9901      	ldr	r1, [sp, #4]
   5c0b8:	684b      	ldr	r3, [r1, #4]
   5c0ba:	2b00      	cmp	r3, #0
   5c0bc:	d0f1      	beq.n	5c0a2 <mcu_network_forward+0x12>
   5c0be:	3401      	adds	r4, #1
   5c0c0:	e7ed      	b.n	5c09e <mcu_network_forward+0xe>
   5c0c2:	bf00      	nop
   5c0c4:	0005c0c8 	.word	0x0005c0c8

0005c0c8 <mcu_op_forward_list>:
   5c0c8:	00000000 0005c07d 0005c055 0005c041     ....}...U...A...
   5c0d8:	0005c041 0005c02d 0005c02d              A...-...-...

0005c0e4 <mcu_op_otensor_offsetof>:
   5c0e4:	00000000 00000018 00000010 00000040     ............@...
   5c0f4:	00000040 00000014 00000014              @...........

0005c100 <prelu_forward>:
   5c100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   5c104:	680e      	ldr	r6, [r1, #0]
   5c106:	688c      	ldr	r4, [r1, #8]
   5c108:	684d      	ldr	r5, [r1, #4]
   5c10a:	6903      	ldr	r3, [r0, #16]
   5c10c:	6084      	str	r4, [r0, #8]
   5c10e:	68ca      	ldr	r2, [r1, #12]
   5c110:	6006      	str	r6, [r0, #0]
   5c112:	4374      	muls	r4, r6
   5c114:	6045      	str	r5, [r0, #4]
   5c116:	60c2      	str	r2, [r0, #12]
   5c118:	6141      	str	r1, [r0, #20]
   5c11a:	fb05 f004 	mul.w	r0, r5, r4
   5c11e:	bb43      	cbnz	r3, 5c172 <prelu_forward+0x72>
   5c120:	461f      	mov	r7, r3
   5c122:	f04f 0c00 	mov.w	ip, #0
   5c126:	ea22 7ee2 	bic.w	lr, r2, r2, asr #31
   5c12a:	42b8      	cmp	r0, r7
   5c12c:	dd38      	ble.n	5c1a0 <prelu_forward+0xa0>
   5c12e:	009e      	lsls	r6, r3, #2
   5c130:	2500      	movs	r5, #0
   5c132:	e030      	b.n	5c196 <prelu_forward+0x96>
   5c134:	694e      	ldr	r6, [r1, #20]
   5c136:	443e      	add	r6, r7
   5c138:	ed96 7a00 	vldr	s14, [r6]
   5c13c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   5c140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   5c144:	bf42      	ittt	mi
   5c146:	eb03 0884 	addmi.w	r8, r3, r4, lsl #2
   5c14a:	edd8 7a00 	vldrmi	s15, [r8]
   5c14e:	ee67 7a87 	vmulmi.f32	s15, s15, s14
   5c152:	f104 0401 	add.w	r4, r4, #1
   5c156:	bf48      	it	mi
   5c158:	edc6 7a00 	vstrmi	s15, [r6]
   5c15c:	3704      	adds	r7, #4
   5c15e:	42a2      	cmp	r2, r4
   5c160:	dce8      	bgt.n	5c134 <prelu_forward+0x34>
   5c162:	4475      	add	r5, lr
   5c164:	f10c 0c01 	add.w	ip, ip, #1
   5c168:	4560      	cmp	r0, ip
   5c16a:	dd19      	ble.n	5c1a0 <prelu_forward+0xa0>
   5c16c:	00af      	lsls	r7, r5, #2
   5c16e:	2400      	movs	r4, #0
   5c170:	e7f5      	b.n	5c15e <prelu_forward+0x5e>
   5c172:	2500      	movs	r5, #0
   5c174:	46ac      	mov	ip, r5
   5c176:	ea22 7ee2 	bic.w	lr, r2, r2, asr #31
   5c17a:	e7f5      	b.n	5c168 <prelu_forward+0x68>
   5c17c:	694c      	ldr	r4, [r1, #20]
   5c17e:	4434      	add	r4, r6
   5c180:	edd4 7a00 	vldr	s15, [r4]
   5c184:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   5c188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   5c18c:	bf48      	it	mi
   5c18e:	f8c4 c000 	strmi.w	ip, [r4]
   5c192:	3501      	adds	r5, #1
   5c194:	3604      	adds	r6, #4
   5c196:	42aa      	cmp	r2, r5
   5c198:	dcf0      	bgt.n	5c17c <prelu_forward+0x7c>
   5c19a:	4473      	add	r3, lr
   5c19c:	3701      	adds	r7, #1
   5c19e:	e7c4      	b.n	5c12a <prelu_forward+0x2a>
   5c1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0005c1a4 <tensor_new>:
   5c1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   5c1a8:	4605      	mov	r5, r0
   5c1aa:	4688      	mov	r8, r1
   5c1ac:	4617      	mov	r7, r2
   5c1ae:	2018      	movs	r0, #24
   5c1b0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   5c1b4:	461e      	mov	r6, r3
   5c1b6:	f000 f849 	bl	5c24c <safe_malloc>
   5c1ba:	2301      	movs	r3, #1
   5c1bc:	4604      	mov	r4, r0
   5c1be:	6005      	str	r5, [r0, #0]
   5c1c0:	e9c0 8601 	strd	r8, r6, [r0, #4]
   5c1c4:	60c7      	str	r7, [r0, #12]
   5c1c6:	6103      	str	r3, [r0, #16]
   5c1c8:	fb07 f008 	mul.w	r0, r7, r8
   5c1cc:	4370      	muls	r0, r6
   5c1ce:	4368      	muls	r0, r5
   5c1d0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   5c1d4:	0080      	lsls	r0, r0, #2
   5c1d6:	f000 f839 	bl	5c24c <safe_malloc>
   5c1da:	6160      	str	r0, [r4, #20]
   5c1dc:	4620      	mov	r0, r4
   5c1de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0005c1e2 <tensor_new_wo_malloc>:
   5c1e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   5c1e4:	4607      	mov	r7, r0
   5c1e6:	460d      	mov	r5, r1
   5c1e8:	4614      	mov	r4, r2
   5c1ea:	2018      	movs	r0, #24
   5c1ec:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
   5c1f0:	461e      	mov	r6, r3
   5c1f2:	f000 f82b 	bl	5c24c <safe_malloc>
   5c1f6:	2300      	movs	r3, #0
   5c1f8:	6103      	str	r3, [r0, #16]
   5c1fa:	9b06      	ldr	r3, [sp, #24]
   5c1fc:	6007      	str	r7, [r0, #0]
   5c1fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
   5c202:	60c4      	str	r4, [r0, #12]
   5c204:	6143      	str	r3, [r0, #20]
   5c206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0005c208 <tensor_delete>:
   5c208:	b537      	push	{r0, r1, r2, r4, r5, lr}
   5c20a:	460c      	mov	r4, r1
   5c20c:	9001      	str	r0, [sp, #4]
   5c20e:	4615      	mov	r5, r2
   5c210:	b148      	cbz	r0, 5c226 <tensor_delete+0x1e>
   5c212:	6903      	ldr	r3, [r0, #16]
   5c214:	b14b      	cbz	r3, 5c22a <tensor_delete+0x22>
   5c216:	3014      	adds	r0, #20
   5c218:	f000 f830 	bl	5c27c <safe_free>
   5c21c:	462a      	mov	r2, r5
   5c21e:	4621      	mov	r1, r4
   5c220:	a801      	add	r0, sp, #4
   5c222:	f000 f82b 	bl	5c27c <safe_free>
   5c226:	b003      	add	sp, #12
   5c228:	bd30      	pop	{r4, r5, pc}
   5c22a:	6143      	str	r3, [r0, #20]
   5c22c:	e7f6      	b.n	5c21c <tensor_delete+0x14>

0005c22e <tensor_clear>:
   5c22e:	4603      	mov	r3, r0
   5c230:	6940      	ldr	r0, [r0, #20]
   5c232:	b150      	cbz	r0, 5c24a <tensor_clear+0x1c>
   5c234:	689a      	ldr	r2, [r3, #8]
   5c236:	6819      	ldr	r1, [r3, #0]
   5c238:	4351      	muls	r1, r2
   5c23a:	685a      	ldr	r2, [r3, #4]
   5c23c:	4351      	muls	r1, r2
   5c23e:	68da      	ldr	r2, [r3, #12]
   5c240:	434a      	muls	r2, r1
   5c242:	0092      	lsls	r2, r2, #2
   5c244:	2100      	movs	r1, #0
   5c246:	f7ae bc92 	b.w	ab6e <memset>
   5c24a:	4770      	bx	lr

0005c24c <safe_malloc>:
   5c24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   5c24e:	4604      	mov	r4, r0
   5c250:	460e      	mov	r6, r1
   5c252:	4617      	mov	r7, r2
   5c254:	f7a6 f980 	bl	2558 <pvPortMalloc>
   5c258:	4605      	mov	r5, r0
   5c25a:	b938      	cbnz	r0, 5c26c <safe_malloc+0x20>
   5c25c:	463b      	mov	r3, r7
   5c25e:	4632      	mov	r2, r6
   5c260:	4621      	mov	r1, r4
   5c262:	4805      	ldr	r0, [pc, #20]	; (5c278 <safe_malloc+0x2c>)
   5c264:	f7a7 fa0c 	bl	3680 <printf>
   5c268:	4628      	mov	r0, r5
   5c26a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   5c26c:	4622      	mov	r2, r4
   5c26e:	2100      	movs	r1, #0
   5c270:	f7ae fc7d 	bl	ab6e <memset>
   5c274:	e7f8      	b.n	5c268 <safe_malloc+0x1c>
   5c276:	bf00      	nop
   5c278:	0005c28e 	.word	0x0005c28e

0005c27c <safe_free>:
   5c27c:	b510      	push	{r4, lr}
   5c27e:	4604      	mov	r4, r0
   5c280:	6800      	ldr	r0, [r0, #0]
   5c282:	b118      	cbz	r0, 5c28c <safe_free+0x10>
   5c284:	f7a6 fa18 	bl	26b8 <vPortFree>
   5c288:	2300      	movs	r3, #0
   5c28a:	6023      	str	r3, [r4, #0]
   5c28c:	bd10      	pop	{r4, pc}
   5c28e:	5245      	.short	0x5245
   5c290:	3a524f52 	.word	0x3a524f52
   5c294:	66617320 	.word	0x66617320
   5c298:	616d5f65 	.word	0x616d5f65
   5c29c:	636f6c6c 	.word	0x636f6c6c
   5c2a0:	42642520 	.word	0x42642520
   5c2a4:	72747020 	.word	0x72747020
   5c2a8:	4e203d20 	.word	0x4e203d20
   5c2ac:	204c4c55 	.word	0x204c4c55
   5c2b0:	253a7325 	.word	0x253a7325
   5c2b4:	00000a64 	.word	0x00000a64
